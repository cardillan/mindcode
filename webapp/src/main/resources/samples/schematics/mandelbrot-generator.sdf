schematic
    name = "Mandelbrot Generator"
    description = """
        Draws the famous fractal on a large logic display using several hyperprocessors.
        Supports basic navigation (zoom in/out, camera movement), bookmarks, palette selection
        and showing a Julia set corresponding to the center of the displayed Mandelbrot fractal.

        Bookmarks: use buttons on the left of the top row to select a bookmark slot.
        Use buttons beneath the bookmark bar to load the bookmark/save current position to a bookmark.

        Palette: use buttons on the right of the top row.

        Julia set: an on/off switch below the message block showing current coordinates.

        Navigation: buttons below the display.
        """
    tag = "Schematic Builder"
    tag = BLOCK-LARGE-LOGIC-DISPLAY
    tag = BLOCK-HYPER-PROCESSOR

    @liquid-source       at ( 3,  0) liquid @cryofluid
    @pulse-conduit       at ( 3,  1) facing north
    @pulse-conduit       at ( 3,  2) facing north
    @liquid-router       at ( 3,  3)
    @pulse-conduit       at ( 3,  4) facing north
    @pulse-conduit       at ( 3,  5) facing north
    @liquid-router       at ( 3,  6)
    @pulse-conduit       at ( 3,  7) facing north
    @pulse-conduit       at ( 3,  8) facing north
    @liquid-router       at ( 3,  9)
    @pulse-conduit       at ( 3, 10) facing north
    @pulse-conduit       at ( 3, 11) facing north
    @liquid-router       at ( 3, 12)

    @liquid-source       at (10,  0) liquid @cryofluid
    @pulse-conduit       at (10,  1) facing north
    @pulse-conduit       at (10,  2) facing north
    @liquid-router       at (10,  3)
    @pulse-conduit       at (10,  4) facing north
    @pulse-conduit       at (10,  5) facing north
    @liquid-router       at (10,  6)
    @pulse-conduit       at (10,  7) facing north
    @pulse-conduit       at (10,  8) facing north
    @liquid-router       at (10,  9)
    @pulse-conduit       at (10, 10) facing north
    @pulse-conduit       at (10, 11) facing north
    @liquid-router       at (10, 12)

    @liquid-source       at (14,  5) liquid @cryofluid
    @liquid-source       at (15,  3) liquid @cryofluid
    @liquid-source       at (17,  5) liquid @cryofluid
    @liquid-source       at (19,  3) liquid @cryofluid

    @hyper-processor     at ( 0,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at (11, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at (14,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (14,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at (17,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (17,  6) processor links a-* end mindcode = compute end

a-display1:
    @large-logic-display at (14,  9)

a-bank1:
    @memory-bank         at (15,  4)

message1:
    @message             at (10, 14) text "Mandelbrot Mania! v3.0"

message2:
    @message             at ( 0, 15) text "Bookmarks"

message3:
    @message             at (14, 15) text "Palette selection"

    // Movement switches
    b-switch1:  @switch  at (17,  4)    // up
    b-switch2:  @switch  at (16,  3)    // left
    b-switch3:  @switch  at (18,  3)    // right
    b-switch4:  @switch  at (17,  3)    // down
    b-switch5:  @switch  at (14,  4)    // zoom out
    b-switch6:  @switch  at (14,  3)    // zoom in
    b-switch7:  @switch  at (10, 13)    // Julia switch
    b-switch8:  @switch  at ( 3, 14)    // Load
    b-switch9:  @switch  at ( 3, 13)    // Save

    // Bookmark switches
    c-switch40: @switch  at ( 1, 15)
    c-switch41: @switch  at ( 2, 15)
    c-switch42: @switch  at ( 3, 15)
    c-switch43: @switch  at ( 4, 15)
    c-switch44: @switch  at ( 5, 15)
    c-switch45: @switch  at ( 6, 15)
    c-switch46: @switch  at ( 7, 15)
    c-switch47: @switch  at ( 8, 15)
    c-switch48: @switch  at ( 9, 15)
    c-switch49: @switch  at (10, 15)
    c-switch50: @switch  at (11, 15)
    c-switch51: @switch  at (12, 15)
    c-switch52: @switch  at (13, 15)

    // Palette switches
    c-switch54: @switch  at (15, 15)
    c-switch55: @switch  at (16, 15)
    c-switch56: @switch  at (17, 15)
    c-switch57: @switch  at (18, 15)
    c-switch58: @switch  at (19, 15)

    @logic-processor     at (18,  4) processor links * end mindcode = control end
end

// Note: using compiled mlog code to avoid delays while compiling mindcode in the web app

control = """
    const DISPLAY_SIZE = 176;
    const HALF_SIZE = DISPLAY_SIZE / 2;
    const MAX_DEPTH = 63;
    const SKIP = 17;

    const VARIABLES = MAX_DEPTH + 1;
    const BOOKMARKS = VARIABLES + 16;
    const BOOKMARK_COUNT = 13;
    const BOOKMARK_SIZE = 6;
    const SLOTS = BOOKMARKS + BOOKMARK_COUNT * BOOKMARK_SIZE;
    const PROCESSORS = SLOTS + DISPLAY_SIZE;

    allocate heap in memory[VARIABLES ... BOOKMARKS];

    // Amount of pixels to move the center when direction button is clicked
    const SHIFT = 44;

    const RUNNING_TEXT = "Rendering...\n-------------------------\n";
    const FINISHED_TEXT = "Finished.\n-------------------------\n";

    do text1 = ""; loop while bank1 == null;
    do text1 = ""; loop while message1 == null;
    do text1 = ""; loop while message2 == null;
    do text1 = ""; loop while message3 == null;

    memory = bank1;

    print("Initializing...");
    printflush(message1);

    text0 = RUNNING_TEXT;
    text1 = "";
    text2 = "";

    X = -0.8;
    Y = 0;
    ZOOM = 50;
    JULIA = false;
    JULIA_X = 0;
    JULIA_Y = 0;

    i = BOOKMARKS;
    i = bookmark(memory, i, -0.8,           0,           50);
    i = bookmark(memory, i, -0.14375,     1.0,         1600);
    i = bookmark(memory, i, -1.675,       0.0,        25600);
    i = bookmark(memory, i, -1.413547,   -0.03234831,  2500);
    i = bookmark(memory, i,  0.37359375,  0.09015625, 12800);
    i = bookmark(memory, i, -1.408547,   -0.03734831, 10000);
    i = bookmark(memory, i,  0.371875,    0.078125,    3200);
    i = bookmark(memory, i, -1.382347,   -0.02114831,  5000);
    i = bookmark(memory, i,  0.355,       0.66,        3200);
    i = bookmark(memory, i,  0.018125,   -0.818125,    6400);

    i = bookmark_julia(memory, i,  0.0,        0.0,           50,  -0.8,       0.0);
    i = bookmark_julia(memory, i, -0.14375,    1.03125,     3200,  -0.14375,   1.0);
    i = bookmark_julia(memory, i, -1.403547,   -0.02734831, 5000,  -1.408547, -0.03734831);

    while i < SLOTS do
        i = bookmark(memory, i, X, Y, ZOOM);
    end;

    $STATE = 0;
    $STOP = 1;
    $X = X;
    $Y = Y;
    $ZOOM = ZOOM;
    $JULIA = JULIA;
    $JULIA_X = JULIA_X;
    $JULIA_Y = JULIA_Y;
    $PALETTE = PALETTE;

    switch7.enabled = JULIA;

    // Palette creation
    r = 128; g = 192; b = 64;

    for i in 0 ... MAX_DEPTH do
        memory[i] = packcolor(r / 256, g / 256, b / 256, 255);
        r = (r + 147) % 256;
        g = (g +  87) % 256;
        b = (b +  59) % 256;
    end;

    memory[MAX_DEPTH] = packcolor(0, 0, 0, 1);

    bookmark_x = message2.@x;
    bookmark_y = message2.@y;
    bookmark = 1;
    bookmark_clr = -1;
    position = BOOKMARKS + BOOKMARK_SIZE * (bookmark - 1);

    palette_x = message3.@x;
    PALETTE = 1;
    palette_clr = -1;

    // Skip first n blocks that are not on the bookmark/palette bar
    for first_link in 0 ... @links do
        switch = getlink(first_link);
        if switch.@y == bookmark_y then break; end;
    end;

    checking = 999;
    CHANGE = false;
    update_bookmarks = true;

    // Initialization complete
    $STATE = 1;

    while true do
        println("Mandelbrot Mania! v3.0");
        print(text0);
        if JULIA then
            println($"Julia set of Mandelbrot");
            println($"fractal at coordinates");
            println($"   X: $JULIA_X");
            println($"   Y: $JULIA_Y");
        else
            println("Mandelbrot set");
        end;
        println("-------------------------");
        println($"X: $X");
        println($"Y: $Y");
        println($"Zoom: $ZOOM");
        println(text1, text2);
        printflush(message1);

        handle_move(switch1,  0,  1, 1);    // up
        handle_move(switch2, -1,  0, 1);    // left
        handle_move(switch3,  1,  0, 1);    // right
        handle_move(switch4,  0, -1, 1);    // down
        handle_move(switch5,  0,  0, 2);    // zoom in
        handle_move(switch6,  0,  0, 0.5);  // zoom out

        if switch7.@enabled != JULIA then
            CHANGE = true;
            JULIA = switch7.@enabled;
            if JULIA then
                JULIA_X = X;
                JULIA_Y = Y;
            end;
        end;

        if CHANGE then
            text1 = text2 = "";
        end;

        if switch8.@enabled then
            // Load bookmark
            X = memory[position];
            Y = memory[position + 1];
            ZOOM = memory[position + 2];
            JULIA = memory[position + 3];
            JULIA_X = memory[position + 4];
            JULIA_Y = memory[position + 5];
            switch7.enabled = JULIA;
            switch8.enabled = false;
            text1 = "\nLoaded from #";
            text2 = bookmark;
            CHANGE = true;
        end;

        if switch9.@enabled then
            // Store bookmark
            memory[position] = X;
            memory[position + 1] = Y;
            memory[position + 2] = ZOOM;
            memory[position + 3] = JULIA;
            memory[position + 4] = JULIA_X;
            memory[position + 5] = JULIA_Y;
            switch9.enabled = false;
            text1 = "\nSaved to #";
            text2 = bookmark;
            update_bookmarks = true;
        end;

        for n in first_link ... @links do
            switch = getlink(n);
            if switch.@type == @switch and switch.@y == bookmark_y then
                button_x = switch.@x;
                if button_x >= palette_x then
                    index = button_x - palette_x;
                    if index == PALETTE then
                        switch.enabled = true;
                    elsif index == palette_clr then
                        switch.enabled = false;
                        palette_clr = -1;
                    elsif switch.@enabled then
                        palette_clr = PALETTE;
                        PALETTE = index;
                        CHANGE = true;
                    end;
                else
                    index = button_x - bookmark_x;
                    if index == bookmark then
                        switch.enabled = true;
                    elsif index == bookmark_clr then
                        switch.enabled = false;
                        bookmark_clr = -1;
                    elsif switch.@enabled then
                        bookmark_clr = bookmark;
                        bookmark = index;
                        position = BOOKMARKS + BOOKMARK_SIZE * (bookmark - 1);
                        update_bookmarks = true;
                    end;
                end;
            end;
        end;

        if update_bookmarks then
            println($"BOOKMARKS");
            println($"[o] [o] [o] [o] ...");
            println($"      [o] Load");
            println($"      [o] Save");
            println($"-------------------------");
            println($"Selected bookmark #$bookmark:");
            if memory[position + 3] then
                println($"Julia set of Mandelbrot");
                println($"fractal at coordinates");
                println($"   X: $", memory[position + 4]);
                println($"   Y: $", memory[position + 5]);
            else
                println("Mandelbrot set");
            end;
            println("-------------------------");
            println($"X: $", memory[position]);
            println($"Y: $", memory[position + 1]);
            println($"Zoom: $", memory[position + 2]);
            printflush(message2);

            update_bookmarks = false;
        end;

        print("Palette #", PALETTE);
        printflush(message3);

        if memory[checking] == 0 then
            checking -= 2;
            if checking <= PROCESSORS then
                text0 = FINISHED_TEXT;
            end;
        end;

        if CHANGE then
            print("Initializing...");
            printflush(message1);

            // Sent signal to stop all processors
            $STOP += 1;

            // Waiting for all processors to actually stop
            for i = 511; i > PROCESSORS; i -= 2 do
                do
                    // Mindcode doesn't allow empty loop body
                    null;
                loop while memory[i] > 0;
            end;

            CHANGE = false;

            for i in SLOTS ... PROCESSORS do
                memory[i] = 0;
            end;
            color(86, 86, 102, 192);
            rect(0, 0, 176, 176);
            drawflush(display1);
            $X = X;
            $Y = Y;
            $ZOOM = ZOOM;
            $JULIA = JULIA;
            $JULIA_X = JULIA_X;
            $JULIA_Y = JULIA_Y;
            $PALETTE = PALETTE;
            $STATE += 1;

            checking = 999;
            text0 = RUNNING_TEXT;
        end;
    end;

    inline def handle_move(switch, x, y, z)
        if switch.@enabled then
            CHANGE = true;
            if x != 0 then
                X = X + x * SHIFT / ZOOM;
            end;
            if y != 0 then
                Y = Y + y * SHIFT / ZOOM;
            end;
            if z != 1 then
                ZOOM = ZOOM * z;
            end;
            switch.enabled = false;
        end;
    end;

    inline def bookmark(memory, position, x, y, zoom)
        memory[position] = x;       position = position + 1;
        memory[position] = y;       position = position + 1;
        memory[position] = zoom;    position = position + 1;
        memory[position] = false;   position = position + 1;
        position += 2;
    end;

    inline def bookmark_julia(memory, position, x, y, zoom, julia_x, julia_y)
        memory[position] = x;       position = position + 1;
        memory[position] = y;       position = position + 1;
        memory[position] = zoom;    position = position + 1;
        memory[position] = true;    position = position + 1;
        memory[position] = julia_x; position = position + 1;
        memory[position] = julia_y; position = position + 1;
    end;
    """

compute = """
    const DISPLAY_SIZE = 176;
    const HALF_SIZE = DISPLAY_SIZE / 2;
    const MAX_DEPTH = 63;
    const SKIP = 17;

    const VARIABLES = MAX_DEPTH + 1;
    const BOOKMARKS = VARIABLES + 16;
    const BOOKMARK_COUNT = 13;
    const BOOKMARK_SIZE = 6;
    const SLOTS = BOOKMARKS + BOOKMARK_COUNT * BOOKMARK_SIZE;
    const PROCESSORS = SLOTS + DISPLAY_SIZE;

    allocate heap in memory[VARIABLES ... BOOKMARKS];

    const ONE_TO_LOG = 1 / log(2);
    const QUARTER_TO_LOG = 0.25 / log(2);

    display = null;
    memory = null;

    while display == null || memory == null do
        for n in 0 ... @links do
            block = getlink(n);
            case block.@type
                when @large-logic-display   then display = block;
                when @memory-bank           then memory = block;
            end;
        end;
    end;

    control = 0;

    ID = @this.@x + 10000 * @this.@y;

    PROC_ID = PROCESSORS;
    PROC_STATE = PROCESSORS + 1;

    while true do
        // Waiting for state to change
        while control == $STATE do
            storeState(memory, 0);
        end;

        control = $STATE;
        stop = $STOP;
        X = $X;
        Y = $Y;
        ZOOM = $ZOOM;
        JULIA = $JULIA;
        JULIA_X = $JULIA_X;
        JULIA_Y = $JULIA_Y;
        PALETTE = $PALETTE;

        SMOOTH = PALETTE > 1;

        storeState(memory, control);

        OFFSET_X = -HALF_SIZE / ZOOM + X;
        OFFSET_Y = -HALF_SIZE / ZOOM + Y;

        line = 8;
        increment = 8;
        next_increment = 16;
        wait(rand(0.1));

    MasterLoop:
        for lines in 0 ... DISPLAY_SIZE do
            // Find a line
            x = (SKIP * line) % DISPLAY_SIZE;
            position = x + SLOTS;

            if memory[position] == 0 then
                memory[position] = ID;

                for y in 0 ... DISPLAY_SIZE do
                    iterations = compute(x, y);
                    if SMOOTH then
                        if iterations == MAX_DEPTH then
                            color(0, 0, 0, 255);
                        else
                            case PALETTE
                                when 2 then
                                    r = 255 - 7 * abs(32 - iterations);
                                    g = 240 - 6 * abs(iterations - 32);
                                    b = 120 + 4 * abs(32 - iterations);
                                    color(r, g, b, 255);

                                when 3 then
                                    r = 255 * sin(iterations / MAX_DEPTH * 360);
                                    g = 255 * cos(iterations / MAX_DEPTH * 360);
                                    b = 100 + 4 * abs(iterations - 32);
                                    color(r, g, b, 255);

                                when 4 then
                                    r = 4 * iterations;
                                    g = 96 + 1.5 * iterations;
                                    color(r, g, 0, 255);

                                else
                                    r = 255 - 4 * iterations;
                                    color(r, r, 0, 255);
                            end;
                        end;
                    else
                        clr = memory[iterations];
                        col(clr);
                    end;
                    rect(x, y, 1, 1);
                    drawflush(display);

                    if memory[position] != ID then
                        break;   // Another processor took over this line
                    end;

                    if stop != $STOP then
                        break MasterLoop;        // Break is signalled
                    end;
                end;
            end;

            line = line + increment;
            if line > DISPLAY_SIZE then
                next_increment /= 2;
                increment = next_increment;
                line = increment / 2;
            end;
        end;
    end;

    def compute(x, y)
        zx = x / ZOOM + OFFSET_X;
        zy = y / ZOOM + OFFSET_Y;

        if JULIA then
            cx = JULIA_X;
            cy = JULIA_Y;
        else
            cx = x / ZOOM + OFFSET_X;
            cy = y / ZOOM + OFFSET_Y;

            // Cardioid test
            p = len(cx - 0.25, cy);
            if cx <= p - 2 * p * p + 0.25 then
                return MAX_DEPTH;
            end;

            // Bulb test
            if len(cx + 1, cy) <= 0.25 then
                return MAX_DEPTH;
            end;
        end;

        for i in 0 ... MAX_DEPTH do
            x1 = zx;
            y1 = zy;
            zx = x1 * x1 - y1 * y1 + cx;
            zy = 2 * x1 * y1 + cy;
            dist = len(zx, zy);
            if dist >= 64 then
                break;
            end;
        end;

        if i < SMOOTH * MAX_DEPTH then
            correction = 4 - log(log(dist) * QUARTER_TO_LOG) * ONE_TO_LOG;
            i += correction;
        end;

        return i;
    end;

    def storeState(memory, state)
        while PROC_STATE < 512 do
            if memory[PROC_ID] == ID then
                memory[PROC_STATE] = state;
                break;
            elsif memory[PROC_ID] == 0 then
                memory[PROC_ID] = ID;
                memory[PROC_STATE] = state;
                break;
            else
                PROC_ID += 2;
                PROC_STATE += 2;
            end;
        end;
    end;
    """