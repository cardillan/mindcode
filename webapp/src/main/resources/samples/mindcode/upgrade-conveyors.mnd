// Setting to use non-standard function mapping as described here:
// github.com/cardillan/mindcode/blob/main/doc/syntax/SYNTAX-4-FUNCTIONS.markdown#mindustry-logic-functions
#set target = ML7A;

// These parameters can be changed in the compiled code
/// Configurable options:
param MEMORY = cell1;
param UNIT = @poly;

// Coordinates of the map area to process
// By default an entire map is converted
param SW_X = 0;
param SW_Y = 0;
param NE_X = @mapw;
param NE_Y = @maph;

// Setting to true restores copper conveyors (useful for testing)
param DOWNGRADE = false;

// Upgrading in stripes of given width -- faster processing
// (Could be even wider, the build radius is ~20 blocks or so)
param WIDTH = 10;

// How close unit needs to get to the block being upgraded
param RADIUS = 10;

/// Don't modify anything below this line.

// Count the total number of upgraded blocks
TOTAL = 0;

allocate heap in MEMORY[0 ... 16];

// If a memory cell is attached, the progress can be stored there
// After resetting the processor, e.g. by modifying the unit type,
// we'll be able to pick up where we were stopped.
if $INITIALIZED then
    x = limit($X, SW_X, NE_X);
    y = limit($Y, SW_Y, NE_Y);
    dx = $DX == 1 ? 1 : -1;
    dy = $DY > 0 ? WIDTH : -WIDTH;
    TOTAL = $TOTAL;
else
    $INITIALIZED = true;
    x = $X = SW_X;
    y = $Y = SW_Y;
    dx = 1;
    dy = WIDTH;
end;

oldType = DOWNGRADE ? @titanium-conveyor : @conveyor;
newType = DOWNGRADE ? @conveyor : @titanium-conveyor;

// It is possible to pause/stop the processing by attaching a switch and activating it
// When the switch is active, the program renitializes and without attached memory,
// the progress is lost.
while !switch1.enabled do

    // If we don't have an active unit, summon a new one
    if @unit.dead !== 0 or @unit.controller != @this then
        findUnit();
    end;

    // Position the unit to the middle of the band inside the building area
    ypos = limit(y + WIDTH \ 2, SW_Y, NE_Y);
    while not within(x, ypos, RADIUS) do
        move(x, ypos);
    end;

    // Upgrade all blocks in the band
    for yrep in y .. min(NE_Y, y + WIDTH - 1) do
        replace(x, yrep, oldType, newType);
    end;
    $TOTAL = TOTAL;

    println($"Position: $x, $ypos");
    println($"Upgrades: $TOTAL");
    printflush(message1);

    // Move to next position
    x += dx;
    if x > NE_X or x < SW_X then
        // Reached end, reverse the direction and move to the next strip
        dx = -dx;
        y += dy;
        x = limit(x, SW_X, NE_X);
        $DX = dx;

        if y > NE_Y or y < SW_Y then
            dy = -dy;
            y = limit(y, SW_Y, NE_Y);
            $DY = dy;
        end;
        $Y = y;
    end;

    $X = x;
end;

// A separate function which will find an unused unit we can use
def findUnit()
    // Keep looking for unit until one is found
    while true do
        ubind(UNIT);
        if @unit == null then
            // There's no unit of the requested type
            print($"No unit of type $UNIT found.");
        elsif @unit.controlled != 0 then
            // This unit is controlled by another processor or the player
            print($"Looking for a free $UNIT...");
        else
            // This unit is free.
            // Some processors assume that a unit without a flag is free
            // Mark it so that they won't steal it from us
            flag(rand(1000));
            break;
        end;
        printflush(message1);
    end;
end;

// Returns value of n limited to range min .. max
def limit(n, min, max)
    min(max(n, min), max);
end;

// If a block of type oldType is found at position,
// replaces it with newType
def replace(x, y, oldType, newType)
    building = getBlock(x, y, type);

    if type == oldType then
        build(x, y, newType, building.rotation, 0);
        // If the processor is too fast, we need to wait
        // for the unit to finish building the block
        do
            getBlock(x, y, type);
        loop while type != newType;
        TOTAL += 1;
    end;
end;
