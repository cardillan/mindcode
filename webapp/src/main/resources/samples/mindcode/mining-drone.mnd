// Units is a system library providing functions for easy acquisition of units
require units;

// These assignments will be compiled into the output code as-is.
// It is possible to change them in the compiled code.

/// Configurable options:
param CONTAINER = vault1;
param PATCH_X = 16;
param PATCH_Y = 17;
param MESSAGES = message1;

// Find a unit if we don't have one
if @unit.@dead != 0 or @unit.@controller != @this then
    // Some Mindustry code on the internet relies on nonzero flag
    // marking used units. Assign non-zero flag to protect our unit
    // from such code run by other processors.
    waitForFreeUnit(MESSAGES, @poly, rand(1000));
end;

// Throw away anything the unit might have been carrying
itemDrop(@air, @unit.@totalItems);

// Mine until the unit is lost or killed
// Then the program restarts, acquiring another unit
while @unit.@controller == @this and @unit.@dead == 0 do
    if @unit.@totalItems < @unit.@itemCapacity then
        println("State: mining");
        approach(PATCH_X, PATCH_Y, 3);
        mine(PATCH_X, PATCH_Y);
    else
        println("State: dropping");
        approach(CONTAINER.@x, CONTAINER.@y, 3);
        itemDrop(CONTAINER, @unit.@totalItems);
    end;

    println("Unit capacity: ", @unit.@itemCapacity);
    println("Total items: ", @unit.@totalItems);
    println("First item: ", @unit.@firstItem);
    printflush(message1);
end;
