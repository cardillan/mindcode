// These assignments will be compiled into the output code as-is.
// It is possible to change them in the compiled code.
param CONTAINER = vault1;
param PATCH_X = 16;
param PATCH_Y = 17;

// Find a live unit (@unit.dead === 0) that is not controlled
// by a player or processor (@unit.controlled == 0)
do
    print("Searching available unit...");
    printflush(message1);
    ubind(@poly);
loop while (@unit.dead !== 0) or (@unit.controlled != 0);

// Some Mindustry code on the internet relies on nonzero flag
// marking used units. Assign non-zero flag to protect our unit
// from such code run by other processors.
flag(rand(1000));

// Mine until the unit is lost or killed
// Then the program restarts, acquiring another unit
while (@unit.controller == @this) and (@unit.dead === 0) do
    if @unit.totalItems < @unit.itemCapacity then
        println("State: mining");
        approach(PATCH_X, PATCH_Y, 3);
        mine(PATCH_X, PATCH_Y);
    else
        println("State: dropping");
        approach(CONTAINER.x, CONTAINER.y, 3);
        itemDrop(CONTAINER, @unit.totalItems);
    end;

    println("Unit capacity: ", @unit.itemCapacity);
    println("Total items: ", @unit.totalItems);
    println("First item: ", @unit.firstItem);
    printflush(message1);
end;
