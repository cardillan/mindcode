# Testing framework

## Unit testing support

Mindcode currently provides a limited support for [unit testing](https://en.wikipedia.org/wiki/Unit_testing), in the language itself and in the processor emulator. Unit testing won't run in Mindustry Logic processors.

The Mindcode compiler supports two functions which generate _assertions_. Assertions are evaluated at runtime by the processor emulator, and the result of the evaluation is reported. Failed assertions are reported as errors.

* `void assertEquals(expected, actual, message)`: the function creates an assertion which compares the `expected` and `actual` values. The two values can be any expressions, and the assertion fails if the two values do not match exactly (using **strict** comparison, not the Mindustry Logic one where `1e-10` is equal to `0`.)

* `void assertPrints(expected, textGenerator, message)`: the function creates an assertion which compares the `expected` value to the contents of the text buffer. The assertion fails when the `expected` value isn't exactly identical to the contents of the print buffer generated by the `textGenerator` expression or function call. The return value of the `textGenerator` expression is ignored and may even be `void`.

Unit tests testing the `math` and `printing` libraries look like this:

```
#set target = ML8A;
require math;
require printing;

assertEquals(5, distance(1,1,4,5), "distance(1,1,4,5)");
assertEquals(1, sum(1), "sum(1)");
assertEquals(5, median(2,6,4,8), "median(2,6,4,8)");

assertPrints("1,234,567", printNumber(1234567), "printNumber(1234567)");
assertPrints("0", printExactFast(0), "printExactFast(0)");
assertPrints("1.012345678900000", printExactSlow(1.0123456789), "printExactSlow(1.0123456789)");
```

The special instructions generated by the `assertEquals` and `assertPrints` functions are present in the generated mlog code. The assertions are automatically evaluated when running the code on the emulated processor. It's not recommended to use a program containing these special instructions in an actual Mindustry Logic processor, as these instructions will be invalid there.

To create a basic unit test, a separate source file containing just the assertions should be created. This file would use the `require` directive to include the file being tested. The tested files should contain only functions, as any code present in the tested file would be executed before the unit tests, which isn't desirable.

---

[« Previous: Mlog Decompiler](TOOLS-MLOG-DECOMPILER.markdown) &nbsp; | &nbsp; [Up: Contents](SYNTAX.markdown) &nbsp; | &nbsp; [Next: Troubleshooting Mindcode »](TROUBLESHOOTING.markdown)
