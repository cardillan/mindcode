param TICKS = 60;
SOURCE_MEMORY = null;
TARGET_MEMORY = null;
MESSAGE = SWITCH = null;

while SOURCE_MEMORY == null do
    print("Item Rate Meter");
    n = @links;
    while n > 0 do
        n = n - 1;
        block = getlink(n);
        print("\nFound: ", block);
        case block.@type
            when @message then
                MESSAGE = block;
            when @switch then
                SWITCH = block;
            when @memory-bank, @memory-cell then
                TARGET_MEMORY = SOURCE_MEMORY;
                SOURCE_MEMORY = block;
        end;
    end;

    print("\nMessage: ", MESSAGE);
    print("\nSwitch: ", SWITCH);
    print("\nSource memory: ", SOURCE_MEMORY);
    print("\nTarget memory: ", TARGET_MEMORY);
    if SOURCE_MEMORY == null then
        print("\nNo memory.");
    end;
    printflush(MESSAGE);
end;

if TARGET_MEMORY == null then
    TARGET_MEMORY = SOURCE_MEMORY;
end;

startIndex = 0;
memSize = case TARGET_MEMORY.@type
    when @memory-cell then 64;
    when @memory-bank  then 512;
    else 0;
end;

if SOURCE_MEMORY == TARGET_MEMORY then
    startIndex = memSize \ 2;
    memSize -= 1;
end;

prevTick = @tick;
prev = SOURCE_MEMORY[0];
currTick = prevTick;
curr = prev;
index = max(startIndex, TARGET_MEMORY[startIndex]);
nextTick = prevTick;

while switch1.@enabled == 0 do
    nextTick = nextTick + TICKS;

    if @tick > nextTick + TICKS then
        // @tick has jumped too far to the future, reset it
        prevTick = @tick;
        nextTick = prevTick + TICKS;
        currTick = prevTick;
    end;

    while @tick < nextTick do
        if @tick < prevTick then
            end();
        else
            value = SOURCE_MEMORY[0];
            if value != curr then
                currTick = @tick;
                curr = value;
            end;
        end;
    end;

    amount = curr - prev;
    time = currTick - prevTick;
    if amount == 0 then
        rate = 0;
    else
        rate = max(amount / time, 0);    // Items per tick
    end;

    index += 1;
    if index >= memSize then
        index = startIndex + 1;
    end;
    TARGET_MEMORY[startIndex] = index;
    TARGET_MEMORY[index] = rate;

    println("Item Rate Meter");
    print($"Total items: [gold]$curr[]\n");
    print($"Current rate [green]$[]/min\n", floor(rate * 3600));
    print($"  memory start: [gold]$startIndex[]\n");
    print($"  memory index: [gold]$index[]\n");
    print($"[lightgray]Loop time: $ ms", floor(time));
    printflush(message1);

    prevTick = currTick;
    prev = curr;
end;

switch1.enabled = 0;
