const SLANTED = false;

CONTAINER = null;
MEMORY = null;
MESSAGE = null;
DISPLAY = null;
do
    println("Configuring storage display...");
    LINKS = @links;
    n = LINKS;
    while n > 0 do
        n = n - 1;
        block = getlink(n);
        println("Found: ", block);
        case block.type
            when @message then
                MESSAGE = block;
            when @memory-bank, @memory-cell then
                MEMORY = block;
            when @vault, @container, @core-shard, @core-foundation, @core-nucleus then
                CONTAINER = block;
            when @large-logic-display then
                DISPLAY = block;
        end;
    end;

    println("Message: ", MESSAGE);
    println("Memory: ", MEMORY);
    println("Container: ", CONTAINER);
    println("Display: ", DISPLAY);
    if CONTAINER == null or DISPLAY == null then
        println("No container or display.");
    end;
    printflush(MESSAGE);
loop while CONTAINER == null;


// Sizing
const HEIGHT    = 12;
const HALF      = HEIGHT \ 2 + (SLANTED ? 1 : 0);
const WIDTH     = 7;
const GAP_X     = 4;
const SPACE_X   = WIDTH + GAP_X;
const SPACE_Y   = 20;
const IMAGE     = 16;
const COLUMN    = IMAGE + 6 * SPACE_X + GAP_X;
const OFFSET    = IMAGE + GAP_X + 4 * SPACE_X;

// Initial position
const TOP       = 176 - SPACE_Y - 4;
const BOTTOM    = TOP - 8 * SPACE_Y;
const LEFT1     = 7;
const LEFT2     = LEFT1 + COLUMN;
const STROKE    = 2;

while CONTAINER.dead == 0 and DISPLAY.dead == 0 and LINKS == @links do
    start = @time;
    CAPACITY = CONTAINER.itemCapacity;
    LIMIT = CAPACITY / 5;
    stroke(STROKE);

    x = LEFT1;
    y = TOP;
    eraseImages(true);
    eraseImages(false);
    color(255,255,255,255);
    index = 0;

    for item in @sand, @copper, @lead, @coal, @titanium, @thorium, @scrap, @graphite, @metaglass, @silicon,
              @pyratite, @blast-compound, @plastanium, @phase-fabric, @surge-alloy, @spore-pod do
        image(x + IMAGE \ 2, y + IMAGE \ 2 - STROKE + 1, item, IMAGE, 0);
        index += 1;
        y -= SPACE_Y;
        if index == 8 then
            y = TOP;
            x = LEFT2;
            color(255,255,255,255);
        end;
    end;
    drawflush(display1);

    x = LEFT1 + OFFSET;
    y = TOP;
    eraseNumbers(true);
    index = 0;

    for item in @sand, @copper, @lead, @coal, @titanium, @thorium, @scrap, @graphite, @metaglass, @silicon,
              @pyratite, @blast-compound, @plastanium, @phase-fabric, @surge-alloy, @spore-pod do
        displayItem(index, item, x, y);
        index += 1;
        y -= SPACE_Y;
        if index == 8 then
            if not SLANTED then
                drawflush(display1);
            end;
            y = TOP;
            x = LEFT2 + OFFSET;
            eraseNumbers(false);
        end;
    end;

    drawflush(display1);

    elapsed = floor(@time - start);
    print($"Storage Display\nElapsed: $elapsed ms");
    printflush(message1);
end;

inline def eraseImages(first_column)
    color(0, 0, 80, 255);
    if first_column then
        rect(0, 0, LEFT1 + IMAGE, 176);
    else
        rect(LEFT2, 0, IMAGE, 176);
    end;
end;

inline def eraseNumbers(first_column)
    color(0, 0, 80, 255);
    if first_column then
        rect(LEFT1 + IMAGE, 0, COLUMN - IMAGE, 176);
    else
        rect(LEFT2 + IMAGE, 0, 176, 176);
    end;
end;

inline def displayItem(index, item, x, y)
    amount = CONTAINER.sensor(item);

    if MEMORY === null then
        if amount == CAPACITY then
            color(0,255,0,255);
        elsif amount > LIMIT then
            color(255,255,0,255);
        else
            color(255,80,80,255);
        end;
    else
        last = MEMORY[index];
        MEMORY[index] = amount;
        if amount == last then
            color(255,255,0,255);
        elsif amount < last then
            color(255,80,80,255);
        else
            color(0,255,0,255);
        end;
    end;

    for i in 0 ... 5 do
        if SLANTED then
            drawDigitSlanted(x, y, amount % 10);
        else
            drawDigit(x, y, amount % 10);
        end;
        x -= SPACE_X;
        amount \= 10;
        if amount == 0 then break; end;
    end;
end;

inline def drawDigit(x, y, digit)
    case digit
        when 0 then
            lineRect(x - STROKE + 1, y - STROKE + 1, WIDTH + STROKE, HEIGHT + STROKE);
        when 1 then
            line(x + WIDTH - 1, y, x + WIDTH - 1, y + HEIGHT);
        when 2 then
            line(x, y, x + WIDTH, y);
            line(x, y, x, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x + WIDTH, y + HALF, x + WIDTH, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 3 then
            line(x + WIDTH, y, x + WIDTH, y + HEIGHT);
            line(x, y, x + WIDTH, y);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 4 then
            line(x + WIDTH, y, x + WIDTH, y + HEIGHT);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x, y + HEIGHT);
        when 5 then
            line(x, y, x + WIDTH, y);
            line(x + WIDTH, y, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 6 then
            line(x, y, x, y + HEIGHT);
            line(x, y, x + WIDTH, y);
            line(x + WIDTH, y, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 7 then
            line(x + WIDTH - 1, y, x + WIDTH - 1, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH - 1, y + HEIGHT);
        when 8 then
            lineRect(x - STROKE + 1, y - STROKE + 1, WIDTH + STROKE, HEIGHT + STROKE);
            line(x, y + HALF, x + WIDTH, y + HALF);
        when 9 then
            line(x, y, x + WIDTH, y);
            line(x + WIDTH, y, x + WIDTH, y + HEIGHT);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
    end;
end;

inline def drawDigitSlanted(x, y, digit)
    case digit
        when 0 then
            lineRect(x - STROKE + 1, y - STROKE + 1, WIDTH + STROKE, HEIGHT + STROKE);
        when 1 then
            line(x + WIDTH - 1, y, x + WIDTH - 1, y + HEIGHT);
        when 2 then
            line(x, y, x + WIDTH, y);
            line(x, y, x + WIDTH, y + HALF);
            line(x + WIDTH, y + HALF, x + WIDTH, y + HEIGHT);
            line(x + 2, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 3 then
            line(x, y, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 4 then
            line(x + WIDTH, y, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HEIGHT);
        when 5 then
            line(x, y, x + WIDTH, y + HALF);
            line(x, y + HALF, x + WIDTH, y + HALF);
            line(x, y + HALF, x, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 6 then
            lineRect(x - STROKE + 1, y - STROKE + 1, WIDTH + STROKE, HALF + STROKE);
            line(x, y + HALF, x + WIDTH, y + HEIGHT);
        when 7 then
            line(x, y, x + WIDTH, y + HEIGHT);
            line(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        when 8 then
            lineRect(x - STROKE + 1, y - STROKE + 1, WIDTH + STROKE, HEIGHT + STROKE);
            line(x, y + HALF, x + WIDTH, y + HALF);
        when 9 then
            lineRect(x - STROKE + 1, y + HALF - STROKE + 1, WIDTH + STROKE, HEIGHT - HALF + STROKE);
            line(x, y, x + WIDTH, y + HALF);
    end;
end;
