    40 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Jump Optimization (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions eliminated by Data Flow Optimization (2 passes, 6 iterations).
     3 instructions modified by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
    30 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    19 jump __label6 equal __tmp6 false
    20 set min curr
    21 set min_index j
-    * set __tmp7 min_index
    22 jump __label7 always
    23 label __label6
-    * set __tmp7 null
    24 label __label7
    25 label __label4
    26 op add j j 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
     0 set SIZE 128
     1 set ARRAY bank2
     2 set FINAL bank3
-    * op sub __tmp0 SIZE 1
-    * set __tmp1 __tmp0
+    3 op sub __tmp1 SIZE 1
     4 set i 0
     5 label __label0
     6 jump __label2 greaterThanEq i __tmp1
-    * read __tmp2 ARRAY i
-    * set min __tmp2
+    7 read min ARRAY i
     8 set min_index i
     9 op add __tmp3 i 1
    10 set __tmp4 SIZE
    11 set j __tmp3
    12 label __label3
    13 jump __label5 greaterThanEq j __tmp4
-    * read __tmp5 ARRAY j
-    * set curr __tmp5
+   14 read curr ARRAY j
    15 op lessThan __tmp6 curr min
    16 jump __label6 equal __tmp6 false
    17 set min curr

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    12 label __label3
    13 jump __label5 greaterThanEq j __tmp4
    14 read curr ARRAY j
-    * op lessThan __tmp6 curr min
-    * jump __label6 equal __tmp6 false
+   15 jump __label6 greaterThanEq curr min
    16 set min curr
    17 set min_index j
    18 jump __label7 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    15 jump __label6 greaterThanEq curr min
    16 set min curr
    17 set min_index j
-    * jump __label7 always
    18 label __label6
    19 label __label7
    20 label __label4

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    10 set __tmp4 SIZE
    11 set j __tmp3
    12 label __label3
-    * jump __label5 greaterThanEq j __tmp4
+   13 jump __label5 greaterThanEq j SIZE
    14 read curr ARRAY j
    15 jump __label6 greaterThanEq curr min
    16 set min curr
 
    31 set __tmp9 SIZE
    32 set i 0
    33 label __label8
-    * jump __label10 greaterThanEq i __tmp9
+   34 jump __label10 greaterThanEq i SIZE
    35 read __tmp10 FINAL i
    36 read __tmp11 ARRAY i
    37 assertequals __tmp10 __tmp11 "unexpected value"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     7 read min ARRAY i
     8 set min_index i
     9 op add __tmp3 i 1
-    * set __tmp4 SIZE
    10 set j __tmp3
    11 label __label3
    12 jump __label5 greaterThanEq j SIZE
 
    27 op add i i 1
    28 jump __label0 always
    29 label __label2
-    * set __tmp9 SIZE
    30 set i 0
    31 label __label8
    32 jump __label10 greaterThanEq i SIZE

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     4 set i 0
     5 label __label0
     6 jump __label2 greaterThanEq i __tmp1
+    7 label __label11
     8 read min ARRAY i
     9 set min_index i
    10 op add __tmp3 i 1
    11 set j __tmp3
    12 label __label3
    13 jump __label5 greaterThanEq j SIZE
+   14 label __label12
    15 read curr ARRAY j
    16 jump __label6 greaterThanEq curr min
    17 set min curr
 
    20 label __label7
    21 label __label4
    22 op add j j 1
-    * jump __label3 always
+   23 jump __label12 lessThan j SIZE
    24 label __label5
    25 read __tmp8 ARRAY i
    26 write __tmp8 ARRAY min_index
    27 write min ARRAY i
    28 label __label1
    29 op add i i 1
-    * jump __label0 always
+   30 jump __label11 lessThan i __tmp1
    31 label __label2
    32 set i 0
    33 label __label8
    34 jump __label10 greaterThanEq i SIZE
+   35 label __label13
    36 read __tmp10 FINAL i
    37 read __tmp11 ARRAY i
    38 assertequals __tmp10 __tmp11 "unexpected value"
    39 label __label9
    40 op add i i 1
-    * jump __label8 always
+   41 jump __label13 lessThan i SIZE
    42 label __label10
    43 stop
    44 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     3 op sub __tmp1 SIZE 1
     4 set i 0
     5 label __label0
-    * jump __label2 greaterThanEq i __tmp1
+    6 jump __label2 greaterThanEq 0 __tmp1
     7 label __label11
     8 read min ARRAY i
     9 set min_index i
    10 op add __tmp3 i 1
    11 set j __tmp3
    12 label __label3
-    * jump __label5 greaterThanEq j SIZE
+   13 jump __label5 greaterThanEq __tmp3 SIZE
    14 label __label12
    15 read curr ARRAY j
    16 jump __label6 greaterThanEq curr min
 
    31 label __label2
    32 set i 0
    33 label __label8
-    * jump __label10 greaterThanEq i SIZE
+   34 jump __label10 greaterThanEq 0 SIZE
    35 label __label13
    36 read __tmp10 FINAL i
    37 read __tmp11 ARRAY i

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
    41 jump __label13 lessThan i SIZE
    42 label __label10
    43 stop
-    * end

Final code before resolving virtual instructions:

set SIZE 128
set ARRAY bank2
set FINAL bank3
op sub __tmp1 SIZE 1
set i 0
jump __label2 greaterThanEq 0 __tmp1
label __label11
read min ARRAY i
set min_index i
op add __tmp3 i 1
set j __tmp3
jump __label5 greaterThanEq __tmp3 SIZE
label __label12
read curr ARRAY j
jump __label6 greaterThanEq curr min
set min curr
set min_index j
label __label6
op add j j 1
jump __label12 lessThan j SIZE
label __label5
read __tmp8 ARRAY i
write __tmp8 ARRAY min_index
write min ARRAY i
op add i i 1
jump __label11 lessThan i __tmp1
label __label2
set i 0
jump __label10 greaterThanEq 0 SIZE
label __label13
read __tmp10 FINAL i
read __tmp11 ARRAY i
assertequals __tmp10 __tmp11 "unexpected value"
op add i i 1
jump __label13 lessThan i SIZE
label __label10
stop
