   178 instructions before optimizations.
    18 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Case Expression Optimization.
    20 instructions eliminated by Dead Code Elimination (4 iterations).
    12 instructions eliminated by Jump Optimization (3 iterations).
     8 instructions eliminated by Single Step Elimination (2 passes, 5 iterations).
     1 instructions eliminated by Expression Optimization (2 iterations).
     1 instructions eliminated by If Expression Optimization (2 iterations).
     3 instructions modified by Data Flow Optimization (4 iterations).
     4 instructions modified by Loop Optimization (2 iterations).
     4 loops improved by Loop Optimization.
     5 instructions eliminated by Jump Straightening (3 iterations).
     1 instructions eliminated by Unreachable Code Elimination.
     5 instructions eliminated by Print Merging.
   105 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 889):
  * Loop Optimization: replicate condition at line 57            cost     1, benefit       25.0, efficiency       25.0 (+1 instructions)

Final code before resolving virtual instructions:

set TICKS 60
set SOURCE_MEMORY null
set TARGET_MEMORY null
set SWITCH null
set MESSAGE null
label __label40
print "Item Rate Meter"
set n @links
jump __label5 lessThanEq n 0
label __label41
op sub n n 1
getlink block n
print "\nFound: "
print block
sensor __tmp5 block @type
jump __label7 notEqual __tmp5 @message
set MESSAGE block
jump __label6 always 0 0
label __label7
jump __label9 notEqual __tmp5 @switch
set SWITCH block
jump __label6 always 0 0
label __label9
jump __label12 equal __tmp5 @memory-bank
jump __label11 notEqual __tmp5 @memory-cell
label __label12
set TARGET_MEMORY SOURCE_MEMORY
set SOURCE_MEMORY block
label __label11
label __label6
jump __label41 greaterThan n 0
label __label5
print "\nMessage: "
print MESSAGE
print "\nSwitch: "
print SWITCH
print "\nSource memory: "
print SOURCE_MEMORY
print "\nTarget memory: "
print TARGET_MEMORY
jump __label13 notEqual SOURCE_MEMORY null
print "\nNo memory."
label __label13
printflush MESSAGE
jump __label40 equal SOURCE_MEMORY null
jump __label15 notEqual TARGET_MEMORY null
set TARGET_MEMORY SOURCE_MEMORY
label __label15
set startIndex 0
sensor __tmp11 TARGET_MEMORY @type
jump __label18 notEqual __tmp11 @memory-cell
set __tmp12 64
jump __label17 always 0 0
label __label18
jump __label20 notEqual __tmp11 @memory-bank
set __tmp12 512
jump __label17 always 0 0
label __label20
set __tmp12 0
label __label17
set memSize __tmp12
jump __label22 notEqual SOURCE_MEMORY TARGET_MEMORY
op idiv startIndex __tmp12 2
op sub memSize __tmp12 1
label __label22
set prevTick @tick
read prev SOURCE_MEMORY 0
set currTick prevTick
set curr prev
read __tmp19 TARGET_MEMORY startIndex
op max index startIndex __tmp19
set nextTick prevTick
sensor __tmp21 switch1 @enabled
jump __label26 notEqual __tmp21 0
label __label43
op add nextTick nextTick TICKS
op add __tmp24 nextTick TICKS
jump __label27 lessThanEq @tick __tmp24
set prevTick @tick
op add nextTick prevTick TICKS
set currTick prevTick
label __label27
jump __label31 greaterThanEq @tick nextTick
label __label42
jump __label32 greaterThanEq @tick prevTick
end
label __label32
read value SOURCE_MEMORY 0
jump __label34 equal value curr
set currTick @tick
set curr value
label __label34
jump __label42 lessThan @tick nextTick
label __label31
op sub amount curr prev
op sub time currTick prevTick
set rate 0
jump __label37 equal amount 0
op div __tmp40 amount time
op max rate __tmp40 0
label __label37
op add index index 1
jump __label38 lessThan index memSize
op add index startIndex 1
label __label38
write index TARGET_MEMORY startIndex
write rate TARGET_MEMORY index
print "Item Rate Meter\n"
print "Total items: [gold]"
print curr
op idiv __tmp47 rate 0.0002777777777777778
print "[]\nCurrent rate [green]"
print __tmp47
print "[]/min\n  memory start: [gold]"
print startIndex
print "[]\n  memory index: [gold]"
print index
op floor __tmp48 time 0
print "[]\n[lightgray]Loop time: "
print __tmp48
print " ms"
printflush message1
set prevTick currTick
set prev curr
sensor __tmp21 switch1 @enabled
jump __label43 equal __tmp21 0
label __label26
control enabled switch1 0 0 0 0
