   248 instructions before optimizations.
    21 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
    27 instructions eliminated by Dead Code Elimination (6 iterations).
     1 instructions eliminated by Jump Normalization (4 iterations).
    10 instructions eliminated by Jump Optimization (4 iterations).
    10 instructions eliminated by Single Step Elimination (3 passes, 7 iterations).
     3 instructions eliminated by If Expression Optimization (3 iterations).
     7 instructions eliminated by Data Flow Optimization (2 passes, 9 iterations).
     1 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
     7 instructions eliminated by Jump Straightening (4 iterations).
     2 instructions updated by PropagateJumpTargets.
     7 instructions eliminated by Print Merging.
   155 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 834):
  * Loop Optimization: replicate condition at line 72            cost     1, benefit       25.0, efficiency       25.0 (+1 instructions)

Final code before resolving virtual instructions:

set PCT_LOW 60
set PCT_HIGH 80
set CONTAINER null
set SORTER null
set SWITCH null
set START null
set SENSOR null
set MESSAGE null
set MAXIMUM null
label __label0
print "Configuring regulator...\n"
set n @links
jump __label5 lessThanEq n 0
label __label55
op sub n n 1
getlink block n
print "Found: "
print block
print "\n"
sensor __tmp4 block @type
jump __label7 notEqual __tmp4 @message
set MESSAGE block
jump __label6 always 0 0
label __label7
jump __label9 notEqual __tmp4 @switch
set SWITCH block
jump __label6 always 0 0
label __label9
jump __label12 equal __tmp4 @sorter
jump __label12 equal __tmp4 @inverted-sorter
jump __label11 notEqual __tmp4 @unloader
label __label12
set SORTER block
jump __label6 always 0 0
label __label11
jump __label14 equal __tmp4 @vault
jump __label14 equal __tmp4 @container
jump __label14 equal __tmp4 @core-shard
jump __label14 equal __tmp4 @core-foundation
jump __label13 notEqual __tmp4 @core-nucleus
label __label14
set CONTAINER block
set SENSOR @totalItems
set MAXIMUM @itemCapacity
op add START n 1
jump __label6 always 0 0
label __label13
jump __label16 equal __tmp4 @liquid-tank
jump __label16 equal __tmp4 @liquid-container
jump __label15 notEqual __tmp4 @liquid-router
label __label16
set CONTAINER block
set SENSOR @totalLiquids
set MAXIMUM @liquidCapacity
op add START n 1
jump __label6 always 0 0
label __label15
jump __label18 equal __tmp4 @battery
jump __label17 notEqual __tmp4 @battery-large
label __label18
set CONTAINER block
set SENSOR @totalPower
set MAXIMUM @powerCapacity
op add START n 1
jump __label6 always 0 0
label __label17
jump __label20 equal __tmp4 @power-node
jump __label20 equal __tmp4 @power-node-large
jump __label19 notEqual __tmp4 @surge-tower
label __label20
set CONTAINER block
set SENSOR @powerNetStored
set MAXIMUM @powerNetCapacity
op add START n 1
label __label19
label __label6
jump __label55 greaterThan n 0
label __label5
print "Message: "
print MESSAGE
print "\nSwitch: "
print SWITCH
print "\nSorter: "
print SORTER
print "\nContainer: "
print CONTAINER
print "\n"
jump __label21 notEqual CONTAINER null
print "No container.\n"
label __label21
printflush MESSAGE
jump __label0 equal CONTAINER null
sensor __tmp13 SORTER @type
op strictEqual INVERTED __tmp13 @inverted-sorter
set STATE true
op xor ON INVERTED true
set ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump __label28 equal ON false
set ACTIVE_TEXT "\nCurrently active:[green]"
label __label28
set CYCLES 0
control enabled SWITCH 0 0 0 0
sensor __tmp21 SWITCH @enabled
jump __label31 notEqual __tmp21 0
label __label57
set start @time
sensor item SORTER @config
op equal __tmp25 item null
op notEqual __tmp26 SENSOR @totalItems
op or __tmp27 __tmp25 __tmp26
jump __label32 equal __tmp27 false
set item SENSOR
print "Measuring [gold]total[] in "
print CONTAINER
jump __label33 always 0 0
label __label32
print "Measuring [gold]"
print item
print "[] in "
print CONTAINER
label __label33
sensor max CONTAINER MAXIMUM
sensor amount CONTAINER item
op mul __tmp31 100 amount
op idiv pct __tmp31 max
jump __label34 greaterThan pct PCT_LOW
jump __label35 equal STATE true
set STATE true
op add CYCLES CYCLES 1
op xor ON INVERTED true
set ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump __label35 equal ON false
set ACTIVE_TEXT "\nCurrently active:[green]"
jump __label35 always 0 0
label __label34
jump __label42 lessThan pct PCT_HIGH
jump __label46 equal STATE false
set STATE false
op add CYCLES CYCLES 1
op xor ON INVERTED false
set ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump __label49 equal ON false
set ACTIVE_TEXT "\nCurrently active:[green]"
label __label49
label __label46
label __label42
label __label35
print "\nLevel: [gold]"
print pct
print "%[]"
jump __label50 equal INVERTED false
print "\nActivate above [green]"
print PCT_HIGH
print "%[]\nDeactivate below [salmon]"
print PCT_LOW
print "%[]"
jump __label51 always 0 0
label __label50
print "\nActivate below [green]"
print PCT_LOW
print "%[]\nDeactivate above [salmon]"
print PCT_HIGH
print "%[]"
label __label51
print ACTIVE_TEXT
set n START
jump __label54 greaterThanEq START @links
label __label56
getlink block n
control enabled block ON 0 0 0
print "\n    "
print block
op add n n 1
jump __label56 lessThan n @links
label __label54
print "[]\n# of cycles: "
print CYCLES
op sub __tmp53 @time start
op floor __tmp54 __tmp53 0
print "\n[lightgray]Loop: "
print __tmp54
print " ms"
printflush MESSAGE
sensor __tmp21 SWITCH @enabled
jump __label57 equal __tmp21 0
label __label31
