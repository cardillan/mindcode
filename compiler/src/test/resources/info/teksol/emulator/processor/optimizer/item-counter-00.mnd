param MIN_BATCH = 10;
param MAX_BATCH = 1000;

lastCell = 0;
do
    MEMORY = null;
    FIRST_BLOCK = @links;
    n = @links;
    while n > 0 do
        n -= 1;
        block = getlink(n);
        case block.@type
            when @memory-cell then
                MEMORY = block;
                lastCell = 63;
            when @memory-bank then
                MEMORY = block;
                lastCell = 511;
            when @plastanium-conveyor then
                FIRST_BLOCK = n;
        end;
    end;

    print("Item Counter\n[salmon]No memory attached.");
    printflush(message1);
loop while MEMORY == null;

total = MEMORY[0];
BATCH_DURATION = 2000;                // We aim for a batch to be completed in about 2 seconds
EFF_MIN_BATCH = (max(MIN_BATCH, 10) \ 10) * 10;
EFF_MAX_BATCH = (max(MAX_BATCH, EFF_MIN_BATCH) \ 10) * 10;
BATCH_STEP = 10;
batch = EFF_MIN_BATCH;
startTime = @time;           // Batch start time
ratePerMin = 0;
limit = total + batch;
//totalStart = @time;
switch1.enabled = 0;
while switch1.@enabled == 0 do
    start = @time;
    n = FIRST_BLOCK;
    while n < @links do
        block = getlink(n);
        n += 1;
        if block.@type == @plastanium-conveyor then
            prev = MEMORY[n];
            curr = block.@totalItems;
            MEMORY[n] = curr;
            //print($"$n: $curr\n");
            if curr < prev then
                total += 10;
                MEMORY[0] = total;
                if total > limit then
                    duration = @time - startTime;
                    startTime = @time;
                    limit += batch;
                    rate = batch / duration;                            // items/ms
                    MEMORY[lastCell] = rate * (1000 / 60);              // items/tick
                    ratePerMin = floor(rate * 60000);                   // items/min
                    if duration <= BATCH_DURATION  then                 // too fast, increase batch time
                        batch = min(batch + BATCH_STEP, EFF_MAX_BATCH);
                    end;
                end;
            end;
        end;
    end;
    elapsed = floor(@time - startTime);
    if elapsed >= 10000 then
        // Batch didn't complete in 10 seconds
        batch = max((batch \ 90) * 10, EFF_MIN_BATCH);      // Divide batch size by 9, round to tens
        MEMORY[lastCell] = 0;
        ratePerMin = 0;
        startTime = @time;
    end;
    print($"Item Counter                  \n");
    print($"Total items: [gold]$total[]\n");
    print($"Rate: [green]$ratePerMin[] items/min\n");
    //print($"Overall rate: [green]$[] items/min\n", floor(total / (@time - totalStart) * 60000));
    print($"Batch size: [green]$batch[]\n");
    print($"Batch time: [gold]$elapsed[] ms\n");
    print($"[lightgray]Loop time: $ ms", floor(@time - start));
    printflush(message1);
end;
switch1.enabled = 0;
MEMORY[lastCell] = 0;
n = 0;
while n < @links do
    MEMORY[n] = 0;
    n += 1;
end;
