// Linked structures
// switch1: initiate cleanup
// switch2: change unit type
// message1: unit status

#set target = ML7A;      // Using revised syntax for ulocate

UNIT    = @mega;

const RADIUS_WITHIN        = 8;
const RADIUS_APPROACH   = 4;

THIS_X = @this.@x;
THIS_Y = @this.@y;

first_unit = null;
index = 1;

while true do
    if switch2.@enabled then
        UNIT = case UNIT
            when @flare then @mono;
            when @mono  then @poly;
            when @poly  then @mega;
            when @mega  then @flare;
        end;
        first_unit = null;
        switch2.enabled = false;
        print(UNIT, ": gathering information...");
    end;

    ubind(UNIT);
    if @unit == null then
        print(UNIT, ": no active unit found.");
        printflush(message1);
    else
        // We're at the beginning of the cycle, or the first unit was destroyed
        // First unit is not necessarily ours
        if @unit === first_unit or first_unit === null then
            printflush(message1);
            first_unit = @unit;
            index = 1;
            print(UNIT);
            if switch1.@enabled then
                print(" (cleanup active)");
            end;
        end;

        controlled = @unit.@controlled;
        flag = @unit.@flag;
        items = @unit.@totalItems;
        item = @unit.@firstItem;

        // Do not count being controlled by this as
        if @unit.@controller == @this then
            controlled = 0;
        end;

        if (flag != 0) or (items > 0) or ((controlled != 0) and (@unit.@controller != @this)) then
            print("\n", index);

            case controlled
                when @ctrlProcessor then
                    controller = @unit.@controller;
                    x = floor(controller.@x);
                    y = floor(controller.@y);
                    print(", ", x, ";", y);
                when @ctrlPlayer then
                    print(", player");
                when @ctrlCommand then
                    print(", command");
            end;

            if (flag != 0) then
                print(", F", flag);
            end;

            if (items > 0) then
                print(", ", items, " ", item);
            end;
        end;

        if (controlled == 0) and switch1.@enabled then
            if items > 0 then
                flag(1);
                CORE = ulocate(building, core, false, out CORE_X, out CORE_Y);
                if within(CORE_X, CORE_Y, RADIUS_WITHIN) then
                    itemDrop(CORE, items);
                else
                    approach(CORE_X, CORE_Y, RADIUS_APPROACH);
                end;
            else
                if flag != 0 then
                    if within(THIS_X, THIS_Y, RADIUS_WITHIN) then
                        flag(0);
                    else
                        approach(THIS_X, THIS_Y, RADIUS_APPROACH);
                    end;
                end;
            end;
        end;

        index += 1;
    end;
end;
