   129 instructions before optimizations.
     5 instructions eliminated by Temp Variables Elimination.
    11 instructions eliminated by Dead Code Elimination (2 passes, 4 iterations).
     5 instructions eliminated by Jump Optimization (4 iterations).
     6 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     3 instructions eliminated by Expression Optimization (2 passes, 3 iterations).
     1 instructions eliminated by If Expression Optimization (3 iterations).
     7 instructions eliminated by Data Flow Optimization (2 passes, 7 iterations).
     2 instructions modified by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
     1 instructions eliminated by Unreachable Code Elimination.
    24 instructions eliminated by Stack Optimization.
    66 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-10 instructions):
 
     6 set __fn0_right __tmp0
     7 callrec bank1 __label0 __label1 __fn0retval
     8 label __label1
-    * set __tmp1 __fn0retval
     9 set __tmp2 SIZE
    10 set i 0
    11 label __label2
 
    37 read __tmp14 ARRAY __fn1_right
    38 write __tmp14 ARRAY __fn1_pivot_index
    39 write __fn1_pivot ARRAY __fn1_right
-    * set __tmp13 __fn1_pivot
    40 jump __label11 always
    41 label __label10
-    * set __tmp13 null
    42 label __label11
    43 set __fn1_index __fn1_left
    44 set __tmp15 __fn1_right
 
    54 read __tmp21 ARRAY __fn1_index
    55 write __tmp21 ARRAY __fn1_i
    56 write __fn1_curr ARRAY __fn1_index
-    * set __tmp20 __fn1_curr
    57 jump __label18 always
    58 label __label17
-    * set __tmp20 null
    59 label __label18
    60 op add __tmp22 __fn1_index 1
    61 set __fn1_index __tmp22
-    * set __tmp18 __fn1_index
    62 jump __label16 always
    63 label __label15
-    * set __tmp18 null
    64 label __label16
    65 label __label13
    66 op add __fn1_i __fn1_i 1
 
    71 read __tmp25 ARRAY __fn1_index
    72 write __tmp25 ARRAY __fn1_right
    73 write __fn1_pivot ARRAY __fn1_index
-    * set __tmp24 __fn1_pivot
    74 jump __label20 always
    75 label __label19
-    * set __tmp24 null
    76 label __label20
    77 set __tmp10 __fn1_index
    78 jump __label9 always
 
    92 pop bank1 __fn0_pivot_index
    93 pop bank1 __fn0_right
    94 pop bank1 __fn0_left
-    * set __tmp27 __fn0retval
    95 op add __tmp28 __fn0_new_pivot_index 1
    96 push bank1 __fn0_left
    97 push bank1 __fn0_right

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-5 instructions):
 
    24 jump __label6 equal __tmp5 false
    25 op sub __tmp7 __fn0_right __fn0_left
    26 op idiv __tmp8 __tmp7 2
-    * op add __tmp9 __fn0_left __tmp8
-    * set __fn0_pivot_index __tmp9
+   27 op add __fn0_pivot_index __fn0_left __tmp8
    28 label __label8
    29 set __fn1_left __fn0_left
    30 set __fn1_right __fn0_right
    31 set __fn1_pivot_index __fn0_pivot_index
-    * read __tmp11 ARRAY __fn1_pivot_index
-    * set __fn1_pivot __tmp11
+   32 read __fn1_pivot ARRAY __fn1_pivot_index
    33 op notEqual __tmp12 __fn1_pivot_index __fn1_right
    34 jump __label10 equal __tmp12 false
    35 read __tmp14 ARRAY __fn1_right
 
    43 set __fn1_i __fn1_left
    44 label __label12
    45 jump __label14 greaterThanEq __fn1_i __tmp15
-    * read __tmp16 ARRAY __fn1_i
-    * set __fn1_curr __tmp16
+   46 read __fn1_curr ARRAY __fn1_i
    47 op lessThan __tmp17 __fn1_curr __fn1_pivot
    48 jump __label15 equal __tmp17 false
    49 op notEqual __tmp19 __fn1_i __fn1_index
 
    54 jump __label18 always
    55 label __label17
    56 label __label18
-    * op add __tmp22 __fn1_index 1
-    * set __fn1_index __tmp22
+   57 op add __fn1_index __fn1_index 1
    58 jump __label16 always
    59 label __label15
    60 label __label16
 
   101 pop bank1 __fn0_pivot_index
   102 pop bank1 __fn0_right
   103 pop bank1 __fn0_left
-    * set __tmp29 __fn0retval
-    * set __tmp6 __tmp29
+  104 set __tmp6 __fn0retval
   105 jump __label7 always
   106 label __label6
   107 set __tmp6 null

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-5 instructions):
 
    20 stop
    21 end
    22 label __label0
-    * op greaterThan __tmp5 __fn0_right __fn0_left
-    * jump __label6 equal __tmp5 false
+   23 jump __label6 lessThanEq __fn0_right __fn0_left
    24 op sub __tmp7 __fn0_right __fn0_left
    25 op idiv __tmp8 __tmp7 2
    26 op add __fn0_pivot_index __fn0_left __tmp8
 
    29 set __fn1_right __fn0_right
    30 set __fn1_pivot_index __fn0_pivot_index
    31 read __fn1_pivot ARRAY __fn1_pivot_index
-    * op notEqual __tmp12 __fn1_pivot_index __fn1_right
-    * jump __label10 equal __tmp12 false
+   32 jump __label10 equal __fn1_pivot_index __fn1_right
    33 read __tmp14 ARRAY __fn1_right
    34 write __tmp14 ARRAY __fn1_pivot_index
    35 write __fn1_pivot ARRAY __fn1_right
 
    42 label __label12
    43 jump __label14 greaterThanEq __fn1_i __tmp15
    44 read __fn1_curr ARRAY __fn1_i
-    * op lessThan __tmp17 __fn1_curr __fn1_pivot
-    * jump __label15 equal __tmp17 false
-    * op notEqual __tmp19 __fn1_i __fn1_index
-    * jump __label17 equal __tmp19 false
+   45 jump __label15 greaterThanEq __fn1_curr __fn1_pivot
+   46 jump __label17 equal __fn1_i __fn1_index
    47 read __tmp21 ARRAY __fn1_index
    48 write __tmp21 ARRAY __fn1_i
    49 write __fn1_curr ARRAY __fn1_index
 
    58 op add __fn1_i __fn1_i 1
    59 jump __label12 always
    60 label __label14
-    * op notEqual __tmp23 __fn1_index __fn1_right
-    * jump __label19 equal __tmp23 false
+   61 jump __label19 equal __fn1_index __fn1_right
    62 read __tmp25 ARRAY __fn1_index
    63 write __tmp25 ARRAY __fn1_right
    64 write __fn1_pivot ARRAY __fn1_index

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-4 instructions):
 
    33 read __tmp14 ARRAY __fn1_right
    34 write __tmp14 ARRAY __fn1_pivot_index
    35 write __fn1_pivot ARRAY __fn1_right
-    * jump __label11 always
    36 label __label10
    37 label __label11
    38 set __fn1_index __fn1_left
 
    46 read __tmp21 ARRAY __fn1_index
    47 write __tmp21 ARRAY __fn1_i
    48 write __fn1_curr ARRAY __fn1_index
-    * jump __label18 always
    49 label __label17
    50 label __label18
    51 op add __fn1_index __fn1_index 1
-    * jump __label16 always
    52 label __label15
    53 label __label16
    54 label __label13
 
    59 read __tmp25 ARRAY __fn1_index
    60 write __tmp25 ARRAY __fn1_right
    61 write __fn1_pivot ARRAY __fn1_index
-    * jump __label20 always
    62 label __label19
    63 label __label20
    64 set __tmp10 __fn1_index

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
    71 push bank1 __fn0_right
    72 push bank1 __fn0_pivot_index
    73 push bank1 __fn0_new_pivot_index
-    * set __fn0_left __fn0_left
    74 set __fn0_right __tmp26
    75 callrec bank1 __label0 __label21 __fn0retval
    76 label __label21
 
    84 push bank1 __fn0_pivot_index
    85 push bank1 __fn0_new_pivot_index
    86 set __fn0_left __tmp28
-    * set __fn0_right __fn0_right
    87 callrec bank1 __label0 __label22 __fn0retval
    88 label __label22
    89 pop bank1 __fn0_new_pivot_index

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
     9 set __tmp2 SIZE
    10 set i 0
    11 label __label2
-    * jump __label4 greaterThanEq i __tmp2
+   12 jump __label4 greaterThanEq i SIZE
    13 read __tmp3 FINAL i
    14 read __tmp4 ARRAY i
    15 assertequals __tmp3 __tmp4 "unexpected value"
 
    28 set __fn1_left __fn0_left
    29 set __fn1_right __fn0_right
    30 set __fn1_pivot_index __fn0_pivot_index
-    * read __fn1_pivot ARRAY __fn1_pivot_index
-    * jump __label10 equal __fn1_pivot_index __fn1_right
-    * read __tmp14 ARRAY __fn1_right
-    * write __tmp14 ARRAY __fn1_pivot_index
-    * write __fn1_pivot ARRAY __fn1_right
+   31 read __fn1_pivot ARRAY __fn0_pivot_index
+   32 jump __label10 equal __fn0_pivot_index __fn0_right
+   33 read __tmp14 ARRAY __fn0_right
+   34 write __tmp14 ARRAY __fn0_pivot_index
+   35 write __fn1_pivot ARRAY __fn0_right
    36 label __label10
    37 label __label11
-    * set __fn1_index __fn1_left
-    * set __tmp15 __fn1_right
-    * set __fn1_i __fn1_left
+   38 set __fn1_index __fn0_left
+   39 set __tmp15 __fn0_right
+   40 set __fn1_i __fn0_left
    41 label __label12
-    * jump __label14 greaterThanEq __fn1_i __tmp15
+   42 jump __label14 greaterThanEq __fn1_i __fn1_right
    43 read __fn1_curr ARRAY __fn1_i
    44 jump __label15 greaterThanEq __fn1_curr __fn1_pivot
    45 jump __label17 equal __fn1_i __fn1_index
 
    55 op add __fn1_i __fn1_i 1
    56 jump __label12 always
    57 label __label14
-    * jump __label19 equal __fn1_index __fn1_right
+   58 jump __label19 equal __fn1_index __fn0_right
    59 read __tmp25 ARRAY __fn1_index
-    * write __tmp25 ARRAY __fn1_right
+   60 write __tmp25 ARRAY __fn0_right
    61 write __fn1_pivot ARRAY __fn1_index
    62 label __label19
    63 label __label20
    64 set __tmp10 __fn1_index
    65 jump __label9 always
-    * set __tmp10 null
    66 label __label9
-    * set __fn0_new_pivot_index __tmp10
-    * op sub __tmp26 __fn0_new_pivot_index 1
+   67 set __fn0_new_pivot_index __fn1_index
+   68 op sub __tmp26 __tmp10 1
    69 push bank1 __fn0_left
    70 push bank1 __fn0_right
    71 push bank1 __fn0_pivot_index

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
     6 set __fn0_right __tmp0
     7 callrec bank1 __label0 __label1 __fn0retval
     8 label __label1
-    * set __tmp2 SIZE
     9 set i 0
    10 label __label2
    11 jump __label4 greaterThanEq i SIZE
 
    24 op idiv __tmp8 __tmp7 2
    25 op add __fn0_pivot_index __fn0_left __tmp8
    26 label __label8
-    * set __fn1_left __fn0_left
    27 set __fn1_right __fn0_right
-    * set __fn1_pivot_index __fn0_pivot_index
    28 read __fn1_pivot ARRAY __fn0_pivot_index
    29 jump __label10 equal __fn0_pivot_index __fn0_right
    30 read __tmp14 ARRAY __fn0_right
 
    33 label __label10
    34 label __label11
    35 set __fn1_index __fn0_left
-    * set __tmp15 __fn0_right
    36 set __fn1_i __fn0_left
    37 label __label12
-    * jump __label14 greaterThanEq __fn1_i __fn1_right
+   38 jump __label14 greaterThanEq __fn1_i __fn0_right
    39 read __fn1_curr ARRAY __fn1_i
    40 jump __label15 greaterThanEq __fn1_curr __fn1_pivot
    41 jump __label17 equal __fn1_i __fn1_index
 
    61 jump __label9 always
    62 label __label9
    63 set __fn0_new_pivot_index __fn1_index
-    * op sub __tmp26 __tmp10 1
+   64 op sub __tmp26 __fn1_index 1
    65 push bank1 __fn0_left
    66 push bank1 __fn0_right
    67 push bank1 __fn0_pivot_index

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-2 instructions):
 
    24 op idiv __tmp8 __tmp7 2
    25 op add __fn0_pivot_index __fn0_left __tmp8
    26 label __label8
-    * set __fn1_right __fn0_right
    27 read __fn1_pivot ARRAY __fn0_pivot_index
    28 jump __label10 equal __fn0_pivot_index __fn0_right
    29 read __tmp14 ARRAY __fn0_right
 
    56 write __fn1_pivot ARRAY __fn1_index
    57 label __label19
    58 label __label20
-    * set __tmp10 __fn1_index
    59 jump __label9 always
    60 label __label9
    61 set __fn0_new_pivot_index __fn1_index

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     9 set i 0
    10 label __label2
    11 jump __label4 greaterThanEq i SIZE
+   12 label __label23
    13 read __tmp3 FINAL i
    14 read __tmp4 ARRAY i
    15 assertequals __tmp3 __tmp4 "unexpected value"
    16 label __label3
    17 op add i i 1
-    * jump __label2 always
+   18 jump __label23 lessThan i SIZE
    19 label __label4
    20 stop
    21 end
 
    36 set __fn1_i __fn0_left
    37 label __label12
    38 jump __label14 greaterThanEq __fn1_i __fn0_right
+   39 label __label24
    40 read __fn1_curr ARRAY __fn1_i
    41 jump __label15 greaterThanEq __fn1_curr __fn1_pivot
    42 jump __label17 equal __fn1_i __fn1_index
 
    50 label __label16
    51 label __label13
    52 op add __fn1_i __fn1_i 1
-    * jump __label12 always
+   53 jump __label24 lessThan __fn1_i __fn0_right
    54 label __label14
    55 jump __label19 equal __fn1_index __fn0_right
    56 read __tmp25 ARRAY __fn1_index

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
    20 stop
    21 end
    22 label __label0
-    * jump __label6 lessThanEq __fn0_right __fn0_left
+   23 set __fn0retval null
+   24 jump __label7 lessThanEq __fn0_right __fn0_left
    25 op sub __tmp7 __fn0_right __fn0_left
    26 op idiv __tmp8 __tmp7 2
    27 op add __fn0_pivot_index __fn0_left __tmp8
 
    86 pop bank1 __fn0_pivot_index
    87 pop bank1 __fn0_right
    88 pop bank1 __fn0_left
-    * set __tmp6 __fn0retval
+   89 set __fn0retval __fn0retval
    90 jump __label7 always
-    * label __label6
-    * set __tmp6 null
    91 label __label7
-    * set __fn0retval __tmp6
    92 label __label5
    93 return bank1
    94 end

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-2 instructions):
 
    59 write __fn1_pivot ARRAY __fn1_index
    60 label __label19
    61 label __label20
-    * jump __label9 always
    62 label __label9
    63 set __fn0_new_pivot_index __fn1_index
    64 op sub __tmp26 __fn1_index 1
 
    86 pop bank1 __fn0_right
    87 pop bank1 __fn0_left
    88 set __fn0retval __fn0retval
-    * jump __label7 always
    89 label __label7
    90 label __label5
    91 return bank1

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1 (-1 instructions):
 
    85 pop bank1 __fn0_pivot_index
    86 pop bank1 __fn0_right
    87 pop bank1 __fn0_left
-    * set __fn0retval __fn0retval
    88 label __label7
    89 label __label5
    90 return bank1

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     8 label __label1
     9 set i 0
    10 label __label2
-    * jump __label4 greaterThanEq i SIZE
+   11 jump __label4 greaterThanEq 0 SIZE
    12 label __label23
    13 read __tmp3 FINAL i
    14 read __tmp4 ARRAY i
 
    36 set __fn1_index __fn0_left
    37 set __fn1_i __fn0_left
    38 label __label12
-    * jump __label14 greaterThanEq __fn1_i __fn0_right
+   39 jump __label14 greaterThanEq __fn0_left __fn0_right
    40 label __label24
    41 read __fn1_curr ARRAY __fn1_i
    42 jump __label15 greaterThanEq __fn1_curr __fn1_pivot

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-1 instructions):
 
    88 label __label7
    89 label __label5
    90 return bank1
-    * end

Modifications by Final phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    20 stop
    21 end
    22 label __label0
-    * set __fn0retval null
    23 jump __label7 lessThanEq __fn0_right __fn0_left
    24 op sub __tmp7 __fn0_right __fn0_left
    25 op idiv __tmp8 __tmp7 2

Modifications by Final phase, Stack Optimization, iteration 1 (-24 instructions):
 
    61 label __label9
    62 set __fn0_new_pivot_index __fn1_index
    63 op sub __tmp26 __fn1_index 1
-    * push bank1 __fn0_left
    64 push bank1 __fn0_right
-    * push bank1 __fn0_pivot_index
    65 push bank1 __fn0_new_pivot_index
    66 set __fn0_right __tmp26
    67 callrec bank1 __label0 __label21 __fn0retval
    68 label __label21
    69 pop bank1 __fn0_new_pivot_index
-    * pop bank1 __fn0_pivot_index
    70 pop bank1 __fn0_right
-    * pop bank1 __fn0_left
    71 op add __tmp28 __fn0_new_pivot_index 1
-    * push bank1 __fn0_left
-    * push bank1 __fn0_right
-    * push bank1 __fn0_pivot_index
-    * push bank1 __fn0_new_pivot_index
    72 set __fn0_left __tmp28
    73 callrec bank1 __label0 __label22 __fn0retval
    74 label __label22
-    * pop bank1 __fn0_new_pivot_index
-    * pop bank1 __fn0_pivot_index
-    * pop bank1 __fn0_right
-    * pop bank1 __fn0_left
    75 label __label7
    76 label __label5
    77 return bank1

Final code before resolving virtual instructions:

set SIZE 512
set __sp 0
set ARRAY bank2
set FINAL bank3
op sub __tmp0 SIZE 1
set __fn0_left 0
set __fn0_right __tmp0
callrec bank1 __label0 __label1 __fn0retval
label __label1
set i 0
jump __label4 greaterThanEq 0 SIZE
label __label23
read __tmp3 FINAL i
read __tmp4 ARRAY i
assertequals __tmp3 __tmp4 "unexpected value"
op add i i 1
jump __label23 lessThan i SIZE
label __label4
stop
end
label __label0
jump __label7 lessThanEq __fn0_right __fn0_left
op sub __tmp7 __fn0_right __fn0_left
op idiv __tmp8 __tmp7 2
op add __fn0_pivot_index __fn0_left __tmp8
read __fn1_pivot ARRAY __fn0_pivot_index
jump __label10 equal __fn0_pivot_index __fn0_right
read __tmp14 ARRAY __fn0_right
write __tmp14 ARRAY __fn0_pivot_index
write __fn1_pivot ARRAY __fn0_right
label __label10
set __fn1_index __fn0_left
set __fn1_i __fn0_left
jump __label14 greaterThanEq __fn0_left __fn0_right
label __label24
read __fn1_curr ARRAY __fn1_i
jump __label15 greaterThanEq __fn1_curr __fn1_pivot
jump __label17 equal __fn1_i __fn1_index
read __tmp21 ARRAY __fn1_index
write __tmp21 ARRAY __fn1_i
write __fn1_curr ARRAY __fn1_index
label __label17
op add __fn1_index __fn1_index 1
label __label15
op add __fn1_i __fn1_i 1
jump __label24 lessThan __fn1_i __fn0_right
label __label14
jump __label19 equal __fn1_index __fn0_right
read __tmp25 ARRAY __fn1_index
write __tmp25 ARRAY __fn0_right
write __fn1_pivot ARRAY __fn1_index
label __label19
set __fn0_new_pivot_index __fn1_index
op sub __tmp26 __fn1_index 1
push bank1 __fn0_right
push bank1 __fn0_new_pivot_index
set __fn0_right __tmp26
callrec bank1 __label0 __label21 __fn0retval
label __label21
pop bank1 __fn0_new_pivot_index
pop bank1 __fn0_right
op add __tmp28 __fn0_new_pivot_index 1
set __fn0_left __tmp28
callrec bank1 __label0 __label22 __fn0retval
label __label22
label __label7
return bank1
