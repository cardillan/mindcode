   579 instructions before optimizations.
    39 instructions eliminated by Temp Variables Elimination.
    86 instructions eliminated by Dead Code Elimination (2 passes, 7 iterations).
     9 instructions eliminated by Jump Normalization (2 passes, 5 iterations).
    42 instructions eliminated by Jump Optimization (5 iterations).
    32 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
     3 instructions modified by Expression Optimization (2 passes, 4 iterations).
    27 instructions eliminated by Data Flow Optimization (4 passes, 21 iterations).
    18 instructions added by Loop Optimization (4 iterations).
     9 loops improved by Loop Optimization.
     5 instructions eliminated by Jump Straightening (5 iterations).
     5 instructions updated by PropagateJumpTargets.
    48 instructions eliminated by Unreachable Code Elimination.
     9 instructions eliminated by Print Merging.
   300 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 634):
  * Loop Optimization: replicate condition at line 45            cost     1, benefit       25.0, efficiency       25.0 (+1 instructions)
    Loop Optimization: replicate condition at line 53            cost     2, benefit       25.0, efficiency       12.5
    Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3
    Loop Optimization: replicate condition at line 132           cost     3, benefit       25.0, efficiency        8.3
    Loop Optimization: replicate condition at line 307           cost     2, benefit       25.0, efficiency       12.5
    Loop Optimization: replicate condition at line 317           cost     1, benefit       12.5, efficiency       12.5

Pass 1: speed optimization selection (cost limit 633):
    Loop Optimization: replicate condition at line 53            cost     2, benefit       25.0, efficiency       12.5
    Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3
    Loop Optimization: replicate condition at line 132           cost     3, benefit       25.0, efficiency        8.3
    Loop Optimization: replicate condition at line 307           cost     2, benefit       25.0, efficiency       12.5
  * Loop Optimization: replicate condition at line 317           cost     1, benefit       12.5, efficiency       12.5 (+1 instructions)

Pass 1: speed optimization selection (cost limit 632):
  * Loop Optimization: replicate condition at line 53            cost     2, benefit       25.0, efficiency       12.5 (+2 instructions)
    Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3
    Loop Optimization: replicate condition at line 132           cost     3, benefit       25.0, efficiency        8.3
    Loop Optimization: replicate condition at line 307           cost     2, benefit       25.0, efficiency       12.5

Pass 1: speed optimization selection (cost limit 630):
    Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3
    Loop Optimization: replicate condition at line 132           cost     3, benefit       25.0, efficiency        8.3
  * Loop Optimization: replicate condition at line 307           cost     2, benefit       25.0, efficiency       12.5 (+1 instructions)

Pass 1: speed optimization selection (cost limit 629):
    Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3
  * Loop Optimization: replicate condition at line 132           cost     3, benefit       25.0, efficiency        8.3 (+3 instructions)

Pass 1: speed optimization selection (cost limit 626):
  * Loop Optimization: replicate condition at line 104           cost     4, benefit       12.5, efficiency        3.1 (+4 instructions)
    Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3

Pass 1: speed optimization selection (cost limit 622):
  * Loop Optimization: replicate condition at line 113           cost     5, benefit        6.3, efficiency        1.3 (+5 instructions)

Final code before resolving virtual instructions:

set MSG null
sensor __tmp2 switch1 @enabled
jump __label2 notEqual __tmp2 false
label __label137
print "Unit Transport - Single\n"
print "Activate switch to start.\n"
printflush message1
sensor __tmp2 switch1 @enabled
jump __label137 equal __tmp2 false
label __label2
sensor __tmp4 @unit @dead
op strictEqual __tmp5 __tmp4 0
jump __label5 notEqual __tmp5 false
label __label139
set __fn0_first_unit null
label __label8
ubind @mega
jump __label11 equal @unit null
set __fn0_first_unit @unit
jump __label10 always 0 0
label __label11
print "[salmon]No unit of type "
print @mega
print " found. 1"
printflush message1
jump __label8 always 0 0
label __label10
label __label13
sensor __tmp11 @unit @controller
jump __label7 equal __tmp11 @this
ubind @mega
print "[gold]Looking for old unit..."
printflush message1
op notEqual __tmp14 @unit __fn0_first_unit
sensor __tmp15 __fn0_first_unit @dead
op strictEqual __tmp16 __tmp15 0
op land __tmp17 __tmp14 __tmp16
jump __label13 notEqual __tmp17 false
label __label20
ubind @mega
jump __label23 notEqual @unit null
print "[salmon]No unit of type "
print @mega
print " found. 2"
jump __label24 always 0 0
label __label23
sensor __tmp21 @unit @controlled
jump __label19 equal __tmp21 0
print "[salmon]Looking for a free "
print @mega
print "..."
label __label24
printflush message1
jump __label20 always 0 0
label __label19
label __label7
sensor __tmp4 @unit @dead
op strictEqual __tmp5 __tmp4 0
jump __label139 equal __tmp5 false
label __label5
sensor UNIT_CAPACITY @unit @itemCapacity
sensor __tmp25 @unit @speed
op div SPEED_SEC __tmp25 10
ucontrol flag 1 0 0 0 0
label __label27
set CONTAINER null
set DROP_TARGET null
set n @links
jump __label32 lessThanEq n 0
label __label135
op sub n n 1
getlink block n
sensor __tmp31 block @itemCapacity
jump __label33 lessThanEq __tmp31 0
set DROP_TARGET CONTAINER
set CONTAINER block
label __label33
jump __label135 greaterThan n 0
label __label32
jump __label35 notEqual CONTAINER null
print "[salmon]No destination.\n"
jump __label36 always 0 0
label __label35
op notEqual __tmp36 DROP_TARGET null
sensor __tmp37 DROP_TARGET @itemCapacity
op lessThan __tmp38 __tmp37 300
op land __tmp39 __tmp36 __tmp38
jump __label29 equal __tmp39 false
print "Destination: "
print CONTAINER
print "\nItem dump: "
print DROP_TARGET
print "\n"
print "[salmon]Item dump must be a container or a vault!"
label __label36
printflush message1
jump __label27 always 0 0
label __label29
print "[gold]Locating core..."
printflush message1
ulocate building core false @copper CORE_X CORE_Y 0 CORE
jump __label51 notEqual CORE null
end
label __label51
set SORTER sorter1
sensor sorter_type sorter1 @type
op notEqual __tmp68 sorter_type @sorter
op notEqual __tmp69 sorter_type @inverted-sorter
op land __tmp70 __tmp68 __tmp69
jump __label55 equal __tmp70 false
label __label141
print "[salmon]Block sorter1 is neither a sorter, nor an inverted sorter."
print "\n"
jump __label56 equal SORTER null
print "Block found: "
print SORTER
label __label56
printflush message1
set SORTER sorter1
sensor sorter_type sorter1 @type
op notEqual __tmp68 sorter_type @sorter
op notEqual __tmp69 sorter_type @inverted-sorter
op land __tmp70 __tmp68 __tmp69
jump __label141 notEqual __tmp70 false
label __label55
jump __label58 notEqual sorter_type @sorter
set SHOW_REMOTE_LEVEL true
set SRC CORE
set DST CONTAINER
sensor dst_capacity CONTAINER @itemCapacity
op mul __tmp81 dst_capacity 100
op idiv DROP_LEVEL __tmp81 100
set DIRECTION "[] from core"
jump __label59 always 0 0
label __label58
op greaterThan SHOW_REMOTE_LEVEL 0 0
set SRC CONTAINER
set DST CORE
sensor dst_capacity CORE @itemCapacity
op mul __tmp91 dst_capacity 100
op idiv __tmp92 __tmp91 100
op mul __tmp94 true UNIT_CAPACITY
op add DROP_LEVEL __tmp92 __tmp94
set DIRECTION "[] to core"
label __label59
sensor SRC_X SRC @x
sensor SRC_Y SRC @y
sensor DST_X DST @x
sensor DST_Y DST @y
jump __label66 notEqual DROP_TARGET null
set DROP_TARGET CORE
set DROP_X CORE_X
set DROP_Y CORE_Y
jump __label67 always 0 0
label __label66
sensor DROP_X DROP_TARGET @x
sensor DROP_Y DROP_TARGET @y
label __label67
set LAST_ITEM @mono
set iter 0
set loop_time 0
set state 1
ucontrol stop 0 0 0 0 0
label __label68
set start @time
sensor __tmp109 @unit @dead
op strictEqual __tmp110 __tmp109 0
sensor __tmp111 @unit @controller
op notEqual __tmp112 __tmp111 @this
jump __label71 greaterThan __tmp110 __tmp112
label __label75
ubind @mega
jump __label78 notEqual @unit null
print "[salmon]No unit of type "
print @mega
print " found. 2"
jump __label79 always 0 0
label __label78
sensor __tmp118 @unit @controlled
jump __label74 equal __tmp118 0
print "[salmon]Looking for a free "
print @mega
print "..."
label __label79
printflush message1
jump __label75 always 0 0
label __label74
ucontrol flag 1 0 0 0 0
set state 1
label __label71
sensor ITEM SORTER @config
jump __label82 equal ITEM LAST_ITEM
jump __label86 notEqual ITEM null
label __label136
print "[salmon]No item type selected for transport."
printflush message1
sensor ITEM SORTER @config
jump __label136 equal ITEM null
label __label86
set LAST_ITEM ITEM
set state 1
label __label82
set show_state 0
jump __label87 notEqual state 1
sensor __tmp128 @unit @firstItem
jump __label89 notEqual __tmp128 ITEM
set state 3
jump __label90 always 0 0
label __label89
sensor __tmp131 @unit @totalItems
jump __label91 notEqual __tmp131 0
set state 2
jump __label92 always 0 0
label __label91
set MSG "\nUnloading previous items: [green]"
ucontrol approach DROP_X DROP_Y 6 0 0
ucontrol within DROP_X DROP_Y 8 __tmp134 0
jump __label93 equal __tmp134 false
ucontrol itemDrop DROP_TARGET UNIT_CAPACITY 0 0 0
label __label93
label __label92
label __label90
label __label87
jump __label95 notEqual state 2
ucontrol within SRC_X SRC_Y 8 __tmp138 0
jump __label97 equal __tmp138 false
sensor __tmp140 SRC ITEM
op max max_load __tmp140 0
ucontrol itemTake SRC ITEM max_load 0 0
sensor __tmp143 @unit @totalItems
jump __label99 lessThan __tmp143 UNIT_CAPACITY
set state 3
jump __label98 always 0 0
label __label99
set MSG "\nLoading items: [green]"
jump __label98 always 0 0
label __label97
ucontrol approach SRC_X SRC_Y 6 0 0
set MSG "\nGoing to source: [green]"
set show_state 2
label __label98
label __label95
jump __label101 notEqual state 3
ucontrol within DST_X DST_Y 8 __tmp148 0
jump __label103 equal __tmp148 false
sensor __tmp150 DST ITEM
op sub __tmp151 DROP_LEVEL __tmp150
op max max_drop __tmp151 0
ucontrol itemDrop DST max_drop 0 0 0
sensor __tmp153 @unit @totalItems
jump __label105 greaterThan __tmp153 0
set state 2
ucontrol approach SRC_X SRC_Y 6 0 0
jump __label104 always 0 0
label __label105
set MSG "\nDropping items: [green]"
jump __label104 always 0 0
label __label103
ucontrol approach DST_X DST_Y 6 0 0
set MSG "\nGoing to destination: [green]"
set show_state 3
label __label104
label __label101
jump __label107 lessThanEq iter 3
set iter 0
print "Moving [green]"
print ITEM
print DIRECTION
sensor __tmp158 CONTAINER ITEM
print "\nLocal items: [gold]"
print __tmp158
print "[]"
jump __label111 equal SHOW_REMOTE_LEVEL false
sensor __tmp162 CORE ITEM
print "\nRemote items: [gold]"
print __tmp162
print "[]"
label __label111
sensor __tmp165 @unit @totalItems
print MSG
print __tmp165
print "[]\n"
jump __label115 notEqual show_state 2
sensor __tmp168 @unit @x
op sub __tmp169 SRC_X __tmp168
sensor __tmp170 @unit @y
op sub __tmp171 SRC_Y __tmp170
op len __tmp172 __tmp169 __tmp171
op idiv __tmp173 __tmp172 SPEED_SEC
op div __tmp174 __tmp173 10
print "[]  arriving in [gold]"
print __tmp174
print " sec[]\n"
jump __label116 always 0 0
label __label115
jump __label117 notEqual show_state 3
sensor __tmp177 @unit @x
op sub __tmp178 DST_X __tmp177
sensor __tmp179 @unit @y
op sub __tmp180 DST_Y __tmp179
op len __tmp181 __tmp178 __tmp180
op idiv __tmp182 __tmp181 SPEED_SEC
op div __tmp183 __tmp182 10
print "[]  arriving in [gold]"
print __tmp183
print " sec[]\n"
label __label117
label __label116
op floor __tmp184 loop_time 0
print "[lightgray]Loop time: "
print __tmp184
print " ms[]\n"
printflush message1
sensor __tmp185 switch1 @enabled
jump __label70 equal __tmp185 0
sensor __tmp188 SRC @dead
jump __label70 notEqual __tmp188 0
sensor __tmp191 DST @dead
jump __label70 notEqual __tmp191 0
sensor __tmp194 SORTER @dead
jump __label70 notEqual __tmp194 0
jump __label108 always 0 0
label __label107
op add iter iter 1
label __label108
op sub loop_time @time start
jump __label68 always 0 0
label __label70
sensor __tmp199 SORTER @dead
op strictEqual __tmp200 __tmp199 0
jump __label129 notEqual __tmp200 false
label __label140
print "[salmon]sorter1 is missing!\n"
print "[gold]Please place and link sorter or inverted sorter to the processor."
print "\n"
printflush message1
printflush message2
sensor __tmp199 sorter1 @dead
op strictEqual __tmp200 __tmp199 0
jump __label140 equal __tmp200 false
label __label129
sensor __tmp202 SRC @dead
op strictEqual __tmp203 __tmp202 0
op equal __tmp204 __tmp203 false
sensor __tmp205 DST @dead
op strictEqual __tmp206 __tmp205 0
op equal __tmp207 __tmp206 false
op or __tmp208 __tmp204 __tmp207
jump __label130 equal __tmp208 false
control enabled switch1 false 0 0 0
sensor __tmp210 switch1 @enabled
jump __label134 notEqual __tmp210 false
label __label138
print "[salmon]Local or remote container became invalid."
print "\n"
print "[gold]Please fix and press button to reinitialize."
print "\n"
printflush message1
printflush message2
sensor __tmp210 switch1 @enabled
jump __label138 equal __tmp210 false
label __label134
label __label130
