   146 instructions before optimizations.
     6 instructions eliminated by Temp Variables Elimination.
    15 instructions eliminated by Dead Code Elimination (5 iterations).
     3 instructions eliminated by Jump Optimization (3 iterations).
     3 instructions eliminated by Single Step Elimination (4 iterations).
     7 instructions eliminated by Data Flow Optimization (4 iterations).
     3 instructions eliminated by Unreachable Code Elimination.
    12 instructions eliminated by Stack Optimization.
    97 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-9 instructions):
 
     4 set __fn0_b 0
     5 callrec bank1 __label0 __label3 __fn0retval
     6 label __label3
-    * set __tmp0 __fn0retval
     7 assertprints "0001111223221211" "foo"
     8 assertflush
     9 set __fn1_n 3
 
    11 set __fn1_b 0
    12 callrec bank1 __label1 __label4 __fn1retval
    13 label __label4
-    * set __tmp1 __fn1retval
    14 assertprints "0001111223333444" "bar"
    15 assertflush
    16 set __fn2_n 3
 
    18 set __fn2_b 0
    19 callrec bank1 __label2 __label5 __fn2retval
    20 label __label5
-    * set __tmp2 __fn2retval
    21 assertprints "0001111223221211" "baz"
    22 stop
    23 end
 
    43 pop bank1 __fn0_a
    44 pop bank1 __fn0_n
    45 set __tmp9 __fn0retval
-    * set __tmp5 __tmp9
    46 jump __label8 always
    47 label __label7
-    * set __tmp5 null
    48 label __label8
    49 op add __tmp10 __fn0_b 1
    50 set __fn0_b __tmp10
 
    76 set __fn1_a __tmp18
    77 pop bank1 __fn1_n
    78 set __tmp19 __fn1retval
-    * set __tmp13 __tmp19
    79 jump __label12 always
    80 label __label11
-    * set __tmp13 null
    81 label __label12
    82 op add __tmp20 __fn1_b 1
    83 set __fn1_b __tmp20
 
   109 pop bank1 __fn2_b
   110 pop bank1 __fn2_n
   111 set __tmp27 __fn2retval
-    * set __tmp23 __tmp27
   112 jump __label16 always
   113 label __label15
-    * set __tmp23 null
   114 label __label16
   115 op add __tmp28 __fn2_b 1
   116 set __fn2_b __tmp28

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-3 instructions):
 
    42 pop bank1 __fn0_b
    43 pop bank1 __fn0_a
    44 pop bank1 __fn0_n
-    * set __tmp9 __fn0retval
    45 jump __label8 always
    46 label __label7
    47 label __label8
 
    74 set __fn1_b __tmp17
    75 set __fn1_a __tmp18
    76 pop bank1 __fn1_n
-    * set __tmp19 __fn1retval
    77 jump __label12 always
    78 label __label11
    79 label __label12
 
   106 pop bank1 __fn2_a
   107 pop bank1 __fn2_b
   108 pop bank1 __fn2_n
-    * set __tmp27 __fn2retval
   109 jump __label16 always
   110 label __label15
   111 label __label16

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-3 instructions):
 
    49 set __fn0_b __tmp10
    50 print __fn0_a
    51 print __fn0_b
-    * set __fn0retval __fn0_b
    52 label __label6
    53 return bank1
    54 end
 
    80 set __fn1_b __tmp20
    81 print __fn1_a
    82 print __fn1_b
-    * set __fn1retval __fn1_b
    83 label __label10
    84 return bank1
    85 end
 
   111 set __fn2_b __tmp28
   112 print __fn2_a
   113 print __fn2_b
-    * set __fn2retval __fn2_b
   114 label __label14
   115 return bank1
   116 end

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-6 instructions):
 
    24 label __label0
    25 print __fn0_a
    26 print __fn0_b
-    * op add __tmp3 __fn0_a 1
-    * set __fn0_a __tmp3
+   27 op add __fn0_a __fn0_a 1
    28 op greaterThan __tmp4 __fn0_n 0
    29 jump __label7 equal __tmp4 false
    30 op sub __tmp6 __fn0_n 1
 
    44 jump __label8 always
    45 label __label7
    46 label __label8
-    * op add __tmp10 __fn0_b 1
-    * set __fn0_b __tmp10
+   47 op add __fn0_b __fn0_b 1
    48 print __fn0_a
    49 print __fn0_b
    50 label __label6
 
    53 label __label1
    54 print __fn1_a
    55 print __fn1_b
-    * op add __tmp11 __fn1_a 1
-    * set __fn1_a __tmp11
+   56 op add __fn1_a __fn1_a 1
    57 op greaterThan __tmp12 __fn1_n 0
    58 jump __label11 equal __tmp12 false
    59 op sub __tmp14 __fn1_n 1
 
    73 jump __label12 always
    74 label __label11
    75 label __label12
-    * op add __tmp20 __fn1_b 1
-    * set __fn1_b __tmp20
+   76 op add __fn1_b __fn1_b 1
    77 print __fn1_a
    78 print __fn1_b
    79 label __label10
 
    82 label __label2
    83 print __fn2_a
    84 print __fn2_b
-    * op add __tmp21 __fn2_a 1
-    * set __fn2_a __tmp21
+   85 op add __fn2_a __fn2_a 1
    86 op greaterThan __tmp22 __fn2_n 0
    87 jump __label15 equal __tmp22 false
    88 op sub __tmp24 __fn2_n 1
 
   102 jump __label16 always
   103 label __label15
   104 label __label16
-    * op add __tmp28 __fn2_b 1
-    * set __fn2_b __tmp28
+  105 op add __fn2_b __fn2_b 1
   106 print __fn2_a
   107 print __fn2_b
   108 label __label14

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
    25 print __fn0_a
    26 print __fn0_b
    27 op add __fn0_a __fn0_a 1
-    * op greaterThan __tmp4 __fn0_n 0
-    * jump __label7 equal __tmp4 false
+   28 jump __label7 lessThanEq __fn0_n 0
    29 op sub __tmp6 __fn0_n 1
    30 push bank1 __fn0_n
    31 push bank1 __fn0_a
 
    53 print __fn1_a
    54 print __fn1_b
    55 op add __fn1_a __fn1_a 1
-    * op greaterThan __tmp12 __fn1_n 0
-    * jump __label11 equal __tmp12 false
+   56 jump __label11 lessThanEq __fn1_n 0
    57 op sub __tmp14 __fn1_n 1
    58 push bank1 __fn1_n
    59 set __tmp15 __fn1_b
 
    81 print __fn2_a
    82 print __fn2_b
    83 op add __fn2_a __fn2_a 1
-    * op greaterThan __tmp22 __fn2_n 0
-    * jump __label15 equal __tmp22 false
+   84 jump __label15 lessThanEq __fn2_n 0
    85 op sub __tmp24 __fn2_n 1
    86 push bank1 __fn2_n
    87 push bank1 __fn2_b

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-3 instructions):
 
    40 pop bank1 __fn0_b
    41 pop bank1 __fn0_a
    42 pop bank1 __fn0_n
-    * jump __label8 always
    43 label __label7
    44 label __label8
    45 op add __fn0_b __fn0_b 1
 
    67 set __fn1_b __tmp17
    68 set __fn1_a __tmp18
    69 pop bank1 __fn1_n
-    * jump __label12 always
    70 label __label11
    71 label __label12
    72 op add __fn1_b __fn1_b 1
 
    94 pop bank1 __fn2_a
    95 pop bank1 __fn2_b
    96 pop bank1 __fn2_n
-    * jump __label16 always
    97 label __label15
    98 label __label16
    99 op add __fn2_b __fn2_b 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    32 push bank1 __fn0_b
    33 set __tmp7 __fn0_b
    34 set __tmp8 __fn0_a
-    * set __fn0_n __tmp6
-    * set __fn0_a __tmp7
+   35 op sub __fn0_n __fn0_n 1
+   36 set __fn0_a __fn0_b
    37 set __fn0_b __tmp8
    38 callrec bank1 __label0 __label9 __fn0retval
    39 label __label9
 
    57 push bank1 __fn1_n
    58 set __tmp15 __fn1_b
    59 set __tmp16 __fn1_a
-    * set __fn1_n __tmp14
-    * set __fn1_a __tmp15
+   60 op sub __fn1_n __fn1_n 1
+   61 set __fn1_a __fn1_b
    62 set __fn1_b __tmp16
    63 callrec bank1 __label1 __label13 __fn1retval
    64 label __label13
    65 set __tmp17 __fn1_a
    66 set __tmp18 __fn1_b
-    * set __fn1_b __tmp17
+   67 set __fn1_b __fn1_a
    68 set __fn1_a __tmp18
    69 pop bank1 __fn1_n
    70 label __label11
 
    86 push bank1 __fn2_a
    87 set __tmp25 __fn2_b
    88 set __tmp26 __fn2_a
-    * set __fn2_n __tmp24
-    * set __fn2_a __tmp25
+   89 op sub __fn2_n __fn2_n 1
+   90 set __fn2_a __fn2_b
    91 set __fn2_b __tmp26
    92 callrec bank1 __label2 __label17 __fn2retval
    93 label __label17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
    26 print __fn0_b
    27 op add __fn0_a __fn0_a 1
    28 jump __label7 lessThanEq __fn0_n 0
-    * op sub __tmp6 __fn0_n 1
    29 push bank1 __fn0_n
    30 push bank1 __fn0_a
    31 push bank1 __fn0_b
-    * set __tmp7 __fn0_b
    32 set __tmp8 __fn0_a
    33 op sub __fn0_n __fn0_n 1
    34 set __fn0_a __fn0_b
 
    51 print __fn1_b
    52 op add __fn1_a __fn1_a 1
    53 jump __label11 lessThanEq __fn1_n 0
-    * op sub __tmp14 __fn1_n 1
    54 push bank1 __fn1_n
-    * set __tmp15 __fn1_b
    55 set __tmp16 __fn1_a
    56 op sub __fn1_n __fn1_n 1
    57 set __fn1_a __fn1_b
    58 set __fn1_b __tmp16
    59 callrec bank1 __label1 __label13 __fn1retval
    60 label __label13
-    * set __tmp17 __fn1_a
    61 set __tmp18 __fn1_b
    62 set __fn1_b __fn1_a
    63 set __fn1_a __tmp18
 
    75 print __fn2_b
    76 op add __fn2_a __fn2_a 1
    77 jump __label15 lessThanEq __fn2_n 0
-    * op sub __tmp24 __fn2_n 1
    78 push bank1 __fn2_n
    79 push bank1 __fn2_b
    80 push bank1 __fn2_a
-    * set __tmp25 __fn2_b
    81 set __tmp26 __fn2_a
    82 op sub __fn2_n __fn2_n 1
    83 set __fn2_a __fn2_b

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-3 instructions):
 
    45 print __fn0_b
    46 label __label6
    47 return bank1
-    * end
    48 label __label1
    49 print __fn1_a
    50 print __fn1_b
 
    68 print __fn1_b
    69 label __label10
    70 return bank1
-    * end
    71 label __label2
    72 print __fn2_a
    73 print __fn2_b
 
    92 print __fn2_b
    93 label __label14
    94 return bank1
-    * end

Modifications by Final phase, Stack Optimization, iteration 1 (-12 instructions):
 
    26 print __fn0_b
    27 op add __fn0_a __fn0_a 1
    28 jump __label7 lessThanEq __fn0_n 0
-    * push bank1 __fn0_n
    29 push bank1 __fn0_a
    30 push bank1 __fn0_b
    31 set __tmp8 __fn0_a
 
    36 label __label9
    37 pop bank1 __fn0_b
    38 pop bank1 __fn0_a
-    * pop bank1 __fn0_n
    39 label __label7
    40 label __label8
    41 op add __fn0_b __fn0_b 1
 
    48 print __fn1_b
    49 op add __fn1_a __fn1_a 1
    50 jump __label11 lessThanEq __fn1_n 0
-    * push bank1 __fn1_n
    51 set __tmp16 __fn1_a
    52 op sub __fn1_n __fn1_n 1
    53 set __fn1_a __fn1_b
 
    57 set __tmp18 __fn1_b
    58 set __fn1_b __fn1_a
    59 set __fn1_a __tmp18
-    * pop bank1 __fn1_n
    60 label __label11
    61 label __label12
    62 op add __fn1_b __fn1_b 1
 
    69 print __fn2_b
    70 op add __fn2_a __fn2_a 1
    71 jump __label15 lessThanEq __fn2_n 0
-    * push bank1 __fn2_n
    72 push bank1 __fn2_b
    73 push bank1 __fn2_a
    74 set __tmp26 __fn2_a
 
    79 label __label17
    80 pop bank1 __fn2_a
    81 pop bank1 __fn2_b
-    * pop bank1 __fn2_n
    82 label __label15
    83 label __label16
    84 op add __fn2_b __fn2_b 1

Final code before resolving virtual instructions:

set __sp 0
assertflush
set __fn0_n 3
set __fn0_a 0
set __fn0_b 0
callrec bank1 __label0 __label3 __fn0retval
label __label3
assertprints "0001111223221211" "foo"
assertflush
set __fn1_n 3
set __fn1_a 0
set __fn1_b 0
callrec bank1 __label1 __label4 __fn1retval
label __label4
assertprints "0001111223333444" "bar"
assertflush
set __fn2_n 3
set __fn2_a 0
set __fn2_b 0
callrec bank1 __label2 __label5 __fn2retval
label __label5
assertprints "0001111223221211" "baz"
stop
end
label __label0
print __fn0_a
print __fn0_b
op add __fn0_a __fn0_a 1
jump __label7 lessThanEq __fn0_n 0
push bank1 __fn0_a
push bank1 __fn0_b
set __tmp8 __fn0_a
op sub __fn0_n __fn0_n 1
set __fn0_a __fn0_b
set __fn0_b __tmp8
callrec bank1 __label0 __label9 __fn0retval
label __label9
pop bank1 __fn0_b
pop bank1 __fn0_a
label __label7
op add __fn0_b __fn0_b 1
print __fn0_a
print __fn0_b
return bank1
label __label1
print __fn1_a
print __fn1_b
op add __fn1_a __fn1_a 1
jump __label11 lessThanEq __fn1_n 0
set __tmp16 __fn1_a
op sub __fn1_n __fn1_n 1
set __fn1_a __fn1_b
set __fn1_b __tmp16
callrec bank1 __label1 __label13 __fn1retval
label __label13
set __tmp18 __fn1_b
set __fn1_b __fn1_a
set __fn1_a __tmp18
label __label11
op add __fn1_b __fn1_b 1
print __fn1_a
print __fn1_b
return bank1
label __label2
print __fn2_a
print __fn2_b
op add __fn2_a __fn2_a 1
jump __label15 lessThanEq __fn2_n 0
push bank1 __fn2_b
push bank1 __fn2_a
set __tmp26 __fn2_a
op sub __fn2_n __fn2_n 1
set __fn2_a __fn2_b
set __fn2_b __tmp26
callrec bank1 __label2 __label17 __fn2retval
label __label17
pop bank1 __fn2_a
pop bank1 __fn2_b
label __label15
op add __fn2_b __fn2_b 1
print __fn2_a
print __fn2_b
return bank1
