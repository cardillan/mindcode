   142 instructions before optimizations.
     6 instructions eliminated by Temp Variables Elimination.
    15 instructions eliminated by Dead Code Elimination (5 iterations).
     3 instructions eliminated by Jump Optimization (3 iterations).
     3 instructions eliminated by Single Step Elimination (4 iterations).
     7 instructions eliminated by Data Flow Optimization (4 iterations).
     3 instructions eliminated by Unreachable Code Elimination.
    12 instructions eliminated by Stack Optimization.
    93 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-9 instructions):
 
     4 set __fn0_b 0
     5 callrec bank1 __label0 __label3 __fn0retval
     6 label __label3
-    * set __tmp0 __fn0retval
     7 print "B"
     8 set __fn1_n 3
     9 set __fn1_a 0
    10 set __fn1_b 0
    11 callrec bank1 __label1 __label4 __fn1retval
    12 label __label4
-    * set __tmp1 __fn1retval
    13 print "C"
    14 set __fn2_n 3
    15 set __fn2_a 0
    16 set __fn2_b 0
    17 callrec bank1 __label2 __label5 __fn2retval
    18 label __label5
-    * set __tmp2 __fn2retval
    19 end
    20 label __label0
    21 print __fn0_a
 
    39 pop bank1 __fn0_a
    40 pop bank1 __fn0_n
    41 set __tmp9 __fn0retval
-    * set __tmp5 __tmp9
    42 jump __label8 always
    43 label __label7
-    * set __tmp5 null
    44 label __label8
    45 op add __tmp10 __fn0_b 1
    46 set __fn0_b __tmp10
 
    72 set __fn1_a __tmp18
    73 pop bank1 __fn1_n
    74 set __tmp19 __fn1retval
-    * set __tmp13 __tmp19
    75 jump __label12 always
    76 label __label11
-    * set __tmp13 null
    77 label __label12
    78 op add __tmp20 __fn1_b 1
    79 set __fn1_b __tmp20
 
   105 pop bank1 __fn2_b
   106 pop bank1 __fn2_n
   107 set __tmp27 __fn2retval
-    * set __tmp23 __tmp27
   108 jump __label16 always
   109 label __label15
-    * set __tmp23 null
   110 label __label16
   111 op add __tmp28 __fn2_b 1
   112 set __fn2_b __tmp28

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-3 instructions):
 
    38 pop bank1 __fn0_b
    39 pop bank1 __fn0_a
    40 pop bank1 __fn0_n
-    * set __tmp9 __fn0retval
    41 jump __label8 always
    42 label __label7
    43 label __label8
 
    70 set __fn1_b __tmp17
    71 set __fn1_a __tmp18
    72 pop bank1 __fn1_n
-    * set __tmp19 __fn1retval
    73 jump __label12 always
    74 label __label11
    75 label __label12
 
   102 pop bank1 __fn2_a
   103 pop bank1 __fn2_b
   104 pop bank1 __fn2_n
-    * set __tmp27 __fn2retval
   105 jump __label16 always
   106 label __label15
   107 label __label16

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-3 instructions):
 
    45 set __fn0_b __tmp10
    46 print __fn0_a
    47 print __fn0_b
-    * set __fn0retval __fn0_b
    48 label __label6
    49 return bank1
    50 end
 
    76 set __fn1_b __tmp20
    77 print __fn1_a
    78 print __fn1_b
-    * set __fn1retval __fn1_b
    79 label __label10
    80 return bank1
    81 end
 
   107 set __fn2_b __tmp28
   108 print __fn2_a
   109 print __fn2_b
-    * set __fn2retval __fn2_b
   110 label __label14
   111 return bank1
   112 end

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-6 instructions):
 
    20 label __label0
    21 print __fn0_a
    22 print __fn0_b
-    * op add __tmp3 __fn0_a 1
-    * set __fn0_a __tmp3
+   23 op add __fn0_a __fn0_a 1
    24 op greaterThan __tmp4 __fn0_n 0
    25 jump __label7 equal __tmp4 false
    26 op sub __tmp6 __fn0_n 1
 
    40 jump __label8 always
    41 label __label7
    42 label __label8
-    * op add __tmp10 __fn0_b 1
-    * set __fn0_b __tmp10
+   43 op add __fn0_b __fn0_b 1
    44 print __fn0_a
    45 print __fn0_b
    46 label __label6
 
    49 label __label1
    50 print __fn1_a
    51 print __fn1_b
-    * op add __tmp11 __fn1_a 1
-    * set __fn1_a __tmp11
+   52 op add __fn1_a __fn1_a 1
    53 op greaterThan __tmp12 __fn1_n 0
    54 jump __label11 equal __tmp12 false
    55 op sub __tmp14 __fn1_n 1
 
    69 jump __label12 always
    70 label __label11
    71 label __label12
-    * op add __tmp20 __fn1_b 1
-    * set __fn1_b __tmp20
+   72 op add __fn1_b __fn1_b 1
    73 print __fn1_a
    74 print __fn1_b
    75 label __label10
 
    78 label __label2
    79 print __fn2_a
    80 print __fn2_b
-    * op add __tmp21 __fn2_a 1
-    * set __fn2_a __tmp21
+   81 op add __fn2_a __fn2_a 1
    82 op greaterThan __tmp22 __fn2_n 0
    83 jump __label15 equal __tmp22 false
    84 op sub __tmp24 __fn2_n 1
 
    98 jump __label16 always
    99 label __label15
   100 label __label16
-    * op add __tmp28 __fn2_b 1
-    * set __fn2_b __tmp28
+  101 op add __fn2_b __fn2_b 1
   102 print __fn2_a
   103 print __fn2_b
   104 label __label14

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
    21 print __fn0_a
    22 print __fn0_b
    23 op add __fn0_a __fn0_a 1
-    * op greaterThan __tmp4 __fn0_n 0
-    * jump __label7 equal __tmp4 false
+   24 jump __label7 lessThanEq __fn0_n 0
    25 op sub __tmp6 __fn0_n 1
    26 push bank1 __fn0_n
    27 push bank1 __fn0_a
 
    49 print __fn1_a
    50 print __fn1_b
    51 op add __fn1_a __fn1_a 1
-    * op greaterThan __tmp12 __fn1_n 0
-    * jump __label11 equal __tmp12 false
+   52 jump __label11 lessThanEq __fn1_n 0
    53 op sub __tmp14 __fn1_n 1
    54 push bank1 __fn1_n
    55 set __tmp15 __fn1_b
 
    77 print __fn2_a
    78 print __fn2_b
    79 op add __fn2_a __fn2_a 1
-    * op greaterThan __tmp22 __fn2_n 0
-    * jump __label15 equal __tmp22 false
+   80 jump __label15 lessThanEq __fn2_n 0
    81 op sub __tmp24 __fn2_n 1
    82 push bank1 __fn2_n
    83 push bank1 __fn2_b

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-3 instructions):
 
    36 pop bank1 __fn0_b
    37 pop bank1 __fn0_a
    38 pop bank1 __fn0_n
-    * jump __label8 always
    39 label __label7
    40 label __label8
    41 op add __fn0_b __fn0_b 1
 
    63 set __fn1_b __tmp17
    64 set __fn1_a __tmp18
    65 pop bank1 __fn1_n
-    * jump __label12 always
    66 label __label11
    67 label __label12
    68 op add __fn1_b __fn1_b 1
 
    90 pop bank1 __fn2_a
    91 pop bank1 __fn2_b
    92 pop bank1 __fn2_n
-    * jump __label16 always
    93 label __label15
    94 label __label16
    95 op add __fn2_b __fn2_b 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    28 push bank1 __fn0_b
    29 set __tmp7 __fn0_b
    30 set __tmp8 __fn0_a
-    * set __fn0_n __tmp6
-    * set __fn0_a __tmp7
+   31 op sub __fn0_n __fn0_n 1
+   32 set __fn0_a __fn0_b
    33 set __fn0_b __tmp8
    34 callrec bank1 __label0 __label9 __fn0retval
    35 label __label9
 
    53 push bank1 __fn1_n
    54 set __tmp15 __fn1_b
    55 set __tmp16 __fn1_a
-    * set __fn1_n __tmp14
-    * set __fn1_a __tmp15
+   56 op sub __fn1_n __fn1_n 1
+   57 set __fn1_a __fn1_b
    58 set __fn1_b __tmp16
    59 callrec bank1 __label1 __label13 __fn1retval
    60 label __label13
    61 set __tmp17 __fn1_a
    62 set __tmp18 __fn1_b
-    * set __fn1_b __tmp17
+   63 set __fn1_b __fn1_a
    64 set __fn1_a __tmp18
    65 pop bank1 __fn1_n
    66 label __label11
 
    82 push bank1 __fn2_a
    83 set __tmp25 __fn2_b
    84 set __tmp26 __fn2_a
-    * set __fn2_n __tmp24
-    * set __fn2_a __tmp25
+   85 op sub __fn2_n __fn2_n 1
+   86 set __fn2_a __fn2_b
    87 set __fn2_b __tmp26
    88 callrec bank1 __label2 __label17 __fn2retval
    89 label __label17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
    22 print __fn0_b
    23 op add __fn0_a __fn0_a 1
    24 jump __label7 lessThanEq __fn0_n 0
-    * op sub __tmp6 __fn0_n 1
    25 push bank1 __fn0_n
    26 push bank1 __fn0_a
    27 push bank1 __fn0_b
-    * set __tmp7 __fn0_b
    28 set __tmp8 __fn0_a
    29 op sub __fn0_n __fn0_n 1
    30 set __fn0_a __fn0_b
 
    47 print __fn1_b
    48 op add __fn1_a __fn1_a 1
    49 jump __label11 lessThanEq __fn1_n 0
-    * op sub __tmp14 __fn1_n 1
    50 push bank1 __fn1_n
-    * set __tmp15 __fn1_b
    51 set __tmp16 __fn1_a
    52 op sub __fn1_n __fn1_n 1
    53 set __fn1_a __fn1_b
    54 set __fn1_b __tmp16
    55 callrec bank1 __label1 __label13 __fn1retval
    56 label __label13
-    * set __tmp17 __fn1_a
    57 set __tmp18 __fn1_b
    58 set __fn1_b __fn1_a
    59 set __fn1_a __tmp18
 
    71 print __fn2_b
    72 op add __fn2_a __fn2_a 1
    73 jump __label15 lessThanEq __fn2_n 0
-    * op sub __tmp24 __fn2_n 1
    74 push bank1 __fn2_n
    75 push bank1 __fn2_b
    76 push bank1 __fn2_a
-    * set __tmp25 __fn2_b
    77 set __tmp26 __fn2_a
    78 op sub __fn2_n __fn2_n 1
    79 set __fn2_a __fn2_b

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-3 instructions):
 
    41 print __fn0_b
    42 label __label6
    43 return bank1
-    * end
    44 label __label1
    45 print __fn1_a
    46 print __fn1_b
 
    64 print __fn1_b
    65 label __label10
    66 return bank1
-    * end
    67 label __label2
    68 print __fn2_a
    69 print __fn2_b
 
    88 print __fn2_b
    89 label __label14
    90 return bank1
-    * end

Modifications by Final phase, Stack Optimization, iteration 1 (-12 instructions):
 
    22 print __fn0_b
    23 op add __fn0_a __fn0_a 1
    24 jump __label7 lessThanEq __fn0_n 0
-    * push bank1 __fn0_n
    25 push bank1 __fn0_a
    26 push bank1 __fn0_b
    27 set __tmp8 __fn0_a
 
    32 label __label9
    33 pop bank1 __fn0_b
    34 pop bank1 __fn0_a
-    * pop bank1 __fn0_n
    35 label __label7
    36 label __label8
    37 op add __fn0_b __fn0_b 1
 
    44 print __fn1_b
    45 op add __fn1_a __fn1_a 1
    46 jump __label11 lessThanEq __fn1_n 0
-    * push bank1 __fn1_n
    47 set __tmp16 __fn1_a
    48 op sub __fn1_n __fn1_n 1
    49 set __fn1_a __fn1_b
 
    53 set __tmp18 __fn1_b
    54 set __fn1_b __fn1_a
    55 set __fn1_a __tmp18
-    * pop bank1 __fn1_n
    56 label __label11
    57 label __label12
    58 op add __fn1_b __fn1_b 1
 
    65 print __fn2_b
    66 op add __fn2_a __fn2_a 1
    67 jump __label15 lessThanEq __fn2_n 0
-    * push bank1 __fn2_n
    68 push bank1 __fn2_b
    69 push bank1 __fn2_a
    70 set __tmp26 __fn2_a
 
    75 label __label17
    76 pop bank1 __fn2_a
    77 pop bank1 __fn2_b
-    * pop bank1 __fn2_n
    78 label __label15
    79 label __label16
    80 op add __fn2_b __fn2_b 1

Final code before resolving virtual instructions:

set __sp 0
print "A"
set __fn0_n 3
set __fn0_a 0
set __fn0_b 0
callrec bank1 __label0 __label3 __fn0retval
label __label3
print "B"
set __fn1_n 3
set __fn1_a 0
set __fn1_b 0
callrec bank1 __label1 __label4 __fn1retval
label __label4
print "C"
set __fn2_n 3
set __fn2_a 0
set __fn2_b 0
callrec bank1 __label2 __label5 __fn2retval
label __label5
end
label __label0
print __fn0_a
print __fn0_b
op add __fn0_a __fn0_a 1
jump __label7 lessThanEq __fn0_n 0
push bank1 __fn0_a
push bank1 __fn0_b
set __tmp8 __fn0_a
op sub __fn0_n __fn0_n 1
set __fn0_a __fn0_b
set __fn0_b __tmp8
callrec bank1 __label0 __label9 __fn0retval
label __label9
pop bank1 __fn0_b
pop bank1 __fn0_a
label __label7
op add __fn0_b __fn0_b 1
print __fn0_a
print __fn0_b
return bank1
label __label1
print __fn1_a
print __fn1_b
op add __fn1_a __fn1_a 1
jump __label11 lessThanEq __fn1_n 0
set __tmp16 __fn1_a
op sub __fn1_n __fn1_n 1
set __fn1_a __fn1_b
set __fn1_b __tmp16
callrec bank1 __label1 __label13 __fn1retval
label __label13
set __tmp18 __fn1_b
set __fn1_b __fn1_a
set __fn1_a __tmp18
label __label11
op add __fn1_b __fn1_b 1
print __fn1_a
print __fn1_b
return bank1
label __label2
print __fn2_a
print __fn2_b
op add __fn2_a __fn2_a 1
jump __label15 lessThanEq __fn2_n 0
push bank1 __fn2_b
push bank1 __fn2_a
set __tmp26 __fn2_a
op sub __fn2_n __fn2_n 1
set __fn2_a __fn2_b
set __fn2_b __tmp26
callrec bank1 __label2 __label17 __fn2retval
label __label17
pop bank1 __fn2_a
pop bank1 __fn2_b
label __label15
op add __fn2_b __fn2_b 1
print __fn2_a
print __fn2_b
return bank1
