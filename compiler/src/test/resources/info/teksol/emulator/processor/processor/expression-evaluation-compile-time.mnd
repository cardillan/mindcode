assertEquals(5,             2 +  3,                    "add");
assertEquals(1,             7 -  6,                    "sub");
assertEquals(6,             3 *  2,                    "mul");
assertEquals(1.5,           6 /  4,                    "div");
assertEquals(1e-5,          1 /  1e5,                  "div exp");
assertEquals(1,             6 \  4,                    "idiv");
assertEquals(2,             6 %  4,                    "mod");
assertEquals(16,            2 ** 4,                    "pow");

assertEquals(true,          5 == 5,                    "equal 1");
assertEquals(false,         5 == 6,                    "equal 2");
assertEquals(true,          0 == null,                 "equal null");
assertEquals(false,         5 != 5,                    "notEqual 1");
assertEquals(true,          5 != 6,                    "notEqual 2");
assertEquals(false,         0 != null,                 "notEqual null");

assertEquals(false,         1 && 0,                    "land 1");
assertEquals(true,          1 && 2,                    "land 2");

assertEquals(true,          0 <  1,                    "lessThan 1");
assertEquals(false,         1 <  0,                    "lessThan 2");

assertEquals(true,          1 <= 1,                    "lessThanEq 1");
assertEquals(false,         1 <= 0,                    "lessThanEq 2");

assertEquals(true,          2 >  1,                    "greaterThan 1");
assertEquals(false,         1 >  2,                    "greaterThan 2");

assertEquals(true,          1 >= 1,                    "greaterThanEq 1");
assertEquals(false,         1 >= 2,                    "greaterThanEq 2");

assertEquals(false,         0    === null,             "strictEqual 1");
assertEquals(true,          null === null,             "strictEqual 2");

assertEquals(4,             1 << 2,                    "shl");
assertEquals(2,             9 >> 2,                    "shr");

assertEquals(3,             1 |  2,                    "or");
assertEquals(2,             3 &  2,                    "and");
assertEquals(1,             3 ^  2,                    "xor");

// Small values work because long is signed
assertEquals(-1,            ~0,                        "not 1");
assertEquals(-65536,        ~65535,                    "not 2");

a = 0xabcdefabcdefabc;
assertEquals(-(a + 1),      ~a,                        "not 3");

assertEquals(4,             max(2, 4),                 "max");
assertEquals(2,             min(2, 4),                 "min");

assertEquals(2,             abs(-2),                   "abs");
assertEquals(1,             log(2.718281828459045),    "log");
assertEquals(1,             log10(10),                 "log10");

assertEquals(2,             floor(2.5),                "floor");
assertEquals(3,             ceil(2.5),                 "ceil");
assertEquals(4,             sqrt(16),                  "sqrt");

assertEquals(45,            angle(1, 1),               "angle");
assertEquals(90,            angleDiff(45, 135),        "angleDiff");

// Mindcode extensions
assertEquals(-8,            -8,                        "unary minus");
assertEquals( 1,            !0,                        "boolean negation 1");
assertEquals( 0,            !1,                        "boolean negation 2");
assertEquals( 0,            !2,                        "boolean negation 3");

// Compound assignments
a = 2; assertEquals(   16,  a **= 4,                   "**=");
a = 2; assertEquals(    8,  a *= 4,                    "*=");
a = 6; assertEquals(  1.5,  a /= 4,                    "/=");
a = 6; assertEquals(    1,  a \= 4,                    "\=");
a = 6; assertEquals(    2,  a %= 4,                    "%=");
a = 4; assertEquals(    6,  a += 2,                    "+=");
a = 4; assertEquals(    2,  a -= 2,                    "-=");
a = 1; assertEquals(    4,  a <<= 2,                   "<<=");
a = 9; assertEquals(    2,  a >>= 2,                   ">>=");
a = 1; assertEquals(    3,  a |= 2,                    "|=");
a = 3; assertEquals(    2,  a &= 2,                    "&=");
a = 3; assertEquals(    1,  a ^= 2,                    "^=");
a = 1; assertEquals(false,  a &&= 0,                   "&&=");
a = 1; assertEquals( true,  a &&= 2,                   "&&=");
a = 0; assertEquals( true,  a ||= 2,                   "||=");

// TODO: add angle, len, trig functions. Rand??

stopProcessor();
