// There's no 1000 instruction limit on processor emulator
inline def eval(actual, expected, operation)
    if actual == expected then
        print("ok");
    else 
        println($"Wrong operation $operation: expected $expected, but was $actual");
    end;
end;

eval(2 +  3, 5,             "add");
eval(7 -  6, 1,             "sub");
eval(3 *  2, 6,             "mul");
eval(6 /  4, 1.5,           "div");
eval(1 /  1e5, 1e-5,        "div exp");
eval(6 \  4, 1,             "idiv");
eval(6 %  4, 2,             "mod");
eval(2 ** 4, 16,            "pow");

eval(5 == 5, true,          "equal");
eval(5 == 6, false,         "equal");
eval(0 == null, true,       "equal null");

eval(5 != 5, false,         "notEqual");
eval(5 != 6, true,          "notEqual");
eval(0 != null, false,      "notEqual null");

eval(1 && 0, false,         "land");
eval(1 && 2, true,          "land");
 
eval(0 <  1, true,          "lessThan");
eval(1 <  0, false,         "lessThan");

eval(1 <= 1, true,          "lessThanEq");
eval(1 <= 0, false,         "lessThanEq");

eval(2 >  1, true,          "greaterThan");
eval(1 >  2, false,         "greaterThan");

eval(1 >= 1, true,          "greaterThanEq");
eval(1 >= 2, false,         "greaterThanEq");

eval(0    === null, false,  "strictEqual 0");
eval(null === null, true,   "strictEqual null");

eval(1 << 2, 4,             "shl");
eval(9 >> 2, 2,             "shr");

eval(1 |  2, 3,             "or");
eval(3 &  2, 2,             "and");
eval(3 ^  2, 1,             "xor");

// Small values work because long is signed
eval(~0,     -1,            "not");
eval(~65535, -65536,        "not");

a = 0xabcdefabcdefabc;
eval(~a, -(a + 1),          "not");

eval(max(2, 4), 4,          "max");
eval(min(2, 4), 2,          "min");

eval(abs(-2), 2,            "abs");
eval(log(2.718281828459045), 1, "log");
eval(log10(10),  1,         "log10");

eval(floor(2.5), 2,         "floor");
eval(ceil(2.5),  3,         "ceil");
eval(sqrt(16),   4,         "sqrt");

eval(angle(1, 1),        45, "angle");
eval(angleDiff(45, 135), 90, "angleDiff");

// Mindcode extensions
eval(-8, -8, "unary minus");
eval(!0,  1, "boolean negation");
eval(!1,  0, "boolean negation");
eval(!2,  0, "boolean negation");

// Compound assignments
a = 2; eval(a **= 4,    16, "**=");
a = 2; eval(a *= 4,      8, "*=");
a = 6; eval(a /= 4,    1.5, "/=");
a = 6; eval(a \= 4,      1, "\=");
a = 6; eval(a %= 4,      2, "%=");
a = 4; eval(a += 2,      6, "+=");
a = 4; eval(a -= 2,      2, "-=");
a = 1; eval(a <<= 2,     4, "<<=");
a = 9; eval(a >>= 2,     2, ">>=");
a = 1; eval(a |= 2,      3, "|=");
a = 3; eval(a &= 2,      2, "&=");
a = 3; eval(a ^= 2,      1, "^=");
a = 1; eval(a &&= 0, false, "&&=");
a = 1; eval(a &&= 2,  true, "&&=");
a = 0; eval(a ||= 2,  true, "||=");

// TODO: add len, trig functions. Rand??
