    95 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     6 instructions eliminated by Dead Code Elimination (3 iterations).
     2 instructions eliminated by Jump Optimization (3 iterations).
     2 instructions eliminated by Single Step Elimination (4 iterations).
    22 instructions eliminated by Data Flow Optimization (2 passes, 9 iterations).
     1 instructions modified by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     2 instructions eliminated by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
     2 instructions added by Return Optimization (4 iterations).
     1 return statements optimized by Return Optimization.
     1 instructions eliminated by Unreachable Code Elimination.
    59 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 923):
  * Loop Unrolling: unroll iteration loop at line 4              cost     0, benefit       23.0, efficiency   Infinity (-19 instructions)
    Return Optimization: optimize return at line 14              cost     2, benefit       13.0, efficiency        6.5

Pass 1: speed optimization selection (cost limit 942):
  * Return Optimization: optimize return at line 14              cost     2, benefit       13.0, efficiency        6.5 (+2 instructions)

Final code before resolving virtual instructions:

set __sp 16
write 200 bank1 0
write 100 bank1 1
write 50 bank1 2
write 20 bank1 3
write 10 bank1 4
write 5 bank1 5
write 2 bank1 6
write 1 bank1 7
print 41
set __fn0_amount 20
set __fn0_index 1
callrec bank1 __label0 __label14 __fn0retval
label __label14
print __fn0retval
end
label __label0
jump __label18 notEqual __fn0_amount 0
set __fn0retval 1
return bank1
label __label18
set __fn0_result 0
set __fn0_i __fn0_index
jump __label22 greaterThanEq __fn0_index 8
label __label26
read __fn0_p bank1 __fn0_i
jump __label23 greaterThan __fn0_p __fn0_amount
push bank1 __fn0_amount
push bank1 __fn0_index
push bank1 __fn0_result
push bank1 __fn0_i
push bank1 __fn0_p
op sub __fn0_amount __fn0_amount __fn0_p
set __fn0_index __fn0_i
callrec bank1 __label0 __label25 __fn0retval
label __label25
pop bank1 __fn0_p
pop bank1 __fn0_i
pop bank1 __fn0_result
pop bank1 __fn0_index
pop bank1 __fn0_amount
op add __fn0_result __fn0_result __fn0retval
label __label23
op add __fn0_i __fn0_i 1
jump __label26 lessThan __fn0_i 8
label __label22
set __fn0retval __fn0_result
return bank1
