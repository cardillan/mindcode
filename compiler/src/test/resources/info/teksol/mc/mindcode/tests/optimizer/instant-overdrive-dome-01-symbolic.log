  1446 instructions before optimizations.
    43 instructions eliminated by Temp Variables Elimination (2 iterations).
   261 instructions eliminated by Dead Code Elimination (2 passes, 9 iterations).
     4 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    69 instructions eliminated by Jump Optimization (6 iterations).
    93 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
    11 instructions eliminated by If Expression Optimization (3 iterations).
    83 instructions eliminated by Data Flow Optimization (4 passes, 16 iterations).
     2 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
   152 instructions added by Loop Unrolling (7 iterations).
     2 loops unrolled by Loop Unrolling.
    22 instructions eliminated by Jump Straightening (2 passes, 6 iterations).
    24 instructions updated by Jump Threading.
    19 instructions eliminated by Unreachable Code Elimination (3 iterations).
    75 instructions eliminated by Print Merging.
   920 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 191):
    Replicate loop condition at line 54:5                        size    +1, benefit       25.0, efficiency     25.000
    Replicate loop condition at line 119:5                       size    +1, benefit       25.0, efficiency     25.000
  * Unroll iteration loop at line 169:9                          size    +5, benefit      375.0, efficiency     75.000 (+3 instructions)
  ! Unroll iteration loop at line 201:9                          size  +201, benefit      375.0, efficiency      1.866

Pass 1: speed optimization selection (cost limit 188):
  * Replicate loop condition at line 54:5                        size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
    Replicate loop condition at line 119:5                       size    +1, benefit       25.0, efficiency     25.000
  ! Unroll iteration loop at line 201:9                          size  +201, benefit      375.0, efficiency      1.866

Pass 1: speed optimization selection (cost limit 187):
  * Replicate loop condition at line 119:5                       size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
  ! Unroll iteration loop at line 201:9                          size  +201, benefit      375.0, efficiency      1.866

Pass 1: speed optimization selection (cost limit 186):
  ! Unroll iteration loop at line 201:9                          size  +201, benefit      375.0, efficiency      1.866

Pass 2: speed optimization selection (cost limit 201):
  * Unroll iteration loop at line 201:9                          size  +189, benefit      375.0, efficiency      1.984 (+141 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-173 instructions):
 
    36 call *label0 :locateCore*retaddr :locateCore*retval
    37 jump *label15 equal :locateCore*retval false
    38 jump *label1 always
-    * set *tmp2 null
    39 jump *label16 always
    40 label *label15
-    * set *tmp2 null
    41 label *label16
    42 label *label9
    43 multijump *tmp1 0 0 (m:marker0)
 
   119 label *label35
   120 set *tmp29 null
   121 label *label36
-    * set *tmp27 *tmp29
   122 jump *label34 always
   123 label *label33
   124 set *tmp30 :areUnitsAvailable:occupied
   125 op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
-    * set *tmp27 *tmp30
   126 label *label34
   127 ubind :areUnitsAvailable:type
   128 label *label31
 
   132 op land *tmp34 *tmp31 *tmp33
   133 jump *label30 notEqual *tmp34 false
   134 label *label32
-    * set *tmp12 null
   135 jump *label26 always
   136 label *label25
-    * set *tmp12 null
   137 label *label26
   138 jump *label37 equal :areUnitsAvailable:output false
   139 print :areUnitsAvailable:type
 
   147 jump *label39 equal *tmp36 false
   148 print ", needed: "
   149 print :areUnitsAvailable:needed
-    * set *tmp37 null
   150 jump *label40 always
   151 label *label39
-    * set *tmp37 null
   152 label *label40
   153 print "\n"
-    * set *tmp35 null
   154 jump *label38 always
   155 label *label37
-    * set *tmp35 null
   156 label *label38
   157 set *tmp10 false
   158 jump *label24 always
 
   161 jump *label41 equal *tmp10 false
   162 set *tmp9 UNIT_TYPE
   163 jump *label20 always
-    * set *tmp38 null
   164 jump *label42 always
   165 label *label41
-    * set *tmp38 null
   166 label *label42
   167 set :chooseUnitType:type @flare
   168 op add *tmp39 @counter 1
 
   229 label *label63
   230 set *tmp61 null
   231 label *label64
-    * set *tmp59 *tmp61
   232 jump *label62 always
   233 label *label61
   234 set *tmp62 :areUnitsAvailable.1:occupied
   235 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
-    * set *tmp59 *tmp62
   236 label *label62
   237 ubind :areUnitsAvailable.1:type
   238 label *label59
 
   242 op land *tmp66 *tmp63 *tmp65
   243 jump *label58 notEqual *tmp66 false
   244 label *label60
-    * set *tmp44 null
   245 jump *label54 always
   246 label *label53
-    * set *tmp44 null
   247 label *label54
   248 jump *label65 equal :areUnitsAvailable.1:output false
   249 print :areUnitsAvailable.1:type
 
   257 jump *label67 equal *tmp68 false
   258 print ", needed: "
   259 print :areUnitsAvailable.1:needed
-    * set *tmp69 null
   260 jump *label68 always
   261 label *label67
-    * set *tmp69 null
   262 label *label68
   263 print "\n"
-    * set *tmp67 null
   264 jump *label66 always
   265 label *label65
-    * set *tmp67 null
   266 label *label66
   267 set *tmp42 false
   268 jump *label52 always
 
   277 label *label69
   278 set *tmp70 null
   279 label *label70
-    * set *tmp41 *tmp70
   280 jump *label51 always
   281 label *label50
-    * set *tmp41 null
   282 label *label51
   283 label *label44
   284 multijump *tmp39 0 0 (m:marker1)
 
   304 op equal *tmp72 :rebindUnits:firstUnit null
   305 jump *label72 equal *tmp72 false
   306 end
-    * set *tmp73 null
   307 jump *label73 always
   308 label *label72
-    * set *tmp73 null
   309 label *label73
   310 label *label74
   311 sensor *tmp74 @unit @controller
   312 op equal *tmp75 *tmp74 @this
   313 jump *label77 equal *tmp75 false
-    * set *tmp77 :rebindUnits:count
   314 op add :rebindUnits:count :rebindUnits:count 1
   315 ucontrol flag 1
   316 set .UNIT_S2 .UNIT_P2
 
   326 label *label79
   327 set *tmp80 null
   328 label *label80
-    * set *tmp76 *tmp80
   329 jump *label78 always
   330 label *label77
-    * set *tmp76 null
   331 label *label78
   332 ubind .TYPE
   333 label *label75
 
   337 op land *tmp84 *tmp81 *tmp83
   338 jump *label74 notEqual *tmp84 false
   339 label *label76
-    * set *tmp71 :rebindUnits:count
   340 jump *label71 always
-    * set *tmp71 null
   341 label *label71
   342 # "Function: inline def acquireUnit(in currentUnit)"
   343 set :acquireUnit:currentUnit .UNIT_S1
 
   352 op equal *tmp92 *tmp91 @this
   353 op land *tmp93 *tmp90 *tmp92
   354 jump *label85 equal *tmp93 false
-    * set *tmp86 :rebindUnit:currentUnit
   355 jump *label82 always
   356 set *tmp94 null
   357 jump *label86 always
   358 label *label85
   359 set *tmp94 null
   360 label *label86
-    * set *tmp88 *tmp94
   361 jump *label84 always
   362 label *label83
-    * set *tmp88 null
   363 label *label84
   364 ubind .TYPE
   365 set :rebindUnit:firstUnit @unit
 
   369 sensor *tmp97 @unit @controlled
   370 op equal *tmp98 *tmp97 0
   371 jump *label92 equal *tmp98 false
-    * set *tmp86 @unit
   372 jump *label82 always
-    * set *tmp99 null
   373 jump *label93 always
   374 label *label92
-    * set *tmp99 null
   375 label *label93
   376 ubind .TYPE
   377 label *label90
 
   381 op land *tmp103 *tmp100 *tmp102
   382 jump *label89 notEqual *tmp103 false
   383 label *label91
-    * set *tmp96 null
   384 jump *label88 always
   385 label *label87
-    * set *tmp96 null
   386 label *label88
   387 end
-    * set *tmp86 null
   388 label *label82
   389 ucontrol flag 1
   390 set *tmp85 @unit
 
   405 op equal *tmp111 *tmp110 @this
   406 op land *tmp112 *tmp109 *tmp111
   407 jump *label98 equal *tmp112 false
-    * set *tmp105 :rebindUnit.1:currentUnit
   408 jump *label95 always
   409 set *tmp113 null
   410 jump *label99 always
   411 label *label98
   412 set *tmp113 null
   413 label *label99
-    * set *tmp107 *tmp113
   414 jump *label97 always
   415 label *label96
-    * set *tmp107 null
   416 label *label97
   417 ubind .TYPE
   418 set :rebindUnit.1:firstUnit @unit
 
   422 sensor *tmp116 @unit @controlled
   423 op equal *tmp117 *tmp116 0
   424 jump *label105 equal *tmp117 false
-    * set *tmp105 @unit
   425 jump *label95 always
-    * set *tmp118 null
   426 jump *label106 always
   427 label *label105
-    * set *tmp118 null
   428 label *label106
   429 ubind .TYPE
   430 label *label103
 
   434 op land *tmp122 *tmp119 *tmp121
   435 jump *label102 notEqual *tmp122 false
   436 label *label104
-    * set *tmp115 null
   437 jump *label101 always
   438 label *label100
-    * set *tmp115 null
   439 label *label101
   440 end
-    * set *tmp105 null
   441 label *label95
   442 ucontrol flag 1
   443 set *tmp104 @unit
 
   460 label *label109
   461 set .UNIT_S1 :swap:a
   462 set .UNIT_P1 :swap:b
-    * set *tmp128 null
   463 jump *label108 always
   464 label *label107
-    * set *tmp128 null
   465 label *label108
   466 sensor *tmp129 .UNIT_S1 @itemCapacity
   467 set .UNIT_CAPACITY *tmp129
 
   472 op strictEqual *tmp132 .SPEED null
   473 jump *label110 equal *tmp132 false
   474 stop
-    * set *tmp133 null
   475 jump *label111 always
   476 label *label110
-    * set *tmp133 null
   477 label *label111
   478 # "Function: inline def needsFourUnits(in unit)"
   479 set :needsFourUnits.2:unit .UNIT_S1
 
   504 op equal *tmp150 *tmp149 @this
   505 op land *tmp151 *tmp148 *tmp150
   506 jump *label119 equal *tmp151 false
-    * set *tmp144 :rebindUnit.2:currentUnit
   507 jump *label116 always
   508 set *tmp152 null
   509 jump *label120 always
   510 label *label119
   511 set *tmp152 null
   512 label *label120
-    * set *tmp146 *tmp152
   513 jump *label118 always
   514 label *label117
-    * set *tmp146 null
   515 label *label118
   516 ubind .TYPE
   517 set :rebindUnit.2:firstUnit @unit
 
   521 sensor *tmp155 @unit @controlled
   522 op equal *tmp156 *tmp155 0
   523 jump *label126 equal *tmp156 false
-    * set *tmp144 @unit
   524 jump *label116 always
-    * set *tmp157 null
   525 jump *label127 always
   526 label *label126
-    * set *tmp157 null
   527 label *label127
   528 ubind .TYPE
   529 label *label124
 
   533 op land *tmp161 *tmp158 *tmp160
   534 jump *label123 notEqual *tmp161 false
   535 label *label125
-    * set *tmp154 null
   536 jump *label122 always
   537 label *label121
-    * set *tmp154 null
   538 label *label122
   539 end
-    * set *tmp144 null
   540 label *label116
   541 ucontrol flag 1
   542 set *tmp143 @unit
 
   557 op equal *tmp169 *tmp168 @this
   558 op land *tmp170 *tmp167 *tmp169
   559 jump *label132 equal *tmp170 false
-    * set *tmp163 :rebindUnit.3:currentUnit
   560 jump *label129 always
   561 set *tmp171 null
   562 jump *label133 always
   563 label *label132
   564 set *tmp171 null
   565 label *label133
-    * set *tmp165 *tmp171
   566 jump *label131 always
   567 label *label130
-    * set *tmp165 null
   568 label *label131
   569 ubind .TYPE
   570 set :rebindUnit.3:firstUnit @unit
 
   574 sensor *tmp174 @unit @controlled
   575 op equal *tmp175 *tmp174 0
   576 jump *label139 equal *tmp175 false
-    * set *tmp163 @unit
   577 jump *label129 always
-    * set *tmp176 null
   578 jump *label140 always
   579 label *label139
-    * set *tmp176 null
   580 label *label140
   581 ubind .TYPE
   582 label *label137
 
   586 op land *tmp180 *tmp177 *tmp179
   587 jump *label136 notEqual *tmp180 false
   588 label *label138
-    * set *tmp173 null
   589 jump *label135 always
   590 label *label134
-    * set *tmp173 null
   591 label *label135
   592 end
-    * set *tmp163 null
   593 label *label129
   594 ucontrol flag 1
   595 set *tmp162 @unit
 
   612 label *label143
   613 set .UNIT_S1 :swap.1:a
   614 set .UNIT_P2 :swap.1:b
-    * set *tmp186 null
   615 jump *label142 always
   616 label *label141
-    * set *tmp186 null
   617 label *label142
   618 sensor *tmp187 .UNIT_S2 @firstItem
   619 op equal *tmp188 *tmp187 @phase-fabric
 
   630 label *label146
   631 set .UNIT_S2 :swap.2:a
   632 set .UNIT_P2 :swap.2:b
-    * set *tmp192 null
   633 jump *label145 always
   634 label *label144
-    * set *tmp192 null
   635 label *label145
   636 set .GROUP1 "unit  1"
   637 set .GROUP2 "unit 2"
-    * set *tmp142 .GROUP2
   638 jump *label114 always
   639 label *label113
   640 ubind .UNIT_S2
 
   644 ucontrol unbind
   645 set .UNIT_P2 null
   646 set .GROUP1 "unit"
-    * set *tmp142 .GROUP1
   647 label *label114
   648 op equal *tmp193 .FOUR_UNITS false
   649 sensor *tmp194 .UNIT_S1 @totalItems
 
   684 print "["
   685 print "]"
   686 print "\n"
-    * set *tmp207 null
   687 jump *label152 always
   688 label *label151
   689 print "  dome:  [coral]"
 
   691 print "["
   692 print "]"
   693 print "\n"
-    * set *tmp207 null
   694 label *label152
   695 label *label150
   696 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
 
   709 op equal *tmp214 *tmp213 @this
   710 op land *tmp215 *tmp212 *tmp214
   711 jump *label157 equal *tmp215 false
-    * set *tmp208 :rebindUnit.4:currentUnit
   712 jump *label154 always
   713 set *tmp216 null
   714 jump *label158 always
   715 label *label157
   716 set *tmp216 null
   717 label *label158
-    * set *tmp210 *tmp216
   718 jump *label156 always
   719 label *label155
-    * set *tmp210 null
   720 label *label156
   721 ubind .TYPE
   722 set :rebindUnit.4:firstUnit @unit
 
   726 sensor *tmp219 @unit @controlled
   727 op equal *tmp220 *tmp219 0
   728 jump *label164 equal *tmp220 false
-    * set *tmp208 @unit
   729 jump *label154 always
-    * set *tmp221 null
   730 jump *label165 always
   731 label *label164
-    * set *tmp221 null
   732 label *label165
   733 ubind .TYPE
   734 label *label162
 
   738 op land *tmp225 *tmp222 *tmp224
   739 jump *label161 notEqual *tmp225 false
   740 label *label163
-    * set *tmp218 null
   741 jump *label160 always
   742 label *label159
-    * set *tmp218 null
   743 label *label160
   744 end
-    * set *tmp208 null
   745 label *label154
   746 sensor *tmp226 @unit @flag
   747 set :processUnit:state *tmp226
 
   779 label *label171
   780 set *tmp233 *tmp236
   781 label *label169
-    * set *tmp230 *tmp233
   782 jump *label167 always
   783 label *label166
-    * set *tmp230 null
   784 label *label167
   785 op equal *tmp239 :processUnit:state 2
   786 jump *label174 equal *tmp239 false
 
   813 set :processUnit:distance *tmp252
   814 set *tmp242 :processUnit:distance
   815 label *label177
-    * set *tmp240 *tmp242
   816 jump *label175 always
   817 label *label174
-    * set *tmp240 null
   818 label *label175
   819 op equal *tmp253 :processUnit:state 3
   820 jump *label180 equal *tmp253 false
 
   823 jump *label184 equal :processUnit:supply false
   824 ucontrol itemDrop .DOME .UNIT_CAPACITY
   825 set .MSG ", supplying\n"
-    * set *tmp257 .MSG
   826 jump *label185 always
   827 label *label184
   828 ucontrol approach .DOME_X .DOME_Y 6
   829 set .MSG ", waiting\n"
-    * set *tmp257 .MSG
   830 label *label185
   831 sensor *tmp258 @unit @totalItems
   832 op lessThanEq *tmp259 *tmp258 0
 
   853 set :processUnit:distance *tmp267
   854 set *tmp256 :processUnit:distance
   855 label *label183
-    * set *tmp254 *tmp256
   856 jump *label181 always
   857 label *label180
-    * set *tmp254 null
   858 label *label181
   859 ucontrol flag :processUnit:state
   860 sensor *tmp268 @unit @totalItems
 
   874 print "["
   875 print "] sec"
   876 print "\n"
-    * set *tmp270 null
   877 jump *label189 always
   878 label *label188
   879 print .MSG
-    * set *tmp270 .MSG
   880 label *label189
   881 set *tmp271 @unit
   882 set :processUnit:unit *tmp271
 
   900 op equal *tmp280 *tmp279 @this
   901 op land *tmp281 *tmp278 *tmp280
   902 jump *label196 equal *tmp281 false
-    * set *tmp274 :rebindUnit.5:currentUnit
   903 jump *label193 always
   904 set *tmp282 null
   905 jump *label197 always
   906 label *label196
   907 set *tmp282 null
   908 label *label197
-    * set *tmp276 *tmp282
   909 jump *label195 always
   910 label *label194
-    * set *tmp276 null
   911 label *label195
   912 ubind .TYPE
   913 set :rebindUnit.5:firstUnit @unit
 
   917 sensor *tmp285 @unit @controlled
   918 op equal *tmp286 *tmp285 0
   919 jump *label203 equal *tmp286 false
-    * set *tmp274 @unit
   920 jump *label193 always
-    * set *tmp287 null
   921 jump *label204 always
   922 label *label203
-    * set *tmp287 null
   923 label *label204
   924 ubind .TYPE
   925 label *label201
 
   929 op land *tmp291 *tmp288 *tmp290
   930 jump *label200 notEqual *tmp291 false
   931 label *label202
-    * set *tmp284 null
   932 jump *label199 always
   933 label *label198
-    * set *tmp284 null
   934 label *label199
   935 end
-    * set *tmp274 null
   936 label *label193
   937 sensor *tmp292 @unit @flag
   938 set :processUnit.1:state *tmp292
 
   970 label *label210
   971 set *tmp299 *tmp302
   972 label *label208
-    * set *tmp296 *tmp299
   973 jump *label206 always
   974 label *label205
-    * set *tmp296 null
   975 label *label206
   976 op equal *tmp305 :processUnit.1:state 2
   977 jump *label213 equal *tmp305 false
 
  1004 set :processUnit.1:distance *tmp318
  1005 set *tmp308 :processUnit.1:distance
  1006 label *label216
-    * set *tmp306 *tmp308
  1007 jump *label214 always
  1008 label *label213
-    * set *tmp306 null
  1009 label *label214
  1010 op equal *tmp319 :processUnit.1:state 3
  1011 jump *label219 equal *tmp319 false
 
  1014 jump *label223 equal :processUnit.1:supply false
  1015 ucontrol itemDrop .DOME .UNIT_CAPACITY
  1016 set .MSG ", supplying\n"
-    * set *tmp323 .MSG
  1017 jump *label224 always
  1018 label *label223
  1019 ucontrol approach .DOME_X .DOME_Y 6
  1020 set .MSG ", waiting\n"
-    * set *tmp323 .MSG
  1021 label *label224
  1022 sensor *tmp324 @unit @totalItems
  1023 op lessThanEq *tmp325 *tmp324 0
 
  1044 set :processUnit.1:distance *tmp333
  1045 set *tmp322 :processUnit.1:distance
  1046 label *label222
-    * set *tmp320 *tmp322
  1047 jump *label220 always
  1048 label *label219
-    * set *tmp320 null
  1049 label *label220
  1050 ucontrol flag :processUnit.1:state
  1051 sensor *tmp334 @unit @totalItems
 
  1065 print "["
  1066 print "] sec"
  1067 print "\n"
-    * set *tmp336 null
  1068 jump *label228 always
  1069 label *label227
  1070 print .MSG
-    * set *tmp336 .MSG
  1071 label *label228
  1072 set *tmp337 @unit
  1073 set :processUnit.1:unit *tmp337
 
  1084 set *tmp338 *tmp342
  1085 label *label230
  1086 set .SUPPLY_S_FIRST *tmp338
-    * set *tmp272 .SUPPLY_S_FIRST
  1087 jump *label191 always
  1088 label *label190
-    * set *tmp272 null
  1089 label *label191
  1090 # "Function: inline void printDomeStatus(in item, in text)"
  1091 set :printDomeStatus.1:item @phase-fabric
 
  1100 print "["
  1101 print "]"
  1102 print "\n"
-    * set *tmp345 null
  1103 jump *label233 always
  1104 label *label232
  1105 print "  dome:  [coral]"
 
  1107 print "["
  1108 print "]"
  1109 print "\n"
-    * set *tmp345 null
  1110 label *label233
  1111 label *label231
  1112 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
 
  1125 op equal *tmp352 *tmp351 @this
  1126 op land *tmp353 *tmp350 *tmp352
  1127 jump *label238 equal *tmp353 false
-    * set *tmp346 :rebindUnit.6:currentUnit
  1128 jump *label235 always
  1129 set *tmp354 null
  1130 jump *label239 always
  1131 label *label238
  1132 set *tmp354 null
  1133 label *label239
-    * set *tmp348 *tmp354
  1134 jump *label237 always
  1135 label *label236
-    * set *tmp348 null
  1136 label *label237
  1137 ubind .TYPE
  1138 set :rebindUnit.6:firstUnit @unit
 
  1142 sensor *tmp357 @unit @controlled
  1143 op equal *tmp358 *tmp357 0
  1144 jump *label245 equal *tmp358 false
-    * set *tmp346 @unit
  1145 jump *label235 always
-    * set *tmp359 null
  1146 jump *label246 always
  1147 label *label245
-    * set *tmp359 null
  1148 label *label246
  1149 ubind .TYPE
  1150 label *label243
 
  1154 op land *tmp363 *tmp360 *tmp362
  1155 jump *label242 notEqual *tmp363 false
  1156 label *label244
-    * set *tmp356 null
  1157 jump *label241 always
  1158 label *label240
-    * set *tmp356 null
  1159 label *label241
  1160 end
-    * set *tmp346 null
  1161 label *label235
  1162 sensor *tmp364 @unit @flag
  1163 set :processUnit.2:state *tmp364
 
  1195 label *label252
  1196 set *tmp371 *tmp374
  1197 label *label250
-    * set *tmp368 *tmp371
  1198 jump *label248 always
  1199 label *label247
-    * set *tmp368 null
  1200 label *label248
  1201 op equal *tmp377 :processUnit.2:state 2
  1202 jump *label255 equal *tmp377 false
 
  1229 set :processUnit.2:distance *tmp390
  1230 set *tmp380 :processUnit.2:distance
  1231 label *label258
-    * set *tmp378 *tmp380
  1232 jump *label256 always
  1233 label *label255
-    * set *tmp378 null
  1234 label *label256
  1235 op equal *tmp391 :processUnit.2:state 3
  1236 jump *label261 equal *tmp391 false
 
  1239 jump *label265 equal :processUnit.2:supply false
  1240 ucontrol itemDrop .DOME .UNIT_CAPACITY
  1241 set .MSG ", supplying\n"
-    * set *tmp395 .MSG
  1242 jump *label266 always
  1243 label *label265
  1244 ucontrol approach .DOME_X .DOME_Y 6
  1245 set .MSG ", waiting\n"
-    * set *tmp395 .MSG
  1246 label *label266
  1247 sensor *tmp396 @unit @totalItems
  1248 op lessThanEq *tmp397 *tmp396 0
 
  1269 set :processUnit.2:distance *tmp405
  1270 set *tmp394 :processUnit.2:distance
  1271 label *label264
-    * set *tmp392 *tmp394
  1272 jump *label262 always
  1273 label *label261
-    * set *tmp392 null
  1274 label *label262
  1275 ucontrol flag :processUnit.2:state
  1276 sensor *tmp406 @unit @totalItems
 
  1290 print "["
  1291 print "] sec"
  1292 print "\n"
-    * set *tmp408 null
  1293 jump *label270 always
  1294 label *label269
  1295 print .MSG
-    * set *tmp408 .MSG
  1296 label *label270
  1297 set *tmp409 @unit
  1298 set :processUnit.2:unit *tmp409
 
  1316 op equal *tmp418 *tmp417 @this
  1317 op land *tmp419 *tmp416 *tmp418
  1318 jump *label277 equal *tmp419 false
-    * set *tmp412 :rebindUnit.7:currentUnit
  1319 jump *label274 always
  1320 set *tmp420 null
  1321 jump *label278 always
  1322 label *label277
  1323 set *tmp420 null
  1324 label *label278
-    * set *tmp414 *tmp420
  1325 jump *label276 always
  1326 label *label275
-    * set *tmp414 null
  1327 label *label276
  1328 ubind .TYPE
  1329 set :rebindUnit.7:firstUnit @unit
 
  1333 sensor *tmp423 @unit @controlled
  1334 op equal *tmp424 *tmp423 0
  1335 jump *label284 equal *tmp424 false
-    * set *tmp412 @unit
  1336 jump *label274 always
-    * set *tmp425 null
  1337 jump *label285 always
  1338 label *label284
-    * set *tmp425 null
  1339 label *label285
  1340 ubind .TYPE
  1341 label *label282
 
  1345 op land *tmp429 *tmp426 *tmp428
  1346 jump *label281 notEqual *tmp429 false
  1347 label *label283
-    * set *tmp422 null
  1348 jump *label280 always
  1349 label *label279
-    * set *tmp422 null
  1350 label *label280
  1351 end
-    * set *tmp412 null
  1352 label *label274
  1353 sensor *tmp430 @unit @flag
  1354 set :processUnit.3:state *tmp430
 
  1386 label *label291
  1387 set *tmp437 *tmp440
  1388 label *label289
-    * set *tmp434 *tmp437
  1389 jump *label287 always
  1390 label *label286
-    * set *tmp434 null
  1391 label *label287
  1392 op equal *tmp443 :processUnit.3:state 2
  1393 jump *label294 equal *tmp443 false
 
  1420 set :processUnit.3:distance *tmp456
  1421 set *tmp446 :processUnit.3:distance
  1422 label *label297
-    * set *tmp444 *tmp446
  1423 jump *label295 always
  1424 label *label294
-    * set *tmp444 null
  1425 label *label295
  1426 op equal *tmp457 :processUnit.3:state 3
  1427 jump *label300 equal *tmp457 false
 
  1430 jump *label304 equal :processUnit.3:supply false
  1431 ucontrol itemDrop .DOME .UNIT_CAPACITY
  1432 set .MSG ", supplying\n"
-    * set *tmp461 .MSG
  1433 jump *label305 always
  1434 label *label304
  1435 ucontrol approach .DOME_X .DOME_Y 6
  1436 set .MSG ", waiting\n"
-    * set *tmp461 .MSG
  1437 label *label305
  1438 sensor *tmp462 @unit @totalItems
  1439 op lessThanEq *tmp463 *tmp462 0
 
  1460 set :processUnit.3:distance *tmp471
  1461 set *tmp460 :processUnit.3:distance
  1462 label *label303
-    * set *tmp458 *tmp460
  1463 jump *label301 always
  1464 label *label300
-    * set *tmp458 null
  1465 label *label301
  1466 ucontrol flag :processUnit.3:state
  1467 sensor *tmp472 @unit @totalItems
 
  1481 print "["
  1482 print "] sec"
  1483 print "\n"
-    * set *tmp474 null
  1484 jump *label309 always
  1485 label *label308
  1486 print .MSG
-    * set *tmp474 .MSG
  1487 label *label309
  1488 set *tmp475 @unit
  1489 set :processUnit.3:unit *tmp475
 
  1500 set *tmp476 *tmp480
  1501 label *label311
  1502 set .SUPPLY_P_FIRST *tmp476
-    * set *tmp410 .SUPPLY_P_FIRST
  1503 jump *label272 always
  1504 label *label271
-    * set *tmp410 null
  1505 label *label272
  1506 op sub *tmp481 @time :start
  1507 op floor *tmp482 *tmp481
 
  1563 label *label325
  1564 set *tmp506 null
  1565 label *label326
-    * set *tmp504 *tmp506
  1566 jump *label324 always
  1567 label *label323
  1568 set *tmp507 :areUnitsAvailable.2:occupied
  1569 op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
-    * set *tmp504 *tmp507
  1570 label *label324
  1571 ubind :areUnitsAvailable.2:type
  1572 label *label321
 
  1576 op land *tmp511 *tmp508 *tmp510
  1577 jump *label320 notEqual *tmp511 false
  1578 label *label322
-    * set *tmp489 null
  1579 jump *label316 always
  1580 label *label315
-    * set *tmp489 null
  1581 label *label316
  1582 jump *label327 equal :areUnitsAvailable.2:output false
  1583 print :areUnitsAvailable.2:type
 
  1591 jump *label329 equal *tmp513 false
  1592 print ", needed: "
  1593 print :areUnitsAvailable.2:needed
-    * set *tmp514 null
  1594 jump *label330 always
  1595 label *label329
-    * set *tmp514 null
  1596 label *label330
  1597 print "\n"
-    * set *tmp512 null
  1598 jump *label328 always
  1599 label *label327
-    * set *tmp512 null
  1600 label *label328
  1601 set *tmp487 false
  1602 jump *label314 always
 
  1604 label *label314
  1605 jump *label331 equal *tmp487 false
  1606 end
-    * set *tmp515 null
  1607 jump *label332 always
  1608 label *label331
-    * set *tmp515 null
  1609 label *label332
  1610 op add *tmp516 @time 5000
  1611 set :unitCheck *tmp516
-    * set *tmp486 :unitCheck
  1612 jump *label313 always
  1613 label *label312
-    * set *tmp486 null
  1614 label *label313
  1615 label *label148
  1616 jump *label147 always
 
  1627 jump *label334 equal *tmp521 false
  1628 ulocate building core false @copper *tmp524 *tmp525 *tmp526 *tmp523
  1629 set .CORE *tmp523
-    * set *tmp522 .CORE
  1630 jump *label335 always
  1631 label *label334
-    * set *tmp522 null
  1632 label *label335
  1633 set :locateCore*retval .CORE
  1634 label *label333

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-53 instructions):
 
   114 jump *label35 equal *tmp28 false
   115 set *tmp10 true
   116 jump *label24 always
-    * set *tmp29 null
   117 jump *label36 always
   118 label *label35
-    * set *tmp29 null
   119 label *label36
   120 jump *label34 always
   121 label *label33
-    * set *tmp30 :areUnitsAvailable:occupied
   122 op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
   123 label *label34
   124 ubind :areUnitsAvailable:type
 
   221 jump *label63 equal *tmp60 false
   222 set *tmp42 true
   223 jump *label52 always
-    * set *tmp61 null
   224 jump *label64 always
   225 label *label63
-    * set *tmp61 null
   226 label *label64
   227 jump *label62 always
   228 label *label61
-    * set *tmp62 :areUnitsAvailable.1:occupied
   229 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   230 label *label62
   231 ubind :areUnitsAvailable.1:type
 
   266 printflush null
   267 set *tmp9 :chooseUnitType:type
   268 jump *label20 always
-    * set *tmp70 null
   269 jump *label70 always
   270 label *label69
-    * set *tmp70 null
   271 label *label70
   272 jump *label51 always
   273 label *label50
 
   313 op notEqual *tmp79 .UNIT_S2 null
   314 jump *label79 equal *tmp79 false
   315 jump *label76 always
-    * set *tmp80 null
   316 jump *label80 always
   317 label *label79
-    * set *tmp80 null
   318 label *label80
   319 jump *label78 always
   320 label *label77
 
   343 op land *tmp93 *tmp90 *tmp92
   344 jump *label85 equal *tmp93 false
   345 jump *label82 always
-    * set *tmp94 null
   346 jump *label86 always
   347 label *label85
-    * set *tmp94 null
   348 label *label86
   349 jump *label84 always
   350 label *label83
 
   394 op land *tmp112 *tmp109 *tmp111
   395 jump *label98 equal *tmp112 false
   396 jump *label95 always
-    * set *tmp113 null
   397 jump *label99 always
   398 label *label98
-    * set *tmp113 null
   399 label *label99
   400 jump *label97 always
   401 label *label96
 
   491 op land *tmp151 *tmp148 *tmp150
   492 jump *label119 equal *tmp151 false
   493 jump *label116 always
-    * set *tmp152 null
   494 jump *label120 always
   495 label *label119
-    * set *tmp152 null
   496 label *label120
   497 jump *label118 always
   498 label *label117
 
   542 op land *tmp170 *tmp167 *tmp169
   543 jump *label132 equal *tmp170 false
   544 jump *label129 always
-    * set *tmp171 null
   545 jump *label133 always
   546 label *label132
-    * set *tmp171 null
   547 label *label133
   548 jump *label131 always
   549 label *label130
 
   692 op land *tmp215 *tmp212 *tmp214
   693 jump *label157 equal *tmp215 false
   694 jump *label154 always
-    * set *tmp216 null
   695 jump *label158 always
   696 label *label157
-    * set *tmp216 null
   697 label *label158
   698 jump *label156 always
   699 label *label155
 
   735 op equal *tmp232 *tmp231 :processUnit:item
   736 jump *label168 equal *tmp232 false
   737 set :processUnit:state 3
-    * set *tmp233 :processUnit:state
   738 jump *label169 always
   739 label *label168
   740 sensor *tmp234 @unit @totalItems
 
   756 label *label173
   757 set *tmp236 *tmp238
   758 label *label171
-    * set *tmp233 *tmp236
   759 label *label169
   760 jump *label167 always
   761 label *label166
 
   776 set .MSG ", loading\n"
   777 set *tmp245 .MSG
   778 label *label179
-    * set *tmp242 *tmp245
   779 jump *label177 always
   780 label *label176
   781 ucontrol approach .CORE_X .CORE_Y 6
 
   788 op idiv *tmp251 *tmp250 .SPEED_TENTHS
   789 op div *tmp252 *tmp251 10
   790 set :processUnit:distance *tmp252
-    * set *tmp242 :processUnit:distance
   791 label *label177
   792 jump *label175 always
   793 label *label174
 
   814 label *label186
   815 set *tmp260 null
   816 label *label187
-    * set *tmp256 *tmp260
   817 jump *label183 always
   818 label *label182
   819 ucontrol approach .DOME_X .DOME_Y 6
 
   826 op idiv *tmp266 *tmp265 .SPEED_TENTHS
   827 op div *tmp267 *tmp266 10
   828 set :processUnit:distance *tmp267
-    * set *tmp256 :processUnit:distance
   829 label *label183
   830 jump *label181 always
   831 label *label180
 
   875 op land *tmp281 *tmp278 *tmp280
   876 jump *label196 equal *tmp281 false
   877 jump *label193 always
-    * set *tmp282 null
   878 jump *label197 always
   879 label *label196
-    * set *tmp282 null
   880 label *label197
   881 jump *label195 always
   882 label *label194
 
   918 op equal *tmp298 *tmp297 :processUnit.1:item
   919 jump *label207 equal *tmp298 false
   920 set :processUnit.1:state 3
-    * set *tmp299 :processUnit.1:state
   921 jump *label208 always
   922 label *label207
   923 sensor *tmp300 @unit @totalItems
 
   939 label *label212
   940 set *tmp302 *tmp304
   941 label *label210
-    * set *tmp299 *tmp302
   942 label *label208
   943 jump *label206 always
   944 label *label205
 
   959 set .MSG ", loading\n"
   960 set *tmp311 .MSG
   961 label *label218
-    * set *tmp308 *tmp311
   962 jump *label216 always
   963 label *label215
   964 ucontrol approach .CORE_X .CORE_Y 6
 
   971 op idiv *tmp317 *tmp316 .SPEED_TENTHS
   972 op div *tmp318 *tmp317 10
   973 set :processUnit.1:distance *tmp318
-    * set *tmp308 :processUnit.1:distance
   974 label *label216
   975 jump *label214 always
   976 label *label213
 
   997 label *label225
   998 set *tmp326 null
   999 label *label226
-    * set *tmp322 *tmp326
  1000 jump *label222 always
  1001 label *label221
  1002 ucontrol approach .DOME_X .DOME_Y 6
 
  1009 op idiv *tmp332 *tmp331 .SPEED_TENTHS
  1010 op div *tmp333 *tmp332 10
  1011 set :processUnit.1:distance *tmp333
-    * set *tmp322 :processUnit.1:distance
  1012 label *label222
  1013 jump *label220 always
  1014 label *label219
 
  1092 op land *tmp353 *tmp350 *tmp352
  1093 jump *label238 equal *tmp353 false
  1094 jump *label235 always
-    * set *tmp354 null
  1095 jump *label239 always
  1096 label *label238
-    * set *tmp354 null
  1097 label *label239
  1098 jump *label237 always
  1099 label *label236
 
  1135 op equal *tmp370 *tmp369 :processUnit.2:item
  1136 jump *label249 equal *tmp370 false
  1137 set :processUnit.2:state 3
-    * set *tmp371 :processUnit.2:state
  1138 jump *label250 always
  1139 label *label249
  1140 sensor *tmp372 @unit @totalItems
 
  1156 label *label254
  1157 set *tmp374 *tmp376
  1158 label *label252
-    * set *tmp371 *tmp374
  1159 label *label250
  1160 jump *label248 always
  1161 label *label247
 
  1176 set .MSG ", loading\n"
  1177 set *tmp383 .MSG
  1178 label *label260
-    * set *tmp380 *tmp383
  1179 jump *label258 always
  1180 label *label257
  1181 ucontrol approach .CORE_X .CORE_Y 6
 
  1188 op idiv *tmp389 *tmp388 .SPEED_TENTHS
  1189 op div *tmp390 *tmp389 10
  1190 set :processUnit.2:distance *tmp390
-    * set *tmp380 :processUnit.2:distance
  1191 label *label258
  1192 jump *label256 always
  1193 label *label255
 
  1214 label *label267
  1215 set *tmp398 null
  1216 label *label268
-    * set *tmp394 *tmp398
  1217 jump *label264 always
  1218 label *label263
  1219 ucontrol approach .DOME_X .DOME_Y 6
 
  1226 op idiv *tmp404 *tmp403 .SPEED_TENTHS
  1227 op div *tmp405 *tmp404 10
  1228 set :processUnit.2:distance *tmp405
-    * set *tmp394 :processUnit.2:distance
  1229 label *label264
  1230 jump *label262 always
  1231 label *label261
 
  1275 op land *tmp419 *tmp416 *tmp418
  1276 jump *label277 equal *tmp419 false
  1277 jump *label274 always
-    * set *tmp420 null
  1278 jump *label278 always
  1279 label *label277
-    * set *tmp420 null
  1280 label *label278
  1281 jump *label276 always
  1282 label *label275
 
  1318 op equal *tmp436 *tmp435 :processUnit.3:item
  1319 jump *label288 equal *tmp436 false
  1320 set :processUnit.3:state 3
-    * set *tmp437 :processUnit.3:state
  1321 jump *label289 always
  1322 label *label288
  1323 sensor *tmp438 @unit @totalItems
 
  1339 label *label293
  1340 set *tmp440 *tmp442
  1341 label *label291
-    * set *tmp437 *tmp440
  1342 label *label289
  1343 jump *label287 always
  1344 label *label286
 
  1359 set .MSG ", loading\n"
  1360 set *tmp449 .MSG
  1361 label *label299
-    * set *tmp446 *tmp449
  1362 jump *label297 always
  1363 label *label296
  1364 ucontrol approach .CORE_X .CORE_Y 6
 
  1371 op idiv *tmp455 *tmp454 .SPEED_TENTHS
  1372 op div *tmp456 *tmp455 10
  1373 set :processUnit.3:distance *tmp456
-    * set *tmp446 :processUnit.3:distance
  1374 label *label297
  1375 jump *label295 always
  1376 label *label294
 
  1397 label *label306
  1398 set *tmp464 null
  1399 label *label307
-    * set *tmp460 *tmp464
  1400 jump *label303 always
  1401 label *label302
  1402 ucontrol approach .DOME_X .DOME_Y 6
 
  1409 op idiv *tmp470 *tmp469 .SPEED_TENTHS
  1410 op div *tmp471 *tmp470 10
  1411 set :processUnit.3:distance *tmp471
-    * set *tmp460 :processUnit.3:distance
  1412 label *label303
  1413 jump *label301 always
  1414 label *label300
 
  1508 jump *label325 equal *tmp505 false
  1509 set *tmp487 true
  1510 jump *label314 always
-    * set *tmp506 null
  1511 jump *label326 always
  1512 label *label325
-    * set *tmp506 null
  1513 label *label326
  1514 jump *label324 always
  1515 label *label323
-    * set *tmp507 :areUnitsAvailable.2:occupied
  1516 op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
  1517 label *label324
  1518 ubind :areUnitsAvailable.2:type

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-24 instructions):
 
   741 op equal *tmp235 *tmp234 0
   742 jump *label170 equal *tmp235 false
   743 set :processUnit:state 2
-    * set *tmp236 :processUnit:state
   744 jump *label171 always
   745 label *label170
   746 set .MSG ", initializing\n"
 
   753 label *label172
   754 set *tmp238 null
   755 label *label173
-    * set *tmp236 *tmp238
   756 label *label171
   757 label *label169
   758 jump *label167 always
 
   768 jump *label178 equal *tmp244 false
   769 ucontrol approach .DOME_X .DOME_Y 6
   770 set :processUnit:state 3
-    * set *tmp245 :processUnit:state
   771 jump *label179 always
   772 label *label178
   773 set .MSG ", loading\n"
-    * set *tmp245 .MSG
   774 label *label179
   775 jump *label177 always
   776 label *label176
 
   805 jump *label186 equal *tmp259 false
   806 ucontrol approach .CORE_X .CORE_Y 6
   807 set :processUnit:state 2
-    * set *tmp260 :processUnit:state
   808 jump *label187 always
   809 label *label186
-    * set *tmp260 null
   810 label *label187
   811 jump *label183 always
   812 label *label182
 
   918 op equal *tmp301 *tmp300 0
   919 jump *label209 equal *tmp301 false
   920 set :processUnit.1:state 2
-    * set *tmp302 :processUnit.1:state
   921 jump *label210 always
   922 label *label209
   923 set .MSG ", initializing\n"
 
   930 label *label211
   931 set *tmp304 null
   932 label *label212
-    * set *tmp302 *tmp304
   933 label *label210
   934 label *label208
   935 jump *label206 always
 
   945 jump *label217 equal *tmp310 false
   946 ucontrol approach .DOME_X .DOME_Y 6
   947 set :processUnit.1:state 3
-    * set *tmp311 :processUnit.1:state
   948 jump *label218 always
   949 label *label217
   950 set .MSG ", loading\n"
-    * set *tmp311 .MSG
   951 label *label218
   952 jump *label216 always
   953 label *label215
 
   982 jump *label225 equal *tmp325 false
   983 ucontrol approach .CORE_X .CORE_Y 6
   984 set :processUnit.1:state 2
-    * set *tmp326 :processUnit.1:state
   985 jump *label226 always
   986 label *label225
-    * set *tmp326 null
   987 label *label226
   988 jump *label222 always
   989 label *label221
 
  1129 op equal *tmp373 *tmp372 0
  1130 jump *label251 equal *tmp373 false
  1131 set :processUnit.2:state 2
-    * set *tmp374 :processUnit.2:state
  1132 jump *label252 always
  1133 label *label251
  1134 set .MSG ", initializing\n"
 
  1141 label *label253
  1142 set *tmp376 null
  1143 label *label254
-    * set *tmp374 *tmp376
  1144 label *label252
  1145 label *label250
  1146 jump *label248 always
 
  1156 jump *label259 equal *tmp382 false
  1157 ucontrol approach .DOME_X .DOME_Y 6
  1158 set :processUnit.2:state 3
-    * set *tmp383 :processUnit.2:state
  1159 jump *label260 always
  1160 label *label259
  1161 set .MSG ", loading\n"
-    * set *tmp383 .MSG
  1162 label *label260
  1163 jump *label258 always
  1164 label *label257
 
  1193 jump *label267 equal *tmp397 false
  1194 ucontrol approach .CORE_X .CORE_Y 6
  1195 set :processUnit.2:state 2
-    * set *tmp398 :processUnit.2:state
  1196 jump *label268 always
  1197 label *label267
-    * set *tmp398 null
  1198 label *label268
  1199 jump *label264 always
  1200 label *label263
 
  1306 op equal *tmp439 *tmp438 0
  1307 jump *label290 equal *tmp439 false
  1308 set :processUnit.3:state 2
-    * set *tmp440 :processUnit.3:state
  1309 jump *label291 always
  1310 label *label290
  1311 set .MSG ", initializing\n"
 
  1318 label *label292
  1319 set *tmp442 null
  1320 label *label293
-    * set *tmp440 *tmp442
  1321 label *label291
  1322 label *label289
  1323 jump *label287 always
 
  1333 jump *label298 equal *tmp448 false
  1334 ucontrol approach .DOME_X .DOME_Y 6
  1335 set :processUnit.3:state 3
-    * set *tmp449 :processUnit.3:state
  1336 jump *label299 always
  1337 label *label298
  1338 set .MSG ", loading\n"
-    * set *tmp449 .MSG
  1339 label *label299
  1340 jump *label297 always
  1341 label *label296
 
  1370 jump *label306 equal *tmp463 false
  1371 ucontrol approach .CORE_X .CORE_Y 6
  1372 set :processUnit.3:state 2
-    * set *tmp464 :processUnit.3:state
  1373 jump *label307 always
  1374 label *label306
-    * set *tmp464 null
  1375 label *label307
  1376 jump *label303 always
  1377 label *label302

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-8 instructions):
 
   748 ucontrol within .CORE_X .CORE_Y 8 *tmp237
   749 jump *label172 equal *tmp237 false
   750 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * set *tmp238 null
   751 jump *label173 always
   752 label *label172
-    * set *tmp238 null
   753 label *label173
   754 label *label171
   755 label *label169
 
   923 ucontrol within .CORE_X .CORE_Y 8 *tmp303
   924 jump *label211 equal *tmp303 false
   925 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * set *tmp304 null
   926 jump *label212 always
   927 label *label211
-    * set *tmp304 null
   928 label *label212
   929 label *label210
   930 label *label208
 
  1132 ucontrol within .CORE_X .CORE_Y 8 *tmp375
  1133 jump *label253 equal *tmp375 false
  1134 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * set *tmp376 null
  1135 jump *label254 always
  1136 label *label253
-    * set *tmp376 null
  1137 label *label254
  1138 label *label252
  1139 label *label250
 
  1307 ucontrol within .CORE_X .CORE_Y 8 *tmp441
  1308 jump *label292 equal *tmp441 false
  1309 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * set *tmp442 null
  1310 jump *label293 always
  1311 label *label292
-    * set *tmp442 null
  1312 label *label293
  1313 label *label291
  1314 label *label289

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-43 instructions):
 
    47 jump *label5 always
    48 label *label7
    49 label *label1
-    * sensor *tmp3 .CORE @x
-    * set .CORE_X *tmp3
-    * sensor *tmp4 .CORE @y
-    * set .CORE_Y *tmp4
-    * sensor *tmp5 .DOME @x
-    * set .DOME_X *tmp5
-    * sensor *tmp6 .DOME @y
-    * set .DOME_Y *tmp6
+   50 sensor .CORE_X .CORE @x
+   51 sensor .CORE_Y .CORE @y
+   52 sensor .DOME_X .DOME @x
+   53 sensor .DOME_Y .DOME @y
    54 label *label17
    55 sensor *tmp7 switch1 @enabled
    56 op equal *tmp8 *tmp7 false
 
    84 op len *tmp16 *tmp14 *tmp15
    85 op mul *tmp17 2 *tmp16
    86 sensor *tmp18 :needsFourUnits:unit @speed
-    * op div *tmp19 *tmp17 *tmp18
-    * set :needsFourUnits:travel_time *tmp19
-    * op greaterThanEq *tmp20 :needsFourUnits:travel_time 47
-    * set *tmp13 *tmp20
+   87 op div :needsFourUnits:travel_time *tmp17 *tmp18
+   88 op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
    89 jump *label27 always
    90 set *tmp13 null
    91 label *label27
 
   189 op len *tmp48 *tmp46 *tmp47
   190 op mul *tmp49 2 *tmp48
   191 sensor *tmp50 :needsFourUnits.1:unit @speed
-    * op div *tmp51 *tmp49 *tmp50
-    * set :needsFourUnits.1:travel_time *tmp51
-    * op greaterThanEq *tmp52 :needsFourUnits.1:travel_time 47
-    * set *tmp45 *tmp52
+  192 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
+  193 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
   194 jump *label55 always
   195 set *tmp45 null
   196 label *label55
 
   300 set .UNIT_S2 .UNIT_P2
   301 set .UNIT_P2 .UNIT_S1
   302 set .UNIT_S1 .UNIT_P1
-    * set *tmp78 @unit
-    * set .UNIT_P1 *tmp78
+  303 set .UNIT_P1 @unit
   304 op notEqual *tmp79 .UNIT_S2 null
   305 jump *label79 equal *tmp79 false
   306 jump *label76 always
 
   440 jump *label108 always
   441 label *label107
   442 label *label108
-    * sensor *tmp129 .UNIT_S1 @itemCapacity
-    * set .UNIT_CAPACITY *tmp129
-    * sensor *tmp130 .UNIT_S1 @speed
-    * set .SPEED *tmp130
-    * op div *tmp131 .SPEED 10
-    * set .SPEED_TENTHS *tmp131
+  443 sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
+  444 sensor .SPEED .UNIT_S1 @speed
+  445 op div .SPEED_TENTHS .SPEED 10
   446 op strictEqual *tmp132 .SPEED null
   447 jump *label110 equal *tmp132 false
   448 stop
 
   456 op len *tmp137 *tmp135 *tmp136
   457 op mul *tmp138 2 *tmp137
   458 sensor *tmp139 :needsFourUnits.2:unit @speed
-    * op div *tmp140 *tmp138 *tmp139
-    * set :needsFourUnits.2:travel_time *tmp140
-    * op greaterThanEq *tmp141 :needsFourUnits.2:travel_time 47
-    * set *tmp134 *tmp141
+  459 op div :needsFourUnits.2:travel_time *tmp138 *tmp139
+  460 op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
   461 jump *label112 always
   462 set *tmp134 null
   463 label *label112
 
   617 sensor *tmp194 .UNIT_S1 @totalItems
   618 sensor *tmp195 .UNIT_S2 @totalItems
   619 op lessThan *tmp196 *tmp194 *tmp195
-    * op or *tmp197 *tmp193 *tmp196
-    * set .SUPPLY_S_FIRST *tmp197
+  620 op or .SUPPLY_S_FIRST *tmp193 *tmp196
   621 op equal *tmp198 .FOUR_UNITS false
   622 sensor *tmp199 .UNIT_P1 @totalItems
   623 sensor *tmp200 .UNIT_P2 @totalItems
   624 op lessThan *tmp201 *tmp199 *tmp200
-    * op or *tmp202 *tmp198 *tmp201
-    * set .SUPPLY_P_FIRST *tmp202
-    * op add *tmp203 @time 5000
-    * set :unitCheck *tmp203
+  625 op or .SUPPLY_P_FIRST *tmp198 *tmp201
+  626 op add :unitCheck @time 5000
   627 label *label147
   628 sensor *tmp204 switch1 @enabled
   629 jump *label149 equal *tmp204 false
 
   640 set :printDomeStatus:item @silicon
   641 set :printDomeStatus:text "\n[green]Silicon[] status:\n"
   642 print :printDomeStatus:text
-    * sensor *tmp205 .DOME :printDomeStatus:item
-    * set :printDomeStatus:level *tmp205
+  643 sensor :printDomeStatus:level .DOME :printDomeStatus:item
   644 op greaterThan *tmp206 :printDomeStatus:level 3
   645 jump *label151 equal *tmp206 false
   646 print "  dome:  [green]"
 
   705 label *label160
   706 end
   707 label *label154
-    * sensor *tmp226 @unit @flag
-    * set :processUnit:state *tmp226
+  708 sensor :processUnit:state @unit @flag
   709 set :processUnit:distance -1
   710 set :processUnit:color "gold"
   711 op lessThan *tmp227 :processUnit:state 2
 
   761 op sub *tmp249 .CORE_Y *tmp248
   762 op len *tmp250 *tmp247 *tmp249
   763 op idiv *tmp251 *tmp250 .SPEED_TENTHS
-    * op div *tmp252 *tmp251 10
-    * set :processUnit:distance *tmp252
+  764 op div :processUnit:distance *tmp251 10
   765 label *label177
   766 jump *label175 always
   767 label *label174
 
   796 op sub *tmp264 .DOME_Y *tmp263
   797 op len *tmp265 *tmp262 *tmp264
   798 op idiv *tmp266 *tmp265 .SPEED_TENTHS
-    * op div *tmp267 *tmp266 10
-    * set :processUnit:distance *tmp267
+  799 op div :processUnit:distance *tmp266 10
   800 label *label183
   801 jump *label181 always
   802 label *label180
 
   823 label *label188
   824 print .MSG
   825 label *label189
-    * set *tmp271 @unit
-    * set :processUnit:unit *tmp271
+  826 set :processUnit:unit @unit
   827 label *label153
   828 set .UNIT_S1 :processUnit:unit
   829 jump *label190 equal .FOUR_UNITS false
 
   876 label *label199
   877 end
   878 label *label193
-    * sensor *tmp292 @unit @flag
-    * set :processUnit.1:state *tmp292
+  879 sensor :processUnit.1:state @unit @flag
   880 set :processUnit.1:distance -1
   881 set :processUnit.1:color "gold"
   882 op lessThan *tmp293 :processUnit.1:state 2
 
   932 op sub *tmp315 .CORE_Y *tmp314
   933 op len *tmp316 *tmp313 *tmp315
   934 op idiv *tmp317 *tmp316 .SPEED_TENTHS
-    * op div *tmp318 *tmp317 10
-    * set :processUnit.1:distance *tmp318
+  935 op div :processUnit.1:distance *tmp317 10
   936 label *label216
   937 jump *label214 always
   938 label *label213
 
   967 op sub *tmp330 .DOME_Y *tmp329
   968 op len *tmp331 *tmp328 *tmp330
   969 op idiv *tmp332 *tmp331 .SPEED_TENTHS
-    * op div *tmp333 *tmp332 10
-    * set :processUnit.1:distance *tmp333
+  970 op div :processUnit.1:distance *tmp332 10
   971 label *label222
   972 jump *label220 always
   973 label *label219
 
   994 label *label227
   995 print .MSG
   996 label *label228
-    * set *tmp337 @unit
-    * set :processUnit.1:unit *tmp337
+  997 set :processUnit.1:unit @unit
   998 label *label192
   999 set .UNIT_S2 :processUnit.1:unit
  1000 jump *label229 equal .SUPPLY_S_FIRST false
  1001 sensor *tmp339 .UNIT_S1 @totalItems
-    * op greaterThan *tmp340 *tmp339 0
-    * set *tmp338 *tmp340
+ 1002 op greaterThan *tmp338 *tmp339 0
  1003 jump *label230 always
  1004 label *label229
  1005 sensor *tmp341 .UNIT_S2 @totalItems
-    * op equal *tmp342 *tmp341 0
-    * set *tmp338 *tmp342
+ 1006 op equal *tmp338 *tmp341 0
  1007 label *label230
  1008 set .SUPPLY_S_FIRST *tmp338
  1009 jump *label191 always
 
  1013 set :printDomeStatus.1:item @phase-fabric
  1014 set :printDomeStatus.1:text "\n[green]Phase fabric[] status:\n"
  1015 print :printDomeStatus.1:text
-    * sensor *tmp343 .DOME :printDomeStatus.1:item
-    * set :printDomeStatus.1:level *tmp343
+ 1016 sensor :printDomeStatus.1:level .DOME :printDomeStatus.1:item
  1017 op greaterThan *tmp344 :printDomeStatus.1:level 3
  1018 jump *label232 equal *tmp344 false
  1019 print "  dome:  [green]"
 
  1078 label *label241
  1079 end
  1080 label *label235
-    * sensor *tmp364 @unit @flag
-    * set :processUnit.2:state *tmp364
+ 1081 sensor :processUnit.2:state @unit @flag
  1082 set :processUnit.2:distance -1
  1083 set :processUnit.2:color "gold"
  1084 op lessThan *tmp365 :processUnit.2:state 2
 
  1134 op sub *tmp387 .CORE_Y *tmp386
  1135 op len *tmp388 *tmp385 *tmp387
  1136 op idiv *tmp389 *tmp388 .SPEED_TENTHS
-    * op div *tmp390 *tmp389 10
-    * set :processUnit.2:distance *tmp390
+ 1137 op div :processUnit.2:distance *tmp389 10
  1138 label *label258
  1139 jump *label256 always
  1140 label *label255
 
  1169 op sub *tmp402 .DOME_Y *tmp401
  1170 op len *tmp403 *tmp400 *tmp402
  1171 op idiv *tmp404 *tmp403 .SPEED_TENTHS
-    * op div *tmp405 *tmp404 10
-    * set :processUnit.2:distance *tmp405
+ 1172 op div :processUnit.2:distance *tmp404 10
  1173 label *label264
  1174 jump *label262 always
  1175 label *label261
 
  1196 label *label269
  1197 print .MSG
  1198 label *label270
-    * set *tmp409 @unit
-    * set :processUnit.2:unit *tmp409
+ 1199 set :processUnit.2:unit @unit
  1200 label *label234
  1201 set .UNIT_P1 :processUnit.2:unit
  1202 jump *label271 equal .FOUR_UNITS false
 
  1249 label *label280
  1250 end
  1251 label *label274
-    * sensor *tmp430 @unit @flag
-    * set :processUnit.3:state *tmp430
+ 1252 sensor :processUnit.3:state @unit @flag
  1253 set :processUnit.3:distance -1
  1254 set :processUnit.3:color "gold"
  1255 op lessThan *tmp431 :processUnit.3:state 2
 
  1305 op sub *tmp453 .CORE_Y *tmp452
  1306 op len *tmp454 *tmp451 *tmp453
  1307 op idiv *tmp455 *tmp454 .SPEED_TENTHS
-    * op div *tmp456 *tmp455 10
-    * set :processUnit.3:distance *tmp456
+ 1308 op div :processUnit.3:distance *tmp455 10
  1309 label *label297
  1310 jump *label295 always
  1311 label *label294
 
  1340 op sub *tmp468 .DOME_Y *tmp467
  1341 op len *tmp469 *tmp466 *tmp468
  1342 op idiv *tmp470 *tmp469 .SPEED_TENTHS
-    * op div *tmp471 *tmp470 10
-    * set :processUnit.3:distance *tmp471
+ 1343 op div :processUnit.3:distance *tmp470 10
  1344 label *label303
  1345 jump *label301 always
  1346 label *label300
 
  1367 label *label308
  1368 print .MSG
  1369 label *label309
-    * set *tmp475 @unit
-    * set :processUnit.3:unit *tmp475
+ 1370 set :processUnit.3:unit @unit
  1371 label *label273
  1372 set .UNIT_P2 :processUnit.3:unit
  1373 jump *label310 equal .SUPPLY_P_FIRST false
  1374 sensor *tmp477 .UNIT_P1 @totalItems
-    * op greaterThan *tmp478 *tmp477 0
-    * set *tmp476 *tmp478
+ 1375 op greaterThan *tmp476 *tmp477 0
  1376 jump *label311 always
  1377 label *label310
  1378 sensor *tmp479 .UNIT_P2 @totalItems
-    * op equal *tmp480 *tmp479 0
-    * set *tmp476 *tmp480
+ 1379 op equal *tmp476 *tmp479 0
  1380 label *label311
  1381 set .SUPPLY_P_FIRST *tmp476
  1382 jump *label272 always
 
  1411 op len *tmp493 *tmp491 *tmp492
  1412 op mul *tmp494 2 *tmp493
  1413 sensor *tmp495 :needsFourUnits.3:unit @speed
-    * op div *tmp496 *tmp494 *tmp495
-    * set :needsFourUnits.3:travel_time *tmp496
-    * op greaterThanEq *tmp497 :needsFourUnits.3:travel_time 47
-    * set *tmp490 *tmp497
+ 1414 op div :needsFourUnits.3:travel_time *tmp494 *tmp495
+ 1415 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
  1416 jump *label317 always
  1417 set *tmp490 null
  1418 label *label317
 
  1481 jump *label332 always
  1482 label *label331
  1483 label *label332
-    * op add *tmp516 @time 5000
-    * set :unitCheck *tmp516
+ 1484 op add :unitCheck @time 5000
  1485 jump *label313 always
  1486 label *label312
  1487 label *label313
 
  1498 op equal *tmp520 *tmp519 @this
  1499 op or *tmp521 *tmp518 *tmp520
  1500 jump *label334 equal *tmp521 false
-    * ulocate building core false @copper *tmp524 *tmp525 *tmp526 *tmp523
-    * set .CORE *tmp523
+ 1501 ulocate building core false @copper 0 0 0 .CORE
  1502 jump *label335 always
  1503 label *label334
  1504 label *label335

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-2 instructions):
 
    16 printflush message1
    17 set .CORE null
    18 label *label5
-    * jump *label7 equal true false
    19 set :locateDomeAndCore:type @flare
    20 op add *tmp1 @counter 1
    21 jump *label8 always
 
    62 label *label19
    63 # "Function: inline def chooseUnitType()"
    64 label *label21
-    * jump *label23 equal true false
    65 printflush null
    66 print "[gold]Looking for suitable unit type:[]"
    67 print "\n"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-69 instructions):
 
     4 # "Function: inline void locateDomeAndCore()"
     5 set .DOME dome1
     6 label *label2
-    * op equal *tmp0 .DOME null
-    * jump *label4 equal *tmp0 false
+    7 jump *label4 notEqual .DOME null
     8 print "[gold]Waiting for an overdrive dome to be connected..."
     9 printflush message1
    10 set .DOME dome1
 
    51 sensor .DOME_Y .DOME @y
    52 label *label17
    53 sensor *tmp7 switch1 @enabled
-    * op equal *tmp8 *tmp7 false
-    * jump *label19 equal *tmp8 false
+   54 jump *label19 notEqual *tmp7 false
    55 print "[coral]Activate switch to begin supplying overdrive dome..."
    56 print "\n"
    57 printflush message1
 
    71 set :areUnitsAvailable:needed 0
    72 ubind :areUnitsAvailable:type
    73 set :areUnitsAvailable:firstUnit @unit
-    * op notEqual *tmp11 :areUnitsAvailable:firstUnit null
-    * jump *label25 equal *tmp11 false
+   74 jump *label25 equal :areUnitsAvailable:firstUnit null
    75 # "Function: inline def needsFourUnits(in unit)"
    76 set :needsFourUnits:unit @unit
    77 op sub *tmp14 .DOME_X .CORE_X
 
    99 op or *tmp26 *tmp23 *tmp25
   100 jump *label33 equal *tmp26 false
   101 op add :areUnitsAvailable:free :areUnitsAvailable:free 1
-    * op greaterThanEq *tmp28 :areUnitsAvailable:free :areUnitsAvailable:needed
-    * jump *label35 equal *tmp28 false
+  102 jump *label35 lessThan :areUnitsAvailable:free :areUnitsAvailable:needed
   103 set *tmp10 true
   104 jump *label24 always
   105 jump *label36 always
 
   128 print ","
   129 print " free: "
   130 print :areUnitsAvailable:free
-    * op greaterThan *tmp36 :areUnitsAvailable:needed 0
-    * jump *label39 equal *tmp36 false
+  131 jump *label39 lessThanEq :areUnitsAvailable:needed 0
   132 print ", needed: "
   133 print :areUnitsAvailable:needed
   134 jump *label40 always
 
   163 set :chooseUnitType:type @mono
   164 set *tmp39 null
   165 label *label43
-    * op notEqual *tmp40 :chooseUnitType:type UNIT_TYPE
-    * jump *label50 equal *tmp40 false
+  166 jump *label50 equal :chooseUnitType:type UNIT_TYPE
   167 # "Function: inline def areUnitsAvailable(in type, in output)"
   168 set :areUnitsAvailable.1:type :chooseUnitType:type
   169 set :areUnitsAvailable.1:output true
 
   172 set :areUnitsAvailable.1:needed 0
   173 ubind :areUnitsAvailable.1:type
   174 set :areUnitsAvailable.1:firstUnit @unit
-    * op notEqual *tmp43 :areUnitsAvailable.1:firstUnit null
-    * jump *label53 equal *tmp43 false
+  175 jump *label53 equal :areUnitsAvailable.1:firstUnit null
   176 # "Function: inline def needsFourUnits(in unit)"
   177 set :needsFourUnits.1:unit @unit
   178 op sub *tmp46 .DOME_X .CORE_X
 
   200 op or *tmp58 *tmp55 *tmp57
   201 jump *label61 equal *tmp58 false
   202 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * op greaterThanEq *tmp60 :areUnitsAvailable.1:free :areUnitsAvailable.1:needed
-    * jump *label63 equal *tmp60 false
+  203 jump *label63 lessThan :areUnitsAvailable.1:free :areUnitsAvailable.1:needed
   204 set *tmp42 true
   205 jump *label52 always
   206 jump *label64 always
 
   229 print ","
   230 print " free: "
   231 print :areUnitsAvailable.1:free
-    * op greaterThan *tmp68 :areUnitsAvailable.1:needed 0
-    * jump *label67 equal *tmp68 false
+  232 jump *label67 lessThanEq :areUnitsAvailable.1:needed 0
   233 print ", needed: "
   234 print :areUnitsAvailable.1:needed
   235 jump *label68 always
 
   274 set :rebindUnits:count 0
   275 ubind .TYPE
   276 set :rebindUnits:firstUnit @unit
-    * op equal *tmp72 :rebindUnits:firstUnit null
-    * jump *label72 equal *tmp72 false
+  277 jump *label72 notEqual :rebindUnits:firstUnit null
   278 end
   279 jump *label73 always
   280 label *label72
   281 label *label73
   282 label *label74
   283 sensor *tmp74 @unit @controller
-    * op equal *tmp75 *tmp74 @this
-    * jump *label77 equal *tmp75 false
+  284 jump *label77 notEqual *tmp74 @this
   285 op add :rebindUnits:count :rebindUnits:count 1
   286 ucontrol flag 1
   287 set .UNIT_S2 .UNIT_P2
   288 set .UNIT_P2 .UNIT_S1
   289 set .UNIT_S1 .UNIT_P1
   290 set .UNIT_P1 @unit
-    * op notEqual *tmp79 .UNIT_S2 null
-    * jump *label79 equal *tmp79 false
+  291 jump *label79 equal .UNIT_S2 null
   292 jump *label76 always
   293 jump *label80 always
   294 label *label79
 
   310 set :acquireUnit:currentUnit .UNIT_S1
   311 # "Function: inline def rebindUnit(in currentUnit)"
   312 set :rebindUnit:currentUnit :acquireUnit:currentUnit
-    * op notEqual *tmp87 :rebindUnit:currentUnit null
-    * jump *label83 equal *tmp87 false
+  313 jump *label83 equal :rebindUnit:currentUnit null
   314 ubind :rebindUnit:currentUnit
   315 sensor *tmp89 @unit @dead
   316 op equal *tmp90 *tmp89 0
 
   327 label *label84
   328 ubind .TYPE
   329 set :rebindUnit:firstUnit @unit
-    * op notEqual *tmp95 :rebindUnit:firstUnit null
-    * jump *label87 equal *tmp95 false
+  330 jump *label87 equal :rebindUnit:firstUnit null
   331 label *label89
   332 sensor *tmp97 @unit @controlled
-    * op equal *tmp98 *tmp97 0
-    * jump *label92 equal *tmp98 false
+  333 jump *label92 notEqual *tmp97 0
   334 jump *label82 always
   335 jump *label93 always
   336 label *label92
 
   358 set :acquireUnit.1:currentUnit .UNIT_P1
   359 # "Function: inline def rebindUnit(in currentUnit)"
   360 set :rebindUnit.1:currentUnit :acquireUnit.1:currentUnit
-    * op notEqual *tmp106 :rebindUnit.1:currentUnit null
-    * jump *label96 equal *tmp106 false
+  361 jump *label96 equal :rebindUnit.1:currentUnit null
   362 ubind :rebindUnit.1:currentUnit
   363 sensor *tmp108 @unit @dead
   364 op equal *tmp109 *tmp108 0
 
   375 label *label97
   376 ubind .TYPE
   377 set :rebindUnit.1:firstUnit @unit
-    * op notEqual *tmp114 :rebindUnit.1:firstUnit null
-    * jump *label100 equal *tmp114 false
+  378 jump *label100 equal :rebindUnit.1:firstUnit null
   379 label *label102
   380 sensor *tmp116 @unit @controlled
-    * op equal *tmp117 *tmp116 0
-    * jump *label105 equal *tmp117 false
+  381 jump *label105 notEqual *tmp116 0
   382 jump *label95 always
   383 jump *label106 always
   384 label *label105
 
   447 set :acquireUnit.2:currentUnit .UNIT_S2
   448 # "Function: inline def rebindUnit(in currentUnit)"
   449 set :rebindUnit.2:currentUnit :acquireUnit.2:currentUnit
-    * op notEqual *tmp145 :rebindUnit.2:currentUnit null
-    * jump *label117 equal *tmp145 false
+  450 jump *label117 equal :rebindUnit.2:currentUnit null
   451 ubind :rebindUnit.2:currentUnit
   452 sensor *tmp147 @unit @dead
   453 op equal *tmp148 *tmp147 0
 
   464 label *label118
   465 ubind .TYPE
   466 set :rebindUnit.2:firstUnit @unit
-    * op notEqual *tmp153 :rebindUnit.2:firstUnit null
-    * jump *label121 equal *tmp153 false
+  467 jump *label121 equal :rebindUnit.2:firstUnit null
   468 label *label123
   469 sensor *tmp155 @unit @controlled
-    * op equal *tmp156 *tmp155 0
-    * jump *label126 equal *tmp156 false
+  470 jump *label126 notEqual *tmp155 0
   471 jump *label116 always
   472 jump *label127 always
   473 label *label126
 
   495 set :acquireUnit.3:currentUnit .UNIT_P2
   496 # "Function: inline def rebindUnit(in currentUnit)"
   497 set :rebindUnit.3:currentUnit :acquireUnit.3:currentUnit
-    * op notEqual *tmp164 :rebindUnit.3:currentUnit null
-    * jump *label130 equal *tmp164 false
+  498 jump *label130 equal :rebindUnit.3:currentUnit null
   499 ubind :rebindUnit.3:currentUnit
   500 sensor *tmp166 @unit @dead
   501 op equal *tmp167 *tmp166 0
 
   512 label *label131
   513 ubind .TYPE
   514 set :rebindUnit.3:firstUnit @unit
-    * op notEqual *tmp172 :rebindUnit.3:firstUnit null
-    * jump *label134 equal *tmp172 false
+  515 jump *label134 equal :rebindUnit.3:firstUnit null
   516 label *label136
   517 sensor *tmp174 @unit @controlled
-    * op equal *tmp175 *tmp174 0
-    * jump *label139 equal *tmp175 false
+  518 jump *label139 notEqual *tmp174 0
   519 jump *label129 always
   520 jump *label140 always
   521 label *label139
 
   615 set :printDomeStatus:text "\n[green]Silicon[] status:\n"
   616 print :printDomeStatus:text
   617 sensor :printDomeStatus:level .DOME :printDomeStatus:item
-    * op greaterThan *tmp206 :printDomeStatus:level 3
-    * jump *label151 equal *tmp206 false
+  618 jump *label151 lessThanEq :printDomeStatus:level 3
   619 print "  dome:  [green]"
   620 print :printDomeStatus:level
   621 print "["
 
   637 set :processUnit:supply .SUPPLY_S_FIRST
   638 # "Function: inline def rebindUnit(in currentUnit)"
   639 set :rebindUnit.4:currentUnit :processUnit:unit
-    * op notEqual *tmp209 :rebindUnit.4:currentUnit null
-    * jump *label155 equal *tmp209 false
+  640 jump *label155 equal :rebindUnit.4:currentUnit null
   641 ubind :rebindUnit.4:currentUnit
   642 sensor *tmp211 @unit @dead
   643 op equal *tmp212 *tmp211 0
 
   654 label *label156
   655 ubind .TYPE
   656 set :rebindUnit.4:firstUnit @unit
-    * op notEqual *tmp217 :rebindUnit.4:firstUnit null
-    * jump *label159 equal *tmp217 false
+  657 jump *label159 equal :rebindUnit.4:firstUnit null
   658 label *label161
   659 sensor *tmp219 @unit @controlled
-    * op equal *tmp220 *tmp219 0
-    * jump *label164 equal *tmp220 false
+  660 jump *label164 notEqual *tmp219 0
   661 jump *label154 always
   662 jump *label165 always
   663 label *label164
 
   683 op or *tmp229 *tmp227 *tmp228
   684 jump *label166 equal *tmp229 false
   685 sensor *tmp231 @unit @firstItem
-    * op equal *tmp232 *tmp231 :processUnit:item
-    * jump *label168 equal *tmp232 false
+  686 jump *label168 notEqual *tmp231 :processUnit:item
   687 set :processUnit:state 3
   688 jump *label169 always
   689 label *label168
   690 sensor *tmp234 @unit @totalItems
-    * op equal *tmp235 *tmp234 0
-    * jump *label170 equal *tmp235 false
+  691 jump *label170 notEqual *tmp234 0
   692 set :processUnit:state 2
   693 jump *label171 always
   694 label *label170
 
   705 jump *label167 always
   706 label *label166
   707 label *label167
-    * op equal *tmp239 :processUnit:state 2
-    * jump *label174 equal *tmp239 false
+  708 jump *label174 notEqual :processUnit:state 2
   709 ucontrol within .CORE_X .CORE_Y 8 *tmp241
   710 jump *label176 equal *tmp241 false
   711 ucontrol itemTake .CORE :processUnit:item .UNIT_CAPACITY
   712 sensor *tmp243 @unit @totalItems
-    * op greaterThanEq *tmp244 *tmp243 .UNIT_CAPACITY
-    * jump *label178 equal *tmp244 false
+  713 jump *label178 lessThan *tmp243 .UNIT_CAPACITY
   714 ucontrol approach .DOME_X .DOME_Y 6
   715 set :processUnit:state 3
   716 jump *label179 always
 
   732 jump *label175 always
   733 label *label174
   734 label *label175
-    * op equal *tmp253 :processUnit:state 3
-    * jump *label180 equal *tmp253 false
+  735 jump *label180 notEqual :processUnit:state 3
   736 ucontrol within .DOME_X .DOME_Y 8 *tmp255
   737 jump *label182 equal *tmp255 false
   738 jump *label184 equal :processUnit:supply false
 
   744 set .MSG ", waiting\n"
   745 label *label185
   746 sensor *tmp258 @unit @totalItems
-    * op lessThanEq *tmp259 *tmp258 0
-    * jump *label186 equal *tmp259 false
+  747 jump *label186 greaterThan *tmp258 0
   748 ucontrol approach .CORE_X .CORE_Y 6
   749 set :processUnit:state 2
   750 jump *label187 always
 
   776 print *tmp268
   777 print "["
   778 print "]"
-    * op greaterThanEq *tmp269 :processUnit:distance 0
-    * jump *label188 equal *tmp269 false
+  779 jump *label188 lessThan :processUnit:distance 0
   780 print .MSG
   781 print :processUnit:distance
   782 print "["
 
   798 set :processUnit.1:supply *tmp273
   799 # "Function: inline def rebindUnit(in currentUnit)"
   800 set :rebindUnit.5:currentUnit :processUnit.1:unit
-    * op notEqual *tmp275 :rebindUnit.5:currentUnit null
-    * jump *label194 equal *tmp275 false
+  801 jump *label194 equal :rebindUnit.5:currentUnit null
   802 ubind :rebindUnit.5:currentUnit
   803 sensor *tmp277 @unit @dead
   804 op equal *tmp278 *tmp277 0
 
   815 label *label195
   816 ubind .TYPE
   817 set :rebindUnit.5:firstUnit @unit
-    * op notEqual *tmp283 :rebindUnit.5:firstUnit null
-    * jump *label198 equal *tmp283 false
+  818 jump *label198 equal :rebindUnit.5:firstUnit null
   819 label *label200
   820 sensor *tmp285 @unit @controlled
-    * op equal *tmp286 *tmp285 0
-    * jump *label203 equal *tmp286 false
+  821 jump *label203 notEqual *tmp285 0
   822 jump *label193 always
   823 jump *label204 always
   824 label *label203
 
   844 op or *tmp295 *tmp293 *tmp294
   845 jump *label205 equal *tmp295 false
   846 sensor *tmp297 @unit @firstItem
-    * op equal *tmp298 *tmp297 :processUnit.1:item
-    * jump *label207 equal *tmp298 false
+  847 jump *label207 notEqual *tmp297 :processUnit.1:item
   848 set :processUnit.1:state 3
   849 jump *label208 always
   850 label *label207
   851 sensor *tmp300 @unit @totalItems
-    * op equal *tmp301 *tmp300 0
-    * jump *label209 equal *tmp301 false
+  852 jump *label209 notEqual *tmp300 0
   853 set :processUnit.1:state 2
   854 jump *label210 always
   855 label *label209
 
   866 jump *label206 always
   867 label *label205
   868 label *label206
-    * op equal *tmp305 :processUnit.1:state 2
-    * jump *label213 equal *tmp305 false
+  869 jump *label213 notEqual :processUnit.1:state 2
   870 ucontrol within .CORE_X .CORE_Y 8 *tmp307
   871 jump *label215 equal *tmp307 false
   872 ucontrol itemTake .CORE :processUnit.1:item .UNIT_CAPACITY
   873 sensor *tmp309 @unit @totalItems
-    * op greaterThanEq *tmp310 *tmp309 .UNIT_CAPACITY
-    * jump *label217 equal *tmp310 false
+  874 jump *label217 lessThan *tmp309 .UNIT_CAPACITY
   875 ucontrol approach .DOME_X .DOME_Y 6
   876 set :processUnit.1:state 3
   877 jump *label218 always
 
   893 jump *label214 always
   894 label *label213
   895 label *label214
-    * op equal *tmp319 :processUnit.1:state 3
-    * jump *label219 equal *tmp319 false
+  896 jump *label219 notEqual :processUnit.1:state 3
   897 ucontrol within .DOME_X .DOME_Y 8 *tmp321
   898 jump *label221 equal *tmp321 false
   899 jump *label223 equal :processUnit.1:supply false
 
   905 set .MSG ", waiting\n"
   906 label *label224
   907 sensor *tmp324 @unit @totalItems
-    * op lessThanEq *tmp325 *tmp324 0
-    * jump *label225 equal *tmp325 false
+  908 jump *label225 greaterThan *tmp324 0
   909 ucontrol approach .CORE_X .CORE_Y 6
   910 set :processUnit.1:state 2
   911 jump *label226 always
 
   937 print *tmp334
   938 print "["
   939 print "]"
-    * op greaterThanEq *tmp335 :processUnit.1:distance 0
-    * jump *label227 equal *tmp335 false
+  940 jump *label227 lessThan :processUnit.1:distance 0
   941 print .MSG
   942 print :processUnit.1:distance
   943 print "["
 
   967 set :printDomeStatus.1:text "\n[green]Phase fabric[] status:\n"
   968 print :printDomeStatus.1:text
   969 sensor :printDomeStatus.1:level .DOME :printDomeStatus.1:item
-    * op greaterThan *tmp344 :printDomeStatus.1:level 3
-    * jump *label232 equal *tmp344 false
+  970 jump *label232 lessThanEq :printDomeStatus.1:level 3
   971 print "  dome:  [green]"
   972 print :printDomeStatus.1:level
   973 print "["
 
   989 set :processUnit.2:supply .SUPPLY_P_FIRST
   990 # "Function: inline def rebindUnit(in currentUnit)"
   991 set :rebindUnit.6:currentUnit :processUnit.2:unit
-    * op notEqual *tmp347 :rebindUnit.6:currentUnit null
-    * jump *label236 equal *tmp347 false
+  992 jump *label236 equal :rebindUnit.6:currentUnit null
   993 ubind :rebindUnit.6:currentUnit
   994 sensor *tmp349 @unit @dead
   995 op equal *tmp350 *tmp349 0
 
  1006 label *label237
  1007 ubind .TYPE
  1008 set :rebindUnit.6:firstUnit @unit
-    * op notEqual *tmp355 :rebindUnit.6:firstUnit null
-    * jump *label240 equal *tmp355 false
+ 1009 jump *label240 equal :rebindUnit.6:firstUnit null
  1010 label *label242
  1011 sensor *tmp357 @unit @controlled
-    * op equal *tmp358 *tmp357 0
-    * jump *label245 equal *tmp358 false
+ 1012 jump *label245 notEqual *tmp357 0
  1013 jump *label235 always
  1014 jump *label246 always
  1015 label *label245
 
  1035 op or *tmp367 *tmp365 *tmp366
  1036 jump *label247 equal *tmp367 false
  1037 sensor *tmp369 @unit @firstItem
-    * op equal *tmp370 *tmp369 :processUnit.2:item
-    * jump *label249 equal *tmp370 false
+ 1038 jump *label249 notEqual *tmp369 :processUnit.2:item
  1039 set :processUnit.2:state 3
  1040 jump *label250 always
  1041 label *label249
  1042 sensor *tmp372 @unit @totalItems
-    * op equal *tmp373 *tmp372 0
-    * jump *label251 equal *tmp373 false
+ 1043 jump *label251 notEqual *tmp372 0
  1044 set :processUnit.2:state 2
  1045 jump *label252 always
  1046 label *label251
 
  1057 jump *label248 always
  1058 label *label247
  1059 label *label248
-    * op equal *tmp377 :processUnit.2:state 2
-    * jump *label255 equal *tmp377 false
+ 1060 jump *label255 notEqual :processUnit.2:state 2
  1061 ucontrol within .CORE_X .CORE_Y 8 *tmp379
  1062 jump *label257 equal *tmp379 false
  1063 ucontrol itemTake .CORE :processUnit.2:item .UNIT_CAPACITY
  1064 sensor *tmp381 @unit @totalItems
-    * op greaterThanEq *tmp382 *tmp381 .UNIT_CAPACITY
-    * jump *label259 equal *tmp382 false
+ 1065 jump *label259 lessThan *tmp381 .UNIT_CAPACITY
  1066 ucontrol approach .DOME_X .DOME_Y 6
  1067 set :processUnit.2:state 3
  1068 jump *label260 always
 
  1084 jump *label256 always
  1085 label *label255
  1086 label *label256
-    * op equal *tmp391 :processUnit.2:state 3
-    * jump *label261 equal *tmp391 false
+ 1087 jump *label261 notEqual :processUnit.2:state 3
  1088 ucontrol within .DOME_X .DOME_Y 8 *tmp393
  1089 jump *label263 equal *tmp393 false
  1090 jump *label265 equal :processUnit.2:supply false
 
  1096 set .MSG ", waiting\n"
  1097 label *label266
  1098 sensor *tmp396 @unit @totalItems
-    * op lessThanEq *tmp397 *tmp396 0
-    * jump *label267 equal *tmp397 false
+ 1099 jump *label267 greaterThan *tmp396 0
  1100 ucontrol approach .CORE_X .CORE_Y 6
  1101 set :processUnit.2:state 2
  1102 jump *label268 always
 
  1128 print *tmp406
  1129 print "["
  1130 print "]"
-    * op greaterThanEq *tmp407 :processUnit.2:distance 0
-    * jump *label269 equal *tmp407 false
+ 1131 jump *label269 lessThan :processUnit.2:distance 0
  1132 print .MSG
  1133 print :processUnit.2:distance
  1134 print "["
 
  1150 set :processUnit.3:supply *tmp411
  1151 # "Function: inline def rebindUnit(in currentUnit)"
  1152 set :rebindUnit.7:currentUnit :processUnit.3:unit
-    * op notEqual *tmp413 :rebindUnit.7:currentUnit null
-    * jump *label275 equal *tmp413 false
+ 1153 jump *label275 equal :rebindUnit.7:currentUnit null
  1154 ubind :rebindUnit.7:currentUnit
  1155 sensor *tmp415 @unit @dead
  1156 op equal *tmp416 *tmp415 0
 
  1167 label *label276
  1168 ubind .TYPE
  1169 set :rebindUnit.7:firstUnit @unit
-    * op notEqual *tmp421 :rebindUnit.7:firstUnit null
-    * jump *label279 equal *tmp421 false
+ 1170 jump *label279 equal :rebindUnit.7:firstUnit null
  1171 label *label281
  1172 sensor *tmp423 @unit @controlled
-    * op equal *tmp424 *tmp423 0
-    * jump *label284 equal *tmp424 false
+ 1173 jump *label284 notEqual *tmp423 0
  1174 jump *label274 always
  1175 jump *label285 always
  1176 label *label284
 
  1196 op or *tmp433 *tmp431 *tmp432
  1197 jump *label286 equal *tmp433 false
  1198 sensor *tmp435 @unit @firstItem
-    * op equal *tmp436 *tmp435 :processUnit.3:item
-    * jump *label288 equal *tmp436 false
+ 1199 jump *label288 notEqual *tmp435 :processUnit.3:item
  1200 set :processUnit.3:state 3
  1201 jump *label289 always
  1202 label *label288
  1203 sensor *tmp438 @unit @totalItems
-    * op equal *tmp439 *tmp438 0
-    * jump *label290 equal *tmp439 false
+ 1204 jump *label290 notEqual *tmp438 0
  1205 set :processUnit.3:state 2
  1206 jump *label291 always
  1207 label *label290
 
  1218 jump *label287 always
  1219 label *label286
  1220 label *label287
-    * op equal *tmp443 :processUnit.3:state 2
-    * jump *label294 equal *tmp443 false
+ 1221 jump *label294 notEqual :processUnit.3:state 2
  1222 ucontrol within .CORE_X .CORE_Y 8 *tmp445
  1223 jump *label296 equal *tmp445 false
  1224 ucontrol itemTake .CORE :processUnit.3:item .UNIT_CAPACITY
  1225 sensor *tmp447 @unit @totalItems
-    * op greaterThanEq *tmp448 *tmp447 .UNIT_CAPACITY
-    * jump *label298 equal *tmp448 false
+ 1226 jump *label298 lessThan *tmp447 .UNIT_CAPACITY
  1227 ucontrol approach .DOME_X .DOME_Y 6
  1228 set :processUnit.3:state 3
  1229 jump *label299 always
 
  1245 jump *label295 always
  1246 label *label294
  1247 label *label295
-    * op equal *tmp457 :processUnit.3:state 3
-    * jump *label300 equal *tmp457 false
+ 1248 jump *label300 notEqual :processUnit.3:state 3
  1249 ucontrol within .DOME_X .DOME_Y 8 *tmp459
  1250 jump *label302 equal *tmp459 false
  1251 jump *label304 equal :processUnit.3:supply false
 
  1257 set .MSG ", waiting\n"
  1258 label *label305
  1259 sensor *tmp462 @unit @totalItems
-    * op lessThanEq *tmp463 *tmp462 0
-    * jump *label306 equal *tmp463 false
+ 1260 jump *label306 greaterThan *tmp462 0
  1261 ucontrol approach .CORE_X .CORE_Y 6
  1262 set :processUnit.3:state 2
  1263 jump *label307 always
 
  1289 print *tmp472
  1290 print "["
  1291 print "]"
-    * op greaterThanEq *tmp473 :processUnit.3:distance 0
-    * jump *label308 equal *tmp473 false
+ 1292 jump *label308 lessThan :processUnit.3:distance 0
  1293 print .MSG
  1294 print :processUnit.3:distance
  1295 print "["
 
  1334 set :areUnitsAvailable.2:needed 0
  1335 ubind :areUnitsAvailable.2:type
  1336 set :areUnitsAvailable.2:firstUnit @unit
-    * op notEqual *tmp488 :areUnitsAvailable.2:firstUnit null
-    * jump *label315 equal *tmp488 false
+ 1337 jump *label315 equal :areUnitsAvailable.2:firstUnit null
  1338 # "Function: inline def needsFourUnits(in unit)"
  1339 set :needsFourUnits.3:unit @unit
  1340 op sub *tmp491 .DOME_X .CORE_X
 
  1362 op or *tmp503 *tmp500 *tmp502
  1363 jump *label323 equal *tmp503 false
  1364 op add :areUnitsAvailable.2:free :areUnitsAvailable.2:free 1
-    * op greaterThanEq *tmp505 :areUnitsAvailable.2:free :areUnitsAvailable.2:needed
-    * jump *label325 equal *tmp505 false
+ 1365 jump *label325 lessThan :areUnitsAvailable.2:free :areUnitsAvailable.2:needed
  1366 set *tmp487 true
  1367 jump *label314 always
  1368 jump *label326 always
 
  1391 print ","
  1392 print " free: "
  1393 print :areUnitsAvailable.2:free
-    * op greaterThan *tmp513 :areUnitsAvailable.2:needed 0
-    * jump *label329 equal *tmp513 false
+ 1394 jump *label329 lessThanEq :areUnitsAvailable.2:needed 0
  1395 print ", needed: "
  1396 print :areUnitsAvailable.2:needed
  1397 jump *label330 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-81 instructions):
 
    34 call *label0 :locateCore*retaddr :locateCore*retval
    35 jump *label15 equal :locateCore*retval false
    36 jump *label1 always
-    * jump *label16 always
    37 label *label15
    38 label *label16
    39 label *label9
 
   101 jump *label35 lessThan :areUnitsAvailable:free :areUnitsAvailable:needed
   102 set *tmp10 true
   103 jump *label24 always
-    * jump *label36 always
   104 label *label35
   105 label *label36
   106 jump *label34 always
 
   115 op land *tmp34 *tmp31 *tmp33
   116 jump *label30 notEqual *tmp34 false
   117 label *label32
-    * jump *label26 always
   118 label *label25
   119 label *label26
   120 jump *label37 equal :areUnitsAvailable:output false
 
   128 jump *label39 lessThanEq :areUnitsAvailable:needed 0
   129 print ", needed: "
   130 print :areUnitsAvailable:needed
-    * jump *label40 always
   131 label *label39
   132 label *label40
   133 print "\n"
-    * jump *label38 always
   134 label *label37
   135 label *label38
   136 set *tmp10 false
 
   140 jump *label41 equal *tmp10 false
   141 set *tmp9 UNIT_TYPE
   142 jump *label20 always
-    * jump *label42 always
   143 label *label41
   144 label *label42
   145 set :chooseUnitType:type @flare
 
   197 jump *label63 lessThan :areUnitsAvailable.1:free :areUnitsAvailable.1:needed
   198 set *tmp42 true
   199 jump *label52 always
-    * jump *label64 always
   200 label *label63
   201 label *label64
   202 jump *label62 always
 
   211 op land *tmp66 *tmp63 *tmp65
   212 jump *label58 notEqual *tmp66 false
   213 label *label60
-    * jump *label54 always
   214 label *label53
   215 label *label54
   216 jump *label65 equal :areUnitsAvailable.1:output false
 
   224 jump *label67 lessThanEq :areUnitsAvailable.1:needed 0
   225 print ", needed: "
   226 print :areUnitsAvailable.1:needed
-    * jump *label68 always
   227 label *label67
   228 label *label68
   229 print "\n"
-    * jump *label66 always
   230 label *label65
   231 label *label66
   232 set *tmp42 false
 
   237 printflush null
   238 set *tmp9 :chooseUnitType:type
   239 jump *label20 always
-    * jump *label70 always
   240 label *label69
   241 label *label70
-    * jump *label51 always
   242 label *label50
   243 label *label51
   244 label *label44
 
   264 set :rebindUnits:firstUnit @unit
   265 jump *label72 notEqual :rebindUnits:firstUnit null
   266 end
-    * jump *label73 always
   267 label *label72
   268 label *label73
   269 label *label74
 
   277 set .UNIT_P1 @unit
   278 jump *label79 equal .UNIT_S2 null
   279 jump *label76 always
-    * jump *label80 always
   280 label *label79
   281 label *label80
-    * jump *label78 always
   282 label *label77
   283 label *label78
   284 ubind .TYPE
 
   289 op land *tmp84 *tmp81 *tmp83
   290 jump *label74 notEqual *tmp84 false
   291 label *label76
-    * jump *label71 always
   292 label *label71
   293 # "Function: inline def acquireUnit(in currentUnit)"
   294 set :acquireUnit:currentUnit .UNIT_S1
 
   303 op land *tmp93 *tmp90 *tmp92
   304 jump *label85 equal *tmp93 false
   305 jump *label82 always
-    * jump *label86 always
   306 label *label85
   307 label *label86
-    * jump *label84 always
   308 label *label83
   309 label *label84
   310 ubind .TYPE
 
   314 sensor *tmp97 @unit @controlled
   315 jump *label92 notEqual *tmp97 0
   316 jump *label82 always
-    * jump *label93 always
   317 label *label92
   318 label *label93
   319 ubind .TYPE
 
   324 op land *tmp103 *tmp100 *tmp102
   325 jump *label89 notEqual *tmp103 false
   326 label *label91
-    * jump *label88 always
   327 label *label87
   328 label *label88
   329 end
 
   347 op land *tmp112 *tmp109 *tmp111
   348 jump *label98 equal *tmp112 false
   349 jump *label95 always
-    * jump *label99 always
   350 label *label98
   351 label *label99
-    * jump *label97 always
   352 label *label96
   353 label *label97
   354 ubind .TYPE
 
   358 sensor *tmp116 @unit @controlled
   359 jump *label105 notEqual *tmp116 0
   360 jump *label95 always
-    * jump *label106 always
   361 label *label105
   362 label *label106
   363 ubind .TYPE
 
   368 op land *tmp122 *tmp119 *tmp121
   369 jump *label102 notEqual *tmp122 false
   370 label *label104
-    * jump *label101 always
   371 label *label100
   372 label *label101
   373 end
 
   393 label *label109
   394 set .UNIT_S1 :swap:a
   395 set .UNIT_P1 :swap:b
-    * jump *label108 always
   396 label *label107
   397 label *label108
   398 sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
 
   401 op strictEqual *tmp132 .SPEED null
   402 jump *label110 equal *tmp132 false
   403 stop
-    * jump *label111 always
   404 label *label110
   405 label *label111
   406 # "Function: inline def needsFourUnits(in unit)"
 
   430 op land *tmp151 *tmp148 *tmp150
   431 jump *label119 equal *tmp151 false
   432 jump *label116 always
-    * jump *label120 always
   433 label *label119
   434 label *label120
-    * jump *label118 always
   435 label *label117
   436 label *label118
   437 ubind .TYPE
 
   441 sensor *tmp155 @unit @controlled
   442 jump *label126 notEqual *tmp155 0
   443 jump *label116 always
-    * jump *label127 always
   444 label *label126
   445 label *label127
   446 ubind .TYPE
 
   451 op land *tmp161 *tmp158 *tmp160
   452 jump *label123 notEqual *tmp161 false
   453 label *label125
-    * jump *label122 always
   454 label *label121
   455 label *label122
   456 end
 
   474 op land *tmp170 *tmp167 *tmp169
   475 jump *label132 equal *tmp170 false
   476 jump *label129 always
-    * jump *label133 always
   477 label *label132
   478 label *label133
-    * jump *label131 always
   479 label *label130
   480 label *label131
   481 ubind .TYPE
 
   485 sensor *tmp174 @unit @controlled
   486 jump *label139 notEqual *tmp174 0
   487 jump *label129 always
-    * jump *label140 always
   488 label *label139
   489 label *label140
   490 ubind .TYPE
 
   495 op land *tmp180 *tmp177 *tmp179
   496 jump *label136 notEqual *tmp180 false
   497 label *label138
-    * jump *label135 always
   498 label *label134
   499 label *label135
   500 end
 
   520 label *label143
   521 set .UNIT_S1 :swap.1:a
   522 set .UNIT_P2 :swap.1:b
-    * jump *label142 always
   523 label *label141
   524 label *label142
   525 sensor *tmp187 .UNIT_S2 @firstItem
 
   537 label *label146
   538 set .UNIT_S2 :swap.2:a
   539 set .UNIT_P2 :swap.2:b
-    * jump *label145 always
   540 label *label144
   541 label *label145
   542 set .GROUP1 "unit  1"
 
   610 op land *tmp215 *tmp212 *tmp214
   611 jump *label157 equal *tmp215 false
   612 jump *label154 always
-    * jump *label158 always
   613 label *label157
   614 label *label158
-    * jump *label156 always
   615 label *label155
   616 label *label156
   617 ubind .TYPE
 
   621 sensor *tmp219 @unit @controlled
   622 jump *label164 notEqual *tmp219 0
   623 jump *label154 always
-    * jump *label165 always
   624 label *label164
   625 label *label165
   626 ubind .TYPE
 
   631 op land *tmp225 *tmp222 *tmp224
   632 jump *label161 notEqual *tmp225 false
   633 label *label163
-    * jump *label160 always
   634 label *label159
   635 label *label160
   636 end
 
   657 ucontrol within .CORE_X .CORE_Y 8 *tmp237
   658 jump *label172 equal *tmp237 false
   659 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * jump *label173 always
   660 label *label172
   661 label *label173
   662 label *label171
   663 label *label169
-    * jump *label167 always
   664 label *label166
   665 label *label167
   666 jump *label174 notEqual :processUnit:state 2
 
   687 op idiv *tmp251 *tmp250 .SPEED_TENTHS
   688 op div :processUnit:distance *tmp251 10
   689 label *label177
-    * jump *label175 always
   690 label *label174
   691 label *label175
   692 jump *label180 notEqual :processUnit:state 3
 
   704 jump *label186 greaterThan *tmp258 0
   705 ucontrol approach .CORE_X .CORE_Y 6
   706 set :processUnit:state 2
-    * jump *label187 always
   707 label *label186
   708 label *label187
   709 jump *label183 always
 
   718 op idiv *tmp266 *tmp265 .SPEED_TENTHS
   719 op div :processUnit:distance *tmp266 10
   720 label *label183
-    * jump *label181 always
   721 label *label180
   722 label *label181
   723 ucontrol flag :processUnit:state
 
   762 op land *tmp281 *tmp278 *tmp280
   763 jump *label196 equal *tmp281 false
   764 jump *label193 always
-    * jump *label197 always
   765 label *label196
   766 label *label197
-    * jump *label195 always
   767 label *label194
   768 label *label195
   769 ubind .TYPE
 
   773 sensor *tmp285 @unit @controlled
   774 jump *label203 notEqual *tmp285 0
   775 jump *label193 always
-    * jump *label204 always
   776 label *label203
   777 label *label204
   778 ubind .TYPE
 
   783 op land *tmp291 *tmp288 *tmp290
   784 jump *label200 notEqual *tmp291 false
   785 label *label202
-    * jump *label199 always
   786 label *label198
   787 label *label199
   788 end
 
   809 ucontrol within .CORE_X .CORE_Y 8 *tmp303
   810 jump *label211 equal *tmp303 false
   811 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * jump *label212 always
   812 label *label211
   813 label *label212
   814 label *label210
   815 label *label208
-    * jump *label206 always
   816 label *label205
   817 label *label206
   818 jump *label213 notEqual :processUnit.1:state 2
 
   839 op idiv *tmp317 *tmp316 .SPEED_TENTHS
   840 op div :processUnit.1:distance *tmp317 10
   841 label *label216
-    * jump *label214 always
   842 label *label213
   843 label *label214
   844 jump *label219 notEqual :processUnit.1:state 3
 
   856 jump *label225 greaterThan *tmp324 0
   857 ucontrol approach .CORE_X .CORE_Y 6
   858 set :processUnit.1:state 2
-    * jump *label226 always
   859 label *label225
   860 label *label226
   861 jump *label222 always
 
   870 op idiv *tmp332 *tmp331 .SPEED_TENTHS
   871 op div :processUnit.1:distance *tmp332 10
   872 label *label222
-    * jump *label220 always
   873 label *label219
   874 label *label220
   875 ucontrol flag :processUnit.1:state
 
   905 op equal *tmp338 *tmp341 0
   906 label *label230
   907 set .SUPPLY_S_FIRST *tmp338
-    * jump *label191 always
   908 label *label190
   909 label *label191
   910 # "Function: inline void printDomeStatus(in item, in text)"
 
   943 op land *tmp353 *tmp350 *tmp352
   944 jump *label238 equal *tmp353 false
   945 jump *label235 always
-    * jump *label239 always
   946 label *label238
   947 label *label239
-    * jump *label237 always
   948 label *label236
   949 label *label237
   950 ubind .TYPE
 
   954 sensor *tmp357 @unit @controlled
   955 jump *label245 notEqual *tmp357 0
   956 jump *label235 always
-    * jump *label246 always
   957 label *label245
   958 label *label246
   959 ubind .TYPE
 
   964 op land *tmp363 *tmp360 *tmp362
   965 jump *label242 notEqual *tmp363 false
   966 label *label244
-    * jump *label241 always
   967 label *label240
   968 label *label241
   969 end
 
   990 ucontrol within .CORE_X .CORE_Y 8 *tmp375
   991 jump *label253 equal *tmp375 false
   992 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * jump *label254 always
   993 label *label253
   994 label *label254
   995 label *label252
   996 label *label250
-    * jump *label248 always
   997 label *label247
   998 label *label248
   999 jump *label255 notEqual :processUnit.2:state 2
 
  1020 op idiv *tmp389 *tmp388 .SPEED_TENTHS
  1021 op div :processUnit.2:distance *tmp389 10
  1022 label *label258
-    * jump *label256 always
  1023 label *label255
  1024 label *label256
  1025 jump *label261 notEqual :processUnit.2:state 3
 
  1037 jump *label267 greaterThan *tmp396 0
  1038 ucontrol approach .CORE_X .CORE_Y 6
  1039 set :processUnit.2:state 2
-    * jump *label268 always
  1040 label *label267
  1041 label *label268
  1042 jump *label264 always
 
  1051 op idiv *tmp404 *tmp403 .SPEED_TENTHS
  1052 op div :processUnit.2:distance *tmp404 10
  1053 label *label264
-    * jump *label262 always
  1054 label *label261
  1055 label *label262
  1056 ucontrol flag :processUnit.2:state
 
  1095 op land *tmp419 *tmp416 *tmp418
  1096 jump *label277 equal *tmp419 false
  1097 jump *label274 always
-    * jump *label278 always
  1098 label *label277
  1099 label *label278
-    * jump *label276 always
  1100 label *label275
  1101 label *label276
  1102 ubind .TYPE
 
  1106 sensor *tmp423 @unit @controlled
  1107 jump *label284 notEqual *tmp423 0
  1108 jump *label274 always
-    * jump *label285 always
  1109 label *label284
  1110 label *label285
  1111 ubind .TYPE
 
  1116 op land *tmp429 *tmp426 *tmp428
  1117 jump *label281 notEqual *tmp429 false
  1118 label *label283
-    * jump *label280 always
  1119 label *label279
  1120 label *label280
  1121 end
 
  1142 ucontrol within .CORE_X .CORE_Y 8 *tmp441
  1143 jump *label292 equal *tmp441 false
  1144 ucontrol itemDrop .CORE .UNIT_CAPACITY
-    * jump *label293 always
  1145 label *label292
  1146 label *label293
  1147 label *label291
  1148 label *label289
-    * jump *label287 always
  1149 label *label286
  1150 label *label287
  1151 jump *label294 notEqual :processUnit.3:state 2
 
  1172 op idiv *tmp455 *tmp454 .SPEED_TENTHS
  1173 op div :processUnit.3:distance *tmp455 10
  1174 label *label297
-    * jump *label295 always
  1175 label *label294
  1176 label *label295
  1177 jump *label300 notEqual :processUnit.3:state 3
 
  1189 jump *label306 greaterThan *tmp462 0
  1190 ucontrol approach .CORE_X .CORE_Y 6
  1191 set :processUnit.3:state 2
-    * jump *label307 always
  1192 label *label306
  1193 label *label307
  1194 jump *label303 always
 
  1203 op idiv *tmp470 *tmp469 .SPEED_TENTHS
  1204 op div :processUnit.3:distance *tmp470 10
  1205 label *label303
-    * jump *label301 always
  1206 label *label300
  1207 label *label301
  1208 ucontrol flag :processUnit.3:state
 
  1238 op equal *tmp476 *tmp479 0
  1239 label *label311
  1240 set .SUPPLY_P_FIRST *tmp476
-    * jump *label272 always
  1241 label *label271
  1242 label *label272
  1243 op sub *tmp481 @time :start
 
  1291 jump *label325 lessThan :areUnitsAvailable.2:free :areUnitsAvailable.2:needed
  1292 set *tmp487 true
  1293 jump *label314 always
-    * jump *label326 always
  1294 label *label325
  1295 label *label326
  1296 jump *label324 always
 
  1305 op land *tmp511 *tmp508 *tmp510
  1306 jump *label320 notEqual *tmp511 false
  1307 label *label322
-    * jump *label316 always
  1308 label *label315
  1309 label *label316
  1310 jump *label327 equal :areUnitsAvailable.2:output false
 
  1318 jump *label329 lessThanEq :areUnitsAvailable.2:needed 0
  1319 print ", needed: "
  1320 print :areUnitsAvailable.2:needed
-    * jump *label330 always
  1321 label *label329
  1322 label *label330
  1323 print "\n"
-    * jump *label328 always
  1324 label *label327
  1325 label *label328
  1326 set *tmp487 false
 
  1329 label *label314
  1330 jump *label331 equal *tmp487 false
  1331 end
-    * jump *label332 always
  1332 label *label331
  1333 label *label332
  1334 op add :unitCheck @time 5000
-    * jump *label313 always
  1335 label *label312
  1336 label *label313
  1337 label *label148
 
  1348 op or *tmp521 *tmp518 *tmp520
  1349 jump *label334 equal *tmp521 false
  1350 ulocate building core false @copper 0 0 0 .CORE
-    * jump *label335 always
  1351 label *label334
  1352 label *label335
  1353 set :locateCore*retval .CORE

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-11 instructions):
 
    68 set :areUnitsAvailable:free 0
    69 set :areUnitsAvailable:occupied 0
    70 set :areUnitsAvailable:needed 0
-    * ubind :areUnitsAvailable:type
+   71 ubind UNIT_TYPE
    72 set :areUnitsAvailable:firstUnit @unit
    73 jump *label25 equal :areUnitsAvailable:firstUnit null
    74 # "Function: inline def needsFourUnits(in unit)"
 
    81 op div :needsFourUnits:travel_time *tmp17 *tmp18
    82 op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
    83 jump *label27 always
-    * set *tmp13 null
    84 label *label27
    85 jump *label28 equal *tmp13 false
    86 set *tmp21 4
 
    97 op or *tmp26 *tmp23 *tmp25
    98 jump *label33 equal *tmp26 false
    99 op add :areUnitsAvailable:free :areUnitsAvailable:free 1
-    * jump *label35 lessThan :areUnitsAvailable:free :areUnitsAvailable:needed
+  100 jump *label35 lessThan :areUnitsAvailable:free *tmp21
   101 set *tmp10 true
   102 jump *label24 always
   103 label *label35
 
   106 label *label33
   107 op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
   108 label *label34
-    * ubind :areUnitsAvailable:type
+  109 ubind UNIT_TYPE
   110 label *label31
   111 op notEqual *tmp31 @unit :areUnitsAvailable:firstUnit
   112 sensor *tmp32 :areUnitsAvailable:firstUnit @dead
 
   116 label *label32
   117 label *label25
   118 label *label26
-    * jump *label37 equal :areUnitsAvailable:output false
-    * print :areUnitsAvailable:type
+  119 jump *label37 equal true false
+  120 print UNIT_TYPE
   121 print ":"
   122 print " occupied: "
   123 print :areUnitsAvailable:occupied
 
   134 label *label38
   135 set *tmp10 false
   136 jump *label24 always
-    * set *tmp10 null
   137 label *label24
   138 jump *label41 equal *tmp10 false
   139 set *tmp9 UNIT_TYPE
 
   162 set :areUnitsAvailable.1:free 0
   163 set :areUnitsAvailable.1:occupied 0
   164 set :areUnitsAvailable.1:needed 0
-    * ubind :areUnitsAvailable.1:type
+  165 ubind :chooseUnitType:type
   166 set :areUnitsAvailable.1:firstUnit @unit
   167 jump *label53 equal :areUnitsAvailable.1:firstUnit null
   168 # "Function: inline def needsFourUnits(in unit)"
 
   175 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   176 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
   177 jump *label55 always
-    * set *tmp45 null
   178 label *label55
   179 jump *label56 equal *tmp45 false
   180 set *tmp53 4
 
   191 op or *tmp58 *tmp55 *tmp57
   192 jump *label61 equal *tmp58 false
   193 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label63 lessThan :areUnitsAvailable.1:free :areUnitsAvailable.1:needed
+  194 jump *label63 lessThan :areUnitsAvailable.1:free *tmp53
   195 set *tmp42 true
   196 jump *label52 always
   197 label *label63
 
   200 label *label61
   201 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   202 label *label62
-    * ubind :areUnitsAvailable.1:type
+  203 ubind :chooseUnitType:type
   204 label *label59
   205 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   206 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
 
   210 label *label60
   211 label *label53
   212 label *label54
-    * jump *label65 equal :areUnitsAvailable.1:output false
-    * print :areUnitsAvailable.1:type
+  213 jump *label65 equal true false
+  214 print :chooseUnitType:type
   215 print ":"
   216 print " occupied: "
   217 print :areUnitsAvailable.1:occupied
 
   228 label *label66
   229 set *tmp42 false
   230 jump *label52 always
-    * set *tmp42 null
   231 label *label52
   232 jump *label69 equal *tmp42 false
   233 printflush null
 
   252 printflush message1
   253 # "Function: inline def rebindUnits()"
   254 set .UNIT_P2 null
-    * set .UNIT_S2 .UNIT_P2
-    * set .UNIT_P1 .UNIT_S2
-    * set .UNIT_S1 .UNIT_P1
+  255 set .UNIT_S2 null
+  256 set .UNIT_P1 .UNIT_P2
+  257 set .UNIT_S1 .UNIT_S2
   258 set :rebindUnits:count 0
-    * ubind .TYPE
+  259 ubind *tmp9
   260 set :rebindUnits:firstUnit @unit
   261 jump *label72 notEqual :rebindUnits:firstUnit null
   262 end
 
   277 label *label80
   278 label *label77
   279 label *label78
-    * ubind .TYPE
+  280 ubind *tmp9
   281 label *label75
   282 op notEqual *tmp81 @unit :rebindUnits:firstUnit
   283 sensor *tmp82 :rebindUnits:firstUnit @dead
 
   289 # "Function: inline def acquireUnit(in currentUnit)"
   290 set :acquireUnit:currentUnit .UNIT_S1
   291 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit:currentUnit :acquireUnit:currentUnit
-    * jump *label83 equal :rebindUnit:currentUnit null
-    * ubind :rebindUnit:currentUnit
+  292 set :rebindUnit:currentUnit .UNIT_S1
+  293 jump *label83 equal :acquireUnit:currentUnit null
+  294 ubind :acquireUnit:currentUnit
   295 sensor *tmp89 @unit @dead
   296 op equal *tmp90 *tmp89 0
   297 sensor *tmp91 @unit @controller
 
   303 label *label86
   304 label *label83
   305 label *label84
-    * ubind .TYPE
+  306 ubind *tmp9
   307 set :rebindUnit:firstUnit @unit
   308 jump *label87 equal :rebindUnit:firstUnit null
   309 label *label89
 
   312 jump *label82 always
   313 label *label92
   314 label *label93
-    * ubind .TYPE
+  315 ubind *tmp9
   316 label *label90
   317 op notEqual *tmp100 @unit :rebindUnit:firstUnit
   318 sensor *tmp101 :rebindUnit:firstUnit @dead
 
   327 ucontrol flag 1
   328 set *tmp85 @unit
   329 jump *label81 always
-    * set *tmp85 null
   330 label *label81
   331 set .UNIT_S1 *tmp85
   332 # "Function: inline def acquireUnit(in currentUnit)"
   333 set :acquireUnit.1:currentUnit .UNIT_P1
   334 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.1:currentUnit :acquireUnit.1:currentUnit
-    * jump *label96 equal :rebindUnit.1:currentUnit null
-    * ubind :rebindUnit.1:currentUnit
+  335 set :rebindUnit.1:currentUnit .UNIT_P1
+  336 jump *label96 equal :acquireUnit.1:currentUnit null
+  337 ubind :acquireUnit.1:currentUnit
   338 sensor *tmp108 @unit @dead
   339 op equal *tmp109 *tmp108 0
   340 sensor *tmp110 @unit @controller
 
   346 label *label99
   347 label *label96
   348 label *label97
-    * ubind .TYPE
+  349 ubind *tmp9
   350 set :rebindUnit.1:firstUnit @unit
   351 jump *label100 equal :rebindUnit.1:firstUnit null
   352 label *label102
 
   355 jump *label95 always
   356 label *label105
   357 label *label106
-    * ubind .TYPE
+  358 ubind *tmp9
   359 label *label103
   360 op notEqual *tmp119 @unit :rebindUnit.1:firstUnit
   361 sensor *tmp120 :rebindUnit.1:firstUnit @dead
 
   370 ucontrol flag 1
   371 set *tmp104 @unit
   372 jump *label94 always
-    * set *tmp104 null
   373 label *label94
   374 set .UNIT_P1 *tmp104
-    * sensor *tmp123 .UNIT_S1 @firstItem
+  375 sensor *tmp123 *tmp85 @firstItem
   376 op equal *tmp124 *tmp123 @phase-fabric
-    * sensor *tmp125 .UNIT_P1 @firstItem
+  377 sensor *tmp125 *tmp104 @firstItem
   378 op equal *tmp126 *tmp125 @silicon
   379 op or *tmp127 *tmp124 *tmp126
   380 jump *label107 equal *tmp127 false
   381 # "Function: inline void swap(in out a, in out b)"
-    * set :swap:a .UNIT_S1
-    * set :swap:b .UNIT_P1
-    * set :swap:t :swap:a
-    * set :swap:a :swap:b
+  382 set :swap:a *tmp85
+  383 set :swap:b *tmp104
+  384 set :swap:t .UNIT_S1
+  385 set :swap:a .UNIT_P1
   386 set :swap:b :swap:t
   387 label *label109
   388 set .UNIT_S1 :swap:a
-    * set .UNIT_P1 :swap:b
+  389 set .UNIT_P1 :swap:t
   390 label *label107
   391 label *label108
   392 sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
 
   403 op sub *tmp136 .DOME_Y .CORE_Y
   404 op len *tmp137 *tmp135 *tmp136
   405 op mul *tmp138 2 *tmp137
-    * sensor *tmp139 :needsFourUnits.2:unit @speed
-    * op div :needsFourUnits.2:travel_time *tmp138 *tmp139
+  406 sensor *tmp139 .UNIT_S1 @speed
+  407 op div :needsFourUnits.2:travel_time *tmp138 .SPEED
   408 op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
   409 jump *label112 always
-    * set *tmp134 null
   410 label *label112
   411 set .FOUR_UNITS *tmp134
-    * jump *label113 equal .FOUR_UNITS false
+  412 jump *label113 equal *tmp134 false
   413 # "Function: inline def acquireUnit(in currentUnit)"
   414 set :acquireUnit.2:currentUnit .UNIT_S2
   415 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.2:currentUnit :acquireUnit.2:currentUnit
-    * jump *label117 equal :rebindUnit.2:currentUnit null
-    * ubind :rebindUnit.2:currentUnit
+  416 set :rebindUnit.2:currentUnit .UNIT_S2
+  417 jump *label117 equal :acquireUnit.2:currentUnit null
+  418 ubind :acquireUnit.2:currentUnit
   419 sensor *tmp147 @unit @dead
   420 op equal *tmp148 *tmp147 0
   421 sensor *tmp149 @unit @controller
 
   427 label *label120
   428 label *label117
   429 label *label118
-    * ubind .TYPE
+  430 ubind *tmp9
   431 set :rebindUnit.2:firstUnit @unit
   432 jump *label121 equal :rebindUnit.2:firstUnit null
   433 label *label123
 
   436 jump *label116 always
   437 label *label126
   438 label *label127
-    * ubind .TYPE
+  439 ubind *tmp9
   440 label *label124
   441 op notEqual *tmp158 @unit :rebindUnit.2:firstUnit
   442 sensor *tmp159 :rebindUnit.2:firstUnit @dead
 
   451 ucontrol flag 1
   452 set *tmp143 @unit
   453 jump *label115 always
-    * set *tmp143 null
   454 label *label115
   455 set .UNIT_S2 *tmp143
   456 # "Function: inline def acquireUnit(in currentUnit)"
   457 set :acquireUnit.3:currentUnit .UNIT_P2
   458 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.3:currentUnit :acquireUnit.3:currentUnit
-    * jump *label130 equal :rebindUnit.3:currentUnit null
-    * ubind :rebindUnit.3:currentUnit
+  459 set :rebindUnit.3:currentUnit .UNIT_P2
+  460 jump *label130 equal :acquireUnit.3:currentUnit null
+  461 ubind :acquireUnit.3:currentUnit
   462 sensor *tmp166 @unit @dead
   463 op equal *tmp167 *tmp166 0
   464 sensor *tmp168 @unit @controller
 
   470 label *label133
   471 label *label130
   472 label *label131
-    * ubind .TYPE
+  473 ubind *tmp9
   474 set :rebindUnit.3:firstUnit @unit
   475 jump *label134 equal :rebindUnit.3:firstUnit null
   476 label *label136
 
   479 jump *label129 always
   480 label *label139
   481 label *label140
-    * ubind .TYPE
+  482 ubind *tmp9
   483 label *label137
   484 op notEqual *tmp177 @unit :rebindUnit.3:firstUnit
   485 sensor *tmp178 :rebindUnit.3:firstUnit @dead
 
   494 ucontrol flag 1
   495 set *tmp162 @unit
   496 jump *label128 always
-    * set *tmp162 null
   497 label *label128
   498 set .UNIT_P2 *tmp162
   499 sensor *tmp181 .UNIT_S1 @firstItem
   500 op equal *tmp182 *tmp181 @phase-fabric
-    * sensor *tmp183 .UNIT_P2 @firstItem
+  501 sensor *tmp183 *tmp162 @firstItem
   502 op notEqual *tmp184 *tmp183 @phase-fabric
   503 op land *tmp185 *tmp182 *tmp184
   504 jump *label141 equal *tmp185 false
   505 # "Function: inline void swap(in out a, in out b)"
   506 set :swap.1:a .UNIT_S1
-    * set :swap.1:b .UNIT_P2
-    * set :swap.1:t :swap.1:a
-    * set :swap.1:a :swap.1:b
+  507 set :swap.1:b *tmp162
+  508 set :swap.1:t .UNIT_S1
+  509 set :swap.1:a .UNIT_P2
   510 set :swap.1:b :swap.1:t
   511 label *label143
   512 set .UNIT_S1 :swap.1:a
-    * set .UNIT_P2 :swap.1:b
+  513 set .UNIT_P2 :swap.1:t
   514 label *label141
   515 label *label142
-    * sensor *tmp187 .UNIT_S2 @firstItem
+  516 sensor *tmp187 *tmp143 @firstItem
   517 op equal *tmp188 *tmp187 @phase-fabric
   518 sensor *tmp189 .UNIT_P2 @firstItem
   519 op equal *tmp190 *tmp189 @silicon
   520 op or *tmp191 *tmp188 *tmp190
   521 jump *label144 equal *tmp191 false
   522 # "Function: inline void swap(in out a, in out b)"
-    * set :swap.2:a .UNIT_S2
+  523 set :swap.2:a *tmp143
   524 set :swap.2:b .UNIT_P2
-    * set :swap.2:t :swap.2:a
-    * set :swap.2:a :swap.2:b
+  525 set :swap.2:t .UNIT_S2
+  526 set :swap.2:a .UNIT_P2
   527 set :swap.2:b :swap.2:t
   528 label *label146
   529 set .UNIT_S2 :swap.2:a
-    * set .UNIT_P2 :swap.2:b
+  530 set .UNIT_P2 :swap.2:t
   531 label *label144
   532 label *label145
   533 set .GROUP1 "unit  1"
 
   542 set .UNIT_P2 null
   543 set .GROUP1 "unit"
   544 label *label114
-    * op equal *tmp193 .FOUR_UNITS false
+  545 op equal *tmp193 *tmp134 false
   546 sensor *tmp194 .UNIT_S1 @totalItems
   547 sensor *tmp195 .UNIT_S2 @totalItems
   548 op lessThan *tmp196 *tmp194 *tmp195
   549 op or .SUPPLY_S_FIRST *tmp193 *tmp196
-    * op equal *tmp198 .FOUR_UNITS false
+  550 op equal *tmp198 *tmp134 false
   551 sensor *tmp199 .UNIT_P1 @totalItems
   552 sensor *tmp200 .UNIT_P2 @totalItems
   553 op lessThan *tmp201 *tmp199 *tmp200
-    * op or .SUPPLY_P_FIRST *tmp198 *tmp201
+  554 op or .SUPPLY_P_FIRST *tmp193 *tmp201
   555 op add :unitCheck @time 5000
   556 label *label147
   557 sensor *tmp204 switch1 @enabled
 
   561 print "\n"
   562 print "\n"
   563 print "Unit type: [green]"
-    * print .TYPE
+  564 print *tmp9
   565 print "["
   566 print "]"
   567 print "\n"
   568 # "Function: inline void printDomeStatus(in item, in text)"
   569 set :printDomeStatus:item @silicon
   570 set :printDomeStatus:text "\n[green]Silicon[] status:\n"
-    * print :printDomeStatus:text
-    * sensor :printDomeStatus:level .DOME :printDomeStatus:item
+  571 print "\n[green]Silicon[] status:\n"
+  572 sensor :printDomeStatus:level .DOME @silicon
   573 jump *label151 lessThanEq :printDomeStatus:level 3
   574 print "  dome:  [green]"
   575 print :printDomeStatus:level
 
   591 set :processUnit:group .GROUP1
   592 set :processUnit:supply .SUPPLY_S_FIRST
   593 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.4:currentUnit :processUnit:unit
-    * jump *label155 equal :rebindUnit.4:currentUnit null
-    * ubind :rebindUnit.4:currentUnit
+  594 set :rebindUnit.4:currentUnit .UNIT_S1
+  595 jump *label155 equal :processUnit:unit null
+  596 ubind :processUnit:unit
   597 sensor *tmp211 @unit @dead
   598 op equal *tmp212 *tmp211 0
   599 sensor *tmp213 @unit @controller
 
   605 label *label158
   606 label *label155
   607 label *label156
-    * ubind .TYPE
+  608 ubind *tmp9
   609 set :rebindUnit.4:firstUnit @unit
   610 jump *label159 equal :rebindUnit.4:firstUnit null
   611 label *label161
 
   614 jump *label154 always
   615 label *label164
   616 label *label165
-    * ubind .TYPE
+  617 ubind *tmp9
   618 label *label162
   619 op notEqual *tmp222 @unit :rebindUnit.4:firstUnit
   620 sensor *tmp223 :rebindUnit.4:firstUnit @dead
 
   634 op or *tmp229 *tmp227 *tmp228
   635 jump *label166 equal *tmp229 false
   636 sensor *tmp231 @unit @firstItem
-    * jump *label168 notEqual *tmp231 :processUnit:item
+  637 jump *label168 notEqual *tmp231 @silicon
   638 set :processUnit:state 3
   639 jump *label169 always
   640 label *label168
 
   657 jump *label174 notEqual :processUnit:state 2
   658 ucontrol within .CORE_X .CORE_Y 8 *tmp241
   659 jump *label176 equal *tmp241 false
-    * ucontrol itemTake .CORE :processUnit:item .UNIT_CAPACITY
+  660 ucontrol itemTake .CORE @silicon .UNIT_CAPACITY
   661 sensor *tmp243 @unit @totalItems
   662 jump *label178 lessThan *tmp243 .UNIT_CAPACITY
   663 ucontrol approach .DOME_X .DOME_Y 6
 
   683 jump *label180 notEqual :processUnit:state 3
   684 ucontrol within .DOME_X .DOME_Y 8 *tmp255
   685 jump *label182 equal *tmp255 false
-    * jump *label184 equal :processUnit:supply false
+  686 jump *label184 equal .SUPPLY_S_FIRST false
   687 ucontrol itemDrop .DOME .UNIT_CAPACITY
   688 set .MSG ", supplying\n"
   689 jump *label185 always
 
   714 ucontrol flag :processUnit:state
   715 sensor *tmp268 @unit @totalItems
   716 print "  "
-    * print :processUnit:group
+  717 print .GROUP1
   718 print ":"
   719 print " ["
-    * print :processUnit:color
+  720 print "gold"
   721 print "]"
   722 print *tmp268
   723 print "["
 
   735 set :processUnit:unit @unit
   736 label *label153
   737 set .UNIT_S1 :processUnit:unit
-    * jump *label190 equal .FOUR_UNITS false
+  738 jump *label190 equal *tmp134 false
   739 op equal *tmp273 .SUPPLY_S_FIRST false
   740 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   741 set :processUnit.1:unit .UNIT_S2
 
   743 set :processUnit.1:group .GROUP2
   744 set :processUnit.1:supply *tmp273
   745 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.5:currentUnit :processUnit.1:unit
-    * jump *label194 equal :rebindUnit.5:currentUnit null
-    * ubind :rebindUnit.5:currentUnit
+  746 set :rebindUnit.5:currentUnit .UNIT_S2
+  747 jump *label194 equal :processUnit.1:unit null
+  748 ubind :processUnit.1:unit
   749 sensor *tmp277 @unit @dead
   750 op equal *tmp278 *tmp277 0
   751 sensor *tmp279 @unit @controller
 
   757 label *label197
   758 label *label194
   759 label *label195
-    * ubind .TYPE
+  760 ubind *tmp9
   761 set :rebindUnit.5:firstUnit @unit
   762 jump *label198 equal :rebindUnit.5:firstUnit null
   763 label *label200
 
   766 jump *label193 always
   767 label *label203
   768 label *label204
-    * ubind .TYPE
+  769 ubind *tmp9
   770 label *label201
   771 op notEqual *tmp288 @unit :rebindUnit.5:firstUnit
   772 sensor *tmp289 :rebindUnit.5:firstUnit @dead
 
   786 op or *tmp295 *tmp293 *tmp294
   787 jump *label205 equal *tmp295 false
   788 sensor *tmp297 @unit @firstItem
-    * jump *label207 notEqual *tmp297 :processUnit.1:item
+  789 jump *label207 notEqual *tmp297 @silicon
   790 set :processUnit.1:state 3
   791 jump *label208 always
   792 label *label207
 
   809 jump *label213 notEqual :processUnit.1:state 2
   810 ucontrol within .CORE_X .CORE_Y 8 *tmp307
   811 jump *label215 equal *tmp307 false
-    * ucontrol itemTake .CORE :processUnit.1:item .UNIT_CAPACITY
+  812 ucontrol itemTake .CORE @silicon .UNIT_CAPACITY
   813 sensor *tmp309 @unit @totalItems
   814 jump *label217 lessThan *tmp309 .UNIT_CAPACITY
   815 ucontrol approach .DOME_X .DOME_Y 6
 
   835 jump *label219 notEqual :processUnit.1:state 3
   836 ucontrol within .DOME_X .DOME_Y 8 *tmp321
   837 jump *label221 equal *tmp321 false
-    * jump *label223 equal :processUnit.1:supply false
+  838 jump *label223 equal *tmp273 false
   839 ucontrol itemDrop .DOME .UNIT_CAPACITY
   840 set .MSG ", supplying\n"
   841 jump *label224 always
 
   866 ucontrol flag :processUnit.1:state
   867 sensor *tmp334 @unit @totalItems
   868 print "  "
-    * print :processUnit.1:group
+  869 print .GROUP2
   870 print ":"
   871 print " ["
-    * print :processUnit.1:color
+  872 print "gold"
   873 print "]"
   874 print *tmp334
   875 print "["
 
   888 label *label192
   889 set .UNIT_S2 :processUnit.1:unit
   890 jump *label229 equal .SUPPLY_S_FIRST false
-    * sensor *tmp339 .UNIT_S1 @totalItems
+  891 sensor *tmp339 :processUnit:unit @totalItems
   892 op greaterThan *tmp338 *tmp339 0
   893 jump *label230 always
   894 label *label229
-    * sensor *tmp341 .UNIT_S2 @totalItems
+  895 sensor *tmp341 :processUnit.1:unit @totalItems
   896 op equal *tmp338 *tmp341 0
   897 label *label230
   898 set .SUPPLY_S_FIRST *tmp338
 
   901 # "Function: inline void printDomeStatus(in item, in text)"
   902 set :printDomeStatus.1:item @phase-fabric
   903 set :printDomeStatus.1:text "\n[green]Phase fabric[] status:\n"
-    * print :printDomeStatus.1:text
-    * sensor :printDomeStatus.1:level .DOME :printDomeStatus.1:item
+  904 print "\n[green]Phase fabric[] status:\n"
+  905 sensor :printDomeStatus.1:level .DOME @phase-fabric
   906 jump *label232 lessThanEq :printDomeStatus.1:level 3
   907 print "  dome:  [green]"
   908 print :printDomeStatus.1:level
 
   924 set :processUnit.2:group .GROUP1
   925 set :processUnit.2:supply .SUPPLY_P_FIRST
   926 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.6:currentUnit :processUnit.2:unit
-    * jump *label236 equal :rebindUnit.6:currentUnit null
-    * ubind :rebindUnit.6:currentUnit
+  927 set :rebindUnit.6:currentUnit .UNIT_P1
+  928 jump *label236 equal :processUnit.2:unit null
+  929 ubind :processUnit.2:unit
   930 sensor *tmp349 @unit @dead
   931 op equal *tmp350 *tmp349 0
   932 sensor *tmp351 @unit @controller
 
   938 label *label239
   939 label *label236
   940 label *label237
-    * ubind .TYPE
+  941 ubind *tmp9
   942 set :rebindUnit.6:firstUnit @unit
   943 jump *label240 equal :rebindUnit.6:firstUnit null
   944 label *label242
 
   947 jump *label235 always
   948 label *label245
   949 label *label246
-    * ubind .TYPE
+  950 ubind *tmp9
   951 label *label243
   952 op notEqual *tmp360 @unit :rebindUnit.6:firstUnit
   953 sensor *tmp361 :rebindUnit.6:firstUnit @dead
 
   967 op or *tmp367 *tmp365 *tmp366
   968 jump *label247 equal *tmp367 false
   969 sensor *tmp369 @unit @firstItem
-    * jump *label249 notEqual *tmp369 :processUnit.2:item
+  970 jump *label249 notEqual *tmp369 @phase-fabric
   971 set :processUnit.2:state 3
   972 jump *label250 always
   973 label *label249
 
   990 jump *label255 notEqual :processUnit.2:state 2
   991 ucontrol within .CORE_X .CORE_Y 8 *tmp379
   992 jump *label257 equal *tmp379 false
-    * ucontrol itemTake .CORE :processUnit.2:item .UNIT_CAPACITY
+  993 ucontrol itemTake .CORE @phase-fabric .UNIT_CAPACITY
   994 sensor *tmp381 @unit @totalItems
   995 jump *label259 lessThan *tmp381 .UNIT_CAPACITY
   996 ucontrol approach .DOME_X .DOME_Y 6
 
  1016 jump *label261 notEqual :processUnit.2:state 3
  1017 ucontrol within .DOME_X .DOME_Y 8 *tmp393
  1018 jump *label263 equal *tmp393 false
-    * jump *label265 equal :processUnit.2:supply false
+ 1019 jump *label265 equal .SUPPLY_P_FIRST false
  1020 ucontrol itemDrop .DOME .UNIT_CAPACITY
  1021 set .MSG ", supplying\n"
  1022 jump *label266 always
 
  1047 ucontrol flag :processUnit.2:state
  1048 sensor *tmp406 @unit @totalItems
  1049 print "  "
-    * print :processUnit.2:group
+ 1050 print .GROUP1
  1051 print ":"
  1052 print " ["
-    * print :processUnit.2:color
+ 1053 print "gold"
  1054 print "]"
  1055 print *tmp406
  1056 print "["
 
  1068 set :processUnit.2:unit @unit
  1069 label *label234
  1070 set .UNIT_P1 :processUnit.2:unit
-    * jump *label271 equal .FOUR_UNITS false
+ 1071 jump *label271 equal *tmp134 false
  1072 op equal *tmp411 .SUPPLY_P_FIRST false
  1073 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
  1074 set :processUnit.3:unit .UNIT_P2
 
  1076 set :processUnit.3:group .GROUP2
  1077 set :processUnit.3:supply *tmp411
  1078 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.7:currentUnit :processUnit.3:unit
-    * jump *label275 equal :rebindUnit.7:currentUnit null
-    * ubind :rebindUnit.7:currentUnit
+ 1079 set :rebindUnit.7:currentUnit .UNIT_P2
+ 1080 jump *label275 equal :processUnit.3:unit null
+ 1081 ubind :processUnit.3:unit
  1082 sensor *tmp415 @unit @dead
  1083 op equal *tmp416 *tmp415 0
  1084 sensor *tmp417 @unit @controller
 
  1090 label *label278
  1091 label *label275
  1092 label *label276
-    * ubind .TYPE
+ 1093 ubind *tmp9
  1094 set :rebindUnit.7:firstUnit @unit
  1095 jump *label279 equal :rebindUnit.7:firstUnit null
  1096 label *label281
 
  1099 jump *label274 always
  1100 label *label284
  1101 label *label285
-    * ubind .TYPE
+ 1102 ubind *tmp9
  1103 label *label282
  1104 op notEqual *tmp426 @unit :rebindUnit.7:firstUnit
  1105 sensor *tmp427 :rebindUnit.7:firstUnit @dead
 
  1119 op or *tmp433 *tmp431 *tmp432
  1120 jump *label286 equal *tmp433 false
  1121 sensor *tmp435 @unit @firstItem
-    * jump *label288 notEqual *tmp435 :processUnit.3:item
+ 1122 jump *label288 notEqual *tmp435 @phase-fabric
  1123 set :processUnit.3:state 3
  1124 jump *label289 always
  1125 label *label288
 
  1142 jump *label294 notEqual :processUnit.3:state 2
  1143 ucontrol within .CORE_X .CORE_Y 8 *tmp445
  1144 jump *label296 equal *tmp445 false
-    * ucontrol itemTake .CORE :processUnit.3:item .UNIT_CAPACITY
+ 1145 ucontrol itemTake .CORE @phase-fabric .UNIT_CAPACITY
  1146 sensor *tmp447 @unit @totalItems
  1147 jump *label298 lessThan *tmp447 .UNIT_CAPACITY
  1148 ucontrol approach .DOME_X .DOME_Y 6
 
  1168 jump *label300 notEqual :processUnit.3:state 3
  1169 ucontrol within .DOME_X .DOME_Y 8 *tmp459
  1170 jump *label302 equal *tmp459 false
-    * jump *label304 equal :processUnit.3:supply false
+ 1171 jump *label304 equal *tmp411 false
  1172 ucontrol itemDrop .DOME .UNIT_CAPACITY
  1173 set .MSG ", supplying\n"
  1174 jump *label305 always
 
  1199 ucontrol flag :processUnit.3:state
  1200 sensor *tmp472 @unit @totalItems
  1201 print "  "
-    * print :processUnit.3:group
+ 1202 print .GROUP2
  1203 print ":"
  1204 print " ["
-    * print :processUnit.3:color
+ 1205 print "gold"
  1206 print "]"
  1207 print *tmp472
  1208 print "["
 
  1221 label *label273
  1222 set .UNIT_P2 :processUnit.3:unit
  1223 jump *label310 equal .SUPPLY_P_FIRST false
-    * sensor *tmp477 .UNIT_P1 @totalItems
+ 1224 sensor *tmp477 :processUnit.2:unit @totalItems
  1225 op greaterThan *tmp476 *tmp477 0
  1226 jump *label311 always
  1227 label *label310
-    * sensor *tmp479 .UNIT_P2 @totalItems
+ 1228 sensor *tmp479 :processUnit.3:unit @totalItems
  1229 op equal *tmp476 *tmp479 0
  1230 label *label311
  1231 set .SUPPLY_P_FIRST *tmp476
 
  1239 print " "
  1240 print "ms"
  1241 printflush message1
-    * op notEqual *tmp483 .TYPE UNIT_TYPE
+ 1242 op notEqual *tmp483 *tmp9 UNIT_TYPE
  1243 op greaterThan *tmp484 :unitCheck @time
  1244 op land *tmp485 *tmp483 *tmp484
  1245 jump *label312 equal *tmp485 false
 
  1249 set :areUnitsAvailable.2:free 0
  1250 set :areUnitsAvailable.2:occupied 0
  1251 set :areUnitsAvailable.2:needed 0
-    * ubind :areUnitsAvailable.2:type
+ 1252 ubind UNIT_TYPE
  1253 set :areUnitsAvailable.2:firstUnit @unit
  1254 jump *label315 equal :areUnitsAvailable.2:firstUnit null
  1255 # "Function: inline def needsFourUnits(in unit)"
  1256 set :needsFourUnits.3:unit @unit
  1257 op sub *tmp491 .DOME_X .CORE_X
  1258 op sub *tmp492 .DOME_Y .CORE_Y
-    * op len *tmp493 *tmp491 *tmp492
-    * op mul *tmp494 2 *tmp493
+ 1259 op len *tmp493 *tmp135 *tmp136
+ 1260 op mul *tmp494 2 *tmp137
  1261 sensor *tmp495 :needsFourUnits.3:unit @speed
-    * op div :needsFourUnits.3:travel_time *tmp494 *tmp495
+ 1262 op div :needsFourUnits.3:travel_time *tmp138 *tmp495
  1263 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
  1264 jump *label317 always
-    * set *tmp490 null
  1265 label *label317
  1266 jump *label318 equal *tmp490 false
  1267 set *tmp498 4
 
  1278 op or *tmp503 *tmp500 *tmp502
  1279 jump *label323 equal *tmp503 false
  1280 op add :areUnitsAvailable.2:free :areUnitsAvailable.2:free 1
-    * jump *label325 lessThan :areUnitsAvailable.2:free :areUnitsAvailable.2:needed
+ 1281 jump *label325 lessThan :areUnitsAvailable.2:free *tmp498
  1282 set *tmp487 true
  1283 jump *label314 always
  1284 label *label325
 
  1287 label *label323
  1288 op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
  1289 label *label324
-    * ubind :areUnitsAvailable.2:type
+ 1290 ubind UNIT_TYPE
  1291 label *label321
  1292 op notEqual *tmp508 @unit :areUnitsAvailable.2:firstUnit
  1293 sensor *tmp509 :areUnitsAvailable.2:firstUnit @dead
 
  1297 label *label322
  1298 label *label315
  1299 label *label316
-    * jump *label327 equal :areUnitsAvailable.2:output false
-    * print :areUnitsAvailable.2:type
+ 1300 jump *label327 equal false false
+ 1301 print UNIT_TYPE
  1302 print ":"
  1303 print " occupied: "
  1304 print :areUnitsAvailable.2:occupied
 
  1315 label *label328
  1316 set *tmp487 false
  1317 jump *label314 always
-    * set *tmp487 null
  1318 label *label314
  1319 jump *label331 equal *tmp487 false
  1320 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-46 instructions):
 
    63 print "[gold]Looking for suitable unit type:[]"
    64 print "\n"
    65 # "Function: inline def areUnitsAvailable(in type, in output)"
-    * set :areUnitsAvailable:type UNIT_TYPE
-    * set :areUnitsAvailable:output true
    66 set :areUnitsAvailable:free 0
    67 set :areUnitsAvailable:occupied 0
    68 set :areUnitsAvailable:needed 0
 
   155 label *label43
   156 jump *label50 equal :chooseUnitType:type UNIT_TYPE
   157 # "Function: inline def areUnitsAvailable(in type, in output)"
-    * set :areUnitsAvailable.1:type :chooseUnitType:type
-    * set :areUnitsAvailable.1:output true
   158 set :areUnitsAvailable.1:free 0
   159 set :areUnitsAvailable.1:occupied 0
   160 set :areUnitsAvailable.1:needed 0
 
   249 # "Function: inline def rebindUnits()"
   250 set .UNIT_P2 null
   251 set .UNIT_S2 null
-    * set .UNIT_P1 .UNIT_P2
-    * set .UNIT_S1 .UNIT_S2
+  252 set .UNIT_P1 null
+  253 set .UNIT_S1 null
   254 set :rebindUnits:count 0
   255 ubind *tmp9
   256 set :rebindUnits:firstUnit @unit
 
   285 # "Function: inline def acquireUnit(in currentUnit)"
   286 set :acquireUnit:currentUnit .UNIT_S1
   287 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit:currentUnit .UNIT_S1
-    * jump *label83 equal :acquireUnit:currentUnit null
-    * ubind :acquireUnit:currentUnit
+  288 jump *label83 equal .UNIT_S1 null
+  289 ubind .UNIT_S1
   290 sensor *tmp89 @unit @dead
   291 op equal *tmp90 *tmp89 0
   292 sensor *tmp91 @unit @controller
 
   327 # "Function: inline def acquireUnit(in currentUnit)"
   328 set :acquireUnit.1:currentUnit .UNIT_P1
   329 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.1:currentUnit .UNIT_P1
-    * jump *label96 equal :acquireUnit.1:currentUnit null
-    * ubind :acquireUnit.1:currentUnit
+  330 jump *label96 equal .UNIT_P1 null
+  331 ubind .UNIT_P1
   332 sensor *tmp108 @unit @dead
   333 op equal *tmp109 *tmp108 0
   334 sensor *tmp110 @unit @controller
 
   373 op or *tmp127 *tmp124 *tmp126
   374 jump *label107 equal *tmp127 false
   375 # "Function: inline void swap(in out a, in out b)"
-    * set :swap:a *tmp85
-    * set :swap:b *tmp104
-    * set :swap:t .UNIT_S1
-    * set :swap:a .UNIT_P1
-    * set :swap:b :swap:t
+  376 set :swap:t *tmp85
+  377 set :swap:a *tmp104
+  378 set :swap:b .UNIT_S1
   379 label *label109
-    * set .UNIT_S1 :swap:a
+  380 set .UNIT_S1 .UNIT_P1
   381 set .UNIT_P1 :swap:t
   382 label *label107
   383 label *label108
 
   390 label *label110
   391 label *label111
   392 # "Function: inline def needsFourUnits(in unit)"
-    * set :needsFourUnits.2:unit .UNIT_S1
   393 op sub *tmp135 .DOME_X .CORE_X
   394 op sub *tmp136 .DOME_Y .CORE_Y
   395 op len *tmp137 *tmp135 *tmp136
 
   404 # "Function: inline def acquireUnit(in currentUnit)"
   405 set :acquireUnit.2:currentUnit .UNIT_S2
   406 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.2:currentUnit .UNIT_S2
-    * jump *label117 equal :acquireUnit.2:currentUnit null
-    * ubind :acquireUnit.2:currentUnit
+  407 jump *label117 equal .UNIT_S2 null
+  408 ubind .UNIT_S2
   409 sensor *tmp147 @unit @dead
   410 op equal *tmp148 *tmp147 0
   411 sensor *tmp149 @unit @controller
 
   446 # "Function: inline def acquireUnit(in currentUnit)"
   447 set :acquireUnit.3:currentUnit .UNIT_P2
   448 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.3:currentUnit .UNIT_P2
-    * jump *label130 equal :acquireUnit.3:currentUnit null
-    * ubind :acquireUnit.3:currentUnit
+  449 jump *label130 equal .UNIT_P2 null
+  450 ubind .UNIT_P2
   451 sensor *tmp166 @unit @dead
   452 op equal *tmp167 *tmp166 0
   453 sensor *tmp168 @unit @controller
 
   492 op land *tmp185 *tmp182 *tmp184
   493 jump *label141 equal *tmp185 false
   494 # "Function: inline void swap(in out a, in out b)"
-    * set :swap.1:a .UNIT_S1
-    * set :swap.1:b *tmp162
   495 set :swap.1:t .UNIT_S1
-    * set :swap.1:a .UNIT_P2
-    * set :swap.1:b :swap.1:t
+  496 set :swap.1:a *tmp162
+  497 set :swap.1:b .UNIT_S1
   498 label *label143
-    * set .UNIT_S1 :swap.1:a
+  499 set .UNIT_S1 .UNIT_P2
   500 set .UNIT_P2 :swap.1:t
   501 label *label141
   502 label *label142
 
   507 op or *tmp191 *tmp188 *tmp190
   508 jump *label144 equal *tmp191 false
   509 # "Function: inline void swap(in out a, in out b)"
-    * set :swap.2:a *tmp143
-    * set :swap.2:b .UNIT_P2
-    * set :swap.2:t .UNIT_S2
+  510 set :swap.2:t *tmp143
   511 set :swap.2:a .UNIT_P2
-    * set :swap.2:b :swap.2:t
+  512 set :swap.2:b .UNIT_S2
   513 label *label146
-    * set .UNIT_S2 :swap.2:a
+  514 set .UNIT_S2 .UNIT_P2
   515 set .UNIT_P2 :swap.2:t
   516 label *label144
   517 label *label145
 
   532 sensor *tmp195 .UNIT_S2 @totalItems
   533 op lessThan *tmp196 *tmp194 *tmp195
   534 op or .SUPPLY_S_FIRST *tmp193 *tmp196
-    * op equal *tmp198 *tmp134 false
   535 sensor *tmp199 .UNIT_P1 @totalItems
   536 sensor *tmp200 .UNIT_P2 @totalItems
   537 op lessThan *tmp201 *tmp199 *tmp200
 
   550 print "]"
   551 print "\n"
   552 # "Function: inline void printDomeStatus(in item, in text)"
-    * set :printDomeStatus:item @silicon
-    * set :printDomeStatus:text "\n[green]Silicon[] status:\n"
   553 print "\n[green]Silicon[] status:\n"
   554 sensor :printDomeStatus:level .DOME @silicon
   555 jump *label151 lessThanEq :printDomeStatus:level 3
 
   569 label *label150
   570 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   571 set :processUnit:unit .UNIT_S1
-    * set :processUnit:item @silicon
-    * set :processUnit:group .GROUP1
-    * set :processUnit:supply .SUPPLY_S_FIRST
   572 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.4:currentUnit .UNIT_S1
-    * jump *label155 equal :processUnit:unit null
-    * ubind :processUnit:unit
+  573 jump *label155 equal .UNIT_S1 null
+  574 ubind .UNIT_S1
   575 sensor *tmp211 @unit @dead
   576 op equal *tmp212 *tmp211 0
   577 sensor *tmp213 @unit @controller
 
   606 label *label154
   607 sensor :processUnit:state @unit @flag
   608 set :processUnit:distance -1
-    * set :processUnit:color "gold"
   609 op lessThan *tmp227 :processUnit:state 2
   610 op greaterThan *tmp228 :processUnit:state 3
   611 op or *tmp229 *tmp227 *tmp228
 
   716 op equal *tmp273 .SUPPLY_S_FIRST false
   717 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   718 set :processUnit.1:unit .UNIT_S2
-    * set :processUnit.1:item @silicon
-    * set :processUnit.1:group .GROUP2
-    * set :processUnit.1:supply *tmp273
   719 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.5:currentUnit .UNIT_S2
-    * jump *label194 equal :processUnit.1:unit null
-    * ubind :processUnit.1:unit
+  720 jump *label194 equal .UNIT_S2 null
+  721 ubind .UNIT_S2
   722 sensor *tmp277 @unit @dead
   723 op equal *tmp278 *tmp277 0
   724 sensor *tmp279 @unit @controller
 
   753 label *label193
   754 sensor :processUnit.1:state @unit @flag
   755 set :processUnit.1:distance -1
-    * set :processUnit.1:color "gold"
   756 op lessThan *tmp293 :processUnit.1:state 2
   757 op greaterThan *tmp294 :processUnit.1:state 3
   758 op or *tmp295 *tmp293 *tmp294
 
   871 label *label190
   872 label *label191
   873 # "Function: inline void printDomeStatus(in item, in text)"
-    * set :printDomeStatus.1:item @phase-fabric
-    * set :printDomeStatus.1:text "\n[green]Phase fabric[] status:\n"
   874 print "\n[green]Phase fabric[] status:\n"
   875 sensor :printDomeStatus.1:level .DOME @phase-fabric
   876 jump *label232 lessThanEq :printDomeStatus.1:level 3
 
   890 label *label231
   891 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   892 set :processUnit.2:unit .UNIT_P1
-    * set :processUnit.2:item @phase-fabric
-    * set :processUnit.2:group .GROUP1
-    * set :processUnit.2:supply .SUPPLY_P_FIRST
   893 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.6:currentUnit .UNIT_P1
-    * jump *label236 equal :processUnit.2:unit null
-    * ubind :processUnit.2:unit
+  894 jump *label236 equal .UNIT_P1 null
+  895 ubind .UNIT_P1
   896 sensor *tmp349 @unit @dead
   897 op equal *tmp350 *tmp349 0
   898 sensor *tmp351 @unit @controller
 
   927 label *label235
   928 sensor :processUnit.2:state @unit @flag
   929 set :processUnit.2:distance -1
-    * set :processUnit.2:color "gold"
   930 op lessThan *tmp365 :processUnit.2:state 2
   931 op greaterThan *tmp366 :processUnit.2:state 3
   932 op or *tmp367 *tmp365 *tmp366
 
  1037 op equal *tmp411 .SUPPLY_P_FIRST false
  1038 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
  1039 set :processUnit.3:unit .UNIT_P2
-    * set :processUnit.3:item @phase-fabric
-    * set :processUnit.3:group .GROUP2
-    * set :processUnit.3:supply *tmp411
  1040 # "Function: inline def rebindUnit(in currentUnit)"
-    * set :rebindUnit.7:currentUnit .UNIT_P2
-    * jump *label275 equal :processUnit.3:unit null
-    * ubind :processUnit.3:unit
+ 1041 jump *label275 equal .UNIT_P2 null
+ 1042 ubind .UNIT_P2
  1043 sensor *tmp415 @unit @dead
  1044 op equal *tmp416 *tmp415 0
  1045 sensor *tmp417 @unit @controller
 
  1074 label *label274
  1075 sensor :processUnit.3:state @unit @flag
  1076 set :processUnit.3:distance -1
-    * set :processUnit.3:color "gold"
  1077 op lessThan *tmp431 :processUnit.3:state 2
  1078 op greaterThan *tmp432 :processUnit.3:state 3
  1079 op or *tmp433 *tmp431 *tmp432
 
  1204 op land *tmp485 *tmp483 *tmp484
  1205 jump *label312 equal *tmp485 false
  1206 # "Function: inline def areUnitsAvailable(in type, in output)"
-    * set :areUnitsAvailable.2:type UNIT_TYPE
-    * set :areUnitsAvailable.2:output false
  1207 set :areUnitsAvailable.2:free 0
  1208 set :areUnitsAvailable.2:occupied 0
  1209 set :areUnitsAvailable.2:needed 0
 
  1212 jump *label315 equal :areUnitsAvailable.2:firstUnit null
  1213 # "Function: inline def needsFourUnits(in unit)"
  1214 set :needsFourUnits.3:unit @unit
-    * op sub *tmp491 .DOME_X .CORE_X
-    * op sub *tmp492 .DOME_Y .CORE_Y
-    * op len *tmp493 *tmp135 *tmp136
-    * op mul *tmp494 2 *tmp137
  1215 sensor *tmp495 :needsFourUnits.3:unit @speed
  1216 op div :needsFourUnits.3:travel_time *tmp138 *tmp495
  1217 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-12 instructions):
 
   283 label *label76
   284 label *label71
   285 # "Function: inline def acquireUnit(in currentUnit)"
-    * set :acquireUnit:currentUnit .UNIT_S1
   286 # "Function: inline def rebindUnit(in currentUnit)"
   287 jump *label83 equal .UNIT_S1 null
   288 ubind .UNIT_S1
 
   324 label *label81
   325 set .UNIT_S1 *tmp85
   326 # "Function: inline def acquireUnit(in currentUnit)"
-    * set :acquireUnit.1:currentUnit .UNIT_P1
   327 # "Function: inline def rebindUnit(in currentUnit)"
   328 jump *label96 equal .UNIT_P1 null
   329 ubind .UNIT_P1
 
   372 jump *label107 equal *tmp127 false
   373 # "Function: inline void swap(in out a, in out b)"
   374 set :swap:t *tmp85
-    * set :swap:a *tmp104
-    * set :swap:b .UNIT_S1
+  375 set :swap:b *tmp85
   376 label *label109
-    * set .UNIT_S1 .UNIT_P1
-    * set .UNIT_P1 :swap:t
+  377 set .UNIT_S1 *tmp104
+  378 set .UNIT_P1 *tmp85
   379 label *label107
   380 label *label108
   381 sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
 
   399 set .FOUR_UNITS *tmp134
   400 jump *label113 equal *tmp134 false
   401 # "Function: inline def acquireUnit(in currentUnit)"
-    * set :acquireUnit.2:currentUnit .UNIT_S2
   402 # "Function: inline def rebindUnit(in currentUnit)"
   403 jump *label117 equal .UNIT_S2 null
   404 ubind .UNIT_S2
 
   440 label *label115
   441 set .UNIT_S2 *tmp143
   442 # "Function: inline def acquireUnit(in currentUnit)"
-    * set :acquireUnit.3:currentUnit .UNIT_P2
   443 # "Function: inline def rebindUnit(in currentUnit)"
   444 jump *label130 equal .UNIT_P2 null
   445 ubind .UNIT_P2
 
   488 jump *label141 equal *tmp185 false
   489 # "Function: inline void swap(in out a, in out b)"
   490 set :swap.1:t .UNIT_S1
-    * set :swap.1:a *tmp162
-    * set :swap.1:b .UNIT_S1
   491 label *label143
-    * set .UNIT_S1 .UNIT_P2
+  492 set .UNIT_S1 *tmp162
   493 set .UNIT_P2 :swap.1:t
   494 label *label141
   495 label *label142
 
   501 jump *label144 equal *tmp191 false
   502 # "Function: inline void swap(in out a, in out b)"
   503 set :swap.2:t *tmp143
-    * set :swap.2:a .UNIT_P2
-    * set :swap.2:b .UNIT_S2
+  504 set :swap.2:b *tmp143
   505 label *label146
   506 set .UNIT_S2 .UNIT_P2
-    * set .UNIT_P2 :swap.2:t
+  507 set .UNIT_P2 *tmp143
   508 label *label144
   509 label *label145
   510 set .GROUP1 "unit  1"
 
   560 label *label152
   561 label *label150
   562 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
-    * set :processUnit:unit .UNIT_S1
   563 # "Function: inline def rebindUnit(in currentUnit)"
   564 jump *label155 equal .UNIT_S1 null
   565 ubind .UNIT_S1
 
   706 jump *label190 equal *tmp134 false
   707 op equal *tmp273 .SUPPLY_S_FIRST false
   708 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
-    * set :processUnit.1:unit .UNIT_S2
   709 # "Function: inline def rebindUnit(in currentUnit)"
   710 jump *label194 equal .UNIT_S2 null
   711 ubind .UNIT_S2
 
   879 label *label233
   880 label *label231
   881 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
-    * set :processUnit.2:unit .UNIT_P1
   882 # "Function: inline def rebindUnit(in currentUnit)"
   883 jump *label236 equal .UNIT_P1 null
   884 ubind .UNIT_P1
 
  1025 jump *label271 equal *tmp134 false
  1026 op equal *tmp411 .SUPPLY_P_FIRST false
  1027 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
-    * set :processUnit.3:unit .UNIT_P2
  1028 # "Function: inline def rebindUnit(in currentUnit)"
  1029 jump *label275 equal .UNIT_P2 null
  1030 ubind .UNIT_P2

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-4 instructions):
 
   371 op or *tmp127 *tmp124 *tmp126
   372 jump *label107 equal *tmp127 false
   373 # "Function: inline void swap(in out a, in out b)"
-    * set :swap:t *tmp85
-    * set :swap:b *tmp85
   374 label *label109
   375 set .UNIT_S1 *tmp104
   376 set .UNIT_P1 *tmp85
 
   498 op or *tmp191 *tmp188 *tmp190
   499 jump *label144 equal *tmp191 false
   500 # "Function: inline void swap(in out a, in out b)"
-    * set :swap.2:t *tmp143
-    * set :swap.2:b *tmp143
   501 label *label146
   502 set .UNIT_S2 .UNIT_P2
   503 set .UNIT_P2 *tmp143

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     5 set .DOME dome1
     6 label *label2
     7 jump *label4 notEqual .DOME null
+    8 label *label336
     9 print "[gold]Waiting for an overdrive dome to be connected..."
    10 printflush message1
    11 set .DOME dome1
    12 label *label3
-    * jump *label2 always
+   13 jump *label336 equal .DOME null
    14 label *label4
    15 print "[gold]Locating core..."
    16 printflush message1

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-11 instructions):
 
    81 op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
    82 jump *label27 always
    83 label *label27
-    * jump *label28 equal *tmp13 false
-    * set *tmp21 4
-    * jump *label29 always
+   84 select *tmp21 notEqual *tmp13 false 4 2
    85 label *label28
-    * set *tmp21 2
    86 label *label29
    87 set :areUnitsAvailable:needed *tmp21
    88 label *label30
 
   170 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
   171 jump *label55 always
   172 label *label55
-    * jump *label56 equal *tmp45 false
-    * set *tmp53 4
-    * jump *label57 always
+  173 select *tmp53 notEqual *tmp45 false 4 2
   174 label *label56
-    * set *tmp53 2
   175 label *label57
   176 set :areUnitsAvailable.1:needed *tmp53
   177 label *label58
 
   842 set .UNIT_S2 :processUnit.1:unit
   843 jump *label229 equal .SUPPLY_S_FIRST false
   844 sensor *tmp339 :processUnit:unit @totalItems
-    * op greaterThan *tmp338 *tmp339 0
+  845 op greaterThan .SUPPLY_S_FIRST *tmp339 0
   846 jump *label230 always
   847 label *label229
   848 sensor *tmp341 :processUnit.1:unit @totalItems
-    * op equal *tmp338 *tmp341 0
+  849 op equal .SUPPLY_S_FIRST *tmp341 0
   850 label *label230
-    * set .SUPPLY_S_FIRST *tmp338
   851 label *label190
   852 label *label191
   853 # "Function: inline void printDomeStatus(in item, in text)"
 
  1160 set .UNIT_P2 :processUnit.3:unit
  1161 jump *label310 equal .SUPPLY_P_FIRST false
  1162 sensor *tmp477 :processUnit.2:unit @totalItems
-    * op greaterThan *tmp476 *tmp477 0
+ 1163 op greaterThan .SUPPLY_P_FIRST *tmp477 0
  1164 jump *label311 always
  1165 label *label310
  1166 sensor *tmp479 :processUnit.3:unit @totalItems
-    * op equal *tmp476 *tmp479 0
+ 1167 op equal .SUPPLY_P_FIRST *tmp479 0
  1168 label *label311
-    * set .SUPPLY_P_FIRST *tmp476
  1169 label *label271
  1170 label *label272
  1171 op sub *tmp481 @time :start
 
  1194 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
  1195 jump *label317 always
  1196 label *label317
-    * jump *label318 equal *tmp490 false
-    * set *tmp498 4
-    * jump *label319 always
+ 1197 select *tmp498 notEqual *tmp490 false 4 2
  1198 label *label318
-    * set *tmp498 2
  1199 label *label319
  1200 set :areUnitsAvailable.2:needed *tmp498
  1201 label *label320

Modifications by Unroll iteration loop at line 169:9 (+7 instructions):
 
    16 printflush message1
    17 set .CORE null
    18 label *label5
-    * set :locateDomeAndCore:type @flare
-    * op add *tmp1 @counter 1
-    * jump *label8 always
-    * multilabel *label11 (m:marker0)
-    * set :locateDomeAndCore:type @poly
-    * op add *tmp1 @counter 1
-    * jump *label8 always
-    * multilabel *label12 (m:marker0)
-    * set :locateDomeAndCore:type @mega
-    * op add *tmp1 @counter 1
-    * jump *label8 always
-    * multilabel *label13 (m:marker0)
-    * set :locateDomeAndCore:type @mono
-    * set *tmp1 null
-    * label *label8
-    * set :locateCore:type :locateDomeAndCore:type
-    * call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label15 equal :locateCore*retval false
-    * jump *label1 always
-    * label *label15
-    * label *label16
-    * label *label9
-    * multijump *tmp1 0 0 (m:marker0)
-    * multilabel *label14 (m:marker0)
-    * label *label10
+   19 set :locateDomeAndCore:type @flare
+   20 label *label337
+   21 set :locateCore:type :locateDomeAndCore:type
+   22 call *label0 :locateCore*retaddr :locateCore*retval
+   23 jump *label338 equal :locateCore*retval false
+   24 jump *label1 always
+   25 label *label338
+   26 label *label339
+   27 label *label340
+   28 set :locateDomeAndCore:type @poly
+   29 label *label343
+   30 set :locateCore:type :locateDomeAndCore:type
+   31 call *label0 :locateCore*retaddr :locateCore*retval
+   32 jump *label344 equal :locateCore*retval false
+   33 jump *label1 always
+   34 label *label344
+   35 label *label345
+   36 label *label346
+   37 set :locateDomeAndCore:type @mega
+   38 label *label349
+   39 set :locateCore:type :locateDomeAndCore:type
+   40 call *label0 :locateCore*retaddr :locateCore*retval
+   41 jump *label350 equal :locateCore*retval false
+   42 jump *label1 always
+   43 label *label350
+   44 label *label351
+   45 label *label352
+   46 set :locateDomeAndCore:type @mono
+   47 label *label355
+   48 set :locateCore:type :locateDomeAndCore:type
+   49 call *label0 :locateCore*retaddr :locateCore*retval
+   50 jump *label356 equal :locateCore*retval false
+   51 jump *label1 always
+   52 label *label356
+   53 label *label357
+   54 label *label358
+   55 label *label10
    56 label *label6
    57 jump *label5 always
    58 label *label7

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 # "Function: inline void locateDomeAndCore()"
     5 set .DOME dome1
     6 label *label2
-    * jump *label4 notEqual .DOME null
+    7 jump *label4 notEqual dome1 null
     8 label *label336
     9 print "[gold]Waiting for an overdrive dome to be connected..."
    10 printflush message1
    11 set .DOME dome1
    12 label *label3
-    * jump *label336 equal .DOME null
+   13 jump *label336 equal dome1 null
    14 label *label4
    15 print "[gold]Locating core..."
    16 printflush message1
 
    18 label *label5
    19 set :locateDomeAndCore:type @flare
    20 label *label337
-    * set :locateCore:type :locateDomeAndCore:type
+   21 set :locateCore:type @flare
    22 call *label0 :locateCore*retaddr :locateCore*retval
    23 jump *label338 equal :locateCore*retval false
    24 jump *label1 always
 
    27 label *label340
    28 set :locateDomeAndCore:type @poly
    29 label *label343
-    * set :locateCore:type :locateDomeAndCore:type
+   30 set :locateCore:type @poly
    31 call *label0 :locateCore*retaddr :locateCore*retval
    32 jump *label344 equal :locateCore*retval false
    33 jump *label1 always
 
    36 label *label346
    37 set :locateDomeAndCore:type @mega
    38 label *label349
-    * set :locateCore:type :locateDomeAndCore:type
+   39 set :locateCore:type @mega
    40 call *label0 :locateCore*retaddr :locateCore*retval
    41 jump *label350 equal :locateCore*retval false
    42 jump *label1 always
 
    45 label *label352
    46 set :locateDomeAndCore:type @mono
    47 label *label355
-    * set :locateCore:type :locateDomeAndCore:type
+   48 set :locateCore:type @mono
    49 call *label0 :locateCore*retaddr :locateCore*retval
    50 jump *label356 equal :locateCore*retval false
    51 jump *label1 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
 
    16 printflush message1
    17 set .CORE null
    18 label *label5
-    * set :locateDomeAndCore:type @flare
    19 label *label337
    20 set :locateCore:type @flare
    21 call *label0 :locateCore*retaddr :locateCore*retval
 
    24 label *label338
    25 label *label339
    26 label *label340
-    * set :locateDomeAndCore:type @poly
    27 label *label343
    28 set :locateCore:type @poly
    29 call *label0 :locateCore*retaddr :locateCore*retval
 
    32 label *label344
    33 label *label345
    34 label *label346
-    * set :locateDomeAndCore:type @mega
    35 label *label349
    36 set :locateCore:type @mega
    37 call *label0 :locateCore*retaddr :locateCore*retval
 
    40 label *label350
    41 label *label351
    42 label *label352
-    * set :locateDomeAndCore:type @mono
    43 label *label355
    44 set :locateCore:type @mono
    45 call *label0 :locateCore*retaddr :locateCore*retval

Modifications by Replicate loop condition at line 54:5 (+1 instructions):
 
    60 label *label17
    61 sensor *tmp7 switch1 @enabled
    62 jump *label19 notEqual *tmp7 false
+   63 label *label362
    64 print "[coral]Activate switch to begin supplying overdrive dome..."
    65 print "\n"
    66 printflush message1
    67 label *label18
-    * jump *label17 always
+   68 sensor *tmp7 switch1 @enabled
+   69 jump *label362 equal *tmp7 false
    70 label *label19
    71 # "Function: inline def chooseUnitType()"
    72 label *label21

Modifications by Replicate loop condition at line 119:5 (+1 instructions):
 
   533 label *label147
   534 sensor *tmp204 switch1 @enabled
   535 jump *label149 equal *tmp204 false
+  536 label *label363
   537 set :start @time
   538 print " === [gold]Supplying Overdrive Dome[] === "
   539 print "\n"
 
  1263 label *label312
  1264 label *label313
  1265 label *label148
-    * jump *label147 always
+ 1266 sensor *tmp204 switch1 @enabled
+ 1267 jump *label363 notEqual *tmp204 false
  1268 label *label149
  1269 end
  1270 label *label0

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-2 instructions):
 
   122 label *label32
   123 label *label25
   124 label *label26
-    * jump *label37 equal true false
   125 print UNIT_TYPE
   126 print ":"
   127 print " occupied: "
 
   210 label *label60
   211 label *label53
   212 label *label54
-    * jump *label65 equal true false
   213 print :chooseUnitType:type
   214 print ":"
   215 print " occupied: "
 
  1234 label *label322
  1235 label *label315
  1236 label *label316
-    * jump *label327 equal false false
+ 1237 jump *label327 always
  1238 print UNIT_TYPE
  1239 print ":"
  1240 print " occupied: "

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-11 instructions):
 
    89 sensor *tmp18 :needsFourUnits:unit @speed
    90 op div :needsFourUnits:travel_time *tmp17 *tmp18
    91 op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
-    * jump *label27 always
    92 label *label27
    93 select *tmp21 notEqual *tmp13 false 4 2
    94 label *label28
 
   137 label *label37
   138 label *label38
   139 set *tmp10 false
-    * jump *label24 always
   140 label *label24
   141 jump *label41 equal *tmp10 false
   142 set *tmp9 UNIT_TYPE
 
   175 sensor *tmp50 :needsFourUnits.1:unit @speed
   176 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   177 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * jump *label55 always
   178 label *label55
   179 select *tmp53 notEqual *tmp45 false 4 2
   180 label *label56
 
   223 label *label65
   224 label *label66
   225 set *tmp42 false
-    * jump *label52 always
   226 label *label52
   227 jump *label69 equal *tmp42 false
   228 printflush null
 
   319 label *label82
   320 ucontrol flag 1
   321 set *tmp85 @unit
-    * jump *label81 always
   322 label *label81
   323 set .UNIT_S1 *tmp85
   324 # "Function: inline def acquireUnit(in currentUnit)"
 
   359 label *label95
   360 ucontrol flag 1
   361 set *tmp104 @unit
-    * jump *label94 always
   362 label *label94
   363 set .UNIT_P1 *tmp104
   364 sensor *tmp123 *tmp85 @firstItem
 
   389 sensor *tmp139 .UNIT_S1 @speed
   390 op div :needsFourUnits.2:travel_time *tmp138 .SPEED
   391 op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
-    * jump *label112 always
   392 label *label112
   393 set .FOUR_UNITS *tmp134
   394 jump *label113 equal *tmp134 false
 
   430 label *label116
   431 ucontrol flag 1
   432 set *tmp143 @unit
-    * jump *label115 always
   433 label *label115
   434 set .UNIT_S2 *tmp143
   435 # "Function: inline def acquireUnit(in currentUnit)"
 
   470 label *label129
   471 ucontrol flag 1
   472 set *tmp162 @unit
-    * jump *label128 always
   473 label *label128
   474 set .UNIT_P2 *tmp162
   475 sensor *tmp181 .UNIT_S1 @firstItem
 
  1192 sensor *tmp495 :needsFourUnits.3:unit @speed
  1193 op div :needsFourUnits.3:travel_time *tmp138 *tmp495
  1194 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
-    * jump *label317 always
  1195 label *label317
  1196 select *tmp498 notEqual *tmp490 false 4 2
  1197 label *label318
 
  1241 label *label327
  1242 label *label328
  1243 set *tmp487 false
-    * jump *label314 always
  1244 label *label314
  1245 jump *label331 equal *tmp487 false
  1246 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-2 instructions):
 
  1183 # "Function: inline def areUnitsAvailable(in type, in output)"
  1184 set :areUnitsAvailable.2:free 0
  1185 set :areUnitsAvailable.2:occupied 0
-    * set :areUnitsAvailable.2:needed 0
  1186 ubind UNIT_TYPE
  1187 set :areUnitsAvailable.2:firstUnit @unit
  1188 jump *label315 equal :areUnitsAvailable.2:firstUnit null
 
  1195 select *tmp498 notEqual *tmp490 false 4 2
  1196 label *label318
  1197 label *label319
-    * set :areUnitsAvailable.2:needed *tmp498
  1198 label *label320
  1199 sensor *tmp499 @unit @controlled
  1200 op equal *tmp500 *tmp499 0

Modifications by Unroll iteration loop at line 201:9 (+145 instructions):
 
   143 jump *label20 always
   144 label *label41
   145 label *label42
-    * set :chooseUnitType:type @flare
-    * op add *tmp39 @counter 1
-    * jump *label43 always
-    * multilabel *label46 (m:marker1)
-    * set :chooseUnitType:type @poly
-    * op add *tmp39 @counter 1
-    * jump *label43 always
-    * multilabel *label47 (m:marker1)
-    * set :chooseUnitType:type @mega
-    * op add *tmp39 @counter 1
-    * jump *label43 always
-    * multilabel *label48 (m:marker1)
-    * set :chooseUnitType:type @mono
-    * set *tmp39 null
-    * label *label43
-    * jump *label50 equal :chooseUnitType:type UNIT_TYPE
-    * # "Function: inline def areUnitsAvailable(in type, in output)"
-    * set :areUnitsAvailable.1:free 0
-    * set :areUnitsAvailable.1:occupied 0
-    * set :areUnitsAvailable.1:needed 0
-    * ubind :chooseUnitType:type
-    * set :areUnitsAvailable.1:firstUnit @unit
-    * jump *label53 equal :areUnitsAvailable.1:firstUnit null
-    * # "Function: inline def needsFourUnits(in unit)"
-    * set :needsFourUnits.1:unit @unit
-    * op sub *tmp46 .DOME_X .CORE_X
-    * op sub *tmp47 .DOME_Y .CORE_Y
-    * op len *tmp48 *tmp46 *tmp47
-    * op mul *tmp49 2 *tmp48
-    * sensor *tmp50 :needsFourUnits.1:unit @speed
-    * op div :needsFourUnits.1:travel_time *tmp49 *tmp50
-    * op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * label *label55
-    * select *tmp53 notEqual *tmp45 false 4 2
-    * label *label56
-    * label *label57
-    * set :areUnitsAvailable.1:needed *tmp53
-    * label *label58
-    * sensor *tmp54 @unit @controlled
-    * op equal *tmp55 *tmp54 0
-    * sensor *tmp56 @unit @controller
-    * op equal *tmp57 *tmp56 @this
-    * op or *tmp58 *tmp55 *tmp57
-    * jump *label61 equal *tmp58 false
-    * op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label63 lessThan :areUnitsAvailable.1:free *tmp53
-    * set *tmp42 true
-    * jump *label52 always
-    * label *label63
-    * label *label64
-    * jump *label62 always
-    * label *label61
-    * op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
-    * label *label62
-    * ubind :chooseUnitType:type
-    * label *label59
-    * op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
-    * sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
-    * op equal *tmp65 *tmp64 0
-    * op land *tmp66 *tmp63 *tmp65
-    * jump *label58 notEqual *tmp66 false
-    * label *label60
-    * label *label53
-    * label *label54
-    * print :chooseUnitType:type
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.1:occupied
-    * print ","
-    * print " free: "
-    * print :areUnitsAvailable.1:free
-    * jump *label67 lessThanEq :areUnitsAvailable.1:needed 0
-    * print ", needed: "
-    * print :areUnitsAvailable.1:needed
-    * label *label67
-    * label *label68
-    * print "\n"
-    * label *label65
-    * label *label66
-    * set *tmp42 false
-    * label *label52
-    * jump *label69 equal *tmp42 false
-    * printflush null
-    * set *tmp9 :chooseUnitType:type
-    * jump *label20 always
-    * label *label69
-    * label *label70
-    * label *label50
-    * label *label51
-    * label *label44
-    * multijump *tmp39 0 0 (m:marker1)
-    * multilabel *label49 (m:marker1)
-    * label *label45
+  146 set :chooseUnitType:type @flare
+  147 label *label364
+  148 jump *label384 equal :chooseUnitType:type UNIT_TYPE
+  149 # "Function: inline def areUnitsAvailable(in type, in output)"
+  150 set :areUnitsAvailable.1:free 0
+  151 set :areUnitsAvailable.1:occupied 0
+  152 set :areUnitsAvailable.1:needed 0
+  153 ubind :chooseUnitType:type
+  154 set :areUnitsAvailable.1:firstUnit @unit
+  155 jump *label375 equal :areUnitsAvailable.1:firstUnit null
+  156 # "Function: inline def needsFourUnits(in unit)"
+  157 set :needsFourUnits.1:unit @unit
+  158 op sub *tmp46 .DOME_X .CORE_X
+  159 op sub *tmp47 .DOME_Y .CORE_Y
+  160 op len *tmp48 *tmp46 *tmp47
+  161 op mul *tmp49 2 *tmp48
+  162 sensor *tmp50 :needsFourUnits.1:unit @speed
+  163 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
+  164 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
+  165 label *label365
+  166 select *tmp53 notEqual *tmp45 false 4 2
+  167 label *label366
+  168 label *label367
+  169 set :areUnitsAvailable.1:needed *tmp53
+  170 label *label368
+  171 sensor *tmp54 @unit @controlled
+  172 op equal *tmp55 *tmp54 0
+  173 sensor *tmp56 @unit @controller
+  174 op equal *tmp57 *tmp56 @this
+  175 op or *tmp58 *tmp55 *tmp57
+  176 jump *label371 equal *tmp58 false
+  177 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
+  178 jump *label369 lessThan :areUnitsAvailable.1:free *tmp53
+  179 set *tmp42 true
+  180 jump *label381 always
+  181 label *label369
+  182 label *label370
+  183 jump *label372 always
+  184 label *label371
+  185 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
+  186 label *label372
+  187 ubind :chooseUnitType:type
+  188 label *label373
+  189 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
+  190 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
+  191 op equal *tmp65 *tmp64 0
+  192 op land *tmp66 *tmp63 *tmp65
+  193 jump *label368 notEqual *tmp66 false
+  194 label *label374
+  195 label *label375
+  196 label *label376
+  197 print :chooseUnitType:type
+  198 print ":"
+  199 print " occupied: "
+  200 print :areUnitsAvailable.1:occupied
+  201 print ","
+  202 print " free: "
+  203 print :areUnitsAvailable.1:free
+  204 jump *label377 lessThanEq :areUnitsAvailable.1:needed 0
+  205 print ", needed: "
+  206 print :areUnitsAvailable.1:needed
+  207 label *label377
+  208 label *label378
+  209 print "\n"
+  210 label *label379
+  211 label *label380
+  212 set *tmp42 false
+  213 label *label381
+  214 jump *label382 equal *tmp42 false
+  215 printflush null
+  216 set *tmp9 :chooseUnitType:type
+  217 jump *label20 always
+  218 label *label382
+  219 label *label383
+  220 label *label384
+  221 label *label385
+  222 label *label386
+  223 set :chooseUnitType:type @poly
+  224 label *label389
+  225 jump *label409 equal :chooseUnitType:type UNIT_TYPE
+  226 # "Function: inline def areUnitsAvailable(in type, in output)"
+  227 set :areUnitsAvailable.1:free 0
+  228 set :areUnitsAvailable.1:occupied 0
+  229 set :areUnitsAvailable.1:needed 0
+  230 ubind :chooseUnitType:type
+  231 set :areUnitsAvailable.1:firstUnit @unit
+  232 jump *label400 equal :areUnitsAvailable.1:firstUnit null
+  233 # "Function: inline def needsFourUnits(in unit)"
+  234 set :needsFourUnits.1:unit @unit
+  235 op sub *tmp46 .DOME_X .CORE_X
+  236 op sub *tmp47 .DOME_Y .CORE_Y
+  237 op len *tmp48 *tmp46 *tmp47
+  238 op mul *tmp49 2 *tmp48
+  239 sensor *tmp50 :needsFourUnits.1:unit @speed
+  240 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
+  241 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
+  242 label *label390
+  243 select *tmp53 notEqual *tmp45 false 4 2
+  244 label *label391
+  245 label *label392
+  246 set :areUnitsAvailable.1:needed *tmp53
+  247 label *label393
+  248 sensor *tmp54 @unit @controlled
+  249 op equal *tmp55 *tmp54 0
+  250 sensor *tmp56 @unit @controller
+  251 op equal *tmp57 *tmp56 @this
+  252 op or *tmp58 *tmp55 *tmp57
+  253 jump *label396 equal *tmp58 false
+  254 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
+  255 jump *label394 lessThan :areUnitsAvailable.1:free *tmp53
+  256 set *tmp42 true
+  257 jump *label406 always
+  258 label *label394
+  259 label *label395
+  260 jump *label397 always
+  261 label *label396
+  262 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
+  263 label *label397
+  264 ubind :chooseUnitType:type
+  265 label *label398
+  266 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
+  267 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
+  268 op equal *tmp65 *tmp64 0
+  269 op land *tmp66 *tmp63 *tmp65
+  270 jump *label393 notEqual *tmp66 false
+  271 label *label399
+  272 label *label400
+  273 label *label401
+  274 print :chooseUnitType:type
+  275 print ":"
+  276 print " occupied: "
+  277 print :areUnitsAvailable.1:occupied
+  278 print ","
+  279 print " free: "
+  280 print :areUnitsAvailable.1:free
+  281 jump *label402 lessThanEq :areUnitsAvailable.1:needed 0
+  282 print ", needed: "
+  283 print :areUnitsAvailable.1:needed
+  284 label *label402
+  285 label *label403
+  286 print "\n"
+  287 label *label404
+  288 label *label405
+  289 set *tmp42 false
+  290 label *label406
+  291 jump *label407 equal *tmp42 false
+  292 printflush null
+  293 set *tmp9 :chooseUnitType:type
+  294 jump *label20 always
+  295 label *label407
+  296 label *label408
+  297 label *label409
+  298 label *label410
+  299 label *label411
+  300 set :chooseUnitType:type @mega
+  301 label *label414
+  302 jump *label434 equal :chooseUnitType:type UNIT_TYPE
+  303 # "Function: inline def areUnitsAvailable(in type, in output)"
+  304 set :areUnitsAvailable.1:free 0
+  305 set :areUnitsAvailable.1:occupied 0
+  306 set :areUnitsAvailable.1:needed 0
+  307 ubind :chooseUnitType:type
+  308 set :areUnitsAvailable.1:firstUnit @unit
+  309 jump *label425 equal :areUnitsAvailable.1:firstUnit null
+  310 # "Function: inline def needsFourUnits(in unit)"
+  311 set :needsFourUnits.1:unit @unit
+  312 op sub *tmp46 .DOME_X .CORE_X
+  313 op sub *tmp47 .DOME_Y .CORE_Y
+  314 op len *tmp48 *tmp46 *tmp47
+  315 op mul *tmp49 2 *tmp48
+  316 sensor *tmp50 :needsFourUnits.1:unit @speed
+  317 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
+  318 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
+  319 label *label415
+  320 select *tmp53 notEqual *tmp45 false 4 2
+  321 label *label416
+  322 label *label417
+  323 set :areUnitsAvailable.1:needed *tmp53
+  324 label *label418
+  325 sensor *tmp54 @unit @controlled
+  326 op equal *tmp55 *tmp54 0
+  327 sensor *tmp56 @unit @controller
+  328 op equal *tmp57 *tmp56 @this
+  329 op or *tmp58 *tmp55 *tmp57
+  330 jump *label421 equal *tmp58 false
+  331 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
+  332 jump *label419 lessThan :areUnitsAvailable.1:free *tmp53
+  333 set *tmp42 true
+  334 jump *label431 always
+  335 label *label419
+  336 label *label420
+  337 jump *label422 always
+  338 label *label421
+  339 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
+  340 label *label422
+  341 ubind :chooseUnitType:type
+  342 label *label423
+  343 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
+  344 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
+  345 op equal *tmp65 *tmp64 0
+  346 op land *tmp66 *tmp63 *tmp65
+  347 jump *label418 notEqual *tmp66 false
+  348 label *label424
+  349 label *label425
+  350 label *label426
+  351 print :chooseUnitType:type
+  352 print ":"
+  353 print " occupied: "
+  354 print :areUnitsAvailable.1:occupied
+  355 print ","
+  356 print " free: "
+  357 print :areUnitsAvailable.1:free
+  358 jump *label427 lessThanEq :areUnitsAvailable.1:needed 0
+  359 print ", needed: "
+  360 print :areUnitsAvailable.1:needed
+  361 label *label427
+  362 label *label428
+  363 print "\n"
+  364 label *label429
+  365 label *label430
+  366 set *tmp42 false
+  367 label *label431
+  368 jump *label432 equal *tmp42 false
+  369 printflush null
+  370 set *tmp9 :chooseUnitType:type
+  371 jump *label20 always
+  372 label *label432
+  373 label *label433
+  374 label *label434
+  375 label *label435
+  376 label *label436
+  377 set :chooseUnitType:type @mono
+  378 label *label439
+  379 jump *label459 equal :chooseUnitType:type UNIT_TYPE
+  380 # "Function: inline def areUnitsAvailable(in type, in output)"
+  381 set :areUnitsAvailable.1:free 0
+  382 set :areUnitsAvailable.1:occupied 0
+  383 set :areUnitsAvailable.1:needed 0
+  384 ubind :chooseUnitType:type
+  385 set :areUnitsAvailable.1:firstUnit @unit
+  386 jump *label450 equal :areUnitsAvailable.1:firstUnit null
+  387 # "Function: inline def needsFourUnits(in unit)"
+  388 set :needsFourUnits.1:unit @unit
+  389 op sub *tmp46 .DOME_X .CORE_X
+  390 op sub *tmp47 .DOME_Y .CORE_Y
+  391 op len *tmp48 *tmp46 *tmp47
+  392 op mul *tmp49 2 *tmp48
+  393 sensor *tmp50 :needsFourUnits.1:unit @speed
+  394 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
+  395 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
+  396 label *label440
+  397 select *tmp53 notEqual *tmp45 false 4 2
+  398 label *label441
+  399 label *label442
+  400 set :areUnitsAvailable.1:needed *tmp53
+  401 label *label443
+  402 sensor *tmp54 @unit @controlled
+  403 op equal *tmp55 *tmp54 0
+  404 sensor *tmp56 @unit @controller
+  405 op equal *tmp57 *tmp56 @this
+  406 op or *tmp58 *tmp55 *tmp57
+  407 jump *label446 equal *tmp58 false
+  408 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
+  409 jump *label444 lessThan :areUnitsAvailable.1:free *tmp53
+  410 set *tmp42 true
+  411 jump *label456 always
+  412 label *label444
+  413 label *label445
+  414 jump *label447 always
+  415 label *label446
+  416 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
+  417 label *label447
+  418 ubind :chooseUnitType:type
+  419 label *label448
+  420 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
+  421 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
+  422 op equal *tmp65 *tmp64 0
+  423 op land *tmp66 *tmp63 *tmp65
+  424 jump *label443 notEqual *tmp66 false
+  425 label *label449
+  426 label *label450
+  427 label *label451
+  428 print :chooseUnitType:type
+  429 print ":"
+  430 print " occupied: "
+  431 print :areUnitsAvailable.1:occupied
+  432 print ","
+  433 print " free: "
+  434 print :areUnitsAvailable.1:free
+  435 jump *label452 lessThanEq :areUnitsAvailable.1:needed 0
+  436 print ", needed: "
+  437 print :areUnitsAvailable.1:needed
+  438 label *label452
+  439 label *label453
+  440 print "\n"
+  441 label *label454
+  442 label *label455
+  443 set *tmp42 false
+  444 label *label456
+  445 jump *label457 equal *tmp42 false
+  446 printflush null
+  447 set *tmp9 :chooseUnitType:type
+  448 jump *label20 always
+  449 label *label457
+  450 label *label458
+  451 label *label459
+  452 label *label460
+  453 label *label461
+  454 label *label45
   455 printflush message1
   456 label *label22
   457 jump *label21 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
   145 label *label42
   146 set :chooseUnitType:type @flare
   147 label *label364
-    * jump *label384 equal :chooseUnitType:type UNIT_TYPE
+  148 jump *label384 equal @flare UNIT_TYPE
   149 # "Function: inline def areUnitsAvailable(in type, in output)"
   150 set :areUnitsAvailable.1:free 0
   151 set :areUnitsAvailable.1:occupied 0
   152 set :areUnitsAvailable.1:needed 0
-    * ubind :chooseUnitType:type
+  153 ubind @flare
   154 set :areUnitsAvailable.1:firstUnit @unit
   155 jump *label375 equal :areUnitsAvailable.1:firstUnit null
   156 # "Function: inline def needsFourUnits(in unit)"
 
   184 label *label371
   185 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   186 label *label372
-    * ubind :chooseUnitType:type
+  187 ubind @flare
   188 label *label373
   189 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   190 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
 
   194 label *label374
   195 label *label375
   196 label *label376
-    * print :chooseUnitType:type
+  197 print @flare
   198 print ":"
   199 print " occupied: "
   200 print :areUnitsAvailable.1:occupied
 
   213 label *label381
   214 jump *label382 equal *tmp42 false
   215 printflush null
-    * set *tmp9 :chooseUnitType:type
+  216 set *tmp9 @flare
   217 jump *label20 always
   218 label *label382
   219 label *label383
 
   222 label *label386
   223 set :chooseUnitType:type @poly
   224 label *label389
-    * jump *label409 equal :chooseUnitType:type UNIT_TYPE
+  225 jump *label409 equal @poly UNIT_TYPE
   226 # "Function: inline def areUnitsAvailable(in type, in output)"
   227 set :areUnitsAvailable.1:free 0
   228 set :areUnitsAvailable.1:occupied 0
   229 set :areUnitsAvailable.1:needed 0
-    * ubind :chooseUnitType:type
+  230 ubind @poly
   231 set :areUnitsAvailable.1:firstUnit @unit
   232 jump *label400 equal :areUnitsAvailable.1:firstUnit null
   233 # "Function: inline def needsFourUnits(in unit)"
 
   261 label *label396
   262 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   263 label *label397
-    * ubind :chooseUnitType:type
+  264 ubind @poly
   265 label *label398
   266 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   267 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
 
   271 label *label399
   272 label *label400
   273 label *label401
-    * print :chooseUnitType:type
+  274 print @poly
   275 print ":"
   276 print " occupied: "
   277 print :areUnitsAvailable.1:occupied
 
   290 label *label406
   291 jump *label407 equal *tmp42 false
   292 printflush null
-    * set *tmp9 :chooseUnitType:type
+  293 set *tmp9 @poly
   294 jump *label20 always
   295 label *label407
   296 label *label408
 
   299 label *label411
   300 set :chooseUnitType:type @mega
   301 label *label414
-    * jump *label434 equal :chooseUnitType:type UNIT_TYPE
+  302 jump *label434 equal @mega UNIT_TYPE
   303 # "Function: inline def areUnitsAvailable(in type, in output)"
   304 set :areUnitsAvailable.1:free 0
   305 set :areUnitsAvailable.1:occupied 0
   306 set :areUnitsAvailable.1:needed 0
-    * ubind :chooseUnitType:type
+  307 ubind @mega
   308 set :areUnitsAvailable.1:firstUnit @unit
   309 jump *label425 equal :areUnitsAvailable.1:firstUnit null
   310 # "Function: inline def needsFourUnits(in unit)"
 
   338 label *label421
   339 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   340 label *label422
-    * ubind :chooseUnitType:type
+  341 ubind @mega
   342 label *label423
   343 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   344 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
 
   348 label *label424
   349 label *label425
   350 label *label426
-    * print :chooseUnitType:type
+  351 print @mega
   352 print ":"
   353 print " occupied: "
   354 print :areUnitsAvailable.1:occupied
 
   367 label *label431
   368 jump *label432 equal *tmp42 false
   369 printflush null
-    * set *tmp9 :chooseUnitType:type
+  370 set *tmp9 @mega
   371 jump *label20 always
   372 label *label432
   373 label *label433
 
   376 label *label436
   377 set :chooseUnitType:type @mono
   378 label *label439
-    * jump *label459 equal :chooseUnitType:type UNIT_TYPE
+  379 jump *label459 equal @mono UNIT_TYPE
   380 # "Function: inline def areUnitsAvailable(in type, in output)"
   381 set :areUnitsAvailable.1:free 0
   382 set :areUnitsAvailable.1:occupied 0
   383 set :areUnitsAvailable.1:needed 0
-    * ubind :chooseUnitType:type
+  384 ubind @mono
   385 set :areUnitsAvailable.1:firstUnit @unit
   386 jump *label450 equal :areUnitsAvailable.1:firstUnit null
   387 # "Function: inline def needsFourUnits(in unit)"
 
   415 label *label446
   416 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   417 label *label447
-    * ubind :chooseUnitType:type
+  418 ubind @mono
   419 label *label448
   420 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   421 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
 
   425 label *label449
   426 label *label450
   427 label *label451
-    * print :chooseUnitType:type
+  428 print @mono
   429 print ":"
   430 print " occupied: "
   431 print :areUnitsAvailable.1:occupied
 
   444 label *label456
   445 jump *label457 equal *tmp42 false
   446 printflush null
-    * set *tmp9 :chooseUnitType:type
+  447 set *tmp9 @mono
   448 jump *label20 always
   449 label *label457
   450 label *label458

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-4 instructions):
 
   143 jump *label20 always
   144 label *label41
   145 label *label42
-    * set :chooseUnitType:type @flare
   146 label *label364
   147 jump *label384 equal @flare UNIT_TYPE
   148 # "Function: inline def areUnitsAvailable(in type, in output)"
 
   219 label *label384
   220 label *label385
   221 label *label386
-    * set :chooseUnitType:type @poly
   222 label *label389
   223 jump *label409 equal @poly UNIT_TYPE
   224 # "Function: inline def areUnitsAvailable(in type, in output)"
 
   295 label *label409
   296 label *label410
   297 label *label411
-    * set :chooseUnitType:type @mega
   298 label *label414
   299 jump *label434 equal @mega UNIT_TYPE
   300 # "Function: inline def areUnitsAvailable(in type, in output)"
 
   371 label *label434
   372 label *label435
   373 label *label436
-    * set :chooseUnitType:type @mono
   374 label *label439
   375 jump *label459 equal @mono UNIT_TYPE
   376 # "Function: inline def areUnitsAvailable(in type, in output)"

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
     3 remark "Do not modify anything below this line."
     4 # "Function: inline void locateDomeAndCore()"
     5 set .DOME dome1
-    * label *label2
     6 jump *label4 notEqual dome1 null
     7 label *label336
     8 print "[gold]Waiting for an overdrive dome to be connected..."
     9 printflush message1
    10 set .DOME dome1
-    * label *label3
    11 jump *label336 equal dome1 null
    12 label *label4
    13 print "[gold]Locating core..."
    14 printflush message1
    15 set .CORE null
    16 label *label5
-    * label *label337
    17 set :locateCore:type @flare
    18 call *label0 :locateCore*retaddr :locateCore*retval
    19 jump *label338 equal :locateCore*retval false
    20 jump *label1 always
    21 label *label338
-    * label *label339
-    * label *label340
-    * label *label343
    22 set :locateCore:type @poly
    23 call *label0 :locateCore*retaddr :locateCore*retval
    24 jump *label344 equal :locateCore*retval false
    25 jump *label1 always
    26 label *label344
-    * label *label345
-    * label *label346
-    * label *label349
    27 set :locateCore:type @mega
    28 call *label0 :locateCore*retaddr :locateCore*retval
    29 jump *label350 equal :locateCore*retval false
    30 jump *label1 always
    31 label *label350
-    * label *label351
-    * label *label352
-    * label *label355
    32 set :locateCore:type @mono
    33 call *label0 :locateCore*retaddr :locateCore*retval
    34 jump *label356 equal :locateCore*retval false
    35 jump *label1 always
    36 label *label356
-    * label *label357
-    * label *label358
-    * label *label10
-    * label *label6
    37 jump *label5 always
-    * label *label7
    38 label *label1
    39 sensor .CORE_X .CORE @x
    40 sensor .CORE_Y .CORE @y
    41 sensor .DOME_X .DOME @x
    42 sensor .DOME_Y .DOME @y
-    * label *label17
    43 sensor *tmp7 switch1 @enabled
    44 jump *label19 notEqual *tmp7 false
    45 label *label362
    46 print "[coral]Activate switch to begin supplying overdrive dome..."
    47 print "\n"
    48 printflush message1
-    * label *label18
    49 sensor *tmp7 switch1 @enabled
    50 jump *label362 equal *tmp7 false
    51 label *label19
 
    70 sensor *tmp18 :needsFourUnits:unit @speed
    71 op div :needsFourUnits:travel_time *tmp17 *tmp18
    72 op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
-    * label *label27
    73 select *tmp21 notEqual *tmp13 false 4 2
-    * label *label28
-    * label *label29
    74 set :areUnitsAvailable:needed *tmp21
    75 label *label30
    76 sensor *tmp22 @unit @controlled
 
    84 set *tmp10 true
    85 jump *label24 always
    86 label *label35
-    * label *label36
    87 jump *label34 always
    88 label *label33
    89 op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
    90 label *label34
    91 ubind UNIT_TYPE
-    * label *label31
    92 op notEqual *tmp31 @unit :areUnitsAvailable:firstUnit
    93 sensor *tmp32 :areUnitsAvailable:firstUnit @dead
    94 op equal *tmp33 *tmp32 0
    95 op land *tmp34 *tmp31 *tmp33
    96 jump *label30 notEqual *tmp34 false
-    * label *label32
    97 label *label25
-    * label *label26
    98 print UNIT_TYPE
    99 print ":"
   100 print " occupied: "
 
   106 print ", needed: "
   107 print :areUnitsAvailable:needed
   108 label *label39
-    * label *label40
   109 print "\n"
-    * label *label37
-    * label *label38
   110 set *tmp10 false
   111 label *label24
   112 jump *label41 equal *tmp10 false
   113 set *tmp9 UNIT_TYPE
   114 jump *label20 always
   115 label *label41
-    * label *label42
-    * label *label364
   116 jump *label384 equal @flare UNIT_TYPE
   117 # "Function: inline def areUnitsAvailable(in type, in output)"
   118 set :areUnitsAvailable.1:free 0
 
   130 sensor *tmp50 :needsFourUnits.1:unit @speed
   131 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   132 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * label *label365
   133 select *tmp53 notEqual *tmp45 false 4 2
-    * label *label366
-    * label *label367
   134 set :areUnitsAvailable.1:needed *tmp53
   135 label *label368
   136 sensor *tmp54 @unit @controlled
 
   144 set *tmp42 true
   145 jump *label381 always
   146 label *label369
-    * label *label370
   147 jump *label372 always
   148 label *label371
   149 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   150 label *label372
   151 ubind @flare
-    * label *label373
   152 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   153 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
   154 op equal *tmp65 *tmp64 0
   155 op land *tmp66 *tmp63 *tmp65
   156 jump *label368 notEqual *tmp66 false
-    * label *label374
   157 label *label375
-    * label *label376
   158 print @flare
   159 print ":"
   160 print " occupied: "
 
   166 print ", needed: "
   167 print :areUnitsAvailable.1:needed
   168 label *label377
-    * label *label378
   169 print "\n"
-    * label *label379
-    * label *label380
   170 set *tmp42 false
   171 label *label381
   172 jump *label382 equal *tmp42 false
 
   174 set *tmp9 @flare
   175 jump *label20 always
   176 label *label382
-    * label *label383
   177 label *label384
-    * label *label385
-    * label *label386
-    * label *label389
   178 jump *label409 equal @poly UNIT_TYPE
   179 # "Function: inline def areUnitsAvailable(in type, in output)"
   180 set :areUnitsAvailable.1:free 0
 
   192 sensor *tmp50 :needsFourUnits.1:unit @speed
   193 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   194 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * label *label390
   195 select *tmp53 notEqual *tmp45 false 4 2
-    * label *label391
-    * label *label392
   196 set :areUnitsAvailable.1:needed *tmp53
   197 label *label393
   198 sensor *tmp54 @unit @controlled
 
   206 set *tmp42 true
   207 jump *label406 always
   208 label *label394
-    * label *label395
   209 jump *label397 always
   210 label *label396
   211 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   212 label *label397
   213 ubind @poly
-    * label *label398
   214 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   215 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
   216 op equal *tmp65 *tmp64 0
   217 op land *tmp66 *tmp63 *tmp65
   218 jump *label393 notEqual *tmp66 false
-    * label *label399
   219 label *label400
-    * label *label401
   220 print @poly
   221 print ":"
   222 print " occupied: "
 
   228 print ", needed: "
   229 print :areUnitsAvailable.1:needed
   230 label *label402
-    * label *label403
   231 print "\n"
-    * label *label404
-    * label *label405
   232 set *tmp42 false
   233 label *label406
   234 jump *label407 equal *tmp42 false
 
   236 set *tmp9 @poly
   237 jump *label20 always
   238 label *label407
-    * label *label408
   239 label *label409
-    * label *label410
-    * label *label411
-    * label *label414
   240 jump *label434 equal @mega UNIT_TYPE
   241 # "Function: inline def areUnitsAvailable(in type, in output)"
   242 set :areUnitsAvailable.1:free 0
 
   254 sensor *tmp50 :needsFourUnits.1:unit @speed
   255 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   256 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * label *label415
   257 select *tmp53 notEqual *tmp45 false 4 2
-    * label *label416
-    * label *label417
   258 set :areUnitsAvailable.1:needed *tmp53
   259 label *label418
   260 sensor *tmp54 @unit @controlled
 
   268 set *tmp42 true
   269 jump *label431 always
   270 label *label419
-    * label *label420
   271 jump *label422 always
   272 label *label421
   273 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   274 label *label422
   275 ubind @mega
-    * label *label423
   276 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   277 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
   278 op equal *tmp65 *tmp64 0
   279 op land *tmp66 *tmp63 *tmp65
   280 jump *label418 notEqual *tmp66 false
-    * label *label424
   281 label *label425
-    * label *label426
   282 print @mega
   283 print ":"
   284 print " occupied: "
 
   290 print ", needed: "
   291 print :areUnitsAvailable.1:needed
   292 label *label427
-    * label *label428
   293 print "\n"
-    * label *label429
-    * label *label430
   294 set *tmp42 false
   295 label *label431
   296 jump *label432 equal *tmp42 false
 
   298 set *tmp9 @mega
   299 jump *label20 always
   300 label *label432
-    * label *label433
   301 label *label434
-    * label *label435
-    * label *label436
-    * label *label439
   302 jump *label459 equal @mono UNIT_TYPE
   303 # "Function: inline def areUnitsAvailable(in type, in output)"
   304 set :areUnitsAvailable.1:free 0
 
   316 sensor *tmp50 :needsFourUnits.1:unit @speed
   317 op div :needsFourUnits.1:travel_time *tmp49 *tmp50
   318 op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
-    * label *label440
   319 select *tmp53 notEqual *tmp45 false 4 2
-    * label *label441
-    * label *label442
   320 set :areUnitsAvailable.1:needed *tmp53
   321 label *label443
   322 sensor *tmp54 @unit @controlled
 
   330 set *tmp42 true
   331 jump *label456 always
   332 label *label444
-    * label *label445
   333 jump *label447 always
   334 label *label446
   335 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   336 label *label447
   337 ubind @mono
-    * label *label448
   338 op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
   339 sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
   340 op equal *tmp65 *tmp64 0
   341 op land *tmp66 *tmp63 *tmp65
   342 jump *label443 notEqual *tmp66 false
-    * label *label449
   343 label *label450
-    * label *label451
   344 print @mono
   345 print ":"
   346 print " occupied: "
 
   352 print ", needed: "
   353 print :areUnitsAvailable.1:needed
   354 label *label452
-    * label *label453
   355 print "\n"
-    * label *label454
-    * label *label455
   356 set *tmp42 false
   357 label *label456
   358 jump *label457 equal *tmp42 false
 
   360 set *tmp9 @mono
   361 jump *label20 always
   362 label *label457
-    * label *label458
   363 label *label459
-    * label *label460
-    * label *label461
-    * label *label45
   364 printflush message1
-    * label *label22
   365 jump *label21 always
-    * label *label23
   366 set *tmp9 null
   367 label *label20
   368 set .TYPE *tmp9
 
   379 jump *label72 notEqual :rebindUnits:firstUnit null
   380 end
   381 label *label72
-    * label *label73
   382 label *label74
   383 sensor *tmp74 @unit @controller
   384 jump *label77 notEqual *tmp74 @this
 
   391 jump *label79 equal .UNIT_S2 null
   392 jump *label76 always
   393 label *label79
-    * label *label80
   394 label *label77
-    * label *label78
   395 ubind *tmp9
-    * label *label75
   396 op notEqual *tmp81 @unit :rebindUnits:firstUnit
   397 sensor *tmp82 :rebindUnits:firstUnit @dead
   398 op equal *tmp83 *tmp82 0
   399 op land *tmp84 *tmp81 *tmp83
   400 jump *label74 notEqual *tmp84 false
   401 label *label76
-    * label *label71
   402 # "Function: inline def acquireUnit(in currentUnit)"
   403 # "Function: inline def rebindUnit(in currentUnit)"
   404 jump *label83 equal .UNIT_S1 null
 
   411 jump *label85 equal *tmp93 false
   412 jump *label82 always
   413 label *label85
-    * label *label86
   414 label *label83
-    * label *label84
   415 ubind *tmp9
   416 set :rebindUnit:firstUnit @unit
   417 jump *label87 equal :rebindUnit:firstUnit null
 
   420 jump *label92 notEqual *tmp97 0
   421 jump *label82 always
   422 label *label92
-    * label *label93
   423 ubind *tmp9
-    * label *label90
   424 op notEqual *tmp100 @unit :rebindUnit:firstUnit
   425 sensor *tmp101 :rebindUnit:firstUnit @dead
   426 op equal *tmp102 *tmp101 0
   427 op land *tmp103 *tmp100 *tmp102
   428 jump *label89 notEqual *tmp103 false
-    * label *label91
   429 label *label87
-    * label *label88
   430 end
   431 label *label82
   432 ucontrol flag 1
   433 set *tmp85 @unit
-    * label *label81
   434 set .UNIT_S1 *tmp85
   435 # "Function: inline def acquireUnit(in currentUnit)"
   436 # "Function: inline def rebindUnit(in currentUnit)"
 
   444 jump *label98 equal *tmp112 false
   445 jump *label95 always
   446 label *label98
-    * label *label99
   447 label *label96
-    * label *label97
   448 ubind *tmp9
   449 set :rebindUnit.1:firstUnit @unit
   450 jump *label100 equal :rebindUnit.1:firstUnit null
 
   453 jump *label105 notEqual *tmp116 0
   454 jump *label95 always
   455 label *label105
-    * label *label106
   456 ubind *tmp9
-    * label *label103
   457 op notEqual *tmp119 @unit :rebindUnit.1:firstUnit
   458 sensor *tmp120 :rebindUnit.1:firstUnit @dead
   459 op equal *tmp121 *tmp120 0
   460 op land *tmp122 *tmp119 *tmp121
   461 jump *label102 notEqual *tmp122 false
-    * label *label104
   462 label *label100
-    * label *label101
   463 end
   464 label *label95
   465 ucontrol flag 1
   466 set *tmp104 @unit
-    * label *label94
   467 set .UNIT_P1 *tmp104
   468 sensor *tmp123 *tmp85 @firstItem
   469 op equal *tmp124 *tmp123 @phase-fabric
 
   472 op or *tmp127 *tmp124 *tmp126
   473 jump *label107 equal *tmp127 false
   474 # "Function: inline void swap(in out a, in out b)"
-    * label *label109
   475 set .UNIT_S1 *tmp104
   476 set .UNIT_P1 *tmp85
   477 label *label107
-    * label *label108
   478 sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
   479 sensor .SPEED .UNIT_S1 @speed
   480 op div .SPEED_TENTHS .SPEED 10
 
   482 jump *label110 equal *tmp132 false
   483 stop
   484 label *label110
-    * label *label111
   485 # "Function: inline def needsFourUnits(in unit)"
   486 op sub *tmp135 .DOME_X .CORE_X
   487 op sub *tmp136 .DOME_Y .CORE_Y
 
   490 sensor *tmp139 .UNIT_S1 @speed
   491 op div :needsFourUnits.2:travel_time *tmp138 .SPEED
   492 op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
-    * label *label112
   493 set .FOUR_UNITS *tmp134
   494 jump *label113 equal *tmp134 false
   495 # "Function: inline def acquireUnit(in currentUnit)"
 
   504 jump *label119 equal *tmp151 false
   505 jump *label116 always
   506 label *label119
-    * label *label120
   507 label *label117
-    * label *label118
   508 ubind *tmp9
   509 set :rebindUnit.2:firstUnit @unit
   510 jump *label121 equal :rebindUnit.2:firstUnit null
 
   513 jump *label126 notEqual *tmp155 0
   514 jump *label116 always
   515 label *label126
-    * label *label127
   516 ubind *tmp9
-    * label *label124
   517 op notEqual *tmp158 @unit :rebindUnit.2:firstUnit
   518 sensor *tmp159 :rebindUnit.2:firstUnit @dead
   519 op equal *tmp160 *tmp159 0
   520 op land *tmp161 *tmp158 *tmp160
   521 jump *label123 notEqual *tmp161 false
-    * label *label125
   522 label *label121
-    * label *label122
   523 end
   524 label *label116
   525 ucontrol flag 1
   526 set *tmp143 @unit
-    * label *label115
   527 set .UNIT_S2 *tmp143
   528 # "Function: inline def acquireUnit(in currentUnit)"
   529 # "Function: inline def rebindUnit(in currentUnit)"
 
   537 jump *label132 equal *tmp170 false
   538 jump *label129 always
   539 label *label132
-    * label *label133
   540 label *label130
-    * label *label131
   541 ubind *tmp9
   542 set :rebindUnit.3:firstUnit @unit
   543 jump *label134 equal :rebindUnit.3:firstUnit null
 
   546 jump *label139 notEqual *tmp174 0
   547 jump *label129 always
   548 label *label139
-    * label *label140
   549 ubind *tmp9
-    * label *label137
   550 op notEqual *tmp177 @unit :rebindUnit.3:firstUnit
   551 sensor *tmp178 :rebindUnit.3:firstUnit @dead
   552 op equal *tmp179 *tmp178 0
   553 op land *tmp180 *tmp177 *tmp179
   554 jump *label136 notEqual *tmp180 false
-    * label *label138
   555 label *label134
-    * label *label135
   556 end
   557 label *label129
   558 ucontrol flag 1
   559 set *tmp162 @unit
-    * label *label128
   560 set .UNIT_P2 *tmp162
   561 sensor *tmp181 .UNIT_S1 @firstItem
   562 op equal *tmp182 *tmp181 @phase-fabric
 
   566 jump *label141 equal *tmp185 false
   567 # "Function: inline void swap(in out a, in out b)"
   568 set :swap.1:t .UNIT_S1
-    * label *label143
   569 set .UNIT_S1 *tmp162
   570 set .UNIT_P2 :swap.1:t
   571 label *label141
-    * label *label142
   572 sensor *tmp187 *tmp143 @firstItem
   573 op equal *tmp188 *tmp187 @phase-fabric
   574 sensor *tmp189 .UNIT_P2 @firstItem
 
   576 op or *tmp191 *tmp188 *tmp190
   577 jump *label144 equal *tmp191 false
   578 # "Function: inline void swap(in out a, in out b)"
-    * label *label146
   579 set .UNIT_S2 .UNIT_P2
   580 set .UNIT_P2 *tmp143
   581 label *label144
-    * label *label145
   582 set .GROUP1 "unit  1"
   583 set .GROUP2 "unit 2"
   584 jump *label114 always
 
   601 op lessThan *tmp201 *tmp199 *tmp200
   602 op or .SUPPLY_P_FIRST *tmp193 *tmp201
   603 op add :unitCheck @time 5000
-    * label *label147
   604 sensor *tmp204 switch1 @enabled
   605 jump *label149 equal *tmp204 false
   606 label *label363
 
   630 print "]"
   631 print "\n"
   632 label *label152
-    * label *label150
   633 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   634 # "Function: inline def rebindUnit(in currentUnit)"
   635 jump *label155 equal .UNIT_S1 null
 
   642 jump *label157 equal *tmp215 false
   643 jump *label154 always
   644 label *label157
-    * label *label158
   645 label *label155
-    * label *label156
   646 ubind *tmp9
   647 set :rebindUnit.4:firstUnit @unit
   648 jump *label159 equal :rebindUnit.4:firstUnit null
 
   651 jump *label164 notEqual *tmp219 0
   652 jump *label154 always
   653 label *label164
-    * label *label165
   654 ubind *tmp9
-    * label *label162
   655 op notEqual *tmp222 @unit :rebindUnit.4:firstUnit
   656 sensor *tmp223 :rebindUnit.4:firstUnit @dead
   657 op equal *tmp224 *tmp223 0
   658 op land *tmp225 *tmp222 *tmp224
   659 jump *label161 notEqual *tmp225 false
-    * label *label163
   660 label *label159
-    * label *label160
   661 end
   662 label *label154
   663 sensor :processUnit:state @unit @flag
 
   682 jump *label172 equal *tmp237 false
   683 ucontrol itemDrop .CORE .UNIT_CAPACITY
   684 label *label172
-    * label *label173
   685 label *label171
   686 label *label169
   687 label *label166
-    * label *label167
   688 jump *label174 notEqual :processUnit:state 2
   689 ucontrol within .CORE_X .CORE_Y 8 *tmp241
   690 jump *label176 equal *tmp241 false
 
   710 op div :processUnit:distance *tmp251 10
   711 label *label177
   712 label *label174
-    * label *label175
   713 jump *label180 notEqual :processUnit:state 3
   714 ucontrol within .DOME_X .DOME_Y 8 *tmp255
   715 jump *label182 equal *tmp255 false
 
   726 ucontrol approach .CORE_X .CORE_Y 6
   727 set :processUnit:state 2
   728 label *label186
-    * label *label187
   729 jump *label183 always
   730 label *label182
   731 ucontrol approach .DOME_X .DOME_Y 6
 
   739 op div :processUnit:distance *tmp266 10
   740 label *label183
   741 label *label180
-    * label *label181
   742 ucontrol flag :processUnit:state
   743 sensor *tmp268 @unit @totalItems
   744 print "  "
 
   761 print .MSG
   762 label *label189
   763 set :processUnit:unit @unit
-    * label *label153
   764 set .UNIT_S1 :processUnit:unit
   765 jump *label190 equal *tmp134 false
   766 op equal *tmp273 .SUPPLY_S_FIRST false
 
   776 jump *label196 equal *tmp281 false
   777 jump *label193 always
   778 label *label196
-    * label *label197
   779 label *label194
-    * label *label195
   780 ubind *tmp9
   781 set :rebindUnit.5:firstUnit @unit
   782 jump *label198 equal :rebindUnit.5:firstUnit null
 
   785 jump *label203 notEqual *tmp285 0
   786 jump *label193 always
   787 label *label203
-    * label *label204
   788 ubind *tmp9
-    * label *label201
   789 op notEqual *tmp288 @unit :rebindUnit.5:firstUnit
   790 sensor *tmp289 :rebindUnit.5:firstUnit @dead
   791 op equal *tmp290 *tmp289 0
   792 op land *tmp291 *tmp288 *tmp290
   793 jump *label200 notEqual *tmp291 false
-    * label *label202
   794 label *label198
-    * label *label199
   795 end
   796 label *label193
   797 sensor :processUnit.1:state @unit @flag
 
   816 jump *label211 equal *tmp303 false
   817 ucontrol itemDrop .CORE .UNIT_CAPACITY
   818 label *label211
-    * label *label212
   819 label *label210
   820 label *label208
   821 label *label205
-    * label *label206
   822 jump *label213 notEqual :processUnit.1:state 2
   823 ucontrol within .CORE_X .CORE_Y 8 *tmp307
   824 jump *label215 equal *tmp307 false
 
   844 op div :processUnit.1:distance *tmp317 10
   845 label *label216
   846 label *label213
-    * label *label214
   847 jump *label219 notEqual :processUnit.1:state 3
   848 ucontrol within .DOME_X .DOME_Y 8 *tmp321
   849 jump *label221 equal *tmp321 false
 
   860 ucontrol approach .CORE_X .CORE_Y 6
   861 set :processUnit.1:state 2
   862 label *label225
-    * label *label226
   863 jump *label222 always
   864 label *label221
   865 ucontrol approach .DOME_X .DOME_Y 6
 
   873 op div :processUnit.1:distance *tmp332 10
   874 label *label222
   875 label *label219
-    * label *label220
   876 ucontrol flag :processUnit.1:state
   877 sensor *tmp334 @unit @totalItems
   878 print "  "
 
   895 print .MSG
   896 label *label228
   897 set :processUnit.1:unit @unit
-    * label *label192
   898 set .UNIT_S2 :processUnit.1:unit
   899 jump *label229 equal .SUPPLY_S_FIRST false
   900 sensor *tmp339 :processUnit:unit @totalItems
 
   905 op equal .SUPPLY_S_FIRST *tmp341 0
   906 label *label230
   907 label *label190
-    * label *label191
   908 # "Function: inline void printDomeStatus(in item, in text)"
   909 print "\n[green]Phase fabric[] status:\n"
   910 sensor :printDomeStatus.1:level .DOME @phase-fabric
 
   922 print "]"
   923 print "\n"
   924 label *label233
-    * label *label231
   925 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   926 # "Function: inline def rebindUnit(in currentUnit)"
   927 jump *label236 equal .UNIT_P1 null
 
   934 jump *label238 equal *tmp353 false
   935 jump *label235 always
   936 label *label238
-    * label *label239
   937 label *label236
-    * label *label237
   938 ubind *tmp9
   939 set :rebindUnit.6:firstUnit @unit
   940 jump *label240 equal :rebindUnit.6:firstUnit null
 
   943 jump *label245 notEqual *tmp357 0
   944 jump *label235 always
   945 label *label245
-    * label *label246
   946 ubind *tmp9
-    * label *label243
   947 op notEqual *tmp360 @unit :rebindUnit.6:firstUnit
   948 sensor *tmp361 :rebindUnit.6:firstUnit @dead
   949 op equal *tmp362 *tmp361 0
   950 op land *tmp363 *tmp360 *tmp362
   951 jump *label242 notEqual *tmp363 false
-    * label *label244
   952 label *label240
-    * label *label241
   953 end
   954 label *label235
   955 sensor :processUnit.2:state @unit @flag
 
   974 jump *label253 equal *tmp375 false
   975 ucontrol itemDrop .CORE .UNIT_CAPACITY
   976 label *label253
-    * label *label254
   977 label *label252
   978 label *label250
   979 label *label247
-    * label *label248
   980 jump *label255 notEqual :processUnit.2:state 2
   981 ucontrol within .CORE_X .CORE_Y 8 *tmp379
   982 jump *label257 equal *tmp379 false
 
  1002 op div :processUnit.2:distance *tmp389 10
  1003 label *label258
  1004 label *label255
-    * label *label256
  1005 jump *label261 notEqual :processUnit.2:state 3
  1006 ucontrol within .DOME_X .DOME_Y 8 *tmp393
  1007 jump *label263 equal *tmp393 false
 
  1018 ucontrol approach .CORE_X .CORE_Y 6
  1019 set :processUnit.2:state 2
  1020 label *label267
-    * label *label268
  1021 jump *label264 always
  1022 label *label263
  1023 ucontrol approach .DOME_X .DOME_Y 6
 
  1031 op div :processUnit.2:distance *tmp404 10
  1032 label *label264
  1033 label *label261
-    * label *label262
  1034 ucontrol flag :processUnit.2:state
  1035 sensor *tmp406 @unit @totalItems
  1036 print "  "
 
  1053 print .MSG
  1054 label *label270
  1055 set :processUnit.2:unit @unit
-    * label *label234
  1056 set .UNIT_P1 :processUnit.2:unit
  1057 jump *label271 equal *tmp134 false
  1058 op equal *tmp411 .SUPPLY_P_FIRST false
 
  1068 jump *label277 equal *tmp419 false
  1069 jump *label274 always
  1070 label *label277
-    * label *label278
  1071 label *label275
-    * label *label276
  1072 ubind *tmp9
  1073 set :rebindUnit.7:firstUnit @unit
  1074 jump *label279 equal :rebindUnit.7:firstUnit null
 
  1077 jump *label284 notEqual *tmp423 0
  1078 jump *label274 always
  1079 label *label284
-    * label *label285
  1080 ubind *tmp9
-    * label *label282
  1081 op notEqual *tmp426 @unit :rebindUnit.7:firstUnit
  1082 sensor *tmp427 :rebindUnit.7:firstUnit @dead
  1083 op equal *tmp428 *tmp427 0
  1084 op land *tmp429 *tmp426 *tmp428
  1085 jump *label281 notEqual *tmp429 false
-    * label *label283
  1086 label *label279
-    * label *label280
  1087 end
  1088 label *label274
  1089 sensor :processUnit.3:state @unit @flag
 
  1108 jump *label292 equal *tmp441 false
  1109 ucontrol itemDrop .CORE .UNIT_CAPACITY
  1110 label *label292
-    * label *label293
  1111 label *label291
  1112 label *label289
  1113 label *label286
-    * label *label287
  1114 jump *label294 notEqual :processUnit.3:state 2
  1115 ucontrol within .CORE_X .CORE_Y 8 *tmp445
  1116 jump *label296 equal *tmp445 false
 
  1136 op div :processUnit.3:distance *tmp455 10
  1137 label *label297
  1138 label *label294
-    * label *label295
  1139 jump *label300 notEqual :processUnit.3:state 3
  1140 ucontrol within .DOME_X .DOME_Y 8 *tmp459
  1141 jump *label302 equal *tmp459 false
 
  1152 ucontrol approach .CORE_X .CORE_Y 6
  1153 set :processUnit.3:state 2
  1154 label *label306
-    * label *label307
  1155 jump *label303 always
  1156 label *label302
  1157 ucontrol approach .DOME_X .DOME_Y 6
 
  1165 op div :processUnit.3:distance *tmp470 10
  1166 label *label303
  1167 label *label300
-    * label *label301
  1168 ucontrol flag :processUnit.3:state
  1169 sensor *tmp472 @unit @totalItems
  1170 print "  "
 
  1187 print .MSG
  1188 label *label309
  1189 set :processUnit.3:unit @unit
-    * label *label273
  1190 set .UNIT_P2 :processUnit.3:unit
  1191 jump *label310 equal .SUPPLY_P_FIRST false
  1192 sensor *tmp477 :processUnit.2:unit @totalItems
 
  1197 op equal .SUPPLY_P_FIRST *tmp479 0
  1198 label *label311
  1199 label *label271
-    * label *label272
  1200 op sub *tmp481 @time :start
  1201 op floor *tmp482 *tmp481
  1202 print "\n"
 
  1220 sensor *tmp495 :needsFourUnits.3:unit @speed
  1221 op div :needsFourUnits.3:travel_time *tmp138 *tmp495
  1222 op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
-    * label *label317
  1223 select *tmp498 notEqual *tmp490 false 4 2
-    * label *label318
-    * label *label319
  1224 label *label320
  1225 sensor *tmp499 @unit @controlled
  1226 op equal *tmp500 *tmp499 0
 
  1233 set *tmp487 true
  1234 jump *label314 always
  1235 label *label325
-    * label *label326
  1236 jump *label324 always
  1237 label *label323
  1238 op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
  1239 label *label324
  1240 ubind UNIT_TYPE
-    * label *label321
  1241 op notEqual *tmp508 @unit :areUnitsAvailable.2:firstUnit
  1242 sensor *tmp509 :areUnitsAvailable.2:firstUnit @dead
  1243 op equal *tmp510 *tmp509 0
  1244 op land *tmp511 *tmp508 *tmp510
  1245 jump *label320 notEqual *tmp511 false
-    * label *label322
  1246 label *label315
-    * label *label316
  1247 jump *label327 always
  1248 print UNIT_TYPE
  1249 print ":"
 
  1256 print ", needed: "
  1257 print :areUnitsAvailable.2:needed
  1258 label *label329
-    * label *label330
  1259 print "\n"
  1260 label *label327
-    * label *label328
  1261 set *tmp487 false
  1262 label *label314
  1263 jump *label331 equal *tmp487 false
  1264 end
  1265 label *label331
-    * label *label332
  1266 op add :unitCheck @time 5000
  1267 label *label312
-    * label *label313
-    * label *label148
  1268 sensor *tmp204 switch1 @enabled
  1269 jump *label363 notEqual *tmp204 false
  1270 label *label149
 
  1280 jump *label334 equal *tmp521 false
  1281 ulocate building core false @copper 0 0 0 .CORE
  1282 label *label334
-    * label *label335
  1283 set :locateCore*retval .CORE
-    * label *label333
  1284 return :locateCore*retaddr
  1285 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-21 instructions):
 
    16 label *label5
    17 set :locateCore:type @flare
    18 call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label338 equal :locateCore*retval false
-    * jump *label1 always
+   19 jump *label1 notEqual :locateCore*retval false
    20 label *label338
    21 set :locateCore:type @poly
    22 call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label344 equal :locateCore*retval false
-    * jump *label1 always
+   23 jump *label1 notEqual :locateCore*retval false
    24 label *label344
    25 set :locateCore:type @mega
    26 call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label350 equal :locateCore*retval false
-    * jump *label1 always
+   27 jump *label1 notEqual :locateCore*retval false
    28 label *label350
    29 set :locateCore:type @mono
    30 call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label356 equal :locateCore*retval false
-    * jump *label1 always
+   31 jump *label1 notEqual :locateCore*retval false
    32 label *label356
    33 jump *label5 always
    34 label *label1
 
   384 set .UNIT_P2 .UNIT_S1
   385 set .UNIT_S1 .UNIT_P1
   386 set .UNIT_P1 @unit
-    * jump *label79 equal .UNIT_S2 null
-    * jump *label76 always
+  387 jump *label76 notEqual .UNIT_S2 null
   388 label *label79
   389 label *label77
   390 ubind *tmp9
 
   403 sensor *tmp91 @unit @controller
   404 op equal *tmp92 *tmp91 @this
   405 op land *tmp93 *tmp90 *tmp92
-    * jump *label85 equal *tmp93 false
-    * jump *label82 always
+  406 jump *label82 notEqual *tmp93 false
   407 label *label85
   408 label *label83
   409 ubind *tmp9
 
   411 jump *label87 equal :rebindUnit:firstUnit null
   412 label *label89
   413 sensor *tmp97 @unit @controlled
-    * jump *label92 notEqual *tmp97 0
-    * jump *label82 always
+  414 jump *label82 equal *tmp97 0
   415 label *label92
   416 ubind *tmp9
   417 op notEqual *tmp100 @unit :rebindUnit:firstUnit
 
   434 sensor *tmp110 @unit @controller
   435 op equal *tmp111 *tmp110 @this
   436 op land *tmp112 *tmp109 *tmp111
-    * jump *label98 equal *tmp112 false
-    * jump *label95 always
+  437 jump *label95 notEqual *tmp112 false
   438 label *label98
   439 label *label96
   440 ubind *tmp9
 
   442 jump *label100 equal :rebindUnit.1:firstUnit null
   443 label *label102
   444 sensor *tmp116 @unit @controlled
-    * jump *label105 notEqual *tmp116 0
-    * jump *label95 always
+  445 jump *label95 equal *tmp116 0
   446 label *label105
   447 ubind *tmp9
   448 op notEqual *tmp119 @unit :rebindUnit.1:firstUnit
 
   492 sensor *tmp149 @unit @controller
   493 op equal *tmp150 *tmp149 @this
   494 op land *tmp151 *tmp148 *tmp150
-    * jump *label119 equal *tmp151 false
-    * jump *label116 always
+  495 jump *label116 notEqual *tmp151 false
   496 label *label119
   497 label *label117
   498 ubind *tmp9
 
   500 jump *label121 equal :rebindUnit.2:firstUnit null
   501 label *label123
   502 sensor *tmp155 @unit @controlled
-    * jump *label126 notEqual *tmp155 0
-    * jump *label116 always
+  503 jump *label116 equal *tmp155 0
   504 label *label126
   505 ubind *tmp9
   506 op notEqual *tmp158 @unit :rebindUnit.2:firstUnit
 
   523 sensor *tmp168 @unit @controller
   524 op equal *tmp169 *tmp168 @this
   525 op land *tmp170 *tmp167 *tmp169
-    * jump *label132 equal *tmp170 false
-    * jump *label129 always
+  526 jump *label129 notEqual *tmp170 false
   527 label *label132
   528 label *label130
   529 ubind *tmp9
 
   531 jump *label134 equal :rebindUnit.3:firstUnit null
   532 label *label136
   533 sensor *tmp174 @unit @controlled
-    * jump *label139 notEqual *tmp174 0
-    * jump *label129 always
+  534 jump *label129 equal *tmp174 0
   535 label *label139
   536 ubind *tmp9
   537 op notEqual *tmp177 @unit :rebindUnit.3:firstUnit
 
   626 sensor *tmp213 @unit @controller
   627 op equal *tmp214 *tmp213 @this
   628 op land *tmp215 *tmp212 *tmp214
-    * jump *label157 equal *tmp215 false
-    * jump *label154 always
+  629 jump *label154 notEqual *tmp215 false
   630 label *label157
   631 label *label155
   632 ubind *tmp9
 
   634 jump *label159 equal :rebindUnit.4:firstUnit null
   635 label *label161
   636 sensor *tmp219 @unit @controlled
-    * jump *label164 notEqual *tmp219 0
-    * jump *label154 always
+  637 jump *label154 equal *tmp219 0
   638 label *label164
   639 ubind *tmp9
   640 op notEqual *tmp222 @unit :rebindUnit.4:firstUnit
 
   758 sensor *tmp279 @unit @controller
   759 op equal *tmp280 *tmp279 @this
   760 op land *tmp281 *tmp278 *tmp280
-    * jump *label196 equal *tmp281 false
-    * jump *label193 always
+  761 jump *label193 notEqual *tmp281 false
   762 label *label196
   763 label *label194
   764 ubind *tmp9
 
   766 jump *label198 equal :rebindUnit.5:firstUnit null
   767 label *label200
   768 sensor *tmp285 @unit @controlled
-    * jump *label203 notEqual *tmp285 0
-    * jump *label193 always
+  769 jump *label193 equal *tmp285 0
   770 label *label203
   771 ubind *tmp9
   772 op notEqual *tmp288 @unit :rebindUnit.5:firstUnit
 
   914 sensor *tmp351 @unit @controller
   915 op equal *tmp352 *tmp351 @this
   916 op land *tmp353 *tmp350 *tmp352
-    * jump *label238 equal *tmp353 false
-    * jump *label235 always
+  917 jump *label235 notEqual *tmp353 false
   918 label *label238
   919 label *label236
   920 ubind *tmp9
 
   922 jump *label240 equal :rebindUnit.6:firstUnit null
   923 label *label242
   924 sensor *tmp357 @unit @controlled
-    * jump *label245 notEqual *tmp357 0
-    * jump *label235 always
+  925 jump *label235 equal *tmp357 0
   926 label *label245
   927 ubind *tmp9
   928 op notEqual *tmp360 @unit :rebindUnit.6:firstUnit
 
  1046 sensor *tmp417 @unit @controller
  1047 op equal *tmp418 *tmp417 @this
  1048 op land *tmp419 *tmp416 *tmp418
-    * jump *label277 equal *tmp419 false
-    * jump *label274 always
+ 1049 jump *label274 notEqual *tmp419 false
  1050 label *label277
  1051 label *label275
  1052 ubind *tmp9
 
  1054 jump *label279 equal :rebindUnit.7:firstUnit null
  1055 label *label281
  1056 sensor *tmp423 @unit @controlled
-    * jump *label284 notEqual *tmp423 0
-    * jump *label274 always
+ 1057 jump *label274 equal *tmp423 0
  1058 label *label284
  1059 ubind *tmp9
  1060 op notEqual *tmp426 @unit :rebindUnit.7:firstUnit

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
    17 set :locateCore:type @flare
    18 call *label0 :locateCore*retaddr :locateCore*retval
    19 jump *label1 notEqual :locateCore*retval false
-    * label *label338
    20 set :locateCore:type @poly
    21 call *label0 :locateCore*retaddr :locateCore*retval
    22 jump *label1 notEqual :locateCore*retval false
-    * label *label344
    23 set :locateCore:type @mega
    24 call *label0 :locateCore*retaddr :locateCore*retval
    25 jump *label1 notEqual :locateCore*retval false
-    * label *label350
    26 set :locateCore:type @mono
    27 call *label0 :locateCore*retaddr :locateCore*retval
    28 jump *label1 notEqual :locateCore*retval false
-    * label *label356
    29 jump *label5 always
    30 label *label1
    31 sensor .CORE_X .CORE @x
 
   381 set .UNIT_S1 .UNIT_P1
   382 set .UNIT_P1 @unit
   383 jump *label76 notEqual .UNIT_S2 null
-    * label *label79
   384 label *label77
   385 ubind *tmp9
   386 op notEqual *tmp81 @unit :rebindUnits:firstUnit
 
   399 op equal *tmp92 *tmp91 @this
   400 op land *tmp93 *tmp90 *tmp92
   401 jump *label82 notEqual *tmp93 false
-    * label *label85
   402 label *label83
   403 ubind *tmp9
   404 set :rebindUnit:firstUnit @unit
 
   406 label *label89
   407 sensor *tmp97 @unit @controlled
   408 jump *label82 equal *tmp97 0
-    * label *label92
   409 ubind *tmp9
   410 op notEqual *tmp100 @unit :rebindUnit:firstUnit
   411 sensor *tmp101 :rebindUnit:firstUnit @dead
 
   428 op equal *tmp111 *tmp110 @this
   429 op land *tmp112 *tmp109 *tmp111
   430 jump *label95 notEqual *tmp112 false
-    * label *label98
   431 label *label96
   432 ubind *tmp9
   433 set :rebindUnit.1:firstUnit @unit
 
   435 label *label102
   436 sensor *tmp116 @unit @controlled
   437 jump *label95 equal *tmp116 0
-    * label *label105
   438 ubind *tmp9
   439 op notEqual *tmp119 @unit :rebindUnit.1:firstUnit
   440 sensor *tmp120 :rebindUnit.1:firstUnit @dead
 
   484 op equal *tmp150 *tmp149 @this
   485 op land *tmp151 *tmp148 *tmp150
   486 jump *label116 notEqual *tmp151 false
-    * label *label119
   487 label *label117
   488 ubind *tmp9
   489 set :rebindUnit.2:firstUnit @unit
 
   491 label *label123
   492 sensor *tmp155 @unit @controlled
   493 jump *label116 equal *tmp155 0
-    * label *label126
   494 ubind *tmp9
   495 op notEqual *tmp158 @unit :rebindUnit.2:firstUnit
   496 sensor *tmp159 :rebindUnit.2:firstUnit @dead
 
   513 op equal *tmp169 *tmp168 @this
   514 op land *tmp170 *tmp167 *tmp169
   515 jump *label129 notEqual *tmp170 false
-    * label *label132
   516 label *label130
   517 ubind *tmp9
   518 set :rebindUnit.3:firstUnit @unit
 
   520 label *label136
   521 sensor *tmp174 @unit @controlled
   522 jump *label129 equal *tmp174 0
-    * label *label139
   523 ubind *tmp9
   524 op notEqual *tmp177 @unit :rebindUnit.3:firstUnit
   525 sensor *tmp178 :rebindUnit.3:firstUnit @dead
 
   614 op equal *tmp214 *tmp213 @this
   615 op land *tmp215 *tmp212 *tmp214
   616 jump *label154 notEqual *tmp215 false
-    * label *label157
   617 label *label155
   618 ubind *tmp9
   619 set :rebindUnit.4:firstUnit @unit
 
   621 label *label161
   622 sensor *tmp219 @unit @controlled
   623 jump *label154 equal *tmp219 0
-    * label *label164
   624 ubind *tmp9
   625 op notEqual *tmp222 @unit :rebindUnit.4:firstUnit
   626 sensor *tmp223 :rebindUnit.4:firstUnit @dead
 
   744 op equal *tmp280 *tmp279 @this
   745 op land *tmp281 *tmp278 *tmp280
   746 jump *label193 notEqual *tmp281 false
-    * label *label196
   747 label *label194
   748 ubind *tmp9
   749 set :rebindUnit.5:firstUnit @unit
 
   751 label *label200
   752 sensor *tmp285 @unit @controlled
   753 jump *label193 equal *tmp285 0
-    * label *label203
   754 ubind *tmp9
   755 op notEqual *tmp288 @unit :rebindUnit.5:firstUnit
   756 sensor *tmp289 :rebindUnit.5:firstUnit @dead
 
   898 op equal *tmp352 *tmp351 @this
   899 op land *tmp353 *tmp350 *tmp352
   900 jump *label235 notEqual *tmp353 false
-    * label *label238
   901 label *label236
   902 ubind *tmp9
   903 set :rebindUnit.6:firstUnit @unit
 
   905 label *label242
   906 sensor *tmp357 @unit @controlled
   907 jump *label235 equal *tmp357 0
-    * label *label245
   908 ubind *tmp9
   909 op notEqual *tmp360 @unit :rebindUnit.6:firstUnit
   910 sensor *tmp361 :rebindUnit.6:firstUnit @dead
 
  1028 op equal *tmp418 *tmp417 @this
  1029 op land *tmp419 *tmp416 *tmp418
  1030 jump *label274 notEqual *tmp419 false
-    * label *label277
  1031 label *label275
  1032 ubind *tmp9
  1033 set :rebindUnit.7:firstUnit @unit
 
  1035 label *label281
  1036 sensor *tmp423 @unit @controlled
  1037 jump *label274 equal *tmp423 0
-    * label *label284
  1038 ubind *tmp9
  1039 op notEqual *tmp426 @unit :rebindUnit.7:firstUnit
  1040 sensor *tmp427 :rebindUnit.7:firstUnit @dead

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
+    0 label __start__
     1 remark "This is the preferred unit type to use for bringing in supplies."
     2 remark "If no units of this type exist, we'll try using other types."
     3 set UNIT_TYPE @flare
 
    73 op or *tmp26 *tmp23 *tmp25
    74 jump *label33 equal *tmp26 false
    75 op add :areUnitsAvailable:free :areUnitsAvailable:free 1
-    * jump *label35 lessThan :areUnitsAvailable:free *tmp21
+   76 jump *label34 lessThan :areUnitsAvailable:free *tmp21
    77 set *tmp10 true
    78 jump *label24 always
    79 label *label35
 
   133 op or *tmp58 *tmp55 *tmp57
   134 jump *label371 equal *tmp58 false
   135 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label369 lessThan :areUnitsAvailable.1:free *tmp53
+  136 jump *label372 lessThan :areUnitsAvailable.1:free *tmp53
   137 set *tmp42 true
   138 jump *label381 always
   139 label *label369
 
   195 op or *tmp58 *tmp55 *tmp57
   196 jump *label396 equal *tmp58 false
   197 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label394 lessThan :areUnitsAvailable.1:free *tmp53
+  198 jump *label397 lessThan :areUnitsAvailable.1:free *tmp53
   199 set *tmp42 true
   200 jump *label406 always
   201 label *label394
 
   257 op or *tmp58 *tmp55 *tmp57
   258 jump *label421 equal *tmp58 false
   259 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label419 lessThan :areUnitsAvailable.1:free *tmp53
+  260 jump *label422 lessThan :areUnitsAvailable.1:free *tmp53
   261 set *tmp42 true
   262 jump *label431 always
   263 label *label419
 
   319 op or *tmp58 *tmp55 *tmp57
   320 jump *label446 equal *tmp58 false
   321 op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
-    * jump *label444 lessThan :areUnitsAvailable.1:free *tmp53
+  322 jump *label447 lessThan :areUnitsAvailable.1:free *tmp53
   323 set *tmp42 true
   324 jump *label456 always
   325 label *label444
 
   403 label *label83
   404 ubind *tmp9
   405 set :rebindUnit:firstUnit @unit
-    * jump *label87 equal :rebindUnit:firstUnit null
+  406 jump __start__ equal :rebindUnit:firstUnit null
   407 label *label89
   408 sensor *tmp97 @unit @controlled
   409 jump *label82 equal *tmp97 0
 
   432 label *label96
   433 ubind *tmp9
   434 set :rebindUnit.1:firstUnit @unit
-    * jump *label100 equal :rebindUnit.1:firstUnit null
+  435 jump __start__ equal :rebindUnit.1:firstUnit null
   436 label *label102
   437 sensor *tmp116 @unit @controlled
   438 jump *label95 equal *tmp116 0
 
   488 label *label117
   489 ubind *tmp9
   490 set :rebindUnit.2:firstUnit @unit
-    * jump *label121 equal :rebindUnit.2:firstUnit null
+  491 jump __start__ equal :rebindUnit.2:firstUnit null
   492 label *label123
   493 sensor *tmp155 @unit @controlled
   494 jump *label116 equal *tmp155 0
 
   517 label *label130
   518 ubind *tmp9
   519 set :rebindUnit.3:firstUnit @unit
-    * jump *label134 equal :rebindUnit.3:firstUnit null
+  520 jump __start__ equal :rebindUnit.3:firstUnit null
   521 label *label136
   522 sensor *tmp174 @unit @controlled
   523 jump *label129 equal *tmp174 0
 
   577 op or .SUPPLY_P_FIRST *tmp193 *tmp201
   578 op add :unitCheck @time 5000
   579 sensor *tmp204 switch1 @enabled
-    * jump *label149 equal *tmp204 false
+  580 jump __start__ equal *tmp204 false
   581 label *label363
   582 set :start @time
   583 print " === [gold]Supplying Overdrive Dome[] === "
 
   618 label *label155
   619 ubind *tmp9
   620 set :rebindUnit.4:firstUnit @unit
-    * jump *label159 equal :rebindUnit.4:firstUnit null
+  621 jump __start__ equal :rebindUnit.4:firstUnit null
   622 label *label161
   623 sensor *tmp219 @unit @controlled
   624 jump *label154 equal *tmp219 0
 
   664 jump *label178 lessThan *tmp243 .UNIT_CAPACITY
   665 ucontrol approach .DOME_X .DOME_Y 6
   666 set :processUnit:state 3
-    * jump *label179 always
+  667 jump *label177 always
   668 label *label178
   669 set .MSG ", loading\n"
   670 label *label179
 
   693 set .MSG ", waiting\n"
   694 label *label185
   695 sensor *tmp258 @unit @totalItems
-    * jump *label186 greaterThan *tmp258 0
+  696 jump *label183 greaterThan *tmp258 0
   697 ucontrol approach .CORE_X .CORE_Y 6
   698 set :processUnit:state 2
   699 label *label186
 
   748 label *label194
   749 ubind *tmp9
   750 set :rebindUnit.5:firstUnit @unit
-    * jump *label198 equal :rebindUnit.5:firstUnit null
+  751 jump __start__ equal :rebindUnit.5:firstUnit null
   752 label *label200
   753 sensor *tmp285 @unit @controlled
   754 jump *label193 equal *tmp285 0
 
   794 jump *label217 lessThan *tmp309 .UNIT_CAPACITY
   795 ucontrol approach .DOME_X .DOME_Y 6
   796 set :processUnit.1:state 3
-    * jump *label218 always
+  797 jump *label216 always
   798 label *label217
   799 set .MSG ", loading\n"
   800 label *label218
 
   823 set .MSG ", waiting\n"
   824 label *label224
   825 sensor *tmp324 @unit @totalItems
-    * jump *label225 greaterThan *tmp324 0
+  826 jump *label222 greaterThan *tmp324 0
   827 ucontrol approach .CORE_X .CORE_Y 6
   828 set :processUnit.1:state 2
   829 label *label225
 
   902 label *label236
   903 ubind *tmp9
   904 set :rebindUnit.6:firstUnit @unit
-    * jump *label240 equal :rebindUnit.6:firstUnit null
+  905 jump __start__ equal :rebindUnit.6:firstUnit null
   906 label *label242
   907 sensor *tmp357 @unit @controlled
   908 jump *label235 equal *tmp357 0
 
   948 jump *label259 lessThan *tmp381 .UNIT_CAPACITY
   949 ucontrol approach .DOME_X .DOME_Y 6
   950 set :processUnit.2:state 3
-    * jump *label260 always
+  951 jump *label258 always
   952 label *label259
   953 set .MSG ", loading\n"
   954 label *label260
 
   977 set .MSG ", waiting\n"
   978 label *label266
   979 sensor *tmp396 @unit @totalItems
-    * jump *label267 greaterThan *tmp396 0
+  980 jump *label264 greaterThan *tmp396 0
   981 ucontrol approach .CORE_X .CORE_Y 6
   982 set :processUnit.2:state 2
   983 label *label267
 
  1032 label *label275
  1033 ubind *tmp9
  1034 set :rebindUnit.7:firstUnit @unit
-    * jump *label279 equal :rebindUnit.7:firstUnit null
+ 1035 jump __start__ equal :rebindUnit.7:firstUnit null
  1036 label *label281
  1037 sensor *tmp423 @unit @controlled
  1038 jump *label274 equal *tmp423 0
 
  1078 jump *label298 lessThan *tmp447 .UNIT_CAPACITY
  1079 ucontrol approach .DOME_X .DOME_Y 6
  1080 set :processUnit.3:state 3
-    * jump *label299 always
+ 1081 jump *label297 always
  1082 label *label298
  1083 set .MSG ", loading\n"
  1084 label *label299
 
  1107 set .MSG ", waiting\n"
  1108 label *label305
  1109 sensor *tmp462 @unit @totalItems
-    * jump *label306 greaterThan *tmp462 0
+ 1110 jump *label303 greaterThan *tmp462 0
  1111 ucontrol approach .CORE_X .CORE_Y 6
  1112 set :processUnit.3:state 2
  1113 label *label306
 
  1173 set :areUnitsAvailable.2:occupied 0
  1174 ubind UNIT_TYPE
  1175 set :areUnitsAvailable.2:firstUnit @unit
-    * jump *label315 equal :areUnitsAvailable.2:firstUnit null
+ 1176 jump *label327 equal :areUnitsAvailable.2:firstUnit null
  1177 # "Function: inline def needsFourUnits(in unit)"
  1178 set :needsFourUnits.3:unit @unit
  1179 sensor *tmp495 :needsFourUnits.3:unit @speed
 
  1188 op or *tmp503 *tmp500 *tmp502
  1189 jump *label323 equal *tmp503 false
  1190 op add :areUnitsAvailable.2:free :areUnitsAvailable.2:free 1
-    * jump *label325 lessThan :areUnitsAvailable.2:free *tmp498
+ 1191 jump *label324 lessThan :areUnitsAvailable.2:free *tmp498
  1192 set *tmp487 true
  1193 jump *label314 always
  1194 label *label325

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-19 instructions):
 
    76 jump *label34 lessThan :areUnitsAvailable:free *tmp21
    77 set *tmp10 true
    78 jump *label24 always
-    * label *label35
-    * jump *label34 always
    79 label *label33
    80 op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
    81 label *label34
 
   134 jump *label372 lessThan :areUnitsAvailable.1:free *tmp53
   135 set *tmp42 true
   136 jump *label381 always
-    * label *label369
-    * jump *label372 always
   137 label *label371
   138 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   139 label *label372
 
   194 jump *label397 lessThan :areUnitsAvailable.1:free *tmp53
   195 set *tmp42 true
   196 jump *label406 always
-    * label *label394
-    * jump *label397 always
   197 label *label396
   198 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   199 label *label397
 
   254 jump *label422 lessThan :areUnitsAvailable.1:free *tmp53
   255 set *tmp42 true
   256 jump *label431 always
-    * label *label419
-    * jump *label422 always
   257 label *label421
   258 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   259 label *label422
 
   314 jump *label447 lessThan :areUnitsAvailable.1:free *tmp53
   315 set *tmp42 true
   316 jump *label456 always
-    * label *label444
-    * jump *label447 always
   317 label *label446
   318 op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
   319 label *label447
 
   346 label *label459
   347 printflush message1
   348 jump *label21 always
-    * set *tmp9 null
   349 label *label20
   350 set .TYPE *tmp9
   351 print "[gold]Binding units..."
 
   402 op equal *tmp102 *tmp101 0
   403 op land *tmp103 *tmp100 *tmp102
   404 jump *label89 notEqual *tmp103 false
-    * label *label87
   405 end
   406 label *label82
   407 ucontrol flag 1
 
   430 op equal *tmp121 *tmp120 0
   431 op land *tmp122 *tmp119 *tmp121
   432 jump *label102 notEqual *tmp122 false
-    * label *label100
   433 end
   434 label *label95
   435 ucontrol flag 1
 
   485 op equal *tmp160 *tmp159 0
   486 op land *tmp161 *tmp158 *tmp160
   487 jump *label123 notEqual *tmp161 false
-    * label *label121
   488 end
   489 label *label116
   490 ucontrol flag 1
 
   513 op equal *tmp179 *tmp178 0
   514 op land *tmp180 *tmp177 *tmp179
   515 jump *label136 notEqual *tmp180 false
-    * label *label134
   516 end
   517 label *label129
   518 ucontrol flag 1
 
   613 op equal *tmp224 *tmp223 0
   614 op land *tmp225 *tmp222 *tmp224
   615 jump *label161 notEqual *tmp225 false
-    * label *label159
   616 end
   617 label *label154
   618 sensor :processUnit:state @unit @flag
 
   651 jump *label177 always
   652 label *label178
   653 set .MSG ", loading\n"
-    * label *label179
   654 jump *label177 always
   655 label *label176
   656 ucontrol approach .CORE_X .CORE_Y 6
 
   679 jump *label183 greaterThan *tmp258 0
   680 ucontrol approach .CORE_X .CORE_Y 6
   681 set :processUnit:state 2
-    * label *label186
   682 jump *label183 always
   683 label *label182
   684 ucontrol approach .DOME_X .DOME_Y 6
 
   740 op equal *tmp290 *tmp289 0
   741 op land *tmp291 *tmp288 *tmp290
   742 jump *label200 notEqual *tmp291 false
-    * label *label198
   743 end
   744 label *label193
   745 sensor :processUnit.1:state @unit @flag
 
   778 jump *label216 always
   779 label *label217
   780 set .MSG ", loading\n"
-    * label *label218
   781 jump *label216 always
   782 label *label215
   783 ucontrol approach .CORE_X .CORE_Y 6
 
   806 jump *label222 greaterThan *tmp324 0
   807 ucontrol approach .CORE_X .CORE_Y 6
   808 set :processUnit.1:state 2
-    * label *label225
   809 jump *label222 always
   810 label *label221
   811 ucontrol approach .DOME_X .DOME_Y 6
 
   891 op equal *tmp362 *tmp361 0
   892 op land *tmp363 *tmp360 *tmp362
   893 jump *label242 notEqual *tmp363 false
-    * label *label240
   894 end
   895 label *label235
   896 sensor :processUnit.2:state @unit @flag
 
   929 jump *label258 always
   930 label *label259
   931 set .MSG ", loading\n"
-    * label *label260
   932 jump *label258 always
   933 label *label257
   934 ucontrol approach .CORE_X .CORE_Y 6
 
   957 jump *label264 greaterThan *tmp396 0
   958 ucontrol approach .CORE_X .CORE_Y 6
   959 set :processUnit.2:state 2
-    * label *label267
   960 jump *label264 always
   961 label *label263
   962 ucontrol approach .DOME_X .DOME_Y 6
 
  1018 op equal *tmp428 *tmp427 0
  1019 op land *tmp429 *tmp426 *tmp428
  1020 jump *label281 notEqual *tmp429 false
-    * label *label279
  1021 end
  1022 label *label274
  1023 sensor :processUnit.3:state @unit @flag
 
  1056 jump *label297 always
  1057 label *label298
  1058 set .MSG ", loading\n"
-    * label *label299
  1059 jump *label297 always
  1060 label *label296
  1061 ucontrol approach .CORE_X .CORE_Y 6
 
  1084 jump *label303 greaterThan *tmp462 0
  1085 ucontrol approach .CORE_X .CORE_Y 6
  1086 set :processUnit.3:state 2
-    * label *label306
  1087 jump *label303 always
  1088 label *label302
  1089 ucontrol approach .DOME_X .DOME_Y 6
 
  1164 jump *label324 lessThan :areUnitsAvailable.2:free *tmp498
  1165 set *tmp487 true
  1166 jump *label314 always
-    * label *label325
-    * jump *label324 always
  1167 label *label323
  1168 op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
  1169 label *label324
 
  1173 op equal *tmp510 *tmp509 0
  1174 op land *tmp511 *tmp508 *tmp510
  1175 jump *label320 notEqual *tmp511 false
-    * label *label315
  1176 jump *label327 always
-    * print UNIT_TYPE
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.2:occupied
-    * print ","
-    * print " free: "
-    * print :areUnitsAvailable.2:free
-    * jump *label329 lessThanEq :areUnitsAvailable.2:needed 0
-    * print ", needed: "
-    * print :areUnitsAvailable.2:needed
-    * label *label329
-    * print "\n"
  1177 label *label327
  1178 set *tmp487 false
  1179 label *label314
 
  1184 label *label312
  1185 sensor *tmp204 switch1 @enabled
  1186 jump *label363 notEqual *tmp204 false
-    * label *label149
  1187 end
  1188 label *label0
  1189 # "Function: noinline def locateCore(in type)"
 
  1198 label *label334
  1199 set :locateCore*retval .CORE
  1200 return :locateCore*retaddr
-    * end

Modifications by Jumps phase, Dead Code Elimination, pass 4, iteration 1 (-3 instructions):
 
   347 printflush message1
   348 jump *label21 always
   349 label *label20
-    * set .TYPE *tmp9
   350 print "[gold]Binding units..."
   351 printflush message1
   352 # "Function: inline def rebindUnits()"
 
   456 op sub *tmp136 .DOME_Y .CORE_Y
   457 op len *tmp137 *tmp135 *tmp136
   458 op mul *tmp138 2 *tmp137
-    * sensor *tmp139 .UNIT_S1 @speed
   459 op div :needsFourUnits.2:travel_time *tmp138 .SPEED
   460 op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
-    * set .FOUR_UNITS *tmp134
   461 jump *label113 equal *tmp134 false
   462 # "Function: inline def acquireUnit(in currentUnit)"
   463 # "Function: inline def rebindUnit(in currentUnit)"

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
  1170 op equal *tmp510 *tmp509 0
  1171 op land *tmp511 *tmp508 *tmp510
  1172 jump *label320 notEqual *tmp511 false
-    * jump *label327 always
  1173 label *label327
  1174 set *tmp487 false
  1175 label *label314

Modifications by Jumps phase, Jump Straightening, pass 5, iteration 1 (-1 instructions):
 
    26 jump *label1 notEqual :locateCore*retval false
    27 set :locateCore:type @mono
    28 call *label0 :locateCore*retaddr :locateCore*retval
-    * jump *label1 notEqual :locateCore*retval false
-    * jump *label5 always
+   29 jump *label5 equal :locateCore*retval false
    30 label *label1
    31 sensor .CORE_X .CORE @x
    32 sensor .CORE_Y .CORE @y

Modifications by Final phase, Print Merging, iteration 1 (-75 instructions):
 
    35 sensor *tmp7 switch1 @enabled
    36 jump *label19 notEqual *tmp7 false
    37 label *label362
-    * print "[coral]Activate switch to begin supplying overdrive dome..."
-    * print "\n"
+   38 print "[coral]Activate switch to begin supplying overdrive dome...\n"
    39 printflush message1
    40 sensor *tmp7 switch1 @enabled
    41 jump *label362 equal *tmp7 false
 
    43 # "Function: inline def chooseUnitType()"
    44 label *label21
    45 printflush null
-    * print "[gold]Looking for suitable unit type:[]"
-    * print "\n"
+   46 print "[gold]Looking for suitable unit type:[]\n"
    47 # "Function: inline def areUnitsAvailable(in type, in output)"
    48 set :areUnitsAvailable:free 0
    49 set :areUnitsAvailable:occupied 0
 
    84 jump *label30 notEqual *tmp34 false
    85 label *label25
    86 print UNIT_TYPE
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable:occupied
-    * print ","
-    * print " free: "
+   87 print ": occupied: {0}, free: "
+   88 format :areUnitsAvailable:occupied
    89 print :areUnitsAvailable:free
    90 jump *label39 lessThanEq :areUnitsAvailable:needed 0
    91 print ", needed: "
 
   138 op land *tmp66 *tmp63 *tmp65
   139 jump *label368 notEqual *tmp66 false
   140 label *label375
-    * print @flare
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.1:occupied
-    * print ","
-    * print " free: "
+  141 print "flare: occupied: {0}, free: "
+  142 format :areUnitsAvailable.1:occupied
   143 print :areUnitsAvailable.1:free
   144 jump *label377 lessThanEq :areUnitsAvailable.1:needed 0
   145 print ", needed: "
 
   194 op land *tmp66 *tmp63 *tmp65
   195 jump *label393 notEqual *tmp66 false
   196 label *label400
-    * print @poly
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.1:occupied
-    * print ","
-    * print " free: "
+  197 print "poly: occupied: {0}, free: "
+  198 format :areUnitsAvailable.1:occupied
   199 print :areUnitsAvailable.1:free
   200 jump *label402 lessThanEq :areUnitsAvailable.1:needed 0
   201 print ", needed: "
 
   250 op land *tmp66 *tmp63 *tmp65
   251 jump *label418 notEqual *tmp66 false
   252 label *label425
-    * print @mega
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.1:occupied
-    * print ","
-    * print " free: "
+  253 print "mega: occupied: {0}, free: "
+  254 format :areUnitsAvailable.1:occupied
   255 print :areUnitsAvailable.1:free
   256 jump *label427 lessThanEq :areUnitsAvailable.1:needed 0
   257 print ", needed: "
 
   306 op land *tmp66 *tmp63 *tmp65
   307 jump *label443 notEqual *tmp66 false
   308 label *label450
-    * print @mono
-    * print ":"
-    * print " occupied: "
-    * print :areUnitsAvailable.1:occupied
-    * print ","
-    * print " free: "
+  309 print "mono: occupied: {0}, free: "
+  310 format :areUnitsAvailable.1:occupied
   311 print :areUnitsAvailable.1:free
   312 jump *label452 lessThanEq :areUnitsAvailable.1:needed 0
   313 print ", needed: "
 
   540 jump __start__ equal *tmp204 false
   541 label *label363
   542 set :start @time
-    * print " === [gold]Supplying Overdrive Dome[] === "
-    * print "\n"
-    * print "\n"
-    * print "Unit type: [green]"
-    * print *tmp9
-    * print "["
-    * print "]"
-    * print "\n"
+  543 print " === [gold]Supplying Overdrive Dome[] === \n\nUnit type: [green]{0}[]\n\n[green]Silicon[] status:\n"
+  544 format *tmp9
   545 # "Function: inline void printDomeStatus(in item, in text)"
-    * print "\n[green]Silicon[] status:\n"
   546 sensor :printDomeStatus:level .DOME @silicon
   547 jump *label151 lessThanEq :printDomeStatus:level 3
-    * print "  dome:  [green]"
-    * print :printDomeStatus:level
-    * print "["
-    * print "]"
-    * print "\n"
+  548 print "  dome:  [green]{0}[]\n"
+  549 format :printDomeStatus:level
   550 jump *label152 always
   551 label *label151
-    * print "  dome:  [coral]"
-    * print :printDomeStatus:level
-    * print "["
-    * print "]"
-    * print "\n"
+  552 print "  dome:  [coral]{0}[]\n"
+  553 format :printDomeStatus:level
   554 label *label152
   555 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   556 # "Function: inline def rebindUnit(in currentUnit)"
 
   656 label *label180
   657 ucontrol flag :processUnit:state
   658 sensor *tmp268 @unit @totalItems
-    * print "  "
-    * print .GROUP1
-    * print ":"
-    * print " ["
-    * print "gold"
-    * print "]"
-    * print *tmp268
-    * print "["
-    * print "]"
+  659 print "  {0}: [gold]{0}[]"
+  660 format .GROUP1
+  661 format *tmp268
   662 jump *label188 lessThan :processUnit:distance 0
   663 print .MSG
   664 print :processUnit:distance
-    * print "["
-    * print "] sec"
-    * print "\n"
+  665 print "[] sec\n"
   666 jump *label189 always
   667 label *label188
   668 print .MSG
 
   775 label *label219
   776 ucontrol flag :processUnit.1:state
   777 sensor *tmp334 @unit @totalItems
-    * print "  "
-    * print .GROUP2
-    * print ":"
-    * print " ["
-    * print "gold"
-    * print "]"
-    * print *tmp334
-    * print "["
-    * print "]"
+  778 print "  {0}: [gold]{0}[]"
+  779 format .GROUP2
+  780 format *tmp334
   781 jump *label227 lessThan :processUnit.1:distance 0
   782 print .MSG
   783 print :processUnit.1:distance
-    * print "["
-    * print "] sec"
-    * print "\n"
+  784 print "[] sec\n"
   785 jump *label228 always
   786 label *label227
   787 print .MSG
 
   801 print "\n[green]Phase fabric[] status:\n"
   802 sensor :printDomeStatus.1:level .DOME @phase-fabric
   803 jump *label232 lessThanEq :printDomeStatus.1:level 3
-    * print "  dome:  [green]"
-    * print :printDomeStatus.1:level
-    * print "["
-    * print "]"
-    * print "\n"
+  804 print "  dome:  [green]{0}[]\n"
+  805 format :printDomeStatus.1:level
   806 jump *label233 always
   807 label *label232
-    * print "  dome:  [coral]"
-    * print :printDomeStatus.1:level
-    * print "["
-    * print "]"
-    * print "\n"
+  808 print "  dome:  [coral]{0}[]\n"
+  809 format :printDomeStatus.1:level
   810 label *label233
   811 # "Function: inline void processUnit(in out unit, in item, in group, in supply)"
   812 # "Function: inline def rebindUnit(in currentUnit)"
 
   912 label *label261
   913 ucontrol flag :processUnit.2:state
   914 sensor *tmp406 @unit @totalItems
-    * print "  "
-    * print .GROUP1
-    * print ":"
-    * print " ["
-    * print "gold"
-    * print "]"
-    * print *tmp406
-    * print "["
-    * print "]"
+  915 print "  {0}: [gold]{0}[]"
+  916 format .GROUP1
+  917 format *tmp406
   918 jump *label269 lessThan :processUnit.2:distance 0
   919 print .MSG
   920 print :processUnit.2:distance
-    * print "["
-    * print "] sec"
-    * print "\n"
+  921 print "[] sec\n"
   922 jump *label270 always
   923 label *label269
   924 print .MSG
 
  1031 label *label300
  1032 ucontrol flag :processUnit.3:state
  1033 sensor *tmp472 @unit @totalItems
-    * print "  "
-    * print .GROUP2
-    * print ":"
-    * print " ["
-    * print "gold"
-    * print "]"
-    * print *tmp472
-    * print "["
-    * print "]"
+ 1034 print "  {0}: [gold]{0}[]"
+ 1035 format .GROUP2
+ 1036 format *tmp472
  1037 jump *label308 lessThan :processUnit.3:distance 0
  1038 print .MSG
  1039 print :processUnit.3:distance
-    * print "["
-    * print "] sec"
-    * print "\n"
+ 1040 print "[] sec\n"
  1041 jump *label309 always
  1042 label *label308
  1043 print .MSG
 
  1055 label *label271
  1056 op sub *tmp481 @time :start
  1057 op floor *tmp482 *tmp481
-    * print "\n"
-    * print "[lightgray]Loop time: "
-    * print *tmp482
-    * print " "
-    * print "ms"
+ 1058 print "\n[lightgray]Loop time: {0} ms"
+ 1059 format *tmp482
  1060 printflush message1
  1061 op notEqual *tmp483 *tmp9 UNIT_TYPE
  1062 op greaterThan *tmp484 :unitCheck @time

Final code before resolving virtual instructions:

label __start__
remark "This is the preferred unit type to use for bringing in supplies."
remark "If no units of this type exist, we'll try using other types."
set UNIT_TYPE @flare
remark "Do not modify anything below this line."
# "Function: inline void locateDomeAndCore()"
set .DOME dome1
jump *label4 notEqual dome1 null
label *label336
print "[gold]Waiting for an overdrive dome to be connected..."
printflush message1
set .DOME dome1
jump *label336 equal dome1 null
label *label4
print "[gold]Locating core..."
printflush message1
set .CORE null
label *label5
set :locateCore:type @flare
call *label0 :locateCore*retaddr :locateCore*retval
jump *label1 notEqual :locateCore*retval false
set :locateCore:type @poly
call *label0 :locateCore*retaddr :locateCore*retval
jump *label1 notEqual :locateCore*retval false
set :locateCore:type @mega
call *label0 :locateCore*retaddr :locateCore*retval
jump *label1 notEqual :locateCore*retval false
set :locateCore:type @mono
call *label0 :locateCore*retaddr :locateCore*retval
jump *label5 equal :locateCore*retval false
label *label1
sensor .CORE_X .CORE @x
sensor .CORE_Y .CORE @y
sensor .DOME_X .DOME @x
sensor .DOME_Y .DOME @y
sensor *tmp7 switch1 @enabled
jump *label19 notEqual *tmp7 false
label *label362
print "[coral]Activate switch to begin supplying overdrive dome...\n"
printflush message1
sensor *tmp7 switch1 @enabled
jump *label362 equal *tmp7 false
label *label19
# "Function: inline def chooseUnitType()"
label *label21
printflush null
print "[gold]Looking for suitable unit type:[]\n"
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable:free 0
set :areUnitsAvailable:occupied 0
set :areUnitsAvailable:needed 0
ubind UNIT_TYPE
set :areUnitsAvailable:firstUnit @unit
jump *label25 equal :areUnitsAvailable:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits:unit @unit
op sub *tmp14 .DOME_X .CORE_X
op sub *tmp15 .DOME_Y .CORE_Y
op len *tmp16 *tmp14 *tmp15
op mul *tmp17 2 *tmp16
sensor *tmp18 :needsFourUnits:unit @speed
op div :needsFourUnits:travel_time *tmp17 *tmp18
op greaterThanEq *tmp13 :needsFourUnits:travel_time 47
select *tmp21 notEqual *tmp13 false 4 2
set :areUnitsAvailable:needed *tmp21
label *label30
sensor *tmp22 @unit @controlled
op equal *tmp23 *tmp22 0
sensor *tmp24 @unit @controller
op equal *tmp25 *tmp24 @this
op or *tmp26 *tmp23 *tmp25
jump *label33 equal *tmp26 false
op add :areUnitsAvailable:free :areUnitsAvailable:free 1
jump *label34 lessThan :areUnitsAvailable:free *tmp21
set *tmp10 true
jump *label24 always
label *label33
op add :areUnitsAvailable:occupied :areUnitsAvailable:occupied 1
label *label34
ubind UNIT_TYPE
op notEqual *tmp31 @unit :areUnitsAvailable:firstUnit
sensor *tmp32 :areUnitsAvailable:firstUnit @dead
op equal *tmp33 *tmp32 0
op land *tmp34 *tmp31 *tmp33
jump *label30 notEqual *tmp34 false
label *label25
print UNIT_TYPE
print ": occupied: {0}, free: "
format :areUnitsAvailable:occupied
print :areUnitsAvailable:free
jump *label39 lessThanEq :areUnitsAvailable:needed 0
print ", needed: "
print :areUnitsAvailable:needed
label *label39
print "\n"
set *tmp10 false
label *label24
jump *label41 equal *tmp10 false
set *tmp9 UNIT_TYPE
jump *label20 always
label *label41
jump *label384 equal @flare UNIT_TYPE
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable.1:free 0
set :areUnitsAvailable.1:occupied 0
set :areUnitsAvailable.1:needed 0
ubind @flare
set :areUnitsAvailable.1:firstUnit @unit
jump *label375 equal :areUnitsAvailable.1:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits.1:unit @unit
op sub *tmp46 .DOME_X .CORE_X
op sub *tmp47 .DOME_Y .CORE_Y
op len *tmp48 *tmp46 *tmp47
op mul *tmp49 2 *tmp48
sensor *tmp50 :needsFourUnits.1:unit @speed
op div :needsFourUnits.1:travel_time *tmp49 *tmp50
op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
select *tmp53 notEqual *tmp45 false 4 2
set :areUnitsAvailable.1:needed *tmp53
label *label368
sensor *tmp54 @unit @controlled
op equal *tmp55 *tmp54 0
sensor *tmp56 @unit @controller
op equal *tmp57 *tmp56 @this
op or *tmp58 *tmp55 *tmp57
jump *label371 equal *tmp58 false
op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
jump *label372 lessThan :areUnitsAvailable.1:free *tmp53
set *tmp42 true
jump *label381 always
label *label371
op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
label *label372
ubind @flare
op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
op equal *tmp65 *tmp64 0
op land *tmp66 *tmp63 *tmp65
jump *label368 notEqual *tmp66 false
label *label375
print "flare: occupied: {0}, free: "
format :areUnitsAvailable.1:occupied
print :areUnitsAvailable.1:free
jump *label377 lessThanEq :areUnitsAvailable.1:needed 0
print ", needed: "
print :areUnitsAvailable.1:needed
label *label377
print "\n"
set *tmp42 false
label *label381
jump *label382 equal *tmp42 false
printflush null
set *tmp9 @flare
jump *label20 always
label *label382
label *label384
jump *label409 equal @poly UNIT_TYPE
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable.1:free 0
set :areUnitsAvailable.1:occupied 0
set :areUnitsAvailable.1:needed 0
ubind @poly
set :areUnitsAvailable.1:firstUnit @unit
jump *label400 equal :areUnitsAvailable.1:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits.1:unit @unit
op sub *tmp46 .DOME_X .CORE_X
op sub *tmp47 .DOME_Y .CORE_Y
op len *tmp48 *tmp46 *tmp47
op mul *tmp49 2 *tmp48
sensor *tmp50 :needsFourUnits.1:unit @speed
op div :needsFourUnits.1:travel_time *tmp49 *tmp50
op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
select *tmp53 notEqual *tmp45 false 4 2
set :areUnitsAvailable.1:needed *tmp53
label *label393
sensor *tmp54 @unit @controlled
op equal *tmp55 *tmp54 0
sensor *tmp56 @unit @controller
op equal *tmp57 *tmp56 @this
op or *tmp58 *tmp55 *tmp57
jump *label396 equal *tmp58 false
op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
jump *label397 lessThan :areUnitsAvailable.1:free *tmp53
set *tmp42 true
jump *label406 always
label *label396
op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
label *label397
ubind @poly
op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
op equal *tmp65 *tmp64 0
op land *tmp66 *tmp63 *tmp65
jump *label393 notEqual *tmp66 false
label *label400
print "poly: occupied: {0}, free: "
format :areUnitsAvailable.1:occupied
print :areUnitsAvailable.1:free
jump *label402 lessThanEq :areUnitsAvailable.1:needed 0
print ", needed: "
print :areUnitsAvailable.1:needed
label *label402
print "\n"
set *tmp42 false
label *label406
jump *label407 equal *tmp42 false
printflush null
set *tmp9 @poly
jump *label20 always
label *label407
label *label409
jump *label434 equal @mega UNIT_TYPE
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable.1:free 0
set :areUnitsAvailable.1:occupied 0
set :areUnitsAvailable.1:needed 0
ubind @mega
set :areUnitsAvailable.1:firstUnit @unit
jump *label425 equal :areUnitsAvailable.1:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits.1:unit @unit
op sub *tmp46 .DOME_X .CORE_X
op sub *tmp47 .DOME_Y .CORE_Y
op len *tmp48 *tmp46 *tmp47
op mul *tmp49 2 *tmp48
sensor *tmp50 :needsFourUnits.1:unit @speed
op div :needsFourUnits.1:travel_time *tmp49 *tmp50
op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
select *tmp53 notEqual *tmp45 false 4 2
set :areUnitsAvailable.1:needed *tmp53
label *label418
sensor *tmp54 @unit @controlled
op equal *tmp55 *tmp54 0
sensor *tmp56 @unit @controller
op equal *tmp57 *tmp56 @this
op or *tmp58 *tmp55 *tmp57
jump *label421 equal *tmp58 false
op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
jump *label422 lessThan :areUnitsAvailable.1:free *tmp53
set *tmp42 true
jump *label431 always
label *label421
op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
label *label422
ubind @mega
op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
op equal *tmp65 *tmp64 0
op land *tmp66 *tmp63 *tmp65
jump *label418 notEqual *tmp66 false
label *label425
print "mega: occupied: {0}, free: "
format :areUnitsAvailable.1:occupied
print :areUnitsAvailable.1:free
jump *label427 lessThanEq :areUnitsAvailable.1:needed 0
print ", needed: "
print :areUnitsAvailable.1:needed
label *label427
print "\n"
set *tmp42 false
label *label431
jump *label432 equal *tmp42 false
printflush null
set *tmp9 @mega
jump *label20 always
label *label432
label *label434
jump *label459 equal @mono UNIT_TYPE
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable.1:free 0
set :areUnitsAvailable.1:occupied 0
set :areUnitsAvailable.1:needed 0
ubind @mono
set :areUnitsAvailable.1:firstUnit @unit
jump *label450 equal :areUnitsAvailable.1:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits.1:unit @unit
op sub *tmp46 .DOME_X .CORE_X
op sub *tmp47 .DOME_Y .CORE_Y
op len *tmp48 *tmp46 *tmp47
op mul *tmp49 2 *tmp48
sensor *tmp50 :needsFourUnits.1:unit @speed
op div :needsFourUnits.1:travel_time *tmp49 *tmp50
op greaterThanEq *tmp45 :needsFourUnits.1:travel_time 47
select *tmp53 notEqual *tmp45 false 4 2
set :areUnitsAvailable.1:needed *tmp53
label *label443
sensor *tmp54 @unit @controlled
op equal *tmp55 *tmp54 0
sensor *tmp56 @unit @controller
op equal *tmp57 *tmp56 @this
op or *tmp58 *tmp55 *tmp57
jump *label446 equal *tmp58 false
op add :areUnitsAvailable.1:free :areUnitsAvailable.1:free 1
jump *label447 lessThan :areUnitsAvailable.1:free *tmp53
set *tmp42 true
jump *label456 always
label *label446
op add :areUnitsAvailable.1:occupied :areUnitsAvailable.1:occupied 1
label *label447
ubind @mono
op notEqual *tmp63 @unit :areUnitsAvailable.1:firstUnit
sensor *tmp64 :areUnitsAvailable.1:firstUnit @dead
op equal *tmp65 *tmp64 0
op land *tmp66 *tmp63 *tmp65
jump *label443 notEqual *tmp66 false
label *label450
print "mono: occupied: {0}, free: "
format :areUnitsAvailable.1:occupied
print :areUnitsAvailable.1:free
jump *label452 lessThanEq :areUnitsAvailable.1:needed 0
print ", needed: "
print :areUnitsAvailable.1:needed
label *label452
print "\n"
set *tmp42 false
label *label456
jump *label457 equal *tmp42 false
printflush null
set *tmp9 @mono
jump *label20 always
label *label457
label *label459
printflush message1
jump *label21 always
label *label20
print "[gold]Binding units..."
printflush message1
# "Function: inline def rebindUnits()"
set .UNIT_P2 null
set .UNIT_S2 null
set .UNIT_P1 null
set .UNIT_S1 null
set :rebindUnits:count 0
ubind *tmp9
set :rebindUnits:firstUnit @unit
jump *label72 notEqual :rebindUnits:firstUnit null
end
label *label72
label *label74
sensor *tmp74 @unit @controller
jump *label77 notEqual *tmp74 @this
op add :rebindUnits:count :rebindUnits:count 1
ucontrol flag 1
set .UNIT_S2 .UNIT_P2
set .UNIT_P2 .UNIT_S1
set .UNIT_S1 .UNIT_P1
set .UNIT_P1 @unit
jump *label76 notEqual .UNIT_S2 null
label *label77
ubind *tmp9
op notEqual *tmp81 @unit :rebindUnits:firstUnit
sensor *tmp82 :rebindUnits:firstUnit @dead
op equal *tmp83 *tmp82 0
op land *tmp84 *tmp81 *tmp83
jump *label74 notEqual *tmp84 false
label *label76
# "Function: inline def acquireUnit(in currentUnit)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label83 equal .UNIT_S1 null
ubind .UNIT_S1
sensor *tmp89 @unit @dead
op equal *tmp90 *tmp89 0
sensor *tmp91 @unit @controller
op equal *tmp92 *tmp91 @this
op land *tmp93 *tmp90 *tmp92
jump *label82 notEqual *tmp93 false
label *label83
ubind *tmp9
set :rebindUnit:firstUnit @unit
jump __start__ equal :rebindUnit:firstUnit null
label *label89
sensor *tmp97 @unit @controlled
jump *label82 equal *tmp97 0
ubind *tmp9
op notEqual *tmp100 @unit :rebindUnit:firstUnit
sensor *tmp101 :rebindUnit:firstUnit @dead
op equal *tmp102 *tmp101 0
op land *tmp103 *tmp100 *tmp102
jump *label89 notEqual *tmp103 false
end
label *label82
ucontrol flag 1
set *tmp85 @unit
set .UNIT_S1 *tmp85
# "Function: inline def acquireUnit(in currentUnit)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label96 equal .UNIT_P1 null
ubind .UNIT_P1
sensor *tmp108 @unit @dead
op equal *tmp109 *tmp108 0
sensor *tmp110 @unit @controller
op equal *tmp111 *tmp110 @this
op land *tmp112 *tmp109 *tmp111
jump *label95 notEqual *tmp112 false
label *label96
ubind *tmp9
set :rebindUnit.1:firstUnit @unit
jump __start__ equal :rebindUnit.1:firstUnit null
label *label102
sensor *tmp116 @unit @controlled
jump *label95 equal *tmp116 0
ubind *tmp9
op notEqual *tmp119 @unit :rebindUnit.1:firstUnit
sensor *tmp120 :rebindUnit.1:firstUnit @dead
op equal *tmp121 *tmp120 0
op land *tmp122 *tmp119 *tmp121
jump *label102 notEqual *tmp122 false
end
label *label95
ucontrol flag 1
set *tmp104 @unit
set .UNIT_P1 *tmp104
sensor *tmp123 *tmp85 @firstItem
op equal *tmp124 *tmp123 @phase-fabric
sensor *tmp125 *tmp104 @firstItem
op equal *tmp126 *tmp125 @silicon
op or *tmp127 *tmp124 *tmp126
jump *label107 equal *tmp127 false
# "Function: inline void swap(in out a, in out b)"
set .UNIT_S1 *tmp104
set .UNIT_P1 *tmp85
label *label107
sensor .UNIT_CAPACITY .UNIT_S1 @itemCapacity
sensor .SPEED .UNIT_S1 @speed
op div .SPEED_TENTHS .SPEED 10
op strictEqual *tmp132 .SPEED null
jump *label110 equal *tmp132 false
stop
label *label110
# "Function: inline def needsFourUnits(in unit)"
op sub *tmp135 .DOME_X .CORE_X
op sub *tmp136 .DOME_Y .CORE_Y
op len *tmp137 *tmp135 *tmp136
op mul *tmp138 2 *tmp137
op div :needsFourUnits.2:travel_time *tmp138 .SPEED
op greaterThanEq *tmp134 :needsFourUnits.2:travel_time 47
jump *label113 equal *tmp134 false
# "Function: inline def acquireUnit(in currentUnit)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label117 equal .UNIT_S2 null
ubind .UNIT_S2
sensor *tmp147 @unit @dead
op equal *tmp148 *tmp147 0
sensor *tmp149 @unit @controller
op equal *tmp150 *tmp149 @this
op land *tmp151 *tmp148 *tmp150
jump *label116 notEqual *tmp151 false
label *label117
ubind *tmp9
set :rebindUnit.2:firstUnit @unit
jump __start__ equal :rebindUnit.2:firstUnit null
label *label123
sensor *tmp155 @unit @controlled
jump *label116 equal *tmp155 0
ubind *tmp9
op notEqual *tmp158 @unit :rebindUnit.2:firstUnit
sensor *tmp159 :rebindUnit.2:firstUnit @dead
op equal *tmp160 *tmp159 0
op land *tmp161 *tmp158 *tmp160
jump *label123 notEqual *tmp161 false
end
label *label116
ucontrol flag 1
set *tmp143 @unit
set .UNIT_S2 *tmp143
# "Function: inline def acquireUnit(in currentUnit)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label130 equal .UNIT_P2 null
ubind .UNIT_P2
sensor *tmp166 @unit @dead
op equal *tmp167 *tmp166 0
sensor *tmp168 @unit @controller
op equal *tmp169 *tmp168 @this
op land *tmp170 *tmp167 *tmp169
jump *label129 notEqual *tmp170 false
label *label130
ubind *tmp9
set :rebindUnit.3:firstUnit @unit
jump __start__ equal :rebindUnit.3:firstUnit null
label *label136
sensor *tmp174 @unit @controlled
jump *label129 equal *tmp174 0
ubind *tmp9
op notEqual *tmp177 @unit :rebindUnit.3:firstUnit
sensor *tmp178 :rebindUnit.3:firstUnit @dead
op equal *tmp179 *tmp178 0
op land *tmp180 *tmp177 *tmp179
jump *label136 notEqual *tmp180 false
end
label *label129
ucontrol flag 1
set *tmp162 @unit
set .UNIT_P2 *tmp162
sensor *tmp181 .UNIT_S1 @firstItem
op equal *tmp182 *tmp181 @phase-fabric
sensor *tmp183 *tmp162 @firstItem
op notEqual *tmp184 *tmp183 @phase-fabric
op land *tmp185 *tmp182 *tmp184
jump *label141 equal *tmp185 false
# "Function: inline void swap(in out a, in out b)"
set :swap.1:t .UNIT_S1
set .UNIT_S1 *tmp162
set .UNIT_P2 :swap.1:t
label *label141
sensor *tmp187 *tmp143 @firstItem
op equal *tmp188 *tmp187 @phase-fabric
sensor *tmp189 .UNIT_P2 @firstItem
op equal *tmp190 *tmp189 @silicon
op or *tmp191 *tmp188 *tmp190
jump *label144 equal *tmp191 false
# "Function: inline void swap(in out a, in out b)"
set .UNIT_S2 .UNIT_P2
set .UNIT_P2 *tmp143
label *label144
set .GROUP1 "unit  1"
set .GROUP2 "unit 2"
jump *label114 always
label *label113
ubind .UNIT_S2
ucontrol unbind
set .UNIT_S2 null
ubind .UNIT_P2
ucontrol unbind
set .UNIT_P2 null
set .GROUP1 "unit"
label *label114
op equal *tmp193 *tmp134 false
sensor *tmp194 .UNIT_S1 @totalItems
sensor *tmp195 .UNIT_S2 @totalItems
op lessThan *tmp196 *tmp194 *tmp195
op or .SUPPLY_S_FIRST *tmp193 *tmp196
sensor *tmp199 .UNIT_P1 @totalItems
sensor *tmp200 .UNIT_P2 @totalItems
op lessThan *tmp201 *tmp199 *tmp200
op or .SUPPLY_P_FIRST *tmp193 *tmp201
op add :unitCheck @time 5000
sensor *tmp204 switch1 @enabled
jump __start__ equal *tmp204 false
label *label363
set :start @time
print " === [gold]Supplying Overdrive Dome[] === \n\nUnit type: [green]{0}[]\n\n[green]Silicon[] status:\n"
format *tmp9
# "Function: inline void printDomeStatus(in item, in text)"
sensor :printDomeStatus:level .DOME @silicon
jump *label151 lessThanEq :printDomeStatus:level 3
print "  dome:  [green]{0}[]\n"
format :printDomeStatus:level
jump *label152 always
label *label151
print "  dome:  [coral]{0}[]\n"
format :printDomeStatus:level
label *label152
# "Function: inline void processUnit(in out unit, in item, in group, in supply)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label155 equal .UNIT_S1 null
ubind .UNIT_S1
sensor *tmp211 @unit @dead
op equal *tmp212 *tmp211 0
sensor *tmp213 @unit @controller
op equal *tmp214 *tmp213 @this
op land *tmp215 *tmp212 *tmp214
jump *label154 notEqual *tmp215 false
label *label155
ubind *tmp9
set :rebindUnit.4:firstUnit @unit
jump __start__ equal :rebindUnit.4:firstUnit null
label *label161
sensor *tmp219 @unit @controlled
jump *label154 equal *tmp219 0
ubind *tmp9
op notEqual *tmp222 @unit :rebindUnit.4:firstUnit
sensor *tmp223 :rebindUnit.4:firstUnit @dead
op equal *tmp224 *tmp223 0
op land *tmp225 *tmp222 *tmp224
jump *label161 notEqual *tmp225 false
end
label *label154
sensor :processUnit:state @unit @flag
set :processUnit:distance -1
op lessThan *tmp227 :processUnit:state 2
op greaterThan *tmp228 :processUnit:state 3
op or *tmp229 *tmp227 *tmp228
jump *label166 equal *tmp229 false
sensor *tmp231 @unit @firstItem
jump *label168 notEqual *tmp231 @silicon
set :processUnit:state 3
jump *label169 always
label *label168
sensor *tmp234 @unit @totalItems
jump *label170 notEqual *tmp234 0
set :processUnit:state 2
jump *label171 always
label *label170
set .MSG ", initializing\n"
ucontrol approach .CORE_X .CORE_Y 6
ucontrol within .CORE_X .CORE_Y 8 *tmp237
jump *label172 equal *tmp237 false
ucontrol itemDrop .CORE .UNIT_CAPACITY
label *label172
label *label171
label *label169
label *label166
jump *label174 notEqual :processUnit:state 2
ucontrol within .CORE_X .CORE_Y 8 *tmp241
jump *label176 equal *tmp241 false
ucontrol itemTake .CORE @silicon .UNIT_CAPACITY
sensor *tmp243 @unit @totalItems
jump *label178 lessThan *tmp243 .UNIT_CAPACITY
ucontrol approach .DOME_X .DOME_Y 6
set :processUnit:state 3
jump *label177 always
label *label178
set .MSG ", loading\n"
jump *label177 always
label *label176
ucontrol approach .CORE_X .CORE_Y 6
set .MSG ", fetching in [gold]"
sensor *tmp246 @unit @x
op sub *tmp247 .CORE_X *tmp246
sensor *tmp248 @unit @y
op sub *tmp249 .CORE_Y *tmp248
op len *tmp250 *tmp247 *tmp249
op idiv *tmp251 *tmp250 .SPEED_TENTHS
op div :processUnit:distance *tmp251 10
label *label177
label *label174
jump *label180 notEqual :processUnit:state 3
ucontrol within .DOME_X .DOME_Y 8 *tmp255
jump *label182 equal *tmp255 false
jump *label184 equal .SUPPLY_S_FIRST false
ucontrol itemDrop .DOME .UNIT_CAPACITY
set .MSG ", supplying\n"
jump *label185 always
label *label184
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", waiting\n"
label *label185
sensor *tmp258 @unit @totalItems
jump *label183 greaterThan *tmp258 0
ucontrol approach .CORE_X .CORE_Y 6
set :processUnit:state 2
jump *label183 always
label *label182
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", returning in [gold]"
sensor *tmp261 @unit @x
op sub *tmp262 .DOME_X *tmp261
sensor *tmp263 @unit @y
op sub *tmp264 .DOME_Y *tmp263
op len *tmp265 *tmp262 *tmp264
op idiv *tmp266 *tmp265 .SPEED_TENTHS
op div :processUnit:distance *tmp266 10
label *label183
label *label180
ucontrol flag :processUnit:state
sensor *tmp268 @unit @totalItems
print "  {0}: [gold]{0}[]"
format .GROUP1
format *tmp268
jump *label188 lessThan :processUnit:distance 0
print .MSG
print :processUnit:distance
print "[] sec\n"
jump *label189 always
label *label188
print .MSG
label *label189
set :processUnit:unit @unit
set .UNIT_S1 :processUnit:unit
jump *label190 equal *tmp134 false
op equal *tmp273 .SUPPLY_S_FIRST false
# "Function: inline void processUnit(in out unit, in item, in group, in supply)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label194 equal .UNIT_S2 null
ubind .UNIT_S2
sensor *tmp277 @unit @dead
op equal *tmp278 *tmp277 0
sensor *tmp279 @unit @controller
op equal *tmp280 *tmp279 @this
op land *tmp281 *tmp278 *tmp280
jump *label193 notEqual *tmp281 false
label *label194
ubind *tmp9
set :rebindUnit.5:firstUnit @unit
jump __start__ equal :rebindUnit.5:firstUnit null
label *label200
sensor *tmp285 @unit @controlled
jump *label193 equal *tmp285 0
ubind *tmp9
op notEqual *tmp288 @unit :rebindUnit.5:firstUnit
sensor *tmp289 :rebindUnit.5:firstUnit @dead
op equal *tmp290 *tmp289 0
op land *tmp291 *tmp288 *tmp290
jump *label200 notEqual *tmp291 false
end
label *label193
sensor :processUnit.1:state @unit @flag
set :processUnit.1:distance -1
op lessThan *tmp293 :processUnit.1:state 2
op greaterThan *tmp294 :processUnit.1:state 3
op or *tmp295 *tmp293 *tmp294
jump *label205 equal *tmp295 false
sensor *tmp297 @unit @firstItem
jump *label207 notEqual *tmp297 @silicon
set :processUnit.1:state 3
jump *label208 always
label *label207
sensor *tmp300 @unit @totalItems
jump *label209 notEqual *tmp300 0
set :processUnit.1:state 2
jump *label210 always
label *label209
set .MSG ", initializing\n"
ucontrol approach .CORE_X .CORE_Y 6
ucontrol within .CORE_X .CORE_Y 8 *tmp303
jump *label211 equal *tmp303 false
ucontrol itemDrop .CORE .UNIT_CAPACITY
label *label211
label *label210
label *label208
label *label205
jump *label213 notEqual :processUnit.1:state 2
ucontrol within .CORE_X .CORE_Y 8 *tmp307
jump *label215 equal *tmp307 false
ucontrol itemTake .CORE @silicon .UNIT_CAPACITY
sensor *tmp309 @unit @totalItems
jump *label217 lessThan *tmp309 .UNIT_CAPACITY
ucontrol approach .DOME_X .DOME_Y 6
set :processUnit.1:state 3
jump *label216 always
label *label217
set .MSG ", loading\n"
jump *label216 always
label *label215
ucontrol approach .CORE_X .CORE_Y 6
set .MSG ", fetching in [gold]"
sensor *tmp312 @unit @x
op sub *tmp313 .CORE_X *tmp312
sensor *tmp314 @unit @y
op sub *tmp315 .CORE_Y *tmp314
op len *tmp316 *tmp313 *tmp315
op idiv *tmp317 *tmp316 .SPEED_TENTHS
op div :processUnit.1:distance *tmp317 10
label *label216
label *label213
jump *label219 notEqual :processUnit.1:state 3
ucontrol within .DOME_X .DOME_Y 8 *tmp321
jump *label221 equal *tmp321 false
jump *label223 equal *tmp273 false
ucontrol itemDrop .DOME .UNIT_CAPACITY
set .MSG ", supplying\n"
jump *label224 always
label *label223
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", waiting\n"
label *label224
sensor *tmp324 @unit @totalItems
jump *label222 greaterThan *tmp324 0
ucontrol approach .CORE_X .CORE_Y 6
set :processUnit.1:state 2
jump *label222 always
label *label221
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", returning in [gold]"
sensor *tmp327 @unit @x
op sub *tmp328 .DOME_X *tmp327
sensor *tmp329 @unit @y
op sub *tmp330 .DOME_Y *tmp329
op len *tmp331 *tmp328 *tmp330
op idiv *tmp332 *tmp331 .SPEED_TENTHS
op div :processUnit.1:distance *tmp332 10
label *label222
label *label219
ucontrol flag :processUnit.1:state
sensor *tmp334 @unit @totalItems
print "  {0}: [gold]{0}[]"
format .GROUP2
format *tmp334
jump *label227 lessThan :processUnit.1:distance 0
print .MSG
print :processUnit.1:distance
print "[] sec\n"
jump *label228 always
label *label227
print .MSG
label *label228
set :processUnit.1:unit @unit
set .UNIT_S2 :processUnit.1:unit
jump *label229 equal .SUPPLY_S_FIRST false
sensor *tmp339 :processUnit:unit @totalItems
op greaterThan .SUPPLY_S_FIRST *tmp339 0
jump *label230 always
label *label229
sensor *tmp341 :processUnit.1:unit @totalItems
op equal .SUPPLY_S_FIRST *tmp341 0
label *label230
label *label190
# "Function: inline void printDomeStatus(in item, in text)"
print "\n[green]Phase fabric[] status:\n"
sensor :printDomeStatus.1:level .DOME @phase-fabric
jump *label232 lessThanEq :printDomeStatus.1:level 3
print "  dome:  [green]{0}[]\n"
format :printDomeStatus.1:level
jump *label233 always
label *label232
print "  dome:  [coral]{0}[]\n"
format :printDomeStatus.1:level
label *label233
# "Function: inline void processUnit(in out unit, in item, in group, in supply)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label236 equal .UNIT_P1 null
ubind .UNIT_P1
sensor *tmp349 @unit @dead
op equal *tmp350 *tmp349 0
sensor *tmp351 @unit @controller
op equal *tmp352 *tmp351 @this
op land *tmp353 *tmp350 *tmp352
jump *label235 notEqual *tmp353 false
label *label236
ubind *tmp9
set :rebindUnit.6:firstUnit @unit
jump __start__ equal :rebindUnit.6:firstUnit null
label *label242
sensor *tmp357 @unit @controlled
jump *label235 equal *tmp357 0
ubind *tmp9
op notEqual *tmp360 @unit :rebindUnit.6:firstUnit
sensor *tmp361 :rebindUnit.6:firstUnit @dead
op equal *tmp362 *tmp361 0
op land *tmp363 *tmp360 *tmp362
jump *label242 notEqual *tmp363 false
end
label *label235
sensor :processUnit.2:state @unit @flag
set :processUnit.2:distance -1
op lessThan *tmp365 :processUnit.2:state 2
op greaterThan *tmp366 :processUnit.2:state 3
op or *tmp367 *tmp365 *tmp366
jump *label247 equal *tmp367 false
sensor *tmp369 @unit @firstItem
jump *label249 notEqual *tmp369 @phase-fabric
set :processUnit.2:state 3
jump *label250 always
label *label249
sensor *tmp372 @unit @totalItems
jump *label251 notEqual *tmp372 0
set :processUnit.2:state 2
jump *label252 always
label *label251
set .MSG ", initializing\n"
ucontrol approach .CORE_X .CORE_Y 6
ucontrol within .CORE_X .CORE_Y 8 *tmp375
jump *label253 equal *tmp375 false
ucontrol itemDrop .CORE .UNIT_CAPACITY
label *label253
label *label252
label *label250
label *label247
jump *label255 notEqual :processUnit.2:state 2
ucontrol within .CORE_X .CORE_Y 8 *tmp379
jump *label257 equal *tmp379 false
ucontrol itemTake .CORE @phase-fabric .UNIT_CAPACITY
sensor *tmp381 @unit @totalItems
jump *label259 lessThan *tmp381 .UNIT_CAPACITY
ucontrol approach .DOME_X .DOME_Y 6
set :processUnit.2:state 3
jump *label258 always
label *label259
set .MSG ", loading\n"
jump *label258 always
label *label257
ucontrol approach .CORE_X .CORE_Y 6
set .MSG ", fetching in [gold]"
sensor *tmp384 @unit @x
op sub *tmp385 .CORE_X *tmp384
sensor *tmp386 @unit @y
op sub *tmp387 .CORE_Y *tmp386
op len *tmp388 *tmp385 *tmp387
op idiv *tmp389 *tmp388 .SPEED_TENTHS
op div :processUnit.2:distance *tmp389 10
label *label258
label *label255
jump *label261 notEqual :processUnit.2:state 3
ucontrol within .DOME_X .DOME_Y 8 *tmp393
jump *label263 equal *tmp393 false
jump *label265 equal .SUPPLY_P_FIRST false
ucontrol itemDrop .DOME .UNIT_CAPACITY
set .MSG ", supplying\n"
jump *label266 always
label *label265
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", waiting\n"
label *label266
sensor *tmp396 @unit @totalItems
jump *label264 greaterThan *tmp396 0
ucontrol approach .CORE_X .CORE_Y 6
set :processUnit.2:state 2
jump *label264 always
label *label263
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", returning in [gold]"
sensor *tmp399 @unit @x
op sub *tmp400 .DOME_X *tmp399
sensor *tmp401 @unit @y
op sub *tmp402 .DOME_Y *tmp401
op len *tmp403 *tmp400 *tmp402
op idiv *tmp404 *tmp403 .SPEED_TENTHS
op div :processUnit.2:distance *tmp404 10
label *label264
label *label261
ucontrol flag :processUnit.2:state
sensor *tmp406 @unit @totalItems
print "  {0}: [gold]{0}[]"
format .GROUP1
format *tmp406
jump *label269 lessThan :processUnit.2:distance 0
print .MSG
print :processUnit.2:distance
print "[] sec\n"
jump *label270 always
label *label269
print .MSG
label *label270
set :processUnit.2:unit @unit
set .UNIT_P1 :processUnit.2:unit
jump *label271 equal *tmp134 false
op equal *tmp411 .SUPPLY_P_FIRST false
# "Function: inline void processUnit(in out unit, in item, in group, in supply)"
# "Function: inline def rebindUnit(in currentUnit)"
jump *label275 equal .UNIT_P2 null
ubind .UNIT_P2
sensor *tmp415 @unit @dead
op equal *tmp416 *tmp415 0
sensor *tmp417 @unit @controller
op equal *tmp418 *tmp417 @this
op land *tmp419 *tmp416 *tmp418
jump *label274 notEqual *tmp419 false
label *label275
ubind *tmp9
set :rebindUnit.7:firstUnit @unit
jump __start__ equal :rebindUnit.7:firstUnit null
label *label281
sensor *tmp423 @unit @controlled
jump *label274 equal *tmp423 0
ubind *tmp9
op notEqual *tmp426 @unit :rebindUnit.7:firstUnit
sensor *tmp427 :rebindUnit.7:firstUnit @dead
op equal *tmp428 *tmp427 0
op land *tmp429 *tmp426 *tmp428
jump *label281 notEqual *tmp429 false
end
label *label274
sensor :processUnit.3:state @unit @flag
set :processUnit.3:distance -1
op lessThan *tmp431 :processUnit.3:state 2
op greaterThan *tmp432 :processUnit.3:state 3
op or *tmp433 *tmp431 *tmp432
jump *label286 equal *tmp433 false
sensor *tmp435 @unit @firstItem
jump *label288 notEqual *tmp435 @phase-fabric
set :processUnit.3:state 3
jump *label289 always
label *label288
sensor *tmp438 @unit @totalItems
jump *label290 notEqual *tmp438 0
set :processUnit.3:state 2
jump *label291 always
label *label290
set .MSG ", initializing\n"
ucontrol approach .CORE_X .CORE_Y 6
ucontrol within .CORE_X .CORE_Y 8 *tmp441
jump *label292 equal *tmp441 false
ucontrol itemDrop .CORE .UNIT_CAPACITY
label *label292
label *label291
label *label289
label *label286
jump *label294 notEqual :processUnit.3:state 2
ucontrol within .CORE_X .CORE_Y 8 *tmp445
jump *label296 equal *tmp445 false
ucontrol itemTake .CORE @phase-fabric .UNIT_CAPACITY
sensor *tmp447 @unit @totalItems
jump *label298 lessThan *tmp447 .UNIT_CAPACITY
ucontrol approach .DOME_X .DOME_Y 6
set :processUnit.3:state 3
jump *label297 always
label *label298
set .MSG ", loading\n"
jump *label297 always
label *label296
ucontrol approach .CORE_X .CORE_Y 6
set .MSG ", fetching in [gold]"
sensor *tmp450 @unit @x
op sub *tmp451 .CORE_X *tmp450
sensor *tmp452 @unit @y
op sub *tmp453 .CORE_Y *tmp452
op len *tmp454 *tmp451 *tmp453
op idiv *tmp455 *tmp454 .SPEED_TENTHS
op div :processUnit.3:distance *tmp455 10
label *label297
label *label294
jump *label300 notEqual :processUnit.3:state 3
ucontrol within .DOME_X .DOME_Y 8 *tmp459
jump *label302 equal *tmp459 false
jump *label304 equal *tmp411 false
ucontrol itemDrop .DOME .UNIT_CAPACITY
set .MSG ", supplying\n"
jump *label305 always
label *label304
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", waiting\n"
label *label305
sensor *tmp462 @unit @totalItems
jump *label303 greaterThan *tmp462 0
ucontrol approach .CORE_X .CORE_Y 6
set :processUnit.3:state 2
jump *label303 always
label *label302
ucontrol approach .DOME_X .DOME_Y 6
set .MSG ", returning in [gold]"
sensor *tmp465 @unit @x
op sub *tmp466 .DOME_X *tmp465
sensor *tmp467 @unit @y
op sub *tmp468 .DOME_Y *tmp467
op len *tmp469 *tmp466 *tmp468
op idiv *tmp470 *tmp469 .SPEED_TENTHS
op div :processUnit.3:distance *tmp470 10
label *label303
label *label300
ucontrol flag :processUnit.3:state
sensor *tmp472 @unit @totalItems
print "  {0}: [gold]{0}[]"
format .GROUP2
format *tmp472
jump *label308 lessThan :processUnit.3:distance 0
print .MSG
print :processUnit.3:distance
print "[] sec\n"
jump *label309 always
label *label308
print .MSG
label *label309
set :processUnit.3:unit @unit
set .UNIT_P2 :processUnit.3:unit
jump *label310 equal .SUPPLY_P_FIRST false
sensor *tmp477 :processUnit.2:unit @totalItems
op greaterThan .SUPPLY_P_FIRST *tmp477 0
jump *label311 always
label *label310
sensor *tmp479 :processUnit.3:unit @totalItems
op equal .SUPPLY_P_FIRST *tmp479 0
label *label311
label *label271
op sub *tmp481 @time :start
op floor *tmp482 *tmp481
print "\n[lightgray]Loop time: {0} ms"
format *tmp482
printflush message1
op notEqual *tmp483 *tmp9 UNIT_TYPE
op greaterThan *tmp484 :unitCheck @time
op land *tmp485 *tmp483 *tmp484
jump *label312 equal *tmp485 false
# "Function: inline def areUnitsAvailable(in type, in output)"
set :areUnitsAvailable.2:free 0
set :areUnitsAvailable.2:occupied 0
ubind UNIT_TYPE
set :areUnitsAvailable.2:firstUnit @unit
jump *label327 equal :areUnitsAvailable.2:firstUnit null
# "Function: inline def needsFourUnits(in unit)"
set :needsFourUnits.3:unit @unit
sensor *tmp495 :needsFourUnits.3:unit @speed
op div :needsFourUnits.3:travel_time *tmp138 *tmp495
op greaterThanEq *tmp490 :needsFourUnits.3:travel_time 47
select *tmp498 notEqual *tmp490 false 4 2
label *label320
sensor *tmp499 @unit @controlled
op equal *tmp500 *tmp499 0
sensor *tmp501 @unit @controller
op equal *tmp502 *tmp501 @this
op or *tmp503 *tmp500 *tmp502
jump *label323 equal *tmp503 false
op add :areUnitsAvailable.2:free :areUnitsAvailable.2:free 1
jump *label324 lessThan :areUnitsAvailable.2:free *tmp498
set *tmp487 true
jump *label314 always
label *label323
op add :areUnitsAvailable.2:occupied :areUnitsAvailable.2:occupied 1
label *label324
ubind UNIT_TYPE
op notEqual *tmp508 @unit :areUnitsAvailable.2:firstUnit
sensor *tmp509 :areUnitsAvailable.2:firstUnit @dead
op equal *tmp510 *tmp509 0
op land *tmp511 *tmp508 *tmp510
jump *label320 notEqual *tmp511 false
label *label327
set *tmp487 false
label *label314
jump *label331 equal *tmp487 false
end
label *label331
op add :unitCheck @time 5000
label *label312
sensor *tmp204 switch1 @enabled
jump *label363 notEqual *tmp204 false
end
label *label0
# "Function: noinline def locateCore(in type)"
ubind :locateCore:type
sensor *tmp517 @unit @controlled
op equal *tmp518 *tmp517 0
sensor *tmp519 @unit @controller
op equal *tmp520 *tmp519 @this
op or *tmp521 *tmp518 *tmp520
jump *label334 equal *tmp521 false
ulocate building core false @copper 0 0 0 .CORE
label *label334
set :locateCore*retval .CORE
return :locateCore*retaddr
