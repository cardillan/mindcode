    54 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     3 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
     2 instructions eliminated by Data Flow Optimization (7 iterations).
     1 instructions eliminated by Loop Optimization (4 iterations).
     1 loops improved by Loop Optimization.
    11 instructions added by Case Switching (5 iterations).
     1 case expressions converted to switched jumps Case Switching.
     2 instructions eliminated by Jump Straightening (2 passes, 6 iterations).
    52 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 16):
  o Convert case at line 6:5 (#2480, segments: 7)                size    -6, benefit      539.7, efficiency   Infinity
  o Convert case at line 6:5 (#8078, segments: 8)                size    -4, benefit      541.0, efficiency   Infinity
  o Convert case at line 6:5 (#2501, segments: 7)                size    +9, benefit      542.6, efficiency     60.288
  * Convert case at line 6:5 (#8099, segments: 8)                size   +11, benefit      542.7, efficiency     49.336 (+11 instructions)
  ! Convert case at line 6:5 (#8125, segments: 7)                size   +17, benefit      544.8, efficiency     32.048
  ! Convert case at line 6:5 (#23981, segments: 6)               size   +39, benefit      547.8, efficiency     14.046
  ! Convert case at line 6:5 (#16640, segments: 5)               size   +47, benefit      548.1, efficiency     11.661
  ! Convert case at line 6:5 (#35680, segments: 5)               size   +66, benefit      548.5, efficiency      8.310
  ! Convert case at line 6:5 (#34663, segments: 4)               size   +69, benefit      551.1, efficiency      7.986
  ! Convert case at line 6:5 (#1, segments: 1)                   size  +236, benefit      568.7, efficiency      2.410

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     5 lookup block *tmp0 :i
     6 set :block *tmp0
     7 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
-    * jump *label6 equal *tmp3 @graphite-press
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
-    * jump *label6 equal *tmp3 @tile-logic-display
+    8 jump *label6 strictEqual :isWall:block null
+    9 jump *label6 equal :isWall:block @graphite-press
+   10 jump *label6 equal :isWall:block @copper-wall
+   11 jump *label6 equal :isWall:block @copper-wall-large
+   12 jump *label6 equal :isWall:block @titanium-wall
+   13 jump *label6 equal :isWall:block @titanium-wall-large
+   14 jump *label6 equal :isWall:block @plastanium-wall
+   15 jump *label6 equal :isWall:block @plastanium-wall-large
+   16 jump *label6 equal :isWall:block @thorium-wall
+   17 jump *label6 equal :isWall:block @thorium-wall-large
+   18 jump *label6 equal :isWall:block @phase-wall
+   19 jump *label6 equal :isWall:block @phase-wall-large
+   20 jump *label6 equal :isWall:block @surge-wall
+   21 jump *label6 equal :isWall:block @surge-wall-large
+   22 jump *label6 equal :isWall:block @scrap-wall
+   23 jump *label6 equal :isWall:block @scrap-wall-large
+   24 jump *label6 equal :isWall:block @scrap-wall-huge
+   25 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   26 jump *label6 equal :isWall:block @beryllium-wall
+   27 jump *label6 equal :isWall:block @beryllium-wall-large
+   28 jump *label6 equal :isWall:block @tungsten-wall
+   29 jump *label6 equal :isWall:block @tungsten-wall-large
+   30 jump *label6 equal :isWall:block @reinforced-surge-wall
+   31 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   32 jump *label6 equal :isWall:block @carbide-wall
+   33 jump *label6 equal :isWall:block @carbide-wall-large
+   34 jump *label6 equal :isWall:block @tile-logic-display
    35 jump *label5 always
    36 label *label6
    37 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    47 op add *tmp7 *tmp6 251
    48 op and *tmp8 *tmp7 0xFFFFFFFF
    49 set :hash *tmp8
-    * set *tmp4 :hash
    50 jump *label8 always
    51 label *label7
-    * set *tmp4 null
    52 label *label8
    53 label *label1
    54 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     2 set :i -1
     3 label *label0
     4 jump *label2 greaterThanEq :i @blockCount
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    5 lookup block :block :i
     6 set :isWall:block :block
     7 jump *label6 strictEqual :isWall:block null
     8 jump *label6 equal :isWall:block @graphite-press
 
    44 op mul *tmp5 :hash 31
    45 op add *tmp6 *tmp5 :i
    46 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   47 op and :hash *tmp7 0xFFFFFFFF
    48 jump *label8 always
    49 label *label7
    50 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    30 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    31 jump *label6 equal :isWall:block @carbide-wall
    32 jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label6 equal :isWall:block @tile-logic-display
-    * jump *label5 always
+   33 jump *label5 notEqual :isWall:block @tile-logic-display
    34 label *label6
    35 set *tmp2 true
    36 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    44 op add *tmp6 *tmp5 :i
    45 op add *tmp7 *tmp6 251
    46 op and :hash *tmp7 0xFFFFFFFF
-    * jump *label8 always
    47 label *label7
    48 label *label8
    49 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 jump *label2 greaterThanEq :i @blockCount
     5 lookup block :block :i
     6 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
-    * jump *label6 equal :isWall:block @graphite-press
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 notEqual :isWall:block @tile-logic-display
+    7 jump *label6 strictEqual :block null
+    8 jump *label6 equal :block @graphite-press
+    9 jump *label6 equal :block @copper-wall
+   10 jump *label6 equal :block @copper-wall-large
+   11 jump *label6 equal :block @titanium-wall
+   12 jump *label6 equal :block @titanium-wall-large
+   13 jump *label6 equal :block @plastanium-wall
+   14 jump *label6 equal :block @plastanium-wall-large
+   15 jump *label6 equal :block @thorium-wall
+   16 jump *label6 equal :block @thorium-wall-large
+   17 jump *label6 equal :block @phase-wall
+   18 jump *label6 equal :block @phase-wall-large
+   19 jump *label6 equal :block @surge-wall
+   20 jump *label6 equal :block @surge-wall-large
+   21 jump *label6 equal :block @scrap-wall
+   22 jump *label6 equal :block @scrap-wall-large
+   23 jump *label6 equal :block @scrap-wall-huge
+   24 jump *label6 equal :block @scrap-wall-gigantic
+   25 jump *label6 equal :block @beryllium-wall
+   26 jump *label6 equal :block @beryllium-wall-large
+   27 jump *label6 equal :block @tungsten-wall
+   28 jump *label6 equal :block @tungsten-wall-large
+   29 jump *label6 equal :block @reinforced-surge-wall
+   30 jump *label6 equal :block @reinforced-surge-wall-large
+   31 jump *label6 equal :block @carbide-wall
+   32 jump *label6 equal :block @carbide-wall-large
+   33 jump *label5 notEqual :block @tile-logic-display
    34 label *label6
    35 set *tmp2 true
    36 jump *label4 always
 
    39 label *label4
    40 set *tmp1 *tmp2
    41 label *label3
-    * jump *label7 equal *tmp1 false
+   42 jump *label7 equal *tmp2 false
    43 op mul *tmp5 :hash 31
    44 op add *tmp6 *tmp5 :i
    45 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     3 label *label0
     4 jump *label2 greaterThanEq :i @blockCount
     5 lookup block :block :i
-    * set :isWall:block :block
     6 jump *label6 strictEqual :block null
     7 jump *label6 equal :block @graphite-press
     8 jump *label6 equal :block @copper-wall
 
    36 label *label5
    37 set *tmp2 false
    38 label *label4
-    * set *tmp1 *tmp2
    39 label *label3
    40 jump *label7 equal *tmp2 false
    41 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
 
     1 set :hash 0
     2 set :i -1
     3 label *label0
-    * jump *label2 greaterThanEq :i @blockCount
+    4 label *label9
     5 lookup block :block :i
     6 jump *label6 strictEqual :block null
     7 jump *label6 equal :block @graphite-press
 
    46 label *label8
    47 label *label1
    48 op add :i :i 1
-    * jump *label0 always
+   49 jump *label9 lessThan :i @blockCount
    50 label *label2
    51 print :hash
    52 assertequals 2727247113 :hash "Test selected blocks"

Modifications by Convert case at line 6:5 (#8099, segments: 8) (+11 instructions):
 
     3 label *label0
     4 label *label9
     5 lookup block :block :i
-    * jump *label6 strictEqual :block null
-    * jump *label6 equal :block @graphite-press
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label6 equal :block @carbide-wall-large
-    * jump *label5 notEqual :block @tile-logic-display
+    6 sensor *tmp9 :block @id
+    7 jump *label12 greaterThanEq *tmp9 203
+    8 jump *label10 greaterThanEq *tmp9 35
+    9 jump *label13 greaterThanEq *tmp9 17
+   10 jump *label10 greaterThanEq *tmp9 1
+   11 jump *label11 always
+   12 label *label13
+   13 jump *label10 equal *tmp9 29
+   14 jump *label10 equal *tmp9 30
+   15 jump *label6 always
+   16 label *label12
+   17 jump *label14 greaterThanEq *tmp9 235
+   18 jump *label15 greaterThanEq *tmp9 226
+   19 jump *label16 greaterThanEq *tmp9 208
+   20 jump *label10 equal *tmp9 205
+   21 jump *label6 always
+   22 label *label16
+   23 multijump *label17 *tmp9 208 (m:*label35)
+   24 multilabel *label17 (m:*label35)
+   25 jump *label10 always
+   26 multilabel *label18 (m:*label35)
+   27 jump *label10 always
+   28 multilabel *label19 (m:*label35)
+   29 jump *label10 always
+   30 multilabel *label20 (m:*label35)
+   31 jump *label10 always
+   32 multilabel *label21 (m:*label35)
+   33 jump *label10 always
+   34 multilabel *label22 (m:*label35)
+   35 jump *label10 always
+   36 multilabel *label23 (m:*label35)
+   37 jump *label10 always
+   38 multilabel *label24 (m:*label35)
+   39 jump *label10 always
+   40 multilabel *label25 (m:*label35)
+   41 jump *label10 always
+   42 multilabel *label26 (m:*label35)
+   43 jump *label10 always
+   44 multilabel *label27 (m:*label35)
+   45 jump *label10 always
+   46 multilabel *label28 (m:*label35)
+   47 jump *label10 always
+   48 multilabel *label29 (m:*label35)
+   49 jump *label6 always
+   50 multilabel *label30 (m:*label35)
+   51 jump *label6 always
+   52 multilabel *label31 (m:*label35)
+   53 jump *label10 always
+   54 multilabel *label32 (m:*label35)
+   55 jump *label10 always
+   56 multilabel *label33 (m:*label35)
+   57 jump *label10 always
+   58 multilabel *label34 (m:*label35)
+   59 jump *label6 always
+   60 label *label15
+   61 jump *label6 equal *tmp9 234
+   62 jump *label10 always
+   63 label *label14
+   64 jump *label6 equal *tmp9 259
+   65 jump *label10 always
+   66 label *label11
+   67 jump *label6 strictEqual *tmp9 null
    68 label *label6
    69 set *tmp2 true
    70 jump *label4 always
    71 label *label5
+   72 label *label10
    73 set *tmp2 false
    74 label *label4
    75 label *label3

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
    64 jump *label6 equal *tmp9 259
    65 jump *label10 always
    66 label *label11
-    * jump *label6 strictEqual *tmp9 null
    67 label *label6
    68 set *tmp2 true
    69 jump *label4 always

Modifications by Iterated phase, Jump Straightening, pass 3, iteration 1 (-1 instructions):
 
    61 jump *label6 equal *tmp9 234
    62 jump *label10 always
    63 label *label14
-    * jump *label6 equal *tmp9 259
-    * jump *label10 always
+   64 jump *label10 notEqual *tmp9 259
    65 label *label11
    66 label *label6
    67 set *tmp2 true

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 assertequals 260 @blockCount "Verify block count"
     1 set :hash 0
     2 set :i -1
-    * label *label0
     3 label *label9
     4 lookup block :block :i
     5 sensor *tmp9 :block @id
 
    65 label *label6
    66 set *tmp2 true
    67 jump *label4 always
-    * label *label5
    68 label *label10
    69 set *tmp2 false
    70 label *label4
-    * label *label3
    71 jump *label7 equal *tmp2 false
    72 op mul *tmp5 :hash 31
    73 op add *tmp6 *tmp5 :i
    74 op add *tmp7 *tmp6 251
    75 op and :hash *tmp7 0xFFFFFFFF
    76 label *label7
-    * label *label8
-    * label *label1
    77 op add :i :i 1
    78 jump *label9 lessThan :i @blockCount
-    * label *label2
    79 print :hash
    80 assertequals 2727247113 :hash "Test selected blocks"
    81 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
    78 jump *label9 lessThan :i @blockCount
    79 print :hash
    80 assertequals 2727247113 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

assertequals 260 @blockCount "Verify block count"
set :hash 0
set :i -1
label *label9
lookup block :block :i
sensor *tmp9 :block @id
jump *label12 greaterThanEq *tmp9 203
jump *label10 greaterThanEq *tmp9 35
jump *label13 greaterThanEq *tmp9 17
jump *label10 greaterThanEq *tmp9 1
jump *label11 always
label *label13
jump *label10 equal *tmp9 29
jump *label10 equal *tmp9 30
jump *label6 always
label *label12
jump *label14 greaterThanEq *tmp9 235
jump *label15 greaterThanEq *tmp9 226
jump *label16 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label6 always
label *label16
multijump *label17 *tmp9 208
multilabel *label17
jump *label10 always
multilabel *label18
jump *label10 always
multilabel *label19
jump *label10 always
multilabel *label20
jump *label10 always
multilabel *label21
jump *label10 always
multilabel *label22
jump *label10 always
multilabel *label23
jump *label10 always
multilabel *label24
jump *label10 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label10 always
multilabel *label28
jump *label10 always
multilabel *label29
jump *label6 always
multilabel *label30
jump *label6 always
multilabel *label31
jump *label10 always
multilabel *label32
jump *label10 always
multilabel *label33
jump *label10 always
multilabel *label34
jump *label6 always
label *label15
jump *label6 equal *tmp9 234
jump *label10 always
label *label14
jump *label10 notEqual *tmp9 259
label *label11
label *label6
set *tmp2 true
jump *label4 always
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i @blockCount
print :hash
assertequals 2727247113 :hash "Test selected blocks"
