    25 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination (6 iterations).
     1 instructions eliminated by Dead Code Elimination (4 iterations).
     1 instructions eliminated by Jump Optimization (5 iterations).
     2 instructions modified by Data Flow Optimization (2 passes, 5 iterations).
     1 instructions modified by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
     1 instructions eliminated by Unreachable Code Elimination (2 iterations).
    20 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    20 label *label5
    21 jump *label4 always
    22 label *label6
-    * set *tmp0 null
    23 label *label1
    24 assertprints "0|1|3|6|10|15|21|28|36|45|" "while-loop"
    25 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     2 setaddr :d*retaddr *label2 (h:*label2)
     3 call *label0 *invalid :d*retval (m:*label2) (h:*label2)
     4 label *label2
-    * set *tmp1 :d*retval
-    * set :test:j *tmp1
+    5 set :test:j :d*retval
     6 set :d:n :test:j
     7 setaddr :d*retaddr *label3 (h:*label3)
     8 call *label0 *invalid :d*retval (m:*label3) (h:*label3)
     9 label *label3
-    * set *tmp2 :d*retval
-    * set :test:i *tmp2
+   10 set :test:i :d*retval
    11 label *label4
    12 op lessThan *tmp3 :test:i 10
    13 jump *label6 equal *tmp3 false

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
     9 label *label3
    10 set :test:i :d*retval
    11 label *label4
-    * op lessThan *tmp3 :test:i 10
-    * jump *label6 equal *tmp3 false
+   12 jump *label6 greaterThanEq :test:i 10
    13 op add :test:j :test:j :test:i
    14 print :test:j
    15 print "|"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 call *label0 *invalid :d*retval (m:*label2) (h:*label2)
     4 label *label2
     5 set :test:j :d*retval
-    * set :d:n :test:j
+    6 set :d:n :d*retval
     7 setaddr :d*retaddr *label3 (h:*label3)
     8 call *label0 *invalid :d*retval (m:*label3) (h:*label3)
     9 label *label3

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    10 set :test:i :d*retval
    11 label *label4
    12 jump *label6 greaterThanEq :test:i 10
+   13 label *label8
    14 op add :test:j :test:j :test:i
    15 print :test:j
    16 print "|"
    17 op add :test:i :test:i 1
    18 label *label5
-    * jump *label4 always
+   19 jump *label8 lessThan :test:i 10
    20 label *label6
    21 label *label1
    22 assertprints "0|1|3|6|10|15|21|28|36|45|" "while-loop"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     9 label *label3
    10 set :test:i :d*retval
    11 label *label4
-    * jump *label6 greaterThanEq :test:i 10
+   12 jump *label6 greaterThanEq :d*retval 10
    13 label *label8
    14 op add :test:j :test:j :test:i
    15 print :test:j

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
     8 call *label0 *invalid :d*retval (m:*label3) (h:*label3)
     9 label *label3
    10 set :test:i :d*retval
-    * label *label4
    11 jump *label6 greaterThanEq :d*retval 10
    12 label *label8
    13 op add :test:j :test:j :test:i
    14 print :test:j
    15 print "|"
    16 op add :test:i :test:i 1
-    * label *label5
    17 jump *label8 lessThan :test:i 10
    18 label *label6
-    * label *label1
    19 assertprints "0|1|3|6|10|15|21|28|36|45|" "while-loop"
    20 stop
    21 end
    22 label *label0
    23 set :d*retval :d:n
-    * label *label7
    24 return :d*retaddr
    25 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-1 instructions):
 
    22 label *label0
    23 set :d*retval :d:n
    24 return :d*retaddr
-    * end

Final code before resolving virtual instructions:

assertflush
set :d:n 0
setaddr :d*retaddr *label2
call *label0 *invalid :d*retval
label *label2
set :test:j :d*retval
set :d:n :d*retval
setaddr :d*retaddr *label3
call *label0 *invalid :d*retval
label *label3
set :test:i :d*retval
jump *label6 greaterThanEq :d*retval 10
label *label8
op add :test:j :test:j :test:i
print :test:j
print "|"
op add :test:i :test:i 1
jump *label8 lessThan :test:i 10
label *label6
assertprints "0|1|3|6|10|15|21|28|36|45|" "while-loop"
stop
end
label *label0
set :d*retval :d:n
return :d*retaddr
