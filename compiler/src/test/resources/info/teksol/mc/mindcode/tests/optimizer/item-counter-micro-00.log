   275 instructions before optimizations.
    32 instructions eliminated by Temp Variables Elimination (5 iterations).
     1 instructions eliminated by Case Expression Optimization.
    34 instructions eliminated by Dead Code Elimination (6 iterations).
     1 instructions eliminated by Jump Normalization (4 iterations).
    17 instructions eliminated by Jump Optimization (4 iterations).
    14 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions eliminated by Expression Optimization (2 iterations).
     7 instructions eliminated by Data Flow Optimization (7 iterations).
     1 instructions added by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     3 instructions eliminated by Jump Straightening (4 iterations).
     4 instructions updated by Jump Threading.
     2 instructions eliminated by Unreachable Code Elimination (2 iterations).
    35 instructions eliminated by Print Merging.
   128 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 835):
  * Replicate loop condition at line 69:1                        size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    16 getlink *tmp1 :n
    17 set :block *tmp1
    18 sensor *tmp3 :block @type
-    * set *tmp4 *tmp3
-    * jump *label8 equal *tmp4 @memory-cell
+   19 jump *label8 equal *tmp3 @memory-cell
    20 jump *label7 always
    21 label *label8
    22 set .MEMORY :block
 
    24 set *tmp2 :lastCell
    25 jump *label6 always
    26 label *label7
-    * jump *label10 equal *tmp4 @memory-bank
+   27 jump *label10 equal *tmp3 @memory-bank
    28 jump *label9 always
    29 label *label10
    30 set .MEMORY :block
 
    32 set *tmp2 :lastCell
    33 jump *label6 always
    34 label *label9
-    * jump *label12 equal *tmp4 @plastanium-conveyor
+   35 jump *label12 equal *tmp3 @plastanium-conveyor
    36 jump *label11 always
    37 label *label12
    38 set .CONV4 .CONV3

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-30 instructions):
 
    21 label *label8
    22 set .MEMORY :block
    23 set :lastCell 63
-    * set *tmp2 :lastCell
    24 jump *label6 always
    25 label *label7
    26 jump *label10 equal *tmp3 @memory-bank
 
    28 label *label10
    29 set .MEMORY :block
    30 set :lastCell 511
-    * set *tmp2 :lastCell
    31 jump *label6 always
    32 label *label9
    33 jump *label12 equal *tmp3 @plastanium-conveyor
 
    38 set .CONV2 .CONV1
    39 set .CONV1 :block
    40 op add .LINKED .LINKED 1
-    * set *tmp2 .LINKED
    41 jump *label6 always
    42 label *label11
-    * set *tmp2 null
    43 label *label6
    44 label *label4
    45 op greaterThan *tmp5 :n 0
 
    56 print .LINKED
    57 print ")"
    58 printflush message1
-    * set *tmp7 null
    59 jump *label14 always
    60 label *label13
    61 op greaterThan *tmp8 .LINKED 4
 
    84 label *label18
    85 set *tmp9 *tmp11
    86 label *label16
-    * set *tmp7 *tmp9
    87 label *label14
    88 label *label1
    89 jump *label0 always
 
   128 op lessThan *tmp26 :a1 :b1
   129 jump *label22 equal *tmp26 false
   130 op add :batches :batches 1
-    * set *tmp27 :batches
   131 jump *label23 always
   132 label *label22
-    * set *tmp27 null
   133 label *label23
   134 sensor *tmp28 .CONV2 @totalItems
   135 set :a2 *tmp28
   136 op lessThan *tmp29 :a2 :b2
   137 jump *label24 equal *tmp29 false
   138 op add :batches :batches 1
-    * set *tmp30 :batches
   139 jump *label25 always
   140 label *label24
-    * set *tmp30 null
   141 label *label25
   142 sensor *tmp31 .CONV3 @totalItems
   143 set :a3 *tmp31
   144 op lessThan *tmp32 :a3 :b3
   145 jump *label26 equal *tmp32 false
   146 op add :batches :batches 1
-    * set *tmp33 :batches
   147 jump *label27 always
   148 label *label26
-    * set *tmp33 null
   149 label *label27
   150 sensor *tmp34 .CONV4 @totalItems
   151 set :a4 *tmp34
   152 op lessThan *tmp35 :a4 :b4
   153 jump *label28 equal *tmp35 false
   154 op add :batches :batches 1
-    * set *tmp36 :batches
   155 jump *label29 always
   156 label *label28
-    * set *tmp36 null
   157 label *label29
   158 op greaterThan *tmp37 :batches :limit
   159 jump *label30 equal *tmp37 false
 
   176 set .BATCH *tmp50
   177 op mul *tmp51 .BATCH 10
   178 set .BATCH_TXT *tmp51
-    * set *tmp48 .BATCH_TXT
   179 jump *label33 always
   180 label *label32
-    * set *tmp48 null
   181 label *label33
   182 op add :limit :limit .BATCH
-    * set *tmp38 :limit
   183 jump *label31 always
   184 label *label30
-    * set *tmp38 null
   185 label *label31
   186 op mul *tmp53 :batches 10
   187 set :total *tmp53
 
   208 op lessThan *tmp55 :b1 :a1
   209 jump *label34 equal *tmp55 false
   210 op add :batches :batches 1
-    * set *tmp56 :batches
   211 jump *label35 always
   212 label *label34
-    * set *tmp56 null
   213 label *label35
   214 sensor *tmp57 .CONV2 @totalItems
   215 set :b2 *tmp57
   216 op lessThan *tmp58 :b2 :a2
   217 jump *label36 equal *tmp58 false
   218 op add :batches :batches 1
-    * set *tmp59 :batches
   219 jump *label37 always
   220 label *label36
-    * set *tmp59 null
   221 label *label37
   222 sensor *tmp60 .CONV3 @totalItems
   223 set :b3 *tmp60
   224 op lessThan *tmp61 :b3 :a3
   225 jump *label38 equal *tmp61 false
   226 op add :batches :batches 1
-    * set *tmp62 :batches
   227 jump *label39 always
   228 label *label38
-    * set *tmp62 null
   229 label *label39
   230 sensor *tmp63 .CONV4 @totalItems
   231 set :b4 *tmp63
   232 op lessThan *tmp64 :b4 :a4
   233 jump *label40 equal *tmp64 false
   234 op add :batches :batches 1
-    * set *tmp65 :batches
   235 jump *label41 always
   236 label *label40
-    * set *tmp65 null
   237 label *label41
   238 op sub *tmp66 @time :startTime
   239 op floor *tmp67 *tmp66
 
   252 set :ratePerMin 0
   253 set *tmp76 @time
   254 set :startTime *tmp76
-    * set *tmp69 :startTime
   255 jump *label43 always
   256 label *label42
-    * set *tmp69 null
   257 label *label43
   258 print "Batch size: [green]"
   259 print .BATCH_TXT
 
   276 op notEqual *tmp80 .LINKS @links
   277 jump *label44 equal *tmp80 false
   278 end
-    * set *tmp81 null
   279 jump *label45 always
   280 label *label44
-    * set *tmp81 null
   281 label *label45
   282 label *label20
   283 jump *label19 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-2 instructions):
 
    69 print .LINKED
    70 print ")"
    71 printflush message1
-    * set *tmp9 null
    72 jump *label16 always
    73 label *label15
    74 op equal *tmp10 .MEMORY null
 
    81 jump *label2 always
    82 set *tmp11 null
    83 label *label18
-    * set *tmp9 *tmp11
    84 label *label16
    85 label *label14
    86 label *label1

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
    75 jump *label17 equal *tmp10 false
    76 print "Item Counter\n[salmon]No memory attached."
    77 printflush message1
-    * set *tmp11 null
    78 jump *label18 always
    79 label *label17
    80 jump *label2 always
-    * set *tmp11 null
    81 label *label18
    82 label *label16
    83 label *label14

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-32 instructions):
 
     8 set .CONV1 .CONV2
     9 set .MEMORY .CONV1
    10 set .LINKED 0
-    * set *tmp0 @links
-    * set .LINKS *tmp0
+   11 set .LINKS @links
    12 set :n .LINKS
    13 label *label3
    14 op sub :n :n 1
-    * getlink *tmp1 :n
-    * set :block *tmp1
+   15 getlink :block :n
    16 sensor *tmp3 :block @type
    17 jump *label8 equal *tmp3 @memory-cell
    18 jump *label7 always
 
    84 label *label2
    85 set .BATCH_DURATION 2000
    86 op idiv *tmp12 MIN_BATCH 10
-    * op max *tmp13 *tmp12 1
-    * set .EFF_MIN_BATCH *tmp13
+   87 op max .EFF_MIN_BATCH *tmp12 1
    88 op idiv *tmp14 MAX_BATCH 10
-    * op max *tmp15 *tmp14 MIN_BATCH
-    * set .EFF_MAX_BATCH *tmp15
+   89 op max .EFF_MAX_BATCH *tmp14 MIN_BATCH
    90 set .BATCH_STEP 1
    91 set .BATCH .EFF_MIN_BATCH
-    * op mul *tmp16 .BATCH 10
-    * set .BATCH_TXT *tmp16
-    * read *tmp17 .MEMORY 0
-    * set :total *tmp17
-    * op idiv *tmp18 :total 10
-    * set :batches *tmp18
-    * op add *tmp19 :batches .BATCH
-    * set :limit *tmp19
+   92 op mul .BATCH_TXT .BATCH 10
+   93 read :total .MEMORY 0
+   94 op idiv :batches :total 10
+   95 op add :limit :batches .BATCH
    96 control enabled switch1 0
    97 set :b4 0
    98 set :b3 :b4
 
   103 set :a2 :a3
   104 set :a1 :a2
   105 set :ratePerMin 0
-    * set *tmp21 @time
-    * set :startTime *tmp21
+  106 set :startTime @time
   107 label *label19
   108 sensor *tmp22 switch1 @enabled
   109 op equal *tmp23 *tmp22 0
   110 jump *label21 equal *tmp23 false
-    * set *tmp24 @time
-    * set :start *tmp24
-    * sensor *tmp25 .CONV1 @totalItems
-    * set :a1 *tmp25
+  111 set :start @time
+  112 sensor :a1 .CONV1 @totalItems
   113 op lessThan *tmp26 :a1 :b1
   114 jump *label22 equal *tmp26 false
   115 op add :batches :batches 1
   116 jump *label23 always
   117 label *label22
   118 label *label23
-    * sensor *tmp28 .CONV2 @totalItems
-    * set :a2 *tmp28
+  119 sensor :a2 .CONV2 @totalItems
   120 op lessThan *tmp29 :a2 :b2
   121 jump *label24 equal *tmp29 false
   122 op add :batches :batches 1
   123 jump *label25 always
   124 label *label24
   125 label *label25
-    * sensor *tmp31 .CONV3 @totalItems
-    * set :a3 *tmp31
+  126 sensor :a3 .CONV3 @totalItems
   127 op lessThan *tmp32 :a3 :b3
   128 jump *label26 equal *tmp32 false
   129 op add :batches :batches 1
   130 jump *label27 always
   131 label *label26
   132 label *label27
-    * sensor *tmp34 .CONV4 @totalItems
-    * set :a4 *tmp34
+  133 sensor :a4 .CONV4 @totalItems
   134 op lessThan *tmp35 :a4 :b4
   135 jump *label28 equal *tmp35 false
   136 op add :batches :batches 1
 
   139 label *label29
   140 op greaterThan *tmp37 :batches :limit
   141 jump *label30 equal *tmp37 false
-    * op sub *tmp39 @time :startTime
-    * set :duration *tmp39
-    * set *tmp40 @time
-    * set :startTime *tmp40
-    * op div *tmp41 .BATCH :duration
-    * set :rate *tmp41
+  142 op sub :duration @time :startTime
+  143 set :startTime @time
+  144 op div :rate .BATCH :duration
   145 set *tmp42 :lastCell
   146 op mul *tmp44 :rate 166.66666666666666
   147 write *tmp44 .MEMORY *tmp42
   148 op mul *tmp45 :rate 600000
-    * op floor *tmp46 *tmp45
-    * set :ratePerMin *tmp46
+  149 op floor :ratePerMin *tmp45
   150 op lessThanEq *tmp47 :duration .BATCH_DURATION
   151 jump *label32 equal *tmp47 false
   152 op add *tmp49 .BATCH .BATCH_STEP
-    * op min *tmp50 *tmp49 .EFF_MAX_BATCH
-    * set .BATCH *tmp50
-    * op mul *tmp51 .BATCH 10
-    * set .BATCH_TXT *tmp51
+  153 op min .BATCH *tmp49 .EFF_MAX_BATCH
+  154 op mul .BATCH_TXT .BATCH 10
   155 jump *label33 always
   156 label *label32
   157 label *label33
 
   159 jump *label31 always
   160 label *label30
   161 label *label31
-    * op mul *tmp53 :batches 10
-    * set :total *tmp53
+  162 op mul :total :batches 10
   163 write :total .MEMORY 0
   164 print "Item Counter                  "
   165 print "\n"
 
   178 print "["
   179 print "] items/min"
   180 print "\n"
-    * sensor *tmp54 .CONV1 @totalItems
-    * set :b1 *tmp54
+  181 sensor :b1 .CONV1 @totalItems
   182 op lessThan *tmp55 :b1 :a1
   183 jump *label34 equal *tmp55 false
   184 op add :batches :batches 1
   185 jump *label35 always
   186 label *label34
   187 label *label35
-    * sensor *tmp57 .CONV2 @totalItems
-    * set :b2 *tmp57
+  188 sensor :b2 .CONV2 @totalItems
   189 op lessThan *tmp58 :b2 :a2
   190 jump *label36 equal *tmp58 false
   191 op add :batches :batches 1
   192 jump *label37 always
   193 label *label36
   194 label *label37
-    * sensor *tmp60 .CONV3 @totalItems
-    * set :b3 *tmp60
+  195 sensor :b3 .CONV3 @totalItems
   196 op lessThan *tmp61 :b3 :a3
   197 jump *label38 equal *tmp61 false
   198 op add :batches :batches 1
   199 jump *label39 always
   200 label *label38
   201 label *label39
-    * sensor *tmp63 .CONV4 @totalItems
-    * set :b4 *tmp63
+  202 sensor :b4 .CONV4 @totalItems
   203 op lessThan *tmp64 :b4 :a4
   204 jump *label40 equal *tmp64 false
   205 op add :batches :batches 1
 
   207 label *label40
   208 label *label41
   209 op sub *tmp66 @time :startTime
-    * op floor *tmp67 *tmp66
-    * set :elapsed *tmp67
+  210 op floor :elapsed *tmp66
   211 op greaterThanEq *tmp68 :elapsed 10000
   212 jump *label42 equal *tmp68 false
   213 op idiv *tmp70 .BATCH 5
-    * op max *tmp71 *tmp70 .EFF_MIN_BATCH
-    * set .BATCH *tmp71
-    * op mul *tmp72 .BATCH 10
-    * set .BATCH_TXT *tmp72
-    * op add *tmp73 :batches .BATCH
-    * set :limit *tmp73
-    * set *tmp74 :lastCell
-    * write 0 .MEMORY *tmp74
+  214 op max .BATCH *tmp70 .EFF_MIN_BATCH
+  215 op mul .BATCH_TXT .BATCH 10
+  216 op add :limit :batches .BATCH
+  217 write 0 .MEMORY :lastCell
   218 set :ratePerMin 0
-    * set *tmp76 @time
-    * set :startTime *tmp76
+  219 set :startTime @time
   220 jump *label43 always
   221 label *label42
   222 label *label43
 
   248 jump *label19 always
   249 label *label21
   250 control enabled switch1 0
-    * set *tmp83 :lastCell
-    * write 0 .MEMORY *tmp83
+  251 write 0 .MEMORY :lastCell
   252 write 0 .MEMORY 0
   253 end

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
     1 set MAX_BATCH 1000
     2 set :lastCell 0
     3 label *label0
-    * jump *label2 equal true false
     4 set .CONV4 null
     5 set .CONV3 .CONV4
     6 set .CONV2 .CONV3

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-3 instructions):
 
    13 op sub :n :n 1
    14 getlink :block :n
    15 sensor *tmp3 :block @type
-    * jump *label8 equal *tmp3 @memory-cell
-    * jump *label7 always
+   16 jump *label7 notEqual *tmp3 @memory-cell
    17 label *label8
    18 set .MEMORY :block
    19 set :lastCell 63
    20 jump *label6 always
    21 label *label7
-    * jump *label10 equal *tmp3 @memory-bank
-    * jump *label9 always
+   22 jump *label9 notEqual *tmp3 @memory-bank
    23 label *label10
    24 set .MEMORY :block
    25 set :lastCell 511
    26 jump *label6 always
    27 label *label9
-    * jump *label12 equal *tmp3 @plastanium-conveyor
-    * jump *label11 always
+   28 jump *label11 notEqual *tmp3 @plastanium-conveyor
    29 label *label12
    30 set .CONV4 .CONV3
    31 set .CONV3 .CONV2

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-17 instructions):
 
    36 label *label11
    37 label *label6
    38 label *label4
-    * op greaterThan *tmp5 :n 0
-    * jump *label3 notEqual *tmp5 false
+   39 jump *label3 greaterThan :n 0
    40 label *label5
-    * op equal *tmp6 .LINKED 0
-    * jump *label13 equal *tmp6 false
+   41 jump *label13 notEqual .LINKED 0
    42 print "Item Counter"
    43 print "\n"
    44 print "[salmon]No plastanium conveyor attached (maximum: "
 
    50 printflush message1
    51 jump *label14 always
    52 label *label13
-    * op greaterThan *tmp8 .LINKED 4
-    * jump *label15 equal *tmp8 false
+   53 jump *label15 lessThanEq .LINKED 4
    54 print "Item Counter"
    55 print "\n"
    56 print "[salmon]Too many plastanium conveyors attached (maximum: "
 
    62 printflush message1
    63 jump *label16 always
    64 label *label15
-    * op equal *tmp10 .MEMORY null
-    * jump *label17 equal *tmp10 false
+   65 jump *label17 notEqual .MEMORY null
    66 print "Item Counter\n[salmon]No memory attached."
    67 printflush message1
    68 jump *label18 always
 
    98 set :startTime @time
    99 label *label19
   100 sensor *tmp22 switch1 @enabled
-    * op equal *tmp23 *tmp22 0
-    * jump *label21 equal *tmp23 false
+  101 jump *label21 notEqual *tmp22 0
   102 set :start @time
   103 sensor :a1 .CONV1 @totalItems
-    * op lessThan *tmp26 :a1 :b1
-    * jump *label22 equal *tmp26 false
+  104 jump *label22 greaterThanEq :a1 :b1
   105 op add :batches :batches 1
   106 jump *label23 always
   107 label *label22
   108 label *label23
   109 sensor :a2 .CONV2 @totalItems
-    * op lessThan *tmp29 :a2 :b2
-    * jump *label24 equal *tmp29 false
+  110 jump *label24 greaterThanEq :a2 :b2
   111 op add :batches :batches 1
   112 jump *label25 always
   113 label *label24
   114 label *label25
   115 sensor :a3 .CONV3 @totalItems
-    * op lessThan *tmp32 :a3 :b3
-    * jump *label26 equal *tmp32 false
+  116 jump *label26 greaterThanEq :a3 :b3
   117 op add :batches :batches 1
   118 jump *label27 always
   119 label *label26
   120 label *label27
   121 sensor :a4 .CONV4 @totalItems
-    * op lessThan *tmp35 :a4 :b4
-    * jump *label28 equal *tmp35 false
+  122 jump *label28 greaterThanEq :a4 :b4
   123 op add :batches :batches 1
   124 jump *label29 always
   125 label *label28
   126 label *label29
-    * op greaterThan *tmp37 :batches :limit
-    * jump *label30 equal *tmp37 false
+  127 jump *label30 lessThanEq :batches :limit
   128 op sub :duration @time :startTime
   129 set :startTime @time
   130 op div :rate .BATCH :duration
 
   133 write *tmp44 .MEMORY *tmp42
   134 op mul *tmp45 :rate 600000
   135 op floor :ratePerMin *tmp45
-    * op lessThanEq *tmp47 :duration .BATCH_DURATION
-    * jump *label32 equal *tmp47 false
+  136 jump *label32 greaterThan :duration .BATCH_DURATION
   137 op add *tmp49 .BATCH .BATCH_STEP
   138 op min .BATCH *tmp49 .EFF_MAX_BATCH
   139 op mul .BATCH_TXT .BATCH 10
 
   164 print "] items/min"
   165 print "\n"
   166 sensor :b1 .CONV1 @totalItems
-    * op lessThan *tmp55 :b1 :a1
-    * jump *label34 equal *tmp55 false
+  167 jump *label34 greaterThanEq :b1 :a1
   168 op add :batches :batches 1
   169 jump *label35 always
   170 label *label34
   171 label *label35
   172 sensor :b2 .CONV2 @totalItems
-    * op lessThan *tmp58 :b2 :a2
-    * jump *label36 equal *tmp58 false
+  173 jump *label36 greaterThanEq :b2 :a2
   174 op add :batches :batches 1
   175 jump *label37 always
   176 label *label36
   177 label *label37
   178 sensor :b3 .CONV3 @totalItems
-    * op lessThan *tmp61 :b3 :a3
-    * jump *label38 equal *tmp61 false
+  179 jump *label38 greaterThanEq :b3 :a3
   180 op add :batches :batches 1
   181 jump *label39 always
   182 label *label38
   183 label *label39
   184 sensor :b4 .CONV4 @totalItems
-    * op lessThan *tmp64 :b4 :a4
-    * jump *label40 equal *tmp64 false
+  185 jump *label40 greaterThanEq :b4 :a4
   186 op add :batches :batches 1
   187 jump *label41 always
   188 label *label40
   189 label *label41
   190 op sub *tmp66 @time :startTime
   191 op floor :elapsed *tmp66
-    * op greaterThanEq *tmp68 :elapsed 10000
-    * jump *label42 equal *tmp68 false
+  192 jump *label42 lessThan :elapsed 10000
   193 op idiv *tmp70 .BATCH 5
   194 op max .BATCH *tmp70 .EFF_MIN_BATCH
   195 op mul .BATCH_TXT .BATCH 10
 
   218 print " "
   219 print "ms"
   220 printflush message1
-    * op notEqual *tmp80 .LINKS @links
-    * jump *label44 equal *tmp80 false
+  221 jump *label44 equal .LINKS @links
   222 end
   223 jump *label45 always
   224 label *label44

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-13 instructions):
 
    32 set .CONV2 .CONV1
    33 set .CONV1 :block
    34 op add .LINKED .LINKED 1
-    * jump *label6 always
    35 label *label11
    36 label *label6
    37 label *label4
 
   102 sensor :a1 .CONV1 @totalItems
   103 jump *label22 greaterThanEq :a1 :b1
   104 op add :batches :batches 1
-    * jump *label23 always
   105 label *label22
   106 label *label23
   107 sensor :a2 .CONV2 @totalItems
   108 jump *label24 greaterThanEq :a2 :b2
   109 op add :batches :batches 1
-    * jump *label25 always
   110 label *label24
   111 label *label25
   112 sensor :a3 .CONV3 @totalItems
   113 jump *label26 greaterThanEq :a3 :b3
   114 op add :batches :batches 1
-    * jump *label27 always
   115 label *label26
   116 label *label27
   117 sensor :a4 .CONV4 @totalItems
   118 jump *label28 greaterThanEq :a4 :b4
   119 op add :batches :batches 1
-    * jump *label29 always
   120 label *label28
   121 label *label29
   122 jump *label30 lessThanEq :batches :limit
 
   132 op add *tmp49 .BATCH .BATCH_STEP
   133 op min .BATCH *tmp49 .EFF_MAX_BATCH
   134 op mul .BATCH_TXT .BATCH 10
-    * jump *label33 always
   135 label *label32
   136 label *label33
   137 op add :limit :limit .BATCH
-    * jump *label31 always
   138 label *label30
   139 label *label31
   140 op mul :total :batches 10
 
   159 sensor :b1 .CONV1 @totalItems
   160 jump *label34 greaterThanEq :b1 :a1
   161 op add :batches :batches 1
-    * jump *label35 always
   162 label *label34
   163 label *label35
   164 sensor :b2 .CONV2 @totalItems
   165 jump *label36 greaterThanEq :b2 :a2
   166 op add :batches :batches 1
-    * jump *label37 always
   167 label *label36
   168 label *label37
   169 sensor :b3 .CONV3 @totalItems
   170 jump *label38 greaterThanEq :b3 :a3
   171 op add :batches :batches 1
-    * jump *label39 always
   172 label *label38
   173 label *label39
   174 sensor :b4 .CONV4 @totalItems
   175 jump *label40 greaterThanEq :b4 :a4
   176 op add :batches :batches 1
-    * jump *label41 always
   177 label *label40
   178 label *label41
   179 op sub *tmp66 @time :startTime
 
   186 write 0 .MEMORY :lastCell
   187 set :ratePerMin 0
   188 set :startTime @time
-    * jump *label43 always
   189 label *label42
   190 label *label43
   191 print "Batch size: [green]"
 
   208 printflush message1
   209 jump *label44 equal .LINKS @links
   210 end
-    * jump *label45 always
   211 label *label44
   212 label *label45
   213 label *label20

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   126 set *tmp42 :lastCell
   127 op mul *tmp44 :rate 166.66666666666666
   128 write *tmp44 .MEMORY *tmp42
-    * op mul *tmp45 :rate 600000
-    * op floor :ratePerMin *tmp45
+  129 op idiv :ratePerMin :rate 0.0000016666666666666667
   130 jump *label32 greaterThan :duration .BATCH_DURATION
   131 op add *tmp49 .BATCH .BATCH_STEP
   132 op min .BATCH *tmp49 .EFF_MAX_BATCH
 
   198 print "] ms"
   199 print "\n"
   200 op sub *tmp77 @time :start
-    * op div *tmp78 *tmp77 2
-    * op floor *tmp79 *tmp78
+  201 op idiv *tmp79 *tmp77 2
   202 print "[lightgray]Loop time: "
   203 print *tmp79
   204 print " "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     2 set :lastCell 0
     3 label *label0
     4 set .CONV4 null
-    * set .CONV3 .CONV4
-    * set .CONV2 .CONV3
-    * set .CONV1 .CONV2
-    * set .MEMORY .CONV1
+    5 set .CONV3 null
+    6 set .CONV2 .CONV4
+    7 set .CONV1 .CONV3
+    8 set .MEMORY .CONV2
     9 set .LINKED 0
    10 set .LINKS @links
    11 set :n .LINKS
 
    80 op max .EFF_MAX_BATCH *tmp14 MIN_BATCH
    81 set .BATCH_STEP 1
    82 set .BATCH .EFF_MIN_BATCH
-    * op mul .BATCH_TXT .BATCH 10
+   83 op mul .BATCH_TXT .EFF_MIN_BATCH 10
    84 read :total .MEMORY 0
    85 op idiv :batches :total 10
-    * op add :limit :batches .BATCH
+   86 op add :limit :batches .EFF_MIN_BATCH
    87 control enabled switch1 0
    88 set :b4 0
-    * set :b3 :b4
-    * set :b2 :b3
-    * set :b1 :b2
-    * set :a4 :b1
-    * set :a3 :a4
-    * set :a2 :a3
-    * set :a1 :a2
+   89 set :b3 0
+   90 set :b2 :b4
+   91 set :b1 :b3
+   92 set :a4 :b2
+   93 set :a3 :b1
+   94 set :a2 :a4
+   95 set :a1 :a3
    96 set :ratePerMin 0
    97 set :startTime @time
    98 label *label19
 
   125 op div :rate .BATCH :duration
   126 set *tmp42 :lastCell
   127 op mul *tmp44 :rate 166.66666666666666
-    * write *tmp44 .MEMORY *tmp42
+  128 write *tmp44 .MEMORY :lastCell
   129 op idiv :ratePerMin :rate 0.0000016666666666666667
-    * jump *label32 greaterThan :duration .BATCH_DURATION
-    * op add *tmp49 .BATCH .BATCH_STEP
+  130 jump *label32 greaterThan :duration 2000
+  131 op add *tmp49 .BATCH 1
   132 op min .BATCH *tmp49 .EFF_MAX_BATCH
   133 op mul .BATCH_TXT .BATCH 10
   134 label *label32

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
     3 label *label0
     4 set .CONV4 null
     5 set .CONV3 null
-    * set .CONV2 .CONV4
-    * set .CONV1 .CONV3
-    * set .MEMORY .CONV2
+    6 set .CONV2 null
+    7 set .CONV1 null
+    8 set .MEMORY .CONV4
     9 set .LINKED 0
    10 set .LINKS @links
    11 set :n .LINKS
 
    73 label *label1
    74 jump *label0 always
    75 label *label2
-    * set .BATCH_DURATION 2000
    76 op idiv *tmp12 MIN_BATCH 10
    77 op max .EFF_MIN_BATCH *tmp12 1
    78 op idiv *tmp14 MAX_BATCH 10
    79 op max .EFF_MAX_BATCH *tmp14 MIN_BATCH
-    * set .BATCH_STEP 1
    80 set .BATCH .EFF_MIN_BATCH
    81 op mul .BATCH_TXT .EFF_MIN_BATCH 10
    82 read :total .MEMORY 0
 
    85 control enabled switch1 0
    86 set :b4 0
    87 set :b3 0
-    * set :b2 :b4
-    * set :b1 :b3
-    * set :a4 :b2
-    * set :a3 :b1
-    * set :a2 :a4
-    * set :a1 :a3
+   88 set :b2 0
+   89 set :b1 0
+   90 set :a4 :b4
+   91 set :a3 :b3
+   92 set :a2 :b2
+   93 set :a1 :b1
    94 set :ratePerMin 0
    95 set :startTime @time
    96 label *label19
 
   121 op sub :duration @time :startTime
   122 set :startTime @time
   123 op div :rate .BATCH :duration
-    * set *tmp42 :lastCell
   124 op mul *tmp44 :rate 166.66666666666666
   125 write *tmp44 .MEMORY :lastCell
   126 op idiv :ratePerMin :rate 0.0000016666666666666667

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
     5 set .CONV3 null
     6 set .CONV2 null
     7 set .CONV1 null
-    * set .MEMORY .CONV4
+    8 set .MEMORY null
     9 set .LINKED 0
    10 set .LINKS @links
    11 set :n .LINKS
 
    87 set :b3 0
    88 set :b2 0
    89 set :b1 0
-    * set :a4 :b4
-    * set :a3 :b3
-    * set :a2 :b2
-    * set :a1 :b1
+   90 set :a4 0
+   91 set :a3 0
+   92 set :a2 0
+   93 set :a1 0
    94 set :ratePerMin 0
    95 set :startTime @time
    96 label *label19

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-4 instructions):
 
    87 set :b3 0
    88 set :b2 0
    89 set :b1 0
-    * set :a4 0
-    * set :a3 0
-    * set :a2 0
-    * set :a1 0
    90 set :ratePerMin 0
    91 set :startTime @time
    92 label *label19

Modifications by Replicate loop condition at line 69:1 (+1 instructions):
 
    92 label *label19
    93 sensor *tmp22 switch1 @enabled
    94 jump *label21 notEqual *tmp22 0
+   95 label *label46
    96 set :start @time
    97 sensor :a1 .CONV1 @totalItems
    98 jump *label22 greaterThanEq :a1 :b1
 
   203 label *label44
   204 label *label45
   205 label *label20
-    * jump *label19 always
+  206 sensor *tmp22 switch1 @enabled
+  207 jump *label46 equal *tmp22 0
   208 label *label21
   209 control enabled switch1 0
   210 write 0 .MEMORY :lastCell

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
 
    14 getlink :block :n
    15 sensor *tmp3 :block @type
    16 jump *label7 notEqual *tmp3 @memory-cell
-    * label *label8
    17 set .MEMORY :block
    18 set :lastCell 63
    19 jump *label6 always
    20 label *label7
    21 jump *label9 notEqual *tmp3 @memory-bank
-    * label *label10
    22 set .MEMORY :block
    23 set :lastCell 511
    24 jump *label6 always
    25 label *label9
    26 jump *label11 notEqual *tmp3 @plastanium-conveyor
-    * label *label12
    27 set .CONV4 .CONV3
    28 set .CONV3 .CONV2
    29 set .CONV2 .CONV1
 
    31 op add .LINKED .LINKED 1
    32 label *label11
    33 label *label6
-    * label *label4
    34 jump *label3 greaterThan :n 0
-    * label *label5
    35 jump *label13 notEqual .LINKED 0
    36 print "Item Counter"
    37 print "\n"
 
    65 label *label18
    66 label *label16
    67 label *label14
-    * label *label1
    68 jump *label0 always
    69 label *label2
    70 op idiv *tmp12 MIN_BATCH 10
 
    83 set :b1 0
    84 set :ratePerMin 0
    85 set :startTime @time
-    * label *label19
    86 sensor *tmp22 switch1 @enabled
    87 jump *label21 notEqual *tmp22 0
    88 label *label46
 
    91 jump *label22 greaterThanEq :a1 :b1
    92 op add :batches :batches 1
    93 label *label22
-    * label *label23
    94 sensor :a2 .CONV2 @totalItems
    95 jump *label24 greaterThanEq :a2 :b2
    96 op add :batches :batches 1
    97 label *label24
-    * label *label25
    98 sensor :a3 .CONV3 @totalItems
    99 jump *label26 greaterThanEq :a3 :b3
   100 op add :batches :batches 1
   101 label *label26
-    * label *label27
   102 sensor :a4 .CONV4 @totalItems
   103 jump *label28 greaterThanEq :a4 :b4
   104 op add :batches :batches 1
   105 label *label28
-    * label *label29
   106 jump *label30 lessThanEq :batches :limit
   107 op sub :duration @time :startTime
   108 set :startTime @time
 
   115 op min .BATCH *tmp49 .EFF_MAX_BATCH
   116 op mul .BATCH_TXT .BATCH 10
   117 label *label32
-    * label *label33
   118 op add :limit :limit .BATCH
   119 label *label30
-    * label *label31
   120 op mul :total :batches 10
   121 write :total .MEMORY 0
   122 print "Item Counter                  "
 
   140 jump *label34 greaterThanEq :b1 :a1
   141 op add :batches :batches 1
   142 label *label34
-    * label *label35
   143 sensor :b2 .CONV2 @totalItems
   144 jump *label36 greaterThanEq :b2 :a2
   145 op add :batches :batches 1
   146 label *label36
-    * label *label37
   147 sensor :b3 .CONV3 @totalItems
   148 jump *label38 greaterThanEq :b3 :a3
   149 op add :batches :batches 1
   150 label *label38
-    * label *label39
   151 sensor :b4 .CONV4 @totalItems
   152 jump *label40 greaterThanEq :b4 :a4
   153 op add :batches :batches 1
   154 label *label40
-    * label *label41
   155 op sub *tmp66 @time :startTime
   156 op floor :elapsed *tmp66
   157 jump *label42 lessThan :elapsed 10000
 
   163 set :ratePerMin 0
   164 set :startTime @time
   165 label *label42
-    * label *label43
   166 print "Batch size: [green]"
   167 print .BATCH_TXT
   168 print "["
 
   183 jump *label44 equal .LINKS @links
   184 end
   185 label *label44
-    * label *label45
-    * label *label20
   186 sensor *tmp22 switch1 @enabled
   187 jump *label46 equal *tmp22 0
   188 label *label21

Modifications by Jumps phase, Jump Threading, pass 3, iteration 1:
 
    42 print .LINKED
    43 print ")"
    44 printflush message1
-    * jump *label14 always
+   45 jump *label0 always
    46 label *label13
    47 jump *label15 lessThanEq .LINKED 4
    48 print "Item Counter"
 
    54 print .LINKED
    55 print ")"
    56 printflush message1
-    * jump *label16 always
+   57 jump *label0 always
    58 label *label15
-    * jump *label17 notEqual .MEMORY null
+   59 jump *label2 notEqual .MEMORY null
    60 print "Item Counter\n[salmon]No memory attached."
    61 printflush message1
-    * jump *label18 always
+   62 jump *label0 always
    63 label *label17
    64 jump *label2 always
    65 label *label18

Modifications by Jumps phase, Unreachable Code Elimination, pass 3, iteration 1 (-2 instructions):
 
    60 print "Item Counter\n[salmon]No memory attached."
    61 printflush message1
    62 jump *label0 always
-    * label *label17
-    * jump *label2 always
-    * label *label18
-    * label *label16
-    * label *label14
-    * jump *label0 always
    63 label *label2
    64 op idiv *tmp12 MIN_BATCH 10
    65 op max .EFF_MIN_BATCH *tmp12 1

Modifications by Jumps phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   183 control enabled switch1 0
   184 write 0 .MEMORY :lastCell
   185 write 0 .MEMORY 0
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-35 instructions):
 
    33 label *label6
    34 jump *label3 greaterThan :n 0
    35 jump *label13 notEqual .LINKED 0
-    * print "Item Counter"
-    * print "\n"
-    * print "[salmon]No plastanium conveyor attached (maximum: "
-    * print 4
-    * print ","
-    * print " found: "
-    * print .LINKED
-    * print ")"
+   36 print "Item Counter\n[salmon]No plastanium conveyor attached (maximum: 4, found: {0})"
+   37 format .LINKED
    38 printflush message1
    39 jump *label0 always
    40 label *label13
    41 jump *label15 lessThanEq .LINKED 4
-    * print "Item Counter"
-    * print "\n"
-    * print "[salmon]Too many plastanium conveyors attached (maximum: "
-    * print 4
-    * print ","
-    * print " found: "
-    * print .LINKED
-    * print ")"
+   42 print "Item Counter\n[salmon]Too many plastanium conveyors attached (maximum: 4, found: {0})"
+   43 format .LINKED
    44 printflush message1
    45 jump *label0 always
    46 label *label15
 
   101 label *label30
   102 op mul :total :batches 10
   103 write :total .MEMORY 0
-    * print "Item Counter                  "
-    * print "\n"
-    * print "Monitoring [green]"
-    * print .LINKED
-    * print "["
-    * print "] conveyors"
-    * print "\n"
-    * print "Total items: [gold]"
-    * print :total
-    * print "["
-    * print "]"
-    * print "\n"
-    * print "Rate: [green]"
-    * print :ratePerMin
-    * print "["
-    * print "] items/min"
-    * print "\n"
+  104 print "Item Counter                  \nMonitoring [green]{0}[] conveyors\nTotal items: [gold]{0}[]\nRate: [green]{0}[] items/min\n"
+  105 format .LINKED
+  106 format :total
+  107 format :ratePerMin
   108 sensor :b1 .CONV1 @totalItems
   109 jump *label34 greaterThanEq :b1 :a1
   110 op add :batches :batches 1
 
   132 set :ratePerMin 0
   133 set :startTime @time
   134 label *label42
-    * print "Batch size: [green]"
-    * print .BATCH_TXT
-    * print "["
-    * print "]"
-    * print "\n"
-    * print "Batch time: [gold]"
-    * print :elapsed
-    * print "["
-    * print "] ms"
-    * print "\n"
+  135 print "Batch size: [green]{0}[]\nBatch time: [gold]{0}[] ms\n[lightgray]Loop time: {0} ms"
+  136 format .BATCH_TXT
+  137 format :elapsed
   138 op sub *tmp77 @time :start
   139 op idiv *tmp79 *tmp77 2
-    * print "[lightgray]Loop time: "
-    * print *tmp79
-    * print " "
-    * print "ms"
+  140 format *tmp79
   141 printflush message1
   142 jump *label44 equal .LINKS @links
   143 end

Final code before resolving virtual instructions:

set MIN_BATCH 10
set MAX_BATCH 1000
set :lastCell 0
label *label0
set .CONV4 null
set .CONV3 null
set .CONV2 null
set .CONV1 null
set .MEMORY null
set .LINKED 0
set .LINKS @links
set :n .LINKS
label *label3
op sub :n :n 1
getlink :block :n
sensor *tmp3 :block @type
jump *label7 notEqual *tmp3 @memory-cell
set .MEMORY :block
set :lastCell 63
jump *label6 always
label *label7
jump *label9 notEqual *tmp3 @memory-bank
set .MEMORY :block
set :lastCell 511
jump *label6 always
label *label9
jump *label11 notEqual *tmp3 @plastanium-conveyor
set .CONV4 .CONV3
set .CONV3 .CONV2
set .CONV2 .CONV1
set .CONV1 :block
op add .LINKED .LINKED 1
label *label11
label *label6
jump *label3 greaterThan :n 0
jump *label13 notEqual .LINKED 0
print "Item Counter\n[salmon]No plastanium conveyor attached (maximum: 4, found: {0})"
format .LINKED
printflush message1
jump *label0 always
label *label13
jump *label15 lessThanEq .LINKED 4
print "Item Counter\n[salmon]Too many plastanium conveyors attached (maximum: 4, found: {0})"
format .LINKED
printflush message1
jump *label0 always
label *label15
jump *label2 notEqual .MEMORY null
print "Item Counter\n[salmon]No memory attached."
printflush message1
jump *label0 always
label *label2
op idiv *tmp12 MIN_BATCH 10
op max .EFF_MIN_BATCH *tmp12 1
op idiv *tmp14 MAX_BATCH 10
op max .EFF_MAX_BATCH *tmp14 MIN_BATCH
set .BATCH .EFF_MIN_BATCH
op mul .BATCH_TXT .EFF_MIN_BATCH 10
read :total .MEMORY 0
op idiv :batches :total 10
op add :limit :batches .EFF_MIN_BATCH
control enabled switch1 0
set :b4 0
set :b3 0
set :b2 0
set :b1 0
set :ratePerMin 0
set :startTime @time
sensor *tmp22 switch1 @enabled
jump *label21 notEqual *tmp22 0
label *label46
set :start @time
sensor :a1 .CONV1 @totalItems
jump *label22 greaterThanEq :a1 :b1
op add :batches :batches 1
label *label22
sensor :a2 .CONV2 @totalItems
jump *label24 greaterThanEq :a2 :b2
op add :batches :batches 1
label *label24
sensor :a3 .CONV3 @totalItems
jump *label26 greaterThanEq :a3 :b3
op add :batches :batches 1
label *label26
sensor :a4 .CONV4 @totalItems
jump *label28 greaterThanEq :a4 :b4
op add :batches :batches 1
label *label28
jump *label30 lessThanEq :batches :limit
op sub :duration @time :startTime
set :startTime @time
op div :rate .BATCH :duration
op mul *tmp44 :rate 166.66666666666666
write *tmp44 .MEMORY :lastCell
op idiv :ratePerMin :rate 0.0000016666666666666667
jump *label32 greaterThan :duration 2000
op add *tmp49 .BATCH 1
op min .BATCH *tmp49 .EFF_MAX_BATCH
op mul .BATCH_TXT .BATCH 10
label *label32
op add :limit :limit .BATCH
label *label30
op mul :total :batches 10
write :total .MEMORY 0
print "Item Counter                  \nMonitoring [green]{0}[] conveyors\nTotal items: [gold]{0}[]\nRate: [green]{0}[] items/min\n"
format .LINKED
format :total
format :ratePerMin
sensor :b1 .CONV1 @totalItems
jump *label34 greaterThanEq :b1 :a1
op add :batches :batches 1
label *label34
sensor :b2 .CONV2 @totalItems
jump *label36 greaterThanEq :b2 :a2
op add :batches :batches 1
label *label36
sensor :b3 .CONV3 @totalItems
jump *label38 greaterThanEq :b3 :a3
op add :batches :batches 1
label *label38
sensor :b4 .CONV4 @totalItems
jump *label40 greaterThanEq :b4 :a4
op add :batches :batches 1
label *label40
op sub *tmp66 @time :startTime
op floor :elapsed *tmp66
jump *label42 lessThan :elapsed 10000
op idiv *tmp70 .BATCH 5
op max .BATCH *tmp70 .EFF_MIN_BATCH
op mul .BATCH_TXT .BATCH 10
op add :limit :batches .BATCH
write 0 .MEMORY :lastCell
set :ratePerMin 0
set :startTime @time
label *label42
print "Batch size: [green]{0}[]\nBatch time: [gold]{0}[] ms\n[lightgray]Loop time: {0} ms"
format .BATCH_TXT
format :elapsed
op sub *tmp77 @time :start
op idiv *tmp79 *tmp77 2
format *tmp79
printflush message1
jump *label44 equal .LINKS @links
end
label *label44
sensor *tmp22 switch1 @enabled
jump *label46 equal *tmp22 0
label *label21
control enabled switch1 0
write 0 .MEMORY :lastCell
write 0 .MEMORY 0
