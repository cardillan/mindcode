    40 instructions before optimizations.
     1 instructions eliminated by Dead Code Elimination (4 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
     1 instructions eliminated by Jump Optimization (5 iterations).
     4 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by If Expression Optimization (3 iterations).
    39 instructions eliminated by Data Flow Optimization (4 passes, 14 iterations).
     2 instructions eliminated by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
    18 instructions added by Loop Unrolling (5 iterations).
     2 loops unrolled by Loop Unrolling.
     6 instructions eliminated by Print Merging.
     4 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 973):
  * Unroll loop at line 3:5                                      size    +0, benefit      200.0, efficiency   Infinity (-5 instructions)
    Unroll loop at line 3:5                                      size    +4, benefit      400.0, efficiency    100.000

Pass 1: speed optimization selection (cost limit 978):
  * Unroll loop at line 3:5                                      size    +4, benefit      400.0, efficiency    100.000 (-5 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    43 set :test:result *tmp6
    44 print "|"
    45 print :test:result
-    * set *tmp0 :test:result
    46 label *label0
    47 assertprints "6|28|Less|0" "loops in conditions"
    48 stop

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    32 jump *label5 always
    33 set *tmp3 null
    34 label *label5
-    * op lessThan *tmp5 *tmp1 *tmp3
-    * jump *label9 equal *tmp5 false
+   35 jump *label9 greaterThanEq *tmp1 *tmp3
    36 print "Less"
    37 set *tmp6 0
    38 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-2 instructions):
     0 assertflush
     1 set :sum:n 4
     2 set :sum:c 0
-    * set *tmp2 :sum:n
+    3 set *tmp2 4
     4 set :sum:i 0
     5 label *label2
-    * jump *label4 greaterThanEq :sum:i *tmp2
+    6 jump *label4 greaterThanEq :sum:i :sum:n
     7 op add :sum:c :sum:c :sum:i
     8 label *label3
     9 op add :sum:i :sum:i 1
 
    13 print "|"
    14 set *tmp1 :sum:c
    15 jump *label1 always
-    * set *tmp1 null
    16 label *label1
    17 set :sum.1:n 8
    18 set :sum.1:c 0
-    * set *tmp4 :sum.1:n
+   19 set *tmp4 8
    20 set :sum.1:i 0
    21 label *label6
-    * jump *label8 greaterThanEq :sum.1:i *tmp4
+   22 jump *label8 greaterThanEq :sum.1:i :sum.1:n
    23 op add :sum.1:c :sum.1:c :sum.1:i
    24 label *label7
    25 op add :sum.1:i :sum.1:i 1
 
    29 print "|"
    30 set *tmp3 :sum.1:c
    31 jump *label5 always
-    * set *tmp3 null
    32 label *label5
-    * jump *label9 greaterThanEq *tmp1 *tmp3
+   33 jump *label9 greaterThanEq :sum:c :sum.1:c
    34 print "Less"
    35 set *tmp6 0
    36 jump *label10 always
 
    39 label *label10
    40 set :test:result *tmp6
    41 print "|"
-    * print :test:result
+   42 print *tmp6
    43 label *label0
    44 assertprints "6|28|Less|0" "loops in conditions"
    45 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
     0 assertflush
     1 set :sum:n 4
     2 set :sum:c 0
-    * set *tmp2 4
     3 set :sum:i 0
     4 label *label2
-    * jump *label4 greaterThanEq :sum:i :sum:n
+    5 jump *label4 greaterThanEq :sum:i 4
     6 op add :sum:c :sum:c :sum:i
     7 label *label3
     8 op add :sum:i :sum:i 1
 
    10 label *label4
    11 print :sum:c
    12 print "|"
-    * set *tmp1 :sum:c
    13 jump *label1 always
    14 label *label1
    15 set :sum.1:n 8
    16 set :sum.1:c 0
-    * set *tmp4 8
    17 set :sum.1:i 0
    18 label *label6
-    * jump *label8 greaterThanEq :sum.1:i :sum.1:n
+   19 jump *label8 greaterThanEq :sum.1:i 8
    20 op add :sum.1:c :sum.1:c :sum.1:i
    21 label *label7
    22 op add :sum.1:i :sum.1:i 1
 
    24 label *label8
    25 print :sum.1:c
    26 print "|"
-    * set *tmp3 :sum.1:c
    27 jump *label5 always
    28 label *label5
    29 jump *label9 greaterThanEq :sum:c :sum.1:c
 
    33 label *label9
    34 set *tmp6 1
    35 label *label10
-    * set :test:result *tmp6
    36 print "|"
    37 print *tmp6
    38 label *label0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-2 instructions):
     0 assertflush
-    * set :sum:n 4
     1 set :sum:c 0
     2 set :sum:i 0
     3 label *label2
 
    11 print "|"
    12 jump *label1 always
    13 label *label1
-    * set :sum.1:n 8
    14 set :sum.1:c 0
    15 set :sum.1:i 0
    16 label *label6

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
     1 set :sum:c 0
     2 set :sum:i 0
     3 label *label2
-    * jump *label4 greaterThanEq :sum:i 4
+    4 label *label11
     5 op add :sum:c :sum:c :sum:i
     6 label *label3
     7 op add :sum:i :sum:i 1
-    * jump *label2 always
+    8 jump *label11 lessThan :sum:i 4
     9 label *label4
    10 print :sum:c
    11 print "|"
 
    14 set :sum.1:c 0
    15 set :sum.1:i 0
    16 label *label6
-    * jump *label8 greaterThanEq :sum.1:i 8
+   17 label *label12
    18 op add :sum.1:c :sum.1:c :sum.1:i
    19 label *label7
    20 op add :sum.1:i :sum.1:i 1
-    * jump *label6 always
+   21 jump *label12 lessThan :sum.1:i 8
    22 label *label8
    23 print :sum.1:c
    24 print "|"

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1:
     0 assertflush
+    1 set *tmp6 1
     2 set :sum:c 0
     3 set :sum:i 0
     4 label *label2
 
    25 print "|"
    26 jump *label5 always
    27 label *label5
-    * jump *label9 greaterThanEq :sum:c :sum.1:c
+   28 jump *label10 greaterThanEq :sum:c :sum.1:c
    29 print "Less"
    30 set *tmp6 0
    31 jump *label10 always
-    * label *label9
-    * set *tmp6 1
    32 label *label10
    33 print "|"
    34 print *tmp6

Modifications by Unroll loop at line 3:5 (+5 instructions):
     0 assertflush
     1 set *tmp6 1
     2 set :sum:c 0
-    * set :sum:i 0
-    * label *label2
-    * label *label11
-    * op add :sum:c :sum:c :sum:i
-    * label *label3
-    * op add :sum:i :sum:i 1
-    * jump *label11 lessThan :sum:i 4
-    * label *label4
+    3 set :sum:i 0
+    4 label *label13
+    5 label *label14
+    6 op add :sum:c :sum:c :sum:i
+    7 label *label15
+    8 op add :sum:i :sum:i 1
+    9 label *label16
+   10 op add :sum:c :sum:c :sum:i
+   11 label *label17
+   12 op add :sum:i :sum:i 1
+   13 label *label18
+   14 op add :sum:c :sum:c :sum:i
+   15 label *label19
+   16 op add :sum:i :sum:i 1
+   17 label *label20
+   18 op add :sum:c :sum:c :sum:i
+   19 label *label21
+   20 op add :sum:i :sum:i 1
+   21 label *label4
    22 print :sum:c
    23 print "|"
    24 jump *label1 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 set :sum:i 0
     4 label *label13
     5 label *label14
-    * op add :sum:c :sum:c :sum:i
+    6 op add :sum:c 0 0
     7 label *label15
-    * op add :sum:i :sum:i 1
+    8 op add :sum:i 0 1
     9 label *label16
-    * op add :sum:c :sum:c :sum:i
+   10 op add :sum:c 0 1
    11 label *label17
-    * op add :sum:i :sum:i 1
+   12 op add :sum:i 1 1
    13 label *label18
-    * op add :sum:c :sum:c :sum:i
+   14 op add :sum:c 1 2
    15 label *label19
-    * op add :sum:i :sum:i 1
+   16 op add :sum:i 2 1
    17 label *label20
-    * op add :sum:c :sum:c :sum:i
+   18 op add :sum:c 3 3
    19 label *label21
-    * op add :sum:i :sum:i 1
+   20 op add :sum:i 3 1
    21 label *label4
-    * print :sum:c
+   22 print 6
    23 print "|"
    24 jump *label1 always
    25 label *label1
 
    36 print "|"
    37 jump *label5 always
    38 label *label5
-    * jump *label10 greaterThanEq :sum:c :sum.1:c
+   39 jump *label10 greaterThanEq 6 :sum.1:c
    40 print "Less"
    41 set *tmp6 0
    42 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
     0 assertflush
     1 set *tmp6 1
-    * set :sum:c 0
-    * set :sum:i 0
     2 label *label13
     3 label *label14
-    * op add :sum:c 0 0
     4 label *label15
-    * op add :sum:i 0 1
     5 label *label16
-    * op add :sum:c 0 1
     6 label *label17
-    * op add :sum:i 1 1
     7 label *label18
-    * op add :sum:c 1 2
     8 label *label19
-    * op add :sum:i 2 1
     9 label *label20
-    * op add :sum:c 3 3
    10 label *label21
-    * op add :sum:i 3 1
    11 label *label4
    12 print 6
    13 print "|"

Modifications by Unroll loop at line 3:5 (+13 instructions):
 
    14 jump *label1 always
    15 label *label1
    16 set :sum.1:c 0
-    * set :sum.1:i 0
-    * label *label6
-    * label *label12
-    * op add :sum.1:c :sum.1:c :sum.1:i
-    * label *label7
-    * op add :sum.1:i :sum.1:i 1
-    * jump *label12 lessThan :sum.1:i 8
-    * label *label8
+   17 set :sum.1:i 0
+   18 label *label22
+   19 label *label23
+   20 op add :sum.1:c :sum.1:c :sum.1:i
+   21 label *label24
+   22 op add :sum.1:i :sum.1:i 1
+   23 label *label25
+   24 op add :sum.1:c :sum.1:c :sum.1:i
+   25 label *label26
+   26 op add :sum.1:i :sum.1:i 1
+   27 label *label27
+   28 op add :sum.1:c :sum.1:c :sum.1:i
+   29 label *label28
+   30 op add :sum.1:i :sum.1:i 1
+   31 label *label29
+   32 op add :sum.1:c :sum.1:c :sum.1:i
+   33 label *label30
+   34 op add :sum.1:i :sum.1:i 1
+   35 label *label31
+   36 op add :sum.1:c :sum.1:c :sum.1:i
+   37 label *label32
+   38 op add :sum.1:i :sum.1:i 1
+   39 label *label33
+   40 op add :sum.1:c :sum.1:c :sum.1:i
+   41 label *label34
+   42 op add :sum.1:i :sum.1:i 1
+   43 label *label35
+   44 op add :sum.1:c :sum.1:c :sum.1:i
+   45 label *label36
+   46 op add :sum.1:i :sum.1:i 1
+   47 label *label37
+   48 op add :sum.1:c :sum.1:c :sum.1:i
+   49 label *label38
+   50 op add :sum.1:i :sum.1:i 1
+   51 label *label8
    52 print :sum.1:c
    53 print "|"
    54 jump *label5 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    17 set :sum.1:i 0
    18 label *label22
    19 label *label23
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   20 op add :sum.1:c 0 0
    21 label *label24
-    * op add :sum.1:i :sum.1:i 1
+   22 op add :sum.1:i 0 1
    23 label *label25
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   24 op add :sum.1:c 0 1
    25 label *label26
-    * op add :sum.1:i :sum.1:i 1
+   26 op add :sum.1:i 1 1
    27 label *label27
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   28 op add :sum.1:c 1 2
    29 label *label28
-    * op add :sum.1:i :sum.1:i 1
+   30 op add :sum.1:i 2 1
    31 label *label29
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   32 op add :sum.1:c 3 3
    33 label *label30
-    * op add :sum.1:i :sum.1:i 1
+   34 op add :sum.1:i 3 1
    35 label *label31
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   36 op add :sum.1:c 6 4
    37 label *label32
-    * op add :sum.1:i :sum.1:i 1
+   38 op add :sum.1:i 4 1
    39 label *label33
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   40 op add :sum.1:c 10 5
    41 label *label34
-    * op add :sum.1:i :sum.1:i 1
+   42 op add :sum.1:i 5 1
    43 label *label35
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   44 op add :sum.1:c 15 6
    45 label *label36
-    * op add :sum.1:i :sum.1:i 1
+   46 op add :sum.1:i 6 1
    47 label *label37
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   48 op add :sum.1:c 21 7
    49 label *label38
-    * op add :sum.1:i :sum.1:i 1
+   50 op add :sum.1:i 7 1
    51 label *label8
-    * print :sum.1:c
+   52 print 28
    53 print "|"
    54 jump *label5 always
    55 label *label5
-    * jump *label10 greaterThanEq 6 :sum.1:c
+   56 jump *label10 greaterThanEq 6 28
    57 print "Less"
    58 set *tmp6 0
    59 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-18 instructions):
 
    13 print "|"
    14 jump *label1 always
    15 label *label1
-    * set :sum.1:c 0
-    * set :sum.1:i 0
    16 label *label22
    17 label *label23
-    * op add :sum.1:c 0 0
    18 label *label24
-    * op add :sum.1:i 0 1
    19 label *label25
-    * op add :sum.1:c 0 1
    20 label *label26
-    * op add :sum.1:i 1 1
    21 label *label27
-    * op add :sum.1:c 1 2
    22 label *label28
-    * op add :sum.1:i 2 1
    23 label *label29
-    * op add :sum.1:c 3 3
    24 label *label30
-    * op add :sum.1:i 3 1
    25 label *label31
-    * op add :sum.1:c 6 4
    26 label *label32
-    * op add :sum.1:i 4 1
    27 label *label33
-    * op add :sum.1:c 10 5
    28 label *label34
-    * op add :sum.1:i 5 1
    29 label *label35
-    * op add :sum.1:c 15 6
    30 label *label36
-    * op add :sum.1:i 6 1
    31 label *label37
-    * op add :sum.1:c 21 7
    32 label *label38
-    * op add :sum.1:i 7 1
    33 label *label8
    34 print 28
    35 print "|"

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-1 instructions):
 
    35 print "|"
    36 jump *label5 always
    37 label *label5
-    * jump *label10 greaterThanEq 6 28
    38 print "Less"
    39 set *tmp6 0
    40 jump *label10 always

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-3 instructions):
 
    11 label *label4
    12 print 6
    13 print "|"
-    * jump *label1 always
    14 label *label1
    15 label *label22
    16 label *label23
 
    32 label *label8
    33 print 28
    34 print "|"
-    * jump *label5 always
    35 label *label5
    36 print "Less"
    37 set *tmp6 0
-    * jump *label10 always
    38 label *label10
    39 print "|"
    40 print *tmp6

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
     0 assertflush
-    * set *tmp6 1
     1 label *label13
     2 label *label14
     3 label *label15
 
    36 set *tmp6 0
    37 label *label10
    38 print "|"
-    * print *tmp6
+   39 print 0
    40 label *label0
    41 assertprints "6|28|Less|0" "loops in conditions"
    42 stop

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    33 print "|"
    34 label *label5
    35 print "Less"
-    * set *tmp6 0
    36 label *label10
    37 print "|"
    38 print 0

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 assertflush
-    * label *label13
-    * label *label14
-    * label *label15
-    * label *label16
-    * label *label17
-    * label *label18
-    * label *label19
-    * label *label20
-    * label *label21
-    * label *label4
     1 print 6
     2 print "|"
-    * label *label1
-    * label *label22
-    * label *label23
-    * label *label24
-    * label *label25
-    * label *label26
-    * label *label27
-    * label *label28
-    * label *label29
-    * label *label30
-    * label *label31
-    * label *label32
-    * label *label33
-    * label *label34
-    * label *label35
-    * label *label36
-    * label *label37
-    * label *label38
-    * label *label8
     3 print 28
     4 print "|"
-    * label *label5
     5 print "Less"
-    * label *label10
     6 print "|"
     7 print 0
-    * label *label0
     8 assertprints "6|28|Less|0" "loops in conditions"
     9 stop
    10 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
     7 print 0
     8 assertprints "6|28|Less|0" "loops in conditions"
     9 stop
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-6 instructions):
     0 assertflush
-    * print 6
-    * print "|"
-    * print 28
-    * print "|"
-    * print "Less"
-    * print "|"
-    * print 0
+    1 print "6|28|Less|0"
     2 assertprints "6|28|Less|0" "loops in conditions"
     3 stop

Final code before resolving virtual instructions:

assertflush
print "6|28|Less|0"
assertprints "6|28|Less|0" "loops in conditions"
stop
