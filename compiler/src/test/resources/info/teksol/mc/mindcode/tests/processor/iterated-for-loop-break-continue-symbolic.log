    47 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     5 instructions eliminated by Dead Code Elimination (3 iterations).
     3 instructions eliminated by Jump Optimization (3 iterations).
     2 instructions eliminated by Single Step Elimination (4 iterations).
     2 instructions modified by Data Flow Optimization (4 iterations).
     7 instructions added by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     2 instructions eliminated by Jump Straightening (3 iterations).
     1 instructions eliminated by Unreachable Code Elimination.
     1 instructions eliminated by Print Merging.
    37 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 966):
  * Replicate loop condition at line 4:5                         cost     7, benefit       25.0, efficiency        3.6 (+7 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-5 instructions):
 
    15 op equal *tmp5 *tmp4 4
    16 jump *label5 equal *tmp5 false
    17 jump *label3 always
-    * set *tmp6 null
    18 jump *label6 always
    19 label *label5
-    * set *tmp6 null
    20 label *label6
    21 print :test.0:i
    22 print "|"
 
    28 op equal *tmp8 *tmp7 10
    29 jump *label7 equal *tmp8 false
    30 jump *label4 always
-    * set *tmp9 null
    31 jump *label8 always
    32 label *label7
-    * set *tmp9 null
    33 label *label8
    34 label *label3
    35 op add :test.0:i :test.0:i 2
    36 op add :test.0:j :test.0:j 1
    37 jump *label2 always
    38 label *label4
-    * set *tmp0 null
    39 label *label1
    40 assertprints "0|10|2|11|6|13|8|14|10|15|" "iterated-for-loop-break-continue"
    41 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
 
     6 set *tmp1 :d.0*retval
     7 set :d.0:n :test.0:j
     8 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp2 :d.0*retval
-    * op lessThanEq *tmp3 *tmp1 *tmp2
+    9 op lessThanEq *tmp3 *tmp1 :d.0*retval
    10 jump *label4 equal *tmp3 false
    11 set :d.0:n :test.0:i
    12 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp4 :d.0*retval
-    * op equal *tmp5 *tmp4 4
+   13 op equal *tmp5 :d.0*retval 4
    14 jump *label5 equal *tmp5 false
    15 jump *label3 always
    16 jump *label6 always
 
    22 print "|"
    23 set :d.0:n :test.0:i
    24 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp7 :d.0*retval
-    * op equal *tmp8 *tmp7 10
+   25 op equal *tmp8 :d.0*retval 10
    26 jump *label7 equal *tmp8 false
    27 jump *label4 always
    28 jump *label8 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
     6 set *tmp1 :d.0*retval
     7 set :d.0:n :test.0:j
     8 call *label0 :d.0*retaddr :d.0*retval
-    * op lessThanEq *tmp3 *tmp1 :d.0*retval
-    * jump *label4 equal *tmp3 false
+    9 jump *label4 greaterThan *tmp1 :d.0*retval
    10 set :d.0:n :test.0:i
    11 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp5 :d.0*retval 4
-    * jump *label5 equal *tmp5 false
+   12 jump *label5 notEqual :d.0*retval 4
    13 jump *label3 always
    14 jump *label6 always
    15 label *label5
 
    20 print "|"
    21 set :d.0:n :test.0:i
    22 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp8 :d.0*retval 10
-    * jump *label7 equal *tmp8 false
+   23 jump *label7 notEqual :d.0*retval 10
    24 jump *label4 always
    25 jump *label8 always
    26 label *label7

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    11 call *label0 :d.0*retaddr :d.0*retval
    12 jump *label5 notEqual :d.0*retval 4
    13 jump *label3 always
-    * jump *label6 always
    14 label *label5
    15 label *label6
    16 print :test.0:i
 
    21 call *label0 :d.0*retaddr :d.0*retval
    22 jump *label7 notEqual :d.0*retval 10
    23 jump *label4 always
-    * jump *label8 always
    24 label *label7
    25 label *label8
    26 label *label3

Modifications by Replicate loop condition at line 4:5 (+7 instructions):
 
     7 set :d.0:n :test.0:j
     8 call *label0 :d.0*retaddr :d.0*retval
     9 jump *label4 greaterThan *tmp1 :d.0*retval
+   10 label *label10
    11 set :d.0:n :test.0:i
    12 call *label0 :d.0*retaddr :d.0*retval
    13 jump *label5 notEqual :d.0*retval 4
 
    27 label *label3
    28 op add :test.0:i :test.0:i 2
    29 op add :test.0:j :test.0:j 1
-    * jump *label2 always
+   30 set :d.0:n :test.0:i
+   31 call *label0 :d.0*retaddr :d.0*retval
+   32 set *tmp1 :d.0*retval
+   33 set :d.0:n :test.0:j
+   34 call *label0 :d.0*retaddr :d.0*retval
+   35 jump *label10 lessThanEq *tmp1 :d.0*retval
    36 label *label4
    37 label *label1
    38 assertprints "0|10|2|11|6|13|8|14|10|15|" "iterated-for-loop-break-continue"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set :test.0:i 0
     2 set :test.0:j 10
     3 label *label2
-    * set :d.0:n :test.0:i
+    4 set :d.0:n 0
     5 call *label0 :d.0*retaddr :d.0*retval
     6 set *tmp1 :d.0*retval
-    * set :d.0:n :test.0:j
+    7 set :d.0:n 10
     8 call *label0 :d.0*retaddr :d.0*retval
     9 jump *label4 greaterThan *tmp1 :d.0*retval
    10 label *label10

Modifications by Final phase, Jump Straightening, iteration 1 (-2 instructions):
 
    10 label *label10
    11 set :d.0:n :test.0:i
    12 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label5 notEqual :d.0*retval 4
-    * jump *label3 always
+   13 jump *label3 equal :d.0*retval 4
    14 label *label5
    15 label *label6
    16 print :test.0:i
 
    19 print "|"
    20 set :d.0:n :test.0:i
    21 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label7 notEqual :d.0*retval 10
-    * jump *label4 always
+   22 jump *label4 equal :d.0*retval 10
    23 label *label7
    24 label *label8
    25 label *label3

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-1 instructions):
 
    40 set :d.0*retval :d.0:n
    41 label *label9
    42 return :d.0*retaddr
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-1 instructions):
 
    14 label *label5
    15 label *label6
    16 print :test.0:i
-    * print "|"
-    * print :test.0:j
-    * print "|"
+   17 print "|{0}|"
+   18 format :test.0:j
    19 set :d.0:n :test.0:i
    20 call *label0 :d.0*retaddr :d.0*retval
    21 jump *label4 equal :d.0*retval 10

Final code before resolving virtual instructions:

assertflush
set :test.0:i 0
set :test.0:j 10
set :d.0:n 0
call *label0 :d.0*retaddr :d.0*retval
set *tmp1 :d.0*retval
set :d.0:n 10
call *label0 :d.0*retaddr :d.0*retval
jump *label4 greaterThan *tmp1 :d.0*retval
label *label10
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label3 equal :d.0*retval 4
print :test.0:i
print "|{0}|"
format :test.0:j
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 10
label *label3
op add :test.0:i :test.0:i 2
op add :test.0:j :test.0:j 1
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
set *tmp1 :d.0*retval
set :d.0:n :test.0:j
call *label0 :d.0*retaddr :d.0*retval
jump *label10 lessThanEq *tmp1 :d.0*retval
label *label4
assertprints "0|10|2|11|6|13|8|14|10|15|" "iterated-for-loop-break-continue"
stop
end
label *label0
set :d.0*retval :d.0:n
return :d.0*retaddr
