    52 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     3 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
     2 instructions eliminated by Data Flow Optimization (7 iterations).
     1 instructions eliminated by Loop Optimization (4 iterations).
     1 loops improved by Loop Optimization.
     6 instructions eliminated by Case Switching (5 iterations).
     1 case expressions converted to switched jumps Case Switching.
     2 instructions eliminated by Jump Straightening (2 passes, 6 iterations).
    33 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 18):
  * Convert case at line 5:5 (segments: 5)                       cost     0, benefit      466.6, efficiency   Infinity (-6 instructions)
  ! Convert case at line 5:5 (segments: 5)                       cost    21, benefit      470.1, efficiency     22.386
  ! Convert case at line 5:5 (segments: 3)                       cost    22, benefit      485.1, efficiency     22.050
  ! Convert case at line 5:5 (segments: 4)                       cost    24, benefit      491.3, efficiency     20.473
  ! Convert case at line 5:5 (segments: 3)                       cost   189, benefit      501.6, efficiency      2.654
  ! Convert case at line 5:5 (segments: 4)                       cost   191, benefit      507.9, efficiency      2.659
  ! Convert case at line 5:5 (segments: 3)                       cost   193, benefit      513.3, efficiency      2.659
  ! Convert case at line 5:5 (segments: 2)                       cost   203, benefit      517.7, efficiency      2.550
  ! Convert case at line 5:5 (segments: 2)                       cost   206, benefit      521.2, efficiency      2.530
  ! Convert case at line 5:5 (segments: 1)                       cost   213, benefit      525.9, efficiency      2.469

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
-    * jump *label6 equal *tmp3 @graphite-press
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    7 jump *label6 strictEqual :isWall:block null
+    8 jump *label6 equal :isWall:block @graphite-press
+    9 jump *label6 equal :isWall:block @copper-wall
+   10 jump *label6 equal :isWall:block @copper-wall-large
+   11 jump *label6 equal :isWall:block @titanium-wall
+   12 jump *label6 equal :isWall:block @titanium-wall-large
+   13 jump *label6 equal :isWall:block @plastanium-wall
+   14 jump *label6 equal :isWall:block @plastanium-wall-large
+   15 jump *label6 equal :isWall:block @thorium-wall
+   16 jump *label6 equal :isWall:block @thorium-wall-large
+   17 jump *label6 equal :isWall:block @phase-wall
+   18 jump *label6 equal :isWall:block @phase-wall-large
+   19 jump *label6 equal :isWall:block @surge-wall
+   20 jump *label6 equal :isWall:block @surge-wall-large
+   21 jump *label6 equal :isWall:block @scrap-wall
+   22 jump *label6 equal :isWall:block @scrap-wall-large
+   23 jump *label6 equal :isWall:block @scrap-wall-huge
+   24 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   25 jump *label6 equal :isWall:block @beryllium-wall
+   26 jump *label6 equal :isWall:block @beryllium-wall-large
+   27 jump *label6 equal :isWall:block @tungsten-wall
+   28 jump *label6 equal :isWall:block @tungsten-wall-large
+   29 jump *label6 equal :isWall:block @reinforced-surge-wall
+   30 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   31 jump *label6 equal :isWall:block @carbide-wall
+   32 jump *label6 equal :isWall:block @carbide-wall-large
    33 jump *label5 always
    34 label *label6
    35 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    45 op add *tmp7 *tmp6 251
    46 op and *tmp8 *tmp7 0xFFFFFFFF
    47 set :hash *tmp8
-    * set *tmp4 :hash
    48 jump *label8 always
    49 label *label7
-    * set *tmp4 null
    50 label *label8
    51 label *label1
    52 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i -1
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 strictEqual :isWall:block null
     7 jump *label6 equal :isWall:block @graphite-press
 
    42 op mul *tmp5 :hash 31
    43 op add *tmp6 *tmp5 :i
    44 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   45 op and :hash *tmp7 0xFFFFFFFF
    46 jump *label8 always
    47 label *label7
    48 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    28 jump *label6 equal :isWall:block @reinforced-surge-wall
    29 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    30 jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 always
+   31 jump *label5 notEqual :isWall:block @carbide-wall-large
    32 label *label6
    33 set *tmp2 true
    34 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251
    44 op and :hash *tmp7 0xFFFFFFFF
-    * jump *label8 always
    45 label *label7
    46 label *label8
    47 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
-    * jump *label6 equal :isWall:block @graphite-press
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label5 notEqual :isWall:block @carbide-wall-large
+    6 jump *label6 strictEqual :block null
+    7 jump *label6 equal :block @graphite-press
+    8 jump *label6 equal :block @copper-wall
+    9 jump *label6 equal :block @copper-wall-large
+   10 jump *label6 equal :block @titanium-wall
+   11 jump *label6 equal :block @titanium-wall-large
+   12 jump *label6 equal :block @plastanium-wall
+   13 jump *label6 equal :block @plastanium-wall-large
+   14 jump *label6 equal :block @thorium-wall
+   15 jump *label6 equal :block @thorium-wall-large
+   16 jump *label6 equal :block @phase-wall
+   17 jump *label6 equal :block @phase-wall-large
+   18 jump *label6 equal :block @surge-wall
+   19 jump *label6 equal :block @surge-wall-large
+   20 jump *label6 equal :block @scrap-wall
+   21 jump *label6 equal :block @scrap-wall-large
+   22 jump *label6 equal :block @scrap-wall-huge
+   23 jump *label6 equal :block @scrap-wall-gigantic
+   24 jump *label6 equal :block @beryllium-wall
+   25 jump *label6 equal :block @beryllium-wall-large
+   26 jump *label6 equal :block @tungsten-wall
+   27 jump *label6 equal :block @tungsten-wall-large
+   28 jump *label6 equal :block @reinforced-surge-wall
+   29 jump *label6 equal :block @reinforced-surge-wall-large
+   30 jump *label6 equal :block @carbide-wall
+   31 jump *label5 notEqual :block @carbide-wall-large
    32 label *label6
    33 set *tmp2 true
    34 jump *label4 always
 
    37 label *label4
    38 set *tmp1 *tmp2
    39 label *label3
-    * jump *label7 equal *tmp1 false
+   40 jump *label7 equal *tmp2 false
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @graphite-press
     7 jump *label6 equal :block @copper-wall
 
    34 label *label5
    35 set *tmp2 false
    36 label *label4
-    * set *tmp1 *tmp2
    37 label *label3
    38 jump *label7 equal *tmp2 false
    39 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i -1
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label9
     4 lookup block :block :i
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @graphite-press
 
    44 label *label8
    45 label *label1
    46 op add :i :i 1
-    * jump *label0 always
+   47 jump *label9 lessThan :i 240
    48 label *label2
    49 print :hash
    50 assertequals 226523029 :hash "Test selected blocks"

Modifications by Convert case at line 5:5 (segments: 5) (-6 instructions):
 
     2 label *label0
     3 label *label9
     4 lookup block :block :i
-    * jump *label6 strictEqual :block null
-    * jump *label6 equal :block @graphite-press
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label5 notEqual :block @carbide-wall-large
+    5 sensor *tmp9 :block @id
+    6 jump *label12 greaterThanEq *tmp9 17
+    7 jump *label11 equal *tmp9 0
+    8 jump *label10 always
+    9 label *label12
+   10 jump *label13 greaterThanEq *tmp9 35
+   11 jump *label10 equal *tmp9 29
+   12 jump *label10 equal *tmp9 30
+   13 jump *label6 always
+   14 label *label13
+   15 jump *label14 greaterThanEq *tmp9 208
+   16 jump *label10 equal *tmp9 205
+   17 jump *label10 lessThan *tmp9 203
+   18 jump *label6 always
+   19 label *label14
+   20 jump *label15 greaterThanEq *tmp9 226
+   21 jump *label6 equal *tmp9 220
+   22 jump *label6 equal *tmp9 221
+   23 jump *label6 equal *tmp9 225
+   24 jump *label10 always
+   25 label *label15
+   26 jump *label6 equal *tmp9 234
+   27 jump *label10 always
+   28 label *label11
+   29 jump *label6 strictEqual *tmp9 null
    30 label *label6
    31 set *tmp2 true
    32 jump *label4 always
    33 label *label5
+   34 label *label10
    35 set *tmp2 false
    36 label *label4
    37 label *label3

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
    26 jump *label6 equal *tmp9 234
    27 jump *label10 always
    28 label *label11
-    * jump *label6 strictEqual *tmp9 null
    29 label *label6
    30 set *tmp2 true
    31 jump *label4 always

Modifications by Iterated phase, Jump Straightening, pass 3, iteration 1 (-1 instructions):
 
    23 jump *label6 equal *tmp9 225
    24 jump *label10 always
    25 label *label15
-    * jump *label6 equal *tmp9 234
-    * jump *label10 always
+   26 jump *label10 notEqual *tmp9 234
    27 label *label11
    28 label *label6
    29 set *tmp2 true

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set :hash 0
     1 set :i -1
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 sensor *tmp9 :block @id
 
    27 label *label6
    28 set *tmp2 true
    29 jump *label4 always
-    * label *label5
    30 label *label10
    31 set *tmp2 false
    32 label *label4
-    * label *label3
    33 jump *label7 equal *tmp2 false
    34 op mul *tmp5 :hash 31
    35 op add *tmp6 *tmp5 :i
    36 op add *tmp7 *tmp6 251
    37 op and :hash *tmp7 0xFFFFFFFF
    38 label *label7
-    * label *label8
-    * label *label1
    39 op add :i :i 1
    40 jump *label9 lessThan :i 240
-    * label *label2
    41 print :hash
    42 assertequals 226523029 :hash "Test selected blocks"
    43 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
    40 jump *label9 lessThan :i 240
    41 print :hash
    42 assertequals 226523029 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i -1
label *label9
lookup block :block :i
sensor *tmp9 :block @id
jump *label12 greaterThanEq *tmp9 17
jump *label11 equal *tmp9 0
jump *label10 always
label *label12
jump *label13 greaterThanEq *tmp9 35
jump *label10 equal *tmp9 29
jump *label10 equal *tmp9 30
jump *label6 always
label *label13
jump *label14 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label10 lessThan *tmp9 203
jump *label6 always
label *label14
jump *label15 greaterThanEq *tmp9 226
jump *label6 equal *tmp9 220
jump *label6 equal *tmp9 221
jump *label6 equal *tmp9 225
jump *label10 always
label *label15
jump *label10 notEqual *tmp9 234
label *label11
label *label6
set *tmp2 true
jump *label4 always
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i 240
print :hash
assertequals 226523029 :hash "Test selected blocks"
