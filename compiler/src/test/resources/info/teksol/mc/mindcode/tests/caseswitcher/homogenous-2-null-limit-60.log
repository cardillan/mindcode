    51 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     2 instructions eliminated by Data Flow Optimization (6 iterations).
     1 instructions eliminated by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
     9 instructions added by Case Switching (4 iterations).
     1 case expressions converted to switched jumps Case Switching.
     2 instructions eliminated by Jump Straightening (2 passes, 5 iterations).
    48 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 19):
  o Convert case at line 5:5 (segments: 4)                       cost     0, benefit      462.5, efficiency   Infinity
  * Convert case at line 5:5 (segments: 4)                       cost     9, benefit      467.0, efficiency     51.891 (+9 instructions)
  ! Convert case at line 5:5 (segments: 4, zero based)           cost    25, benefit      468.7, efficiency     18.746
  ! Convert case at line 5:5 (segments: 3)                       cost   178, benefit      472.3, efficiency      2.653
  ! Convert case at line 5:5 (segments: 2)                       cost   188, benefit      475.4, efficiency      2.529
  ! Convert case at line 5:5 (segments: 3, zero based)           cost   190, benefit      478.9, efficiency      2.521
  ! Convert case at line 5:5 (segments: 4, zero based)           cost   192, benefit      485.2, efficiency      2.527
  ! Convert case at line 5:5 (segments: 3, zero based)           cost   194, benefit      490.6, efficiency      2.529
  ! Convert case at line 5:5 (segments: 2, zero based)           cost   204, benefit      495.0, efficiency      2.426
  ! Convert case at line 5:5 (segments: 2, zero based)           cost   207, benefit      498.5, efficiency      2.408
  ! Convert case at line 5:5 (segments: 1, zero based)           cost   214, benefit      503.2, efficiency      2.351

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    7 jump *label6 strictEqual :isWall:block null
+    8 jump *label6 equal :isWall:block @copper-wall
+    9 jump *label6 equal :isWall:block @copper-wall-large
+   10 jump *label6 equal :isWall:block @titanium-wall
+   11 jump *label6 equal :isWall:block @titanium-wall-large
+   12 jump *label6 equal :isWall:block @plastanium-wall
+   13 jump *label6 equal :isWall:block @plastanium-wall-large
+   14 jump *label6 equal :isWall:block @thorium-wall
+   15 jump *label6 equal :isWall:block @thorium-wall-large
+   16 jump *label6 equal :isWall:block @phase-wall
+   17 jump *label6 equal :isWall:block @phase-wall-large
+   18 jump *label6 equal :isWall:block @surge-wall
+   19 jump *label6 equal :isWall:block @surge-wall-large
+   20 jump *label6 equal :isWall:block @scrap-wall
+   21 jump *label6 equal :isWall:block @scrap-wall-large
+   22 jump *label6 equal :isWall:block @scrap-wall-huge
+   23 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   24 jump *label6 equal :isWall:block @beryllium-wall
+   25 jump *label6 equal :isWall:block @beryllium-wall-large
+   26 jump *label6 equal :isWall:block @tungsten-wall
+   27 jump *label6 equal :isWall:block @tungsten-wall-large
+   28 jump *label6 equal :isWall:block @reinforced-surge-wall
+   29 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   30 jump *label6 equal :isWall:block @carbide-wall
+   31 jump *label6 equal :isWall:block @carbide-wall-large
    32 jump *label5 always
    33 label *label6
    34 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    44 op add *tmp7 *tmp6 251
    45 op and *tmp8 *tmp7 0xFFFFFFFF
    46 set :hash *tmp8
-    * set *tmp4 :hash
    47 jump *label8 always
    48 label *label7
-    * set *tmp4 null
    49 label *label8
    50 label *label1
    51 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i -1
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 strictEqual :isWall:block null
     7 jump *label6 equal :isWall:block @copper-wall
 
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   44 op and :hash *tmp7 0xFFFFFFFF
    45 jump *label8 always
    46 label *label7
    47 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    27 jump *label6 equal :isWall:block @reinforced-surge-wall
    28 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    29 jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 always
+   30 jump *label5 notEqual :isWall:block @carbide-wall-large
    31 label *label6
    32 set *tmp2 true
    33 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    41 op add *tmp6 *tmp5 :i
    42 op add *tmp7 *tmp6 251
    43 op and :hash *tmp7 0xFFFFFFFF
-    * jump *label8 always
    44 label *label7
    45 label *label8
    46 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label5 notEqual :isWall:block @carbide-wall-large
+    6 jump *label6 strictEqual :block null
+    7 jump *label6 equal :block @copper-wall
+    8 jump *label6 equal :block @copper-wall-large
+    9 jump *label6 equal :block @titanium-wall
+   10 jump *label6 equal :block @titanium-wall-large
+   11 jump *label6 equal :block @plastanium-wall
+   12 jump *label6 equal :block @plastanium-wall-large
+   13 jump *label6 equal :block @thorium-wall
+   14 jump *label6 equal :block @thorium-wall-large
+   15 jump *label6 equal :block @phase-wall
+   16 jump *label6 equal :block @phase-wall-large
+   17 jump *label6 equal :block @surge-wall
+   18 jump *label6 equal :block @surge-wall-large
+   19 jump *label6 equal :block @scrap-wall
+   20 jump *label6 equal :block @scrap-wall-large
+   21 jump *label6 equal :block @scrap-wall-huge
+   22 jump *label6 equal :block @scrap-wall-gigantic
+   23 jump *label6 equal :block @beryllium-wall
+   24 jump *label6 equal :block @beryllium-wall-large
+   25 jump *label6 equal :block @tungsten-wall
+   26 jump *label6 equal :block @tungsten-wall-large
+   27 jump *label6 equal :block @reinforced-surge-wall
+   28 jump *label6 equal :block @reinforced-surge-wall-large
+   29 jump *label6 equal :block @carbide-wall
+   30 jump *label5 notEqual :block @carbide-wall-large
    31 label *label6
    32 set *tmp2 true
    33 jump *label4 always
 
    36 label *label4
    37 set *tmp1 *tmp2
    38 label *label3
-    * jump *label7 equal *tmp1 false
+   39 jump *label7 equal *tmp2 false
    40 op mul *tmp5 :hash 31
    41 op add *tmp6 *tmp5 :i
    42 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @copper-wall
     7 jump *label6 equal :block @copper-wall-large
 
    33 label *label5
    34 set *tmp2 false
    35 label *label4
-    * set *tmp1 *tmp2
    36 label *label3
    37 jump *label7 equal *tmp2 false
    38 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i -1
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label9
     4 lookup block :block :i
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @copper-wall
 
    43 label *label8
    44 label *label1
    45 op add :i :i 1
-    * jump *label0 always
+   46 jump *label9 lessThan :i 240
    47 label *label2
    48 print :hash
    49 assertequals 3138715214 :hash "Test selected blocks"

Modifications by Convert case at line 5:5 (segments: 4) (+9 instructions):
 
     2 label *label0
     3 label *label9
     4 lookup block :block :i
-    * jump *label6 strictEqual :block null
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label5 notEqual :block @carbide-wall-large
+    5 sensor *tmp9 :block @id
+    6 jump *label12 greaterThanEq *tmp9 35
+    7 jump *label11 lessThan *tmp9 17
+    8 multijump *label13 *tmp9 17 (m:*label31)
+    9 multilabel *label13 (m:*label31)
+   10 jump *label6 always
+   11 multilabel *label14 (m:*label31)
+   12 jump *label6 always
+   13 multilabel *label15 (m:*label31)
+   14 jump *label6 always
+   15 multilabel *label16 (m:*label31)
+   16 jump *label6 always
+   17 multilabel *label17 (m:*label31)
+   18 jump *label6 always
+   19 multilabel *label18 (m:*label31)
+   20 jump *label6 always
+   21 multilabel *label19 (m:*label31)
+   22 jump *label6 always
+   23 multilabel *label20 (m:*label31)
+   24 jump *label6 always
+   25 multilabel *label21 (m:*label31)
+   26 jump *label6 always
+   27 multilabel *label22 (m:*label31)
+   28 jump *label6 always
+   29 multilabel *label23 (m:*label31)
+   30 jump *label6 always
+   31 multilabel *label24 (m:*label31)
+   32 jump *label6 always
+   33 multilabel *label25 (m:*label31)
+   34 jump *label10 always
+   35 multilabel *label26 (m:*label31)
+   36 jump *label10 always
+   37 multilabel *label27 (m:*label31)
+   38 jump *label6 always
+   39 multilabel *label28 (m:*label31)
+   40 jump *label6 always
+   41 multilabel *label29 (m:*label31)
+   42 jump *label6 always
+   43 multilabel *label30 (m:*label31)
+   44 jump *label6 always
+   45 label *label12
+   46 jump *label32 greaterThanEq *tmp9 208
+   47 jump *label10 equal *tmp9 205
+   48 jump *label10 lessThan *tmp9 203
+   49 jump *label6 always
+   50 label *label32
+   51 jump *label33 greaterThanEq *tmp9 226
+   52 jump *label6 equal *tmp9 220
+   53 jump *label6 equal *tmp9 221
+   54 jump *label6 equal *tmp9 225
+   55 jump *label10 always
+   56 label *label33
+   57 jump *label6 equal *tmp9 234
+   58 jump *label10 always
    59 label *label6
    60 set *tmp2 true
    61 jump *label4 always
    62 label *label5
+   63 label *label11
+   64 jump *label6 strictEqual *tmp9 null
+   65 label *label10
    66 set *tmp2 false
    67 label *label4
    68 label *label3

Modifications by Iterated phase, Jump Straightening, pass 2, iteration 1 (-1 instructions):
 
    54 jump *label6 equal *tmp9 225
    55 jump *label10 always
    56 label *label33
-    * jump *label6 equal *tmp9 234
-    * jump *label10 always
+   57 jump *label10 notEqual *tmp9 234
    58 label *label6
    59 set *tmp2 true
    60 jump *label4 always

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 set :hash 0
     1 set :i -1
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 sensor *tmp9 :block @id
 
    57 label *label6
    58 set *tmp2 true
    59 jump *label4 always
-    * label *label5
    60 label *label11
    61 jump *label6 strictEqual *tmp9 null
    62 label *label10
    63 set *tmp2 false
    64 label *label4
-    * label *label3
    65 jump *label7 equal *tmp2 false
    66 op mul *tmp5 :hash 31
    67 op add *tmp6 *tmp5 :i
    68 op add *tmp7 *tmp6 251
    69 op and :hash *tmp7 0xFFFFFFFF
    70 label *label7
-    * label *label8
-    * label *label1
    71 op add :i :i 1
    72 jump *label9 lessThan :i 240
-    * label *label2
    73 print :hash
    74 assertequals 3138715214 :hash "Test selected blocks"
    75 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
    72 jump *label9 lessThan :i 240
    73 print :hash
    74 assertequals 3138715214 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i -1
label *label9
lookup block :block :i
sensor *tmp9 :block @id
jump *label12 greaterThanEq *tmp9 35
jump *label11 lessThan *tmp9 17
multijump *label13 *tmp9 17
multilabel *label13
jump *label6 always
multilabel *label14
jump *label6 always
multilabel *label15
jump *label6 always
multilabel *label16
jump *label6 always
multilabel *label17
jump *label6 always
multilabel *label18
jump *label6 always
multilabel *label19
jump *label6 always
multilabel *label20
jump *label6 always
multilabel *label21
jump *label6 always
multilabel *label22
jump *label6 always
multilabel *label23
jump *label6 always
multilabel *label24
jump *label6 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label6 always
multilabel *label28
jump *label6 always
multilabel *label29
jump *label6 always
multilabel *label30
jump *label6 always
label *label12
jump *label32 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label10 lessThan *tmp9 203
jump *label6 always
label *label32
jump *label33 greaterThanEq *tmp9 226
jump *label6 equal *tmp9 220
jump *label6 equal *tmp9 221
jump *label6 equal *tmp9 225
jump *label10 always
label *label33
jump *label10 notEqual *tmp9 234
label *label6
set *tmp2 true
jump *label4 always
label *label11
jump *label6 strictEqual *tmp9 null
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i 240
print :hash
assertequals 3138715214 :hash "Test selected blocks"
