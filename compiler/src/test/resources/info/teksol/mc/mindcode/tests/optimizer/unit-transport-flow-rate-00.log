   129 instructions before optimizations.
    27 instructions eliminated by Temp Variables Elimination.
     4 instructions eliminated by Dead Code Elimination (3 iterations).
     3 instructions eliminated by Jump Optimization (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     1 instructions eliminated by Expression Optimization (2 passes, 3 iterations).
    11 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
    13 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
     1 instructions updated by JumpThreading.
    11 instructions eliminated by Print Merging.
    83 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 917):
  * Replicate loop condition at line 17:1                        cost     5, benefit       25.0, efficiency        5.0 (+5 instructions)
    Replicate loop condition at line 38:1                        cost     8, benefit       25.0, efficiency        3.1

Pass 1: speed optimization selection (cost limit 912):
  * Replicate loop condition at line 38:1                        cost     8, benefit       25.0, efficiency        3.1 (+8 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-4 instructions):
 
    61 print "Wait reset\n"
    62 op add *tmp26 :start .DELAY
    63 set :wait *tmp26
-    * set *tmp25 :wait
    64 jump *label7 always
    65 label *label6
-    * set *tmp25 null
    66 label *label7
    67 set *tmp27 .IND_SHIPPED
    68 read *tmp28 .BANK *tmp27
 
    76 op add .MILLIS .MILLIS .DELAY
    77 op mul *tmp33 .MULTIPLIER .MILLIS
    78 set .SIGN_MILLIS *tmp33
-    * set *tmp32 .SIGN_MILLIS
    79 jump *label9 always
    80 label *label8
    81 set *tmp34 :index
    82 read *tmp35 .BANK *tmp34
    83 set :last_total *tmp35
-    * set *tmp32 :last_total
    84 label *label9
    85 set *tmp36 :index
    86 write :total .BANK *tmp36

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-27 instructions):
 
     4 set .IND_SESSION_KEY 509
     5 set .IND_TIME 508
     6 set .IND_FLOW_RATE 507
-    * op mul *tmp0 .DELAY .SAMPLES
-    * set .TOTAL_MILLIS *tmp0
+    7 op mul .TOTAL_MILLIS .DELAY .SAMPLES
     8 set .SIGN_MILLIS null
     9 set .SORTER sorter1
    10 set .VAULT vault1
 
    24 label *label1
    25 jump *label0 always
    26 label *label2
-    * set *tmp6 .IND_SHIPPED
-    * read *tmp7 .BANK *tmp6
-    * set :shipped *tmp7
-    * set *tmp8 .IND_MULTIPLIER
-    * read *tmp9 .BANK *tmp8
-    * set .MULTIPLIER *tmp9
-    * set *tmp10 .IND_SESSION_KEY
-    * read *tmp11 .BANK *tmp10
-    * set .SESSION_KEY *tmp11
-    * sensor *tmp12 .SORTER @config
-    * set :item *tmp12
+   27 read :shipped .BANK .IND_SHIPPED
+   28 read .MULTIPLIER .BANK .IND_MULTIPLIER
+   29 read .SESSION_KEY .BANK .IND_SESSION_KEY
+   30 sensor :item .SORTER @config
    31 set :last_total :shipped
    32 set :index 0
    33 set .MILLIS 0
 
    39 sensor *tmp15 .VAULT @dead
    40 op strictEqual *tmp16 *tmp15 0
    41 op land *tmp17 *tmp14 *tmp16
-    * set *tmp18 .IND_SESSION_KEY
-    * read *tmp19 .BANK *tmp18
+   42 read *tmp19 .BANK .IND_SESSION_KEY
    43 op strictEqual *tmp20 .SESSION_KEY *tmp19
    44 op land *tmp21 *tmp17 *tmp20
    45 jump *label5 equal *tmp21 false
-    * set *tmp22 @time
-    * set :start *tmp22
-    * op add *tmp23 :wait .DELAY
-    * set :wait *tmp23
+   46 set :start @time
+   47 op add :wait :wait .DELAY
    48 op greaterThan *tmp24 :start :wait
    49 jump *label6 equal *tmp24 false
    50 print "Wait reset\n"
-    * op add *tmp26 :start .DELAY
-    * set :wait *tmp26
+   51 op add :wait :start .DELAY
    52 jump *label7 always
    53 label *label6
    54 label *label7
-    * set *tmp27 .IND_SHIPPED
-    * read *tmp28 .BANK *tmp27
-    * set :shipped *tmp28
-    * sensor *tmp29 .SORTER @config
-    * set :item *tmp29
-    * op add *tmp30 :level :shipped
-    * set :total *tmp30
+   55 read :shipped .BANK .IND_SHIPPED
+   56 sensor :item .SORTER @config
+   57 op add :total :level :shipped
    58 op lessThan *tmp31 .MILLIS .TOTAL_MILLIS
    59 jump *label8 equal *tmp31 false
    60 op add .MILLIS .MILLIS .DELAY
-    * op mul *tmp33 .MULTIPLIER .MILLIS
-    * set .SIGN_MILLIS *tmp33
+   61 op mul .SIGN_MILLIS .MULTIPLIER .MILLIS
    62 jump *label9 always
    63 label *label8
-    * set *tmp34 :index
-    * read *tmp35 .BANK *tmp34
-    * set :last_total *tmp35
+   64 read :last_total .BANK :index
    65 label *label9
-    * set *tmp36 :index
-    * write :total .BANK *tmp36
+   66 write :total .BANK :index
    67 op sub *tmp38 :total :last_total
-    * op div *tmp39 *tmp38 .SIGN_MILLIS
-    * set :flow_rate *tmp39
-    * set *tmp40 .IND_FLOW_RATE
-    * write :flow_rate .BANK *tmp40
+   68 op div :flow_rate *tmp38 .SIGN_MILLIS
+   69 write :flow_rate .BANK .IND_FLOW_RATE
    70 set *tmp42 .IND_TIME
-    * set *tmp44 @time
-    * write *tmp44 .BANK *tmp42
+   71 write @time .BANK *tmp42
    72 op add *tmp45 :index 1
-    * op mod *tmp46 *tmp45 .SAMPLES
-    * set :index *tmp46
+   73 op mod :index *tmp45 .SAMPLES
    74 op mul *tmp47 60000 :flow_rate
-    * op floor *tmp48 *tmp47
-    * set :flow_rate_str *tmp48
-    * op div *tmp49 .MILLIS 1000
-    * set :seconds *tmp49
-    * op sub *tmp50 @time :start
-    * set :elapsed *tmp50
+   75 op floor :flow_rate_str *tmp47
+   76 op div :seconds .MILLIS 1000
+   77 op sub :elapsed @time :start
    78 print "Measured interval: "
    79 print :seconds
    80 print " sec"

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
    45 jump *label5 equal *tmp21 false
    46 set :start @time
    47 op add :wait :wait .DELAY
-    * op greaterThan *tmp24 :start :wait
-    * jump *label6 equal *tmp24 false
+   48 jump *label6 lessThanEq :start :wait
    49 print "Wait reset\n"
    50 op add :wait :start .DELAY
    51 jump *label7 always
 
    54 read :shipped .BANK .IND_SHIPPED
    55 sensor :item .SORTER @config
    56 op add :total :level :shipped
-    * op lessThan *tmp31 .MILLIS .TOTAL_MILLIS
-    * jump *label8 equal *tmp31 false
+   57 jump *label8 greaterThanEq .MILLIS .TOTAL_MILLIS
    58 op add .MILLIS .MILLIS .DELAY
    59 op mul .SIGN_MILLIS .MULTIPLIER .MILLIS
    60 jump *label9 always
 
    96 printflush message1
    97 set :loops 0
    98 label *label10
-    * op lessThan *tmp51 @time :wait
-    * jump *label12 equal *tmp51 false
+   99 jump *label12 greaterThanEq @time :wait
   100 op add :loops :loops 1
   101 label *label11
   102 jump *label10 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    48 jump *label6 lessThanEq :start :wait
    49 print "Wait reset\n"
    50 op add :wait :start .DELAY
-    * jump *label7 always
    51 label *label6
    52 label *label7
    53 read :shipped .BANK .IND_SHIPPED

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
    68 write @time .BANK *tmp42
    69 op add *tmp45 :index 1
    70 op mod :index *tmp45 .SAMPLES
-    * op mul *tmp47 60000 :flow_rate
-    * op floor :flow_rate_str *tmp47
+   71 op idiv :flow_rate_str :flow_rate 0.000016666666666666667
    72 op div :seconds .MILLIS 1000
    73 op sub :elapsed @time :start
    74 print "Measured interval: "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 set .IND_SESSION_KEY 509
     5 set .IND_TIME 508
     6 set .IND_FLOW_RATE 507
-    * op mul .TOTAL_MILLIS .DELAY .SAMPLES
+    7 op mul .TOTAL_MILLIS 1000 10
     8 set .SIGN_MILLIS null
     9 set .SORTER sorter1
    10 set .VAULT vault1
 
    24 label *label1
    25 jump *label0 always
    26 label *label2
-    * read :shipped .BANK .IND_SHIPPED
-    * read .MULTIPLIER .BANK .IND_MULTIPLIER
-    * read .SESSION_KEY .BANK .IND_SESSION_KEY
+   27 read :shipped .BANK 511
+   28 read .MULTIPLIER .BANK 510
+   29 read .SESSION_KEY .BANK 509
    30 sensor :item .SORTER @config
    31 set :last_total :shipped
    32 set :index 0
 
    39 sensor *tmp15 .VAULT @dead
    40 op strictEqual *tmp16 *tmp15 0
    41 op land *tmp17 *tmp14 *tmp16
-    * read *tmp19 .BANK .IND_SESSION_KEY
+   42 read *tmp19 .BANK 509
    43 op strictEqual *tmp20 .SESSION_KEY *tmp19
    44 op land *tmp21 *tmp17 *tmp20
    45 jump *label5 equal *tmp21 false
    46 set :start @time
-    * op add :wait :wait .DELAY
+   47 op add :wait :wait 1000
    48 jump *label6 lessThanEq :start :wait
    49 print "Wait reset\n"
-    * op add :wait :start .DELAY
+   50 op add :wait :start 1000
    51 label *label6
    52 label *label7
-    * read :shipped .BANK .IND_SHIPPED
+   53 read :shipped .BANK 511
    54 sensor :item .SORTER @config
-    * op add :total :level :shipped
-    * jump *label8 greaterThanEq .MILLIS .TOTAL_MILLIS
-    * op add .MILLIS .MILLIS .DELAY
+   55 op add :total 0 :shipped
+   56 jump *label8 greaterThanEq .MILLIS 10000
+   57 op add .MILLIS .MILLIS 1000
    58 op mul .SIGN_MILLIS .MULTIPLIER .MILLIS
    59 jump *label9 always
    60 label *label8
 
    63 write :total .BANK :index
    64 op sub *tmp38 :total :last_total
    65 op div :flow_rate *tmp38 .SIGN_MILLIS
-    * write :flow_rate .BANK .IND_FLOW_RATE
-    * set *tmp42 .IND_TIME
-    * write @time .BANK *tmp42
+   66 write :flow_rate .BANK 507
+   67 set *tmp42 508
+   68 write @time .BANK .IND_TIME
    69 op add *tmp45 :index 1
-    * op mod :index *tmp45 .SAMPLES
+   70 op mod :index *tmp45 10
    71 op idiv :flow_rate_str :flow_rate 0.000016666666666666667
    72 op div :seconds .MILLIS 1000
    73 op sub :elapsed @time :start
 
    79 print "\nItems shipped: "
    80 print :shipped
    81 print "\nContainer level: "
-    * print :level
+   82 print 0
    83 print "\nFlow rate: "
    84 print :flow_rate_str
    85 print "\nTotal: "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-9 instructions):
-    * set .DELAY 1000
-    * set .SAMPLES 10
-    * set .IND_SHIPPED 511
-    * set .IND_MULTIPLIER 510
-    * set .IND_SESSION_KEY 509
     0 set .IND_TIME 508
-    * set .IND_FLOW_RATE 507
-    * op mul .TOTAL_MILLIS 1000 10
     1 set .SIGN_MILLIS null
     2 set .SORTER sorter1
     3 set .VAULT vault1
 
    24 set :last_total :shipped
    25 set :index 0
    26 set .MILLIS 0
-    * set :level 0
    27 set :wait 0
    28 label *label3
    29 sensor *tmp13 .SORTER @dead
 
    56 op sub *tmp38 :total :last_total
    57 op div :flow_rate *tmp38 .SIGN_MILLIS
    58 write :flow_rate .BANK 507
-    * set *tmp42 508
-    * write @time .BANK .IND_TIME
+   59 write @time .BANK 508
    60 op add *tmp45 :index 1
    61 op mod :index *tmp45 10
    62 op idiv :flow_rate_str :flow_rate 0.000016666666666666667

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
-    * set .IND_TIME 508
     0 set .SIGN_MILLIS null
     1 set .SORTER sorter1
     2 set .VAULT vault1

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    85 set :loops 0
    86 label *label10
    87 jump *label12 greaterThanEq @time :wait
+   88 label *label13
    89 op add :loops :loops 1
    90 label *label11
-    * jump *label10 always
+   91 jump *label13 lessThan @time :wait
    92 label *label12
    93 label *label4
    94 jump *label3 always

Modifications by Replicate loop condition at line 17:1 (+5 instructions):
 
     8 op equal *tmp4 .BANK null
     9 op or *tmp5 *tmp3 *tmp4
    10 jump *label2 equal *tmp5 false
+   11 label *label14
    12 print "Missing sorter, vault or memory bank."
    13 printflush message1
    14 set .SORTER sorter1
    15 set .VAULT vault1
    16 set .BANK bank1
    17 label *label1
-    * jump *label0 always
+   18 op equal *tmp1 .SORTER null
+   19 op equal *tmp2 .VAULT null
+   20 op or *tmp3 *tmp1 *tmp2
+   21 op equal *tmp4 .BANK null
+   22 op or *tmp5 *tmp3 *tmp4
+   23 jump *label14 notEqual *tmp5 false
    24 label *label2
    25 read :shipped .BANK 511
    26 read .MULTIPLIER .BANK 510

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     2 set .VAULT vault1
     3 set .BANK bank1
     4 label *label0
-    * op equal *tmp1 .SORTER null
-    * op equal *tmp2 .VAULT null
+    5 op equal *tmp1 sorter1 null
+    6 op equal *tmp2 vault1 null
     7 op or *tmp3 *tmp1 *tmp2
-    * op equal *tmp4 .BANK null
+    8 op equal *tmp4 bank1 null
     9 op or *tmp5 *tmp3 *tmp4
    10 jump *label2 equal *tmp5 false
    11 label *label14
 
    15 set .VAULT vault1
    16 set .BANK bank1
    17 label *label1
-    * op equal *tmp1 .SORTER null
-    * op equal *tmp2 .VAULT null
+   18 op equal *tmp1 sorter1 null
+   19 op equal *tmp2 vault1 null
    20 op or *tmp3 *tmp1 *tmp2
-    * op equal *tmp4 .BANK null
+   21 op equal *tmp4 bank1 null
    22 op or *tmp5 *tmp3 *tmp4
    23 jump *label14 notEqual *tmp5 false
    24 label *label2

Modifications by Replicate loop condition at line 38:1 (+8 instructions):
 
    40 op strictEqual *tmp20 .SESSION_KEY *tmp19
    41 op land *tmp21 *tmp17 *tmp20
    42 jump *label5 equal *tmp21 false
+   43 label *label15
    44 set :start @time
    45 op add :wait :wait 1000
    46 jump *label6 lessThanEq :start :wait
 
    98 jump *label13 lessThan @time :wait
    99 label *label12
   100 label *label4
-    * jump *label3 always
+  101 sensor *tmp13 .SORTER @dead
+  102 op strictEqual *tmp14 *tmp13 0
+  103 sensor *tmp15 .VAULT @dead
+  104 op strictEqual *tmp16 *tmp15 0
+  105 op land *tmp17 *tmp14 *tmp16
+  106 read *tmp19 .BANK 509
+  107 op strictEqual *tmp20 .SESSION_KEY *tmp19
+  108 op land *tmp21 *tmp17 *tmp20
+  109 jump *label15 notEqual *tmp21 false
   110 label *label5
   111 end

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    50 label *label7
    51 read :shipped .BANK 511
    52 sensor :item .SORTER @config
-    * op add :total 0 :shipped
+   53 set :total :shipped
    54 jump *label8 greaterThanEq .MILLIS 10000
    55 op add .MILLIS .MILLIS 1000
    56 op mul .SIGN_MILLIS .MULTIPLIER .MILLIS

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    58 label *label8
    59 read :last_total .BANK :index
    60 label *label9
-    * write :total .BANK :index
-    * op sub *tmp38 :total :last_total
+   61 write :shipped .BANK :index
+   62 op sub *tmp38 :shipped :last_total
    63 op div :flow_rate *tmp38 .SIGN_MILLIS
    64 write :flow_rate .BANK 507
    65 write @time .BANK 508
 
    80 print "\nFlow rate: "
    81 print :flow_rate_str
    82 print "\nTotal: "
-    * print :total
+   83 print :shipped
    84 print "\nLast total: "
    85 print :last_total
    86 print "\nIndex: "

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    50 label *label7
    51 read :shipped .BANK 511
    52 sensor :item .SORTER @config
-    * set :total :shipped
    53 jump *label8 greaterThanEq .MILLIS 10000
    54 op add .MILLIS .MILLIS 1000
    55 op mul .SIGN_MILLIS .MULTIPLIER .MILLIS

Modifications by Final phase, Jump Threading, iteration 1:
+    0 label __start__
     1 set .SIGN_MILLIS null
     2 set .SORTER sorter1
     3 set .VAULT vault1
 
    40 read *tmp19 .BANK 509
    41 op strictEqual *tmp20 .SESSION_KEY *tmp19
    42 op land *tmp21 *tmp17 *tmp20
-    * jump *label5 equal *tmp21 false
+   43 jump __start__ equal *tmp21 false
    44 label *label15
    45 set :start @time
    46 op add :wait :wait 1000

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
   108 op land *tmp21 *tmp17 *tmp20
   109 jump *label15 notEqual *tmp21 false
   110 label *label5
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-11 instructions):
 
    68 op idiv :flow_rate_str :flow_rate 0.000016666666666666667
    69 op div :seconds .MILLIS 1000
    70 op sub :elapsed @time :start
-    * print "Measured interval: "
-    * print :seconds
-    * print " sec"
-    * print "\nItem: "
-    * print :item
-    * print "\nItems shipped: "
-    * print :shipped
-    * print "\nContainer level: "
-    * print 0
-    * print "\nFlow rate: "
-    * print :flow_rate_str
-    * print "\nTotal: "
-    * print :shipped
-    * print "\nLast total: "
-    * print :last_total
-    * print "\nIndex: "
-    * print :index
-    * print "\nElapsed: "
-    * print :elapsed
-    * print " ms"
+   71 print "Measured interval: {0} sec\nItem: {0}\nItems shipped: {0}\nContainer level: 0\nFlow rate: {0}\nTotal: {0}\nLast total: {0}\nIndex: {0}\nElapsed: {0} ms"
+   72 format :seconds
+   73 format :item
+   74 format :shipped
+   75 format :flow_rate_str
+   76 format :shipped
+   77 format :last_total
+   78 format :index
+   79 format :elapsed
    80 printflush message1
    81 set :loops 0
    82 label *label10

Final code before resolving virtual instructions:

label __start__
set .SIGN_MILLIS null
set .SORTER sorter1
set .VAULT vault1
set .BANK bank1
op equal *tmp1 sorter1 null
op equal *tmp2 vault1 null
op or *tmp3 *tmp1 *tmp2
op equal *tmp4 bank1 null
op or *tmp5 *tmp3 *tmp4
jump *label2 equal *tmp5 false
label *label14
print "Missing sorter, vault or memory bank."
printflush message1
set .SORTER sorter1
set .VAULT vault1
set .BANK bank1
op equal *tmp1 sorter1 null
op equal *tmp2 vault1 null
op or *tmp3 *tmp1 *tmp2
op equal *tmp4 bank1 null
op or *tmp5 *tmp3 *tmp4
jump *label14 notEqual *tmp5 false
label *label2
read :shipped .BANK 511
read .MULTIPLIER .BANK 510
read .SESSION_KEY .BANK 509
sensor :item .SORTER @config
set :last_total :shipped
set :index 0
set .MILLIS 0
set :wait 0
sensor *tmp13 .SORTER @dead
op strictEqual *tmp14 *tmp13 0
sensor *tmp15 .VAULT @dead
op strictEqual *tmp16 *tmp15 0
op land *tmp17 *tmp14 *tmp16
read *tmp19 .BANK 509
op strictEqual *tmp20 .SESSION_KEY *tmp19
op land *tmp21 *tmp17 *tmp20
jump __start__ equal *tmp21 false
label *label15
set :start @time
op add :wait :wait 1000
jump *label6 lessThanEq :start :wait
print "Wait reset\n"
op add :wait :start 1000
label *label6
read :shipped .BANK 511
sensor :item .SORTER @config
jump *label8 greaterThanEq .MILLIS 10000
op add .MILLIS .MILLIS 1000
op mul .SIGN_MILLIS .MULTIPLIER .MILLIS
jump *label9 always
label *label8
read :last_total .BANK :index
label *label9
write :shipped .BANK :index
op sub *tmp38 :shipped :last_total
op div :flow_rate *tmp38 .SIGN_MILLIS
write :flow_rate .BANK 507
write @time .BANK 508
op add *tmp45 :index 1
op mod :index *tmp45 10
op idiv :flow_rate_str :flow_rate 0.000016666666666666667
op div :seconds .MILLIS 1000
op sub :elapsed @time :start
print "Measured interval: {0} sec\nItem: {0}\nItems shipped: {0}\nContainer level: 0\nFlow rate: {0}\nTotal: {0}\nLast total: {0}\nIndex: {0}\nElapsed: {0} ms"
format :seconds
format :item
format :shipped
format :flow_rate_str
format :shipped
format :last_total
format :index
format :elapsed
printflush message1
set :loops 0
jump *label12 greaterThanEq @time :wait
label *label13
op add :loops :loops 1
jump *label13 lessThan @time :wait
label *label12
sensor *tmp13 .SORTER @dead
op strictEqual *tmp14 *tmp13 0
sensor *tmp15 .VAULT @dead
op strictEqual *tmp16 *tmp15 0
op land *tmp17 *tmp14 *tmp16
read *tmp19 .BANK 509
op strictEqual *tmp20 .SESSION_KEY *tmp19
op land *tmp21 *tmp17 *tmp20
jump *label15 notEqual *tmp21 false
