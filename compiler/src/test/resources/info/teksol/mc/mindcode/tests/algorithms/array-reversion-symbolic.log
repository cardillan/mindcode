   116 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination (7 iterations).
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     5 instructions eliminated by Jump Normalization (6 iterations).
     1 instructions eliminated by Jump Optimization (6 iterations).
    17 instructions eliminated by Single Step Elimination (3 passes, 18 iterations).
   200 instructions eliminated by Expression Optimization (4 iterations).
    75 instructions eliminated by Data Flow Optimization (4 passes, 35 iterations).
     1 instructions eliminated by Loop Optimization (4 iterations).
     1 loops improved by Loop Optimization.
   213 instructions added by Loop Unrolling (8 iterations).
     2 loops unrolled by Loop Unrolling.
     7 instructions added by Array Optimization (8 iterations).
    11 jump tables inlined by Array Optimization.
     9 instructions eliminated by Print Merging.
     3 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 894):
    Inline compact jump table of array 'array'                   size    -3, benefit       52.5, efficiency   Infinity
    Inline 'array' write access at line 7:9                      size   +17, benefit       52.5, efficiency      3.088
    Unroll loop at line 6:5                                      size    +2, benefit      500.0, efficiency    250.000
  * Unroll iteration loop at line 18:5                           size   -39, benefit       69.0, efficiency   Infinity (-29 instructions)

Pass 1: speed optimization selection (cost limit 923):
  * Inline compact jump table of array 'array'                   size    -3, benefit       52.5, efficiency   Infinity (-4 instructions)
    Inline 'array' write access at line 7:9                      size   +17, benefit       52.5, efficiency      3.088
    Unroll loop at line 6:5                                      size    +2, benefit      500.0, efficiency    250.000

Pass 1: speed optimization selection (cost limit 927):
  * Unroll loop at line 6:5                                      size   -15, benefit      500.0, efficiency   Infinity (+195 instructions)

Pass 1: speed optimization selection (cost limit 732):
  * Promote compact array 'array'                                size   -10, benefit       10.0, efficiency   Infinity (-10 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    80 op lessThan *tmp4 :reverse:count 0
    81 jump *label17 equal *tmp4 false
    82 jump *label6 always
-    * set *tmp5 null
    83 jump *label18 always
    84 label *label17
-    * set *tmp5 null
    85 label *label18
    86 set :reverse:t :reverse:i
    87 set :reverse:i :reverse:j

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
     0 set :i 0
     1 label *label0
     2 jump *label2 greaterThanEq :i 10
-    * set *tmp0 :i
-    * writearr<internal:compact> :i .array[] *tmp0
+    3 writearr<internal:compact:src> :i .array[] :i
     4 label *label1
     5 op add :i :i 1
     6 jump *label0 always
     7 label *label2
     8 # "Function: inline void reverse(in array...)"
-    * op idiv *tmp2 10 2
-    * set :reverse:count *tmp2
+    9 op idiv :reverse:count 10 2
    10 set :reverse:i .array*0
    11 set :reverse:j .array*9
    12 op add *tmp3 @counter 1

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    75 set *tmp3 null
    76 label *label4
    77 op sub :reverse:count :reverse:count 1
-    * op lessThan *tmp4 :reverse:count 0
-    * jump *label17 equal *tmp4 false
+   78 jump *label17 greaterThanEq :reverse:count 0
    79 jump *label6 always
    80 jump *label18 always
    81 label *label17

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    77 op sub :reverse:count :reverse:count 1
    78 jump *label17 greaterThanEq :reverse:count 0
    79 jump *label6 always
-    * jump *label18 always
    80 label *label17
    81 label *label18
    82 set :reverse:t :reverse:i

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    13 jump *label4 always
    14 multilabel *label7 (m:marker0)
    15 set .array*0 :reverse:i
-    * set .array*9 :reverse:j
+   16 set .array*9 :reverse:t
    17 set :reverse:i .array*1
    18 set :reverse:j .array*8
    19 op add *tmp3 @counter 1
    20 jump *label4 always
    21 multilabel *label8 (m:marker0)
    22 set .array*1 :reverse:i
-    * set .array*8 :reverse:j
+   23 set .array*8 :reverse:t
    24 set :reverse:i .array*2
    25 set :reverse:j .array*7
    26 op add *tmp3 @counter 1
    27 jump *label4 always
    28 multilabel *label9 (m:marker0)
    29 set .array*2 :reverse:i
-    * set .array*7 :reverse:j
+   30 set .array*7 :reverse:t
    31 set :reverse:i .array*3
    32 set :reverse:j .array*6
    33 op add *tmp3 @counter 1
    34 jump *label4 always
    35 multilabel *label10 (m:marker0)
    36 set .array*3 :reverse:i
-    * set .array*6 :reverse:j
+   37 set .array*6 :reverse:t
    38 set :reverse:i .array*4
    39 set :reverse:j .array*5
    40 op add *tmp3 @counter 1
    41 jump *label4 always
    42 multilabel *label11 (m:marker0)
    43 set .array*4 :reverse:i
-    * set .array*5 :reverse:j
+   44 set .array*5 :reverse:t
    45 set :reverse:i .array*5
    46 set :reverse:j .array*4
    47 op add *tmp3 @counter 1
    48 jump *label4 always
    49 multilabel *label12 (m:marker0)
    50 set .array*5 :reverse:i
-    * set .array*4 :reverse:j
+   51 set .array*4 :reverse:t
    52 set :reverse:i .array*6
    53 set :reverse:j .array*3
    54 op add *tmp3 @counter 1
    55 jump *label4 always
    56 multilabel *label13 (m:marker0)
    57 set .array*6 :reverse:i
-    * set .array*3 :reverse:j
+   58 set .array*3 :reverse:t
    59 set :reverse:i .array*7
    60 set :reverse:j .array*2
    61 op add *tmp3 @counter 1
    62 jump *label4 always
    63 multilabel *label14 (m:marker0)
    64 set .array*7 :reverse:i
-    * set .array*2 :reverse:j
+   65 set .array*2 :reverse:t
    66 set :reverse:i .array*8
    67 set :reverse:j .array*1
    68 op add *tmp3 @counter 1
    69 jump *label4 always
    70 multilabel *label15 (m:marker0)
    71 set .array*8 :reverse:i
-    * set .array*1 :reverse:j
+   72 set .array*1 :reverse:t
    73 set :reverse:i .array*9
    74 set :reverse:j .array*0
    75 set *tmp3 null
 
    86 multijump *tmp3 0 0 (m:marker0)
    87 multilabel *label16 (m:marker0)
    88 set .array*9 :reverse:i
-    * set .array*0 :reverse:j
+   89 set .array*0 :reverse:t
    90 label *label6
    91 label *label3
    92 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
    81 label *label18
    82 set :reverse:t :reverse:i
    83 set :reverse:i :reverse:j
-    * set :reverse:j :reverse:t
    84 label *label5
    85 multijump *tmp3 0 0 (m:marker0)
    86 multilabel *label16 (m:marker0)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
    12 op add *tmp3 @counter 1
    13 jump *label4 always
    14 multilabel *label7 (m:marker0)
-    * set .array*0 :reverse:i
+   15 set .array*0 :reverse:j
    16 set .array*9 :reverse:t
    17 set :reverse:i .array*1
    18 set :reverse:j .array*8
    19 op add *tmp3 @counter 1
    20 jump *label4 always
    21 multilabel *label8 (m:marker0)
-    * set .array*1 :reverse:i
+   22 set .array*1 :reverse:j
    23 set .array*8 :reverse:t
    24 set :reverse:i .array*2
    25 set :reverse:j .array*7
    26 op add *tmp3 @counter 1
    27 jump *label4 always
    28 multilabel *label9 (m:marker0)
-    * set .array*2 :reverse:i
+   29 set .array*2 :reverse:j
    30 set .array*7 :reverse:t
    31 set :reverse:i .array*3
    32 set :reverse:j .array*6
    33 op add *tmp3 @counter 1
    34 jump *label4 always
    35 multilabel *label10 (m:marker0)
-    * set .array*3 :reverse:i
+   36 set .array*3 :reverse:j
    37 set .array*6 :reverse:t
    38 set :reverse:i .array*4
    39 set :reverse:j .array*5
    40 op add *tmp3 @counter 1
    41 jump *label4 always
    42 multilabel *label11 (m:marker0)
-    * set .array*4 :reverse:i
+   43 set .array*4 :reverse:j
    44 set .array*5 :reverse:t
    45 set :reverse:i .array*5
    46 set :reverse:j .array*4
    47 op add *tmp3 @counter 1
    48 jump *label4 always
    49 multilabel *label12 (m:marker0)
-    * set .array*5 :reverse:i
+   50 set .array*5 :reverse:j
    51 set .array*4 :reverse:t
    52 set :reverse:i .array*6
    53 set :reverse:j .array*3
    54 op add *tmp3 @counter 1
    55 jump *label4 always
    56 multilabel *label13 (m:marker0)
-    * set .array*6 :reverse:i
+   57 set .array*6 :reverse:j
    58 set .array*3 :reverse:t
    59 set :reverse:i .array*7
    60 set :reverse:j .array*2
    61 op add *tmp3 @counter 1
    62 jump *label4 always
    63 multilabel *label14 (m:marker0)
-    * set .array*7 :reverse:i
+   64 set .array*7 :reverse:j
    65 set .array*2 :reverse:t
    66 set :reverse:i .array*8
    67 set :reverse:j .array*1
    68 op add *tmp3 @counter 1
    69 jump *label4 always
    70 multilabel *label15 (m:marker0)
-    * set .array*8 :reverse:i
+   71 set .array*8 :reverse:j
    72 set .array*1 :reverse:t
    73 set :reverse:i .array*9
    74 set :reverse:j .array*0
 
    84 label *label5
    85 multijump *tmp3 0 0 (m:marker0)
    86 multilabel *label16 (m:marker0)
-    * set .array*9 :reverse:i
+   87 set .array*9 :reverse:j
    88 set .array*0 :reverse:t
    89 label *label6
    90 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    80 label *label17
    81 label *label18
    82 set :reverse:t :reverse:i
-    * set :reverse:i :reverse:j
    83 label *label5
    84 multijump *tmp3 0 0 (m:marker0)
    85 multilabel *label16 (m:marker0)

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5:
 
    13 jump *label4 always
    14 multilabel *label7 (m:marker0)
    15 set .array*0 :reverse:j
-    * set .array*9 :reverse:t
+   16 set .array*9 :reverse:i
    17 set :reverse:i .array*1
    18 set :reverse:j .array*8
    19 op add *tmp3 @counter 1
    20 jump *label4 always
    21 multilabel *label8 (m:marker0)
    22 set .array*1 :reverse:j
-    * set .array*8 :reverse:t
+   23 set .array*8 :reverse:i
    24 set :reverse:i .array*2
    25 set :reverse:j .array*7
    26 op add *tmp3 @counter 1
    27 jump *label4 always
    28 multilabel *label9 (m:marker0)
    29 set .array*2 :reverse:j
-    * set .array*7 :reverse:t
+   30 set .array*7 :reverse:i
    31 set :reverse:i .array*3
    32 set :reverse:j .array*6
    33 op add *tmp3 @counter 1
    34 jump *label4 always
    35 multilabel *label10 (m:marker0)
    36 set .array*3 :reverse:j
-    * set .array*6 :reverse:t
+   37 set .array*6 :reverse:i
    38 set :reverse:i .array*4
    39 set :reverse:j .array*5
    40 op add *tmp3 @counter 1
    41 jump *label4 always
    42 multilabel *label11 (m:marker0)
    43 set .array*4 :reverse:j
-    * set .array*5 :reverse:t
+   44 set .array*5 :reverse:i
    45 set :reverse:i .array*5
    46 set :reverse:j .array*4
    47 op add *tmp3 @counter 1
    48 jump *label4 always
    49 multilabel *label12 (m:marker0)
    50 set .array*5 :reverse:j
-    * set .array*4 :reverse:t
+   51 set .array*4 :reverse:i
    52 set :reverse:i .array*6
    53 set :reverse:j .array*3
    54 op add *tmp3 @counter 1
    55 jump *label4 always
    56 multilabel *label13 (m:marker0)
    57 set .array*6 :reverse:j
-    * set .array*3 :reverse:t
+   58 set .array*3 :reverse:i
    59 set :reverse:i .array*7
    60 set :reverse:j .array*2
    61 op add *tmp3 @counter 1
    62 jump *label4 always
    63 multilabel *label14 (m:marker0)
    64 set .array*7 :reverse:j
-    * set .array*2 :reverse:t
+   65 set .array*2 :reverse:i
    66 set :reverse:i .array*8
    67 set :reverse:j .array*1
    68 op add *tmp3 @counter 1
    69 jump *label4 always
    70 multilabel *label15 (m:marker0)
    71 set .array*8 :reverse:j
-    * set .array*1 :reverse:t
+   72 set .array*1 :reverse:i
    73 set :reverse:i .array*9
    74 set :reverse:j .array*0
    75 set *tmp3 null
 
    84 multijump *tmp3 0 0 (m:marker0)
    85 multilabel *label16 (m:marker0)
    86 set .array*9 :reverse:j
-    * set .array*0 :reverse:t
+   87 set .array*0 :reverse:i
    88 label *label6
    89 label *label3
    90 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 6 (-1 instructions):
 
    79 jump *label6 always
    80 label *label17
    81 label *label18
-    * set :reverse:t :reverse:i
    82 label *label5
    83 multijump *tmp3 0 0 (m:marker0)
    84 multilabel *label16 (m:marker0)

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :i 0
     1 label *label0
-    * jump *label2 greaterThanEq :i 10
+    2 label *label19
     3 writearr<internal:compact:src> :i .array[] :i
     4 label *label1
     5 op add :i :i 1
-    * jump *label0 always
+    6 jump *label19 lessThan :i 10
     7 label *label2
     8 # "Function: inline void reverse(in array...)"
     9 op idiv :reverse:count 10 2

Modifications by Unroll iteration loop at line 18:5 (+7 instructions):
 
     7 label *label2
     8 # "Function: inline void reverse(in array...)"
     9 op idiv :reverse:count 10 2
-    * set :reverse:i .array*0
-    * set :reverse:j .array*9
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label7 (m:marker0)
-    * set .array*0 :reverse:j
-    * set .array*9 :reverse:i
-    * set :reverse:i .array*1
-    * set :reverse:j .array*8
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label8 (m:marker0)
-    * set .array*1 :reverse:j
-    * set .array*8 :reverse:i
-    * set :reverse:i .array*2
-    * set :reverse:j .array*7
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label9 (m:marker0)
-    * set .array*2 :reverse:j
-    * set .array*7 :reverse:i
-    * set :reverse:i .array*3
-    * set :reverse:j .array*6
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label10 (m:marker0)
-    * set .array*3 :reverse:j
-    * set .array*6 :reverse:i
-    * set :reverse:i .array*4
-    * set :reverse:j .array*5
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label11 (m:marker0)
-    * set .array*4 :reverse:j
-    * set .array*5 :reverse:i
-    * set :reverse:i .array*5
-    * set :reverse:j .array*4
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label12 (m:marker0)
-    * set .array*5 :reverse:j
-    * set .array*4 :reverse:i
-    * set :reverse:i .array*6
-    * set :reverse:j .array*3
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label13 (m:marker0)
-    * set .array*6 :reverse:j
-    * set .array*3 :reverse:i
-    * set :reverse:i .array*7
-    * set :reverse:j .array*2
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label14 (m:marker0)
-    * set .array*7 :reverse:j
-    * set .array*2 :reverse:i
-    * set :reverse:i .array*8
-    * set :reverse:j .array*1
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label15 (m:marker0)
-    * set .array*8 :reverse:j
-    * set .array*1 :reverse:i
-    * set :reverse:i .array*9
-    * set :reverse:j .array*0
-    * set *tmp3 null
-    * label *label4
-    * op sub :reverse:count :reverse:count 1
-    * jump *label17 greaterThanEq :reverse:count 0
-    * jump *label6 always
-    * label *label17
-    * label *label18
-    * label *label5
-    * multijump *tmp3 0 0 (m:marker0)
-    * multilabel *label16 (m:marker0)
-    * set .array*9 :reverse:j
-    * set .array*0 :reverse:i
-    * label *label6
+   10 set :reverse:i .array*0
+   11 set :reverse:j .array*9
+   12 label *label20
+   13 op sub :reverse:count :reverse:count 1
+   14 jump *label21 greaterThanEq :reverse:count 0
+   15 jump *label6 always
+   16 label *label21
+   17 label *label22
+   18 label *label23
+   19 set .array*0 :reverse:j
+   20 set .array*9 :reverse:i
+   21 set :reverse:i .array*1
+   22 set :reverse:j .array*8
+   23 label *label26
+   24 op sub :reverse:count :reverse:count 1
+   25 jump *label27 greaterThanEq :reverse:count 0
+   26 jump *label6 always
+   27 label *label27
+   28 label *label28
+   29 label *label29
+   30 set .array*1 :reverse:j
+   31 set .array*8 :reverse:i
+   32 set :reverse:i .array*2
+   33 set :reverse:j .array*7
+   34 label *label32
+   35 op sub :reverse:count :reverse:count 1
+   36 jump *label33 greaterThanEq :reverse:count 0
+   37 jump *label6 always
+   38 label *label33
+   39 label *label34
+   40 label *label35
+   41 set .array*2 :reverse:j
+   42 set .array*7 :reverse:i
+   43 set :reverse:i .array*3
+   44 set :reverse:j .array*6
+   45 label *label38
+   46 op sub :reverse:count :reverse:count 1
+   47 jump *label39 greaterThanEq :reverse:count 0
+   48 jump *label6 always
+   49 label *label39
+   50 label *label40
+   51 label *label41
+   52 set .array*3 :reverse:j
+   53 set .array*6 :reverse:i
+   54 set :reverse:i .array*4
+   55 set :reverse:j .array*5
+   56 label *label44
+   57 op sub :reverse:count :reverse:count 1
+   58 jump *label45 greaterThanEq :reverse:count 0
+   59 jump *label6 always
+   60 label *label45
+   61 label *label46
+   62 label *label47
+   63 set .array*4 :reverse:j
+   64 set .array*5 :reverse:i
+   65 set :reverse:i .array*5
+   66 set :reverse:j .array*4
+   67 label *label50
+   68 op sub :reverse:count :reverse:count 1
+   69 jump *label51 greaterThanEq :reverse:count 0
+   70 jump *label6 always
+   71 label *label51
+   72 label *label52
+   73 label *label53
+   74 set .array*5 :reverse:j
+   75 set .array*4 :reverse:i
+   76 set :reverse:i .array*6
+   77 set :reverse:j .array*3
+   78 label *label56
+   79 op sub :reverse:count :reverse:count 1
+   80 jump *label57 greaterThanEq :reverse:count 0
+   81 jump *label6 always
+   82 label *label57
+   83 label *label58
+   84 label *label59
+   85 set .array*6 :reverse:j
+   86 set .array*3 :reverse:i
+   87 set :reverse:i .array*7
+   88 set :reverse:j .array*2
+   89 label *label62
+   90 op sub :reverse:count :reverse:count 1
+   91 jump *label63 greaterThanEq :reverse:count 0
+   92 jump *label6 always
+   93 label *label63
+   94 label *label64
+   95 label *label65
+   96 set .array*7 :reverse:j
+   97 set .array*2 :reverse:i
+   98 set :reverse:i .array*8
+   99 set :reverse:j .array*1
+  100 label *label68
+  101 op sub :reverse:count :reverse:count 1
+  102 jump *label69 greaterThanEq :reverse:count 0
+  103 jump *label6 always
+  104 label *label69
+  105 label *label70
+  106 label *label71
+  107 set .array*8 :reverse:j
+  108 set .array*1 :reverse:i
+  109 set :reverse:i .array*9
+  110 set :reverse:j .array*0
+  111 label *label74
+  112 op sub :reverse:count :reverse:count 1
+  113 jump *label75 greaterThanEq :reverse:count 0
+  114 jump *label6 always
+  115 label *label75
+  116 label *label76
+  117 label *label77
+  118 set .array*9 :reverse:j
+  119 set .array*0 :reverse:i
+  120 label *label6
   121 label *label3
   122 assertflush
   123 print .array*0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-5 instructions):
 
    10 set :reverse:i .array*0
    11 set :reverse:j .array*9
    12 label *label20
-    * op sub :reverse:count :reverse:count 1
-    * jump *label21 greaterThanEq :reverse:count 0
+   13 op sub :reverse:count 5 1
+   14 jump *label21 greaterThanEq 4 0
    15 jump *label6 always
    16 label *label21
    17 label *label22
    18 label *label23
-    * set .array*0 :reverse:j
+   19 set .array*0 .array*9
    20 set .array*9 :reverse:i
    21 set :reverse:i .array*1
    22 set :reverse:j .array*8
    23 label *label26
-    * op sub :reverse:count :reverse:count 1
-    * jump *label27 greaterThanEq :reverse:count 0
+   24 op sub :reverse:count 4 1
+   25 jump *label27 greaterThanEq 3 0
    26 jump *label6 always
    27 label *label27
    28 label *label28
    29 label *label29
-    * set .array*1 :reverse:j
+   30 set .array*1 .array*8
    31 set .array*8 :reverse:i
    32 set :reverse:i .array*2
    33 set :reverse:j .array*7
    34 label *label32
-    * op sub :reverse:count :reverse:count 1
-    * jump *label33 greaterThanEq :reverse:count 0
+   35 op sub :reverse:count 3 1
+   36 jump *label33 greaterThanEq 2 0
    37 jump *label6 always
    38 label *label33
    39 label *label34
    40 label *label35
-    * set .array*2 :reverse:j
+   41 set .array*2 .array*7
    42 set .array*7 :reverse:i
    43 set :reverse:i .array*3
    44 set :reverse:j .array*6
    45 label *label38
-    * op sub :reverse:count :reverse:count 1
-    * jump *label39 greaterThanEq :reverse:count 0
+   46 op sub :reverse:count 2 1
+   47 jump *label39 greaterThanEq 1 0
    48 jump *label6 always
    49 label *label39
    50 label *label40
    51 label *label41
-    * set .array*3 :reverse:j
+   52 set .array*3 .array*6
    53 set .array*6 :reverse:i
    54 set :reverse:i .array*4
    55 set :reverse:j .array*5
    56 label *label44
-    * op sub :reverse:count :reverse:count 1
-    * jump *label45 greaterThanEq :reverse:count 0
+   57 op sub :reverse:count 1 1
+   58 jump *label45 greaterThanEq 0 0
    59 jump *label6 always
    60 label *label45
    61 label *label46
    62 label *label47
-    * set .array*4 :reverse:j
+   63 set .array*4 .array*5
    64 set .array*5 :reverse:i
-    * set :reverse:i .array*5
-    * set :reverse:j .array*4
+   65 set :reverse:i :reverse:i
+   66 set :reverse:j :reverse:j
    67 label *label50
-    * op sub :reverse:count :reverse:count 1
-    * jump *label51 greaterThanEq :reverse:count 0
+   68 op sub :reverse:count 0 1
+   69 jump *label51 greaterThanEq -1 0
    70 jump *label6 always
    71 label *label51
    72 label *label52
    73 label *label53
-    * set .array*5 :reverse:j
-    * set .array*4 :reverse:i
+   74 set .array*5 .array*4
    75 set :reverse:i .array*6
    76 set :reverse:j .array*3
    77 label *label56
-    * op sub :reverse:count :reverse:count 1
-    * jump *label57 greaterThanEq :reverse:count 0
+   78 op sub :reverse:count -1 1
+   79 jump *label57 greaterThanEq -2 0
    80 jump *label6 always
    81 label *label57
    82 label *label58
    83 label *label59
-    * set .array*6 :reverse:j
-    * set .array*3 :reverse:i
+   84 set .array*6 .array*3
    85 set :reverse:i .array*7
    86 set :reverse:j .array*2
    87 label *label62
-    * op sub :reverse:count :reverse:count 1
-    * jump *label63 greaterThanEq :reverse:count 0
+   88 op sub :reverse:count -2 1
+   89 jump *label63 greaterThanEq -3 0
    90 jump *label6 always
    91 label *label63
    92 label *label64
    93 label *label65
-    * set .array*7 :reverse:j
-    * set .array*2 :reverse:i
+   94 set .array*7 .array*2
    95 set :reverse:i .array*8
    96 set :reverse:j .array*1
    97 label *label68
-    * op sub :reverse:count :reverse:count 1
-    * jump *label69 greaterThanEq :reverse:count 0
+   98 op sub :reverse:count -3 1
+   99 jump *label69 greaterThanEq -4 0
   100 jump *label6 always
   101 label *label69
   102 label *label70
   103 label *label71
-    * set .array*8 :reverse:j
-    * set .array*1 :reverse:i
+  104 set .array*8 .array*1
   105 set :reverse:i .array*9
   106 set :reverse:j .array*0
   107 label *label74
-    * op sub :reverse:count :reverse:count 1
-    * jump *label75 greaterThanEq :reverse:count 0
+  108 op sub :reverse:count -4 1
+  109 jump *label75 greaterThanEq -5 0
   110 jump *label6 always
   111 label *label75
   112 label *label76
   113 label *label77
-    * set .array*9 :reverse:j
-    * set .array*0 :reverse:i
+  114 set .array*9 .array*0
   115 label *label6
   116 label *label3
   117 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-30 instructions):
 
     6 jump *label19 lessThan :i 10
     7 label *label2
     8 # "Function: inline void reverse(in array...)"
-    * op idiv :reverse:count 10 2
     9 set :reverse:i .array*0
-    * set :reverse:j .array*9
    10 label *label20
-    * op sub :reverse:count 5 1
    11 jump *label21 greaterThanEq 4 0
    12 jump *label6 always
    13 label *label21
 
    16 set .array*0 .array*9
    17 set .array*9 :reverse:i
    18 set :reverse:i .array*1
-    * set :reverse:j .array*8
    19 label *label26
-    * op sub :reverse:count 4 1
    20 jump *label27 greaterThanEq 3 0
    21 jump *label6 always
    22 label *label27
 
    25 set .array*1 .array*8
    26 set .array*8 :reverse:i
    27 set :reverse:i .array*2
-    * set :reverse:j .array*7
    28 label *label32
-    * op sub :reverse:count 3 1
    29 jump *label33 greaterThanEq 2 0
    30 jump *label6 always
    31 label *label33
 
    34 set .array*2 .array*7
    35 set .array*7 :reverse:i
    36 set :reverse:i .array*3
-    * set :reverse:j .array*6
    37 label *label38
-    * op sub :reverse:count 2 1
    38 jump *label39 greaterThanEq 1 0
    39 jump *label6 always
    40 label *label39
 
    45 set :reverse:i .array*4
    46 set :reverse:j .array*5
    47 label *label44
-    * op sub :reverse:count 1 1
    48 jump *label45 greaterThanEq 0 0
    49 jump *label6 always
    50 label *label45
 
    52 label *label47
    53 set .array*4 .array*5
    54 set .array*5 :reverse:i
-    * set :reverse:i :reverse:i
-    * set :reverse:j :reverse:j
    55 label *label50
-    * op sub :reverse:count 0 1
    56 jump *label51 greaterThanEq -1 0
    57 jump *label6 always
    58 label *label51
    59 label *label52
    60 label *label53
-    * set .array*5 .array*4
-    * set :reverse:i .array*6
-    * set :reverse:j .array*3
    61 label *label56
-    * op sub :reverse:count -1 1
    62 jump *label57 greaterThanEq -2 0
    63 jump *label6 always
    64 label *label57
    65 label *label58
    66 label *label59
-    * set .array*6 .array*3
-    * set :reverse:i .array*7
-    * set :reverse:j .array*2
    67 label *label62
-    * op sub :reverse:count -2 1
    68 jump *label63 greaterThanEq -3 0
    69 jump *label6 always
    70 label *label63
    71 label *label64
    72 label *label65
-    * set .array*7 .array*2
-    * set :reverse:i .array*8
-    * set :reverse:j .array*1
    73 label *label68
-    * op sub :reverse:count -3 1
    74 jump *label69 greaterThanEq -4 0
    75 jump *label6 always
    76 label *label69
    77 label *label70
    78 label *label71
-    * set .array*8 .array*1
-    * set :reverse:i .array*9
-    * set :reverse:j .array*0
    79 label *label74
-    * op sub :reverse:count -4 1
    80 jump *label75 greaterThanEq -5 0
    81 jump *label6 always
    82 label *label75
    83 label *label76
    84 label *label77
-    * set .array*9 .array*0
    85 label *label6
    86 label *label3
    87 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
 
    43 set .array*3 .array*6
    44 set .array*6 :reverse:i
    45 set :reverse:i .array*4
-    * set :reverse:j .array*5
    46 label *label44
    47 jump *label45 greaterThanEq 0 0
    48 jump *label6 always
 
    89 print .array*2
    90 print .array*3
    91 print .array*4
-    * print .array*5
+   92 print :reverse:i
    93 print .array*6
    94 print .array*7
    95 print .array*8

Modifications by Inline compact jump table of array 'array' (-4 instructions):
     0 set :i 0
     1 label *label0
     2 label *label19
-    * writearr<internal:compact:src> :i .array[] :i
+    3 writearr<inlined:compact:src> :i .array[] :i
     4 label *label1
     5 op add :i :i 1
     6 jump *label19 lessThan :i 10

Modifications by Unroll loop at line 6:5 (+206 instructions):
-    * set :i 0
-    * label *label0
-    * label *label19
-    * writearr<inlined:compact:src> :i .array[] :i
-    * label *label1
-    * op add :i :i 1
-    * jump *label19 lessThan :i 10
-    * label *label2
+    0 set :i 0
+    1 label *label81
+    2 label *label82
+    3 writearr<inlined:compact> :i .array[] :i
+    4 label *label83
+    5 op add :i :i 1
+    6 label *label84
+    7 writearr<inlined:compact> :i .array[] :i
+    8 label *label85
+    9 op add :i :i 1
+   10 label *label86
+   11 writearr<inlined:compact> :i .array[] :i
+   12 label *label87
+   13 op add :i :i 1
+   14 label *label88
+   15 writearr<inlined:compact> :i .array[] :i
+   16 label *label89
+   17 op add :i :i 1
+   18 label *label90
+   19 writearr<inlined:compact> :i .array[] :i
+   20 label *label91
+   21 op add :i :i 1
+   22 label *label92
+   23 writearr<inlined:compact> :i .array[] :i
+   24 label *label93
+   25 op add :i :i 1
+   26 label *label94
+   27 writearr<inlined:compact> :i .array[] :i
+   28 label *label95
+   29 op add :i :i 1
+   30 label *label96
+   31 writearr<inlined:compact> :i .array[] :i
+   32 label *label97
+   33 op add :i :i 1
+   34 label *label98
+   35 writearr<inlined:compact> :i .array[] :i
+   36 label *label99
+   37 op add :i :i 1
+   38 label *label100
+   39 writearr<inlined:compact> :i .array[] :i
+   40 label *label101
+   41 op add :i :i 1
+   42 label *label2
    43 # "Function: inline void reverse(in array...)"
    44 set :reverse:i .array*0
    45 label *label20

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
     0 set :i 0
     1 label *label81
     2 label *label82
-    * writearr<inlined:compact> :i .array[] :i
+    3 writearr<inlined:compact> 0 .array[] 0
     4 label *label83
-    * op add :i :i 1
+    5 op add :i 0 1
     6 label *label84
-    * writearr<inlined:compact> :i .array[] :i
+    7 writearr<inlined:compact> 1 .array[] 1
     8 label *label85
-    * op add :i :i 1
+    9 op add :i 1 1
    10 label *label86
-    * writearr<inlined:compact> :i .array[] :i
+   11 writearr<inlined:compact> 2 .array[] 2
    12 label *label87
-    * op add :i :i 1
+   13 op add :i 2 1
    14 label *label88
-    * writearr<inlined:compact> :i .array[] :i
+   15 writearr<inlined:compact> 3 .array[] 3
    16 label *label89
-    * op add :i :i 1
+   17 op add :i 3 1
    18 label *label90
-    * writearr<inlined:compact> :i .array[] :i
+   19 writearr<inlined:compact> 4 .array[] 4
    20 label *label91
-    * op add :i :i 1
+   21 op add :i 4 1
    22 label *label92
-    * writearr<inlined:compact> :i .array[] :i
+   23 writearr<inlined:compact> 5 .array[] 5
    24 label *label93
-    * op add :i :i 1
+   25 op add :i 5 1
    26 label *label94
-    * writearr<inlined:compact> :i .array[] :i
+   27 writearr<inlined:compact> 6 .array[] 6
    28 label *label95
-    * op add :i :i 1
+   29 op add :i 6 1
    30 label *label96
-    * writearr<inlined:compact> :i .array[] :i
+   31 writearr<inlined:compact> 7 .array[] 7
    32 label *label97
-    * op add :i :i 1
+   33 op add :i 7 1
    34 label *label98
-    * writearr<inlined:compact> :i .array[] :i
+   35 writearr<inlined:compact> 8 .array[] 8
    36 label *label99
-    * op add :i :i 1
+   37 op add :i 8 1
    38 label *label100
-    * writearr<inlined:compact> :i .array[] :i
+   39 writearr<inlined:compact> 9 .array[] 9
    40 label *label101
-    * op add :i :i 1
+   41 op add :i 9 1
    42 label *label2
    43 # "Function: inline void reverse(in array...)"
    44 set :reverse:i .array*0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
-    * set :i 0
     0 label *label81
     1 label *label82
     2 writearr<inlined:compact> 0 .array[] 0
     3 label *label83
-    * op add :i 0 1
     4 label *label84
     5 writearr<inlined:compact> 1 .array[] 1
     6 label *label85
-    * op add :i 1 1
     7 label *label86
     8 writearr<inlined:compact> 2 .array[] 2
     9 label *label87
-    * op add :i 2 1
    10 label *label88
    11 writearr<inlined:compact> 3 .array[] 3
    12 label *label89
-    * op add :i 3 1
    13 label *label90
    14 writearr<inlined:compact> 4 .array[] 4
    15 label *label91
-    * op add :i 4 1
    16 label *label92
    17 writearr<inlined:compact> 5 .array[] 5
    18 label *label93
-    * op add :i 5 1
    19 label *label94
    20 writearr<inlined:compact> 6 .array[] 6
    21 label *label95
-    * op add :i 6 1
    22 label *label96
    23 writearr<inlined:compact> 7 .array[] 7
    24 label *label97
-    * op add :i 7 1
    25 label *label98
    26 writearr<inlined:compact> 8 .array[] 8
    27 label *label99
-    * op add :i 8 1
    28 label *label100
    29 writearr<inlined:compact> 9 .array[] 9
    30 label *label101
-    * op add :i 9 1
    31 label *label2
    32 # "Function: inline void reverse(in array...)"
    33 set :reverse:i .array*0

Modifications by Promote compact array 'array' (-10 instructions):
     0 label *label81
     1 label *label82
-    * writearr<inlined:compact> 0 .array[] 0
+    2 writearr<inlined:regular> 0 .array[] 0
     3 label *label83
     4 label *label84
-    * writearr<inlined:compact> 1 .array[] 1
+    5 writearr<inlined:regular> 1 .array[] 1
     6 label *label85
     7 label *label86
-    * writearr<inlined:compact> 2 .array[] 2
+    8 writearr<inlined:regular> 2 .array[] 2
     9 label *label87
    10 label *label88
-    * writearr<inlined:compact> 3 .array[] 3
+   11 writearr<inlined:regular> 3 .array[] 3
    12 label *label89
    13 label *label90
-    * writearr<inlined:compact> 4 .array[] 4
+   14 writearr<inlined:regular> 4 .array[] 4
    15 label *label91
    16 label *label92
-    * writearr<inlined:compact> 5 .array[] 5
+   17 writearr<inlined:regular> 5 .array[] 5
    18 label *label93
    19 label *label94
-    * writearr<inlined:compact> 6 .array[] 6
+   20 writearr<inlined:regular> 6 .array[] 6
    21 label *label95
    22 label *label96
-    * writearr<inlined:compact> 7 .array[] 7
+   23 writearr<inlined:regular> 7 .array[] 7
    24 label *label97
    25 label *label98
-    * writearr<inlined:compact> 8 .array[] 8
+   26 writearr<inlined:regular> 8 .array[] 8
    27 label *label99
    28 label *label100
-    * writearr<inlined:compact> 9 .array[] 9
+   29 writearr<inlined:regular> 9 .array[] 9
    30 label *label101
    31 label *label2
    32 # "Function: inline void reverse(in array...)"

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-5 instructions):
 
    32 # "Function: inline void reverse(in array...)"
    33 set :reverse:i .array*0
    34 label *label20
-    * jump *label21 greaterThanEq 4 0
+   35 jump *label21 always
    36 jump *label6 always
    37 label *label21
    38 label *label22
 
    41 set .array*9 :reverse:i
    42 set :reverse:i .array*1
    43 label *label26
-    * jump *label27 greaterThanEq 3 0
+   44 jump *label27 always
    45 jump *label6 always
    46 label *label27
    47 label *label28
 
    50 set .array*8 :reverse:i
    51 set :reverse:i .array*2
    52 label *label32
-    * jump *label33 greaterThanEq 2 0
+   53 jump *label33 always
    54 jump *label6 always
    55 label *label33
    56 label *label34
 
    59 set .array*7 :reverse:i
    60 set :reverse:i .array*3
    61 label *label38
-    * jump *label39 greaterThanEq 1 0
+   62 jump *label39 always
    63 jump *label6 always
    64 label *label39
    65 label *label40
 
    68 set .array*6 :reverse:i
    69 set :reverse:i .array*4
    70 label *label44
-    * jump *label45 greaterThanEq 0 0
+   71 jump *label45 always
    72 jump *label6 always
    73 label *label45
    74 label *label46
 
    76 set .array*4 .array*5
    77 set .array*5 :reverse:i
    78 label *label50
-    * jump *label51 greaterThanEq -1 0
    79 jump *label6 always
    80 label *label51
    81 label *label52
    82 label *label53
    83 label *label56
-    * jump *label57 greaterThanEq -2 0
    84 jump *label6 always
    85 label *label57
    86 label *label58
    87 label *label59
    88 label *label62
-    * jump *label63 greaterThanEq -3 0
    89 jump *label6 always
    90 label *label63
    91 label *label64
    92 label *label65
    93 label *label68
-    * jump *label69 greaterThanEq -4 0
    94 jump *label6 always
    95 label *label69
    96 label *label70
    97 label *label71
    98 label *label74
-    * jump *label75 greaterThanEq -5 0
    99 jump *label6 always
   100 label *label75
   101 label *label76

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1 (-200 instructions):
     0 label *label81
     1 label *label82
-    * writearr<inlined:regular> 0 .array[] 0
+    2 set .array*0 0
     3 label *label83
     4 label *label84
-    * writearr<inlined:regular> 1 .array[] 1
+    5 set .array*1 1
     6 label *label85
     7 label *label86
-    * writearr<inlined:regular> 2 .array[] 2
+    8 set .array*2 2
     9 label *label87
    10 label *label88
-    * writearr<inlined:regular> 3 .array[] 3
+   11 set .array*3 3
    12 label *label89
    13 label *label90
-    * writearr<inlined:regular> 4 .array[] 4
+   14 set .array*4 4
    15 label *label91
    16 label *label92
-    * writearr<inlined:regular> 5 .array[] 5
+   17 set .array*5 5
    18 label *label93
    19 label *label94
-    * writearr<inlined:regular> 6 .array[] 6
+   20 set .array*6 6
    21 label *label95
    22 label *label96
-    * writearr<inlined:regular> 7 .array[] 7
+   23 set .array*7 7
    24 label *label97
    25 label *label98
-    * writearr<inlined:regular> 8 .array[] 8
+   26 set .array*8 8
    27 label *label99
    28 label *label100
-    * writearr<inlined:regular> 9 .array[] 9
+   29 set .array*9 9
    30 label *label101
    31 label *label2
    32 # "Function: inline void reverse(in array...)"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
     0 label *label81
     1 label *label82
-    * set .array*0 0
+    2 set :reverse:i 0
     3 label *label83
     4 label *label84
     5 set .array*1 1
 
    30 label *label101
    31 label *label2
    32 # "Function: inline void reverse(in array...)"
-    * set :reverse:i .array*0
    33 label *label20
    34 jump *label21 always
    35 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    26 set .array*8 8
    27 label *label99
    28 label *label100
-    * set .array*9 9
+   29 set .array*0 9
    30 label *label101
    31 label *label2
    32 # "Function: inline void reverse(in array...)"
 
    36 label *label21
    37 label *label22
    38 label *label23
-    * set .array*0 .array*9
    39 set .array*9 :reverse:i
    40 set :reverse:i .array*1
    41 label *label26

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-1 instructions):
     0 label *label81
     1 label *label82
-    * set :reverse:i 0
+    2 set .array*9 0
     3 label *label83
     4 label *label84
     5 set .array*1 1
 
    36 label *label21
    37 label *label22
    38 label *label23
-    * set .array*9 :reverse:i
    39 set :reverse:i .array*1
    40 label *label26
    41 jump *label27 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 4 (-1 instructions):
 
     2 set .array*9 0
     3 label *label83
     4 label *label84
-    * set .array*1 1
+    5 set :reverse:i 1
     6 label *label85
     7 label *label86
     8 set .array*2 2
 
    36 label *label21
    37 label *label22
    38 label *label23
-    * set :reverse:i .array*1
    39 label *label26
    40 jump *label27 always
    41 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 5 (-1 instructions):
 
    23 set .array*7 7
    24 label *label97
    25 label *label98
-    * set .array*8 8
+   26 set .array*1 8
    27 label *label99
    28 label *label100
    29 set .array*0 9
 
    42 label *label27
    43 label *label28
    44 label *label29
-    * set .array*1 .array*8
    45 set .array*8 :reverse:i
    46 set :reverse:i .array*2
    47 label *label32

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 6 (-1 instructions):
 
     2 set .array*9 0
     3 label *label83
     4 label *label84
-    * set :reverse:i 1
+    5 set .array*8 1
     6 label *label85
     7 label *label86
     8 set .array*2 2
 
    42 label *label27
    43 label *label28
    44 label *label29
-    * set .array*8 :reverse:i
    45 set :reverse:i .array*2
    46 label *label32
    47 jump *label33 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 7 (-1 instructions):
 
     5 set .array*8 1
     6 label *label85
     7 label *label86
-    * set .array*2 2
+    8 set :reverse:i 2
     9 label *label87
    10 label *label88
    11 set .array*3 3
 
    42 label *label27
    43 label *label28
    44 label *label29
-    * set :reverse:i .array*2
    45 label *label32
    46 jump *label33 always
    47 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 8 (-1 instructions):
 
    20 set .array*6 6
    21 label *label95
    22 label *label96
-    * set .array*7 7
+   23 set .array*2 7
    24 label *label97
    25 label *label98
    26 set .array*1 8
 
    48 label *label33
    49 label *label34
    50 label *label35
-    * set .array*2 .array*7
    51 set .array*7 :reverse:i
    52 set :reverse:i .array*3
    53 label *label38

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 9 (-1 instructions):
 
     5 set .array*8 1
     6 label *label85
     7 label *label86
-    * set :reverse:i 2
+    8 set .array*7 2
     9 label *label87
    10 label *label88
    11 set .array*3 3
 
    48 label *label33
    49 label *label34
    50 label *label35
-    * set .array*7 :reverse:i
    51 set :reverse:i .array*3
    52 label *label38
    53 jump *label39 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 10 (-1 instructions):
 
     8 set .array*7 2
     9 label *label87
    10 label *label88
-    * set .array*3 3
+   11 set :reverse:i 3
    12 label *label89
    13 label *label90
    14 set .array*4 4
 
    48 label *label33
    49 label *label34
    50 label *label35
-    * set :reverse:i .array*3
    51 label *label38
    52 jump *label39 always
    53 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 11 (-1 instructions):
 
    17 set .array*5 5
    18 label *label93
    19 label *label94
-    * set .array*6 6
+   20 set .array*3 6
    21 label *label95
    22 label *label96
    23 set .array*2 7
 
    54 label *label39
    55 label *label40
    56 label *label41
-    * set .array*3 .array*6
    57 set .array*6 :reverse:i
    58 set :reverse:i .array*4
    59 label *label44

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 12 (-1 instructions):
 
     8 set .array*7 2
     9 label *label87
    10 label *label88
-    * set :reverse:i 3
+   11 set .array*6 3
    12 label *label89
    13 label *label90
    14 set .array*4 4
 
    54 label *label39
    55 label *label40
    56 label *label41
-    * set .array*6 :reverse:i
    57 set :reverse:i .array*4
    58 label *label44
    59 jump *label45 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 13 (-1 instructions):
 
    11 set .array*6 3
    12 label *label89
    13 label *label90
-    * set .array*4 4
+   14 set :reverse:i 4
    15 label *label91
    16 label *label92
    17 set .array*5 5
 
    54 label *label39
    55 label *label40
    56 label *label41
-    * set :reverse:i .array*4
    57 label *label44
    58 jump *label45 always
    59 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 14 (-1 instructions):
 
    14 set :reverse:i 4
    15 label *label91
    16 label *label92
-    * set .array*5 5
+   17 set .array*4 5
    18 label *label93
    19 label *label94
    20 set .array*3 6
 
    60 label *label45
    61 label *label46
    62 label *label47
-    * set .array*4 .array*5
    63 set .array*5 :reverse:i
    64 label *label50
    65 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 15:
 
    60 label *label45
    61 label *label46
    62 label *label47
-    * set .array*5 :reverse:i
+   63 set .array*5 4
    64 label *label50
    65 jump *label6 always
    66 label *label51
 
    89 label *label6
    90 label *label3
    91 assertflush
-    * print .array*0
-    * print .array*1
-    * print .array*2
-    * print .array*3
-    * print .array*4
-    * print :reverse:i
-    * print .array*6
-    * print .array*7
-    * print .array*8
-    * print .array*9
+   92 print 9
+   93 print 8
+   94 print 7
+   95 print 6
+   96 print 5
+   97 print 4
+   98 print 3
+   99 print 2
+  100 print 1
+  101 print 0
   102 assertprints "9876543210" "reverse array"
   103 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 16 (-11 instructions):
     0 label *label81
     1 label *label82
-    * set .array*9 0
     2 label *label83
     3 label *label84
-    * set .array*8 1
     4 label *label85
     5 label *label86
-    * set .array*7 2
     6 label *label87
     7 label *label88
-    * set .array*6 3
     8 label *label89
     9 label *label90
-    * set :reverse:i 4
    10 label *label91
    11 label *label92
-    * set .array*4 5
    12 label *label93
    13 label *label94
-    * set .array*3 6
    14 label *label95
    15 label *label96
-    * set .array*2 7
    16 label *label97
    17 label *label98
-    * set .array*1 8
    18 label *label99
    19 label *label100
-    * set .array*0 9
    20 label *label101
    21 label *label2
    22 # "Function: inline void reverse(in array...)"
 
    50 label *label45
    51 label *label46
    52 label *label47
-    * set .array*5 4
    53 label *label50
    54 jump *label6 always
    55 label *label51

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-6 instructions):
 
    46 label *label41
    47 label *label44
    48 jump *label45 always
-    * jump *label6 always
    49 label *label45
    50 label *label46
    51 label *label47
    52 label *label50
-    * jump *label6 always
    53 label *label51
    54 label *label52
    55 label *label53
    56 label *label56
-    * jump *label6 always
    57 label *label57
    58 label *label58
    59 label *label59
    60 label *label62
-    * jump *label6 always
    61 label *label63
    62 label *label64
    63 label *label65
    64 label *label68
-    * jump *label6 always
    65 label *label69
    66 label *label70
    67 label *label71
    68 label *label74
-    * jump *label6 always
    69 label *label75
    70 label *label76
    71 label *label77

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 2 (-1 instructions):
 
    45 label *label40
    46 label *label41
    47 label *label44
-    * jump *label45 always
    48 label *label45
    49 label *label46
    50 label *label47

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 3 (-1 instructions):
 
    40 label *label35
    41 label *label38
    42 jump *label39 always
-    * jump *label6 always
    43 label *label39
    44 label *label40
    45 label *label41

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 4 (-1 instructions):
 
    39 label *label34
    40 label *label35
    41 label *label38
-    * jump *label39 always
    42 label *label39
    43 label *label40
    44 label *label41

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 5 (-1 instructions):
 
    34 label *label29
    35 label *label32
    36 jump *label33 always
-    * jump *label6 always
    37 label *label33
    38 label *label34
    39 label *label35

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 6 (-1 instructions):
 
    33 label *label28
    34 label *label29
    35 label *label32
-    * jump *label33 always
    36 label *label33
    37 label *label34
    38 label *label35

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 7 (-1 instructions):
 
    28 label *label23
    29 label *label26
    30 jump *label27 always
-    * jump *label6 always
    31 label *label27
    32 label *label28
    33 label *label29

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 8 (-1 instructions):
 
    27 label *label22
    28 label *label23
    29 label *label26
-    * jump *label27 always
    30 label *label27
    31 label *label28
    32 label *label29

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 9 (-1 instructions):
 
    22 # "Function: inline void reverse(in array...)"
    23 label *label20
    24 jump *label21 always
-    * jump *label6 always
    25 label *label21
    26 label *label22
    27 label *label23

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 10 (-1 instructions):
 
    21 label *label2
    22 # "Function: inline void reverse(in array...)"
    23 label *label20
-    * jump *label21 always
    24 label *label21
    25 label *label22
    26 label *label23

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
-    * label *label81
-    * label *label82
-    * label *label83
-    * label *label84
-    * label *label85
-    * label *label86
-    * label *label87
-    * label *label88
-    * label *label89
-    * label *label90
-    * label *label91
-    * label *label92
-    * label *label93
-    * label *label94
-    * label *label95
-    * label *label96
-    * label *label97
-    * label *label98
-    * label *label99
-    * label *label100
-    * label *label101
-    * label *label2
     0 # "Function: inline void reverse(in array...)"
-    * label *label20
-    * label *label21
-    * label *label22
-    * label *label23
-    * label *label26
-    * label *label27
-    * label *label28
-    * label *label29
-    * label *label32
-    * label *label33
-    * label *label34
-    * label *label35
-    * label *label38
-    * label *label39
-    * label *label40
-    * label *label41
-    * label *label44
-    * label *label45
-    * label *label46
-    * label *label47
-    * label *label50
-    * label *label51
-    * label *label52
-    * label *label53
-    * label *label56
-    * label *label57
-    * label *label58
-    * label *label59
-    * label *label62
-    * label *label63
-    * label *label64
-    * label *label65
-    * label *label68
-    * label *label69
-    * label *label70
-    * label *label71
-    * label *label74
-    * label *label75
-    * label *label76
-    * label *label77
-    * label *label6
-    * label *label3
     1 assertflush
     2 print 9
     3 print 8

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
    10 print 1
    11 print 0
    12 assertprints "9876543210" "reverse array"
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-9 instructions):
     0 # "Function: inline void reverse(in array...)"
     1 assertflush
-    * print 9
-    * print 8
-    * print 7
-    * print 6
-    * print 5
-    * print 4
-    * print 3
-    * print 2
-    * print 1
-    * print 0
+    2 print "9876543210"
     3 assertprints "9876543210" "reverse array"

Final code before resolving virtual instructions:

# "Function: inline void reverse(in array...)"
assertflush
print "9876543210"
assertprints "9876543210" "reverse array"
