   116 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Dead Code Elimination (3 iterations).
     5 instructions eliminated by Jump Normalization (5 iterations).
     1 instructions eliminated by Jump Optimization (5 iterations).
    17 instructions eliminated by Single Step Elimination (3 passes, 17 iterations).
    30 instructions eliminated by Expression Optimization (4 iterations).
    85 instructions eliminated by Data Flow Optimization (4 passes, 33 iterations).
     1 instructions eliminated by Loop Optimization (4 iterations).
     1 loops improved by Loop Optimization.
    59 instructions added by Loop Unrolling (6 iterations).
     2 loops unrolled by Loop Unrolling.
     9 instructions eliminated by Print Merging.
     3 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 894):
    Unroll loop at line 6:5                                      cost     3, benefit      500.0, efficiency      166.7
  * Unroll iteration loop at line 18:5                           cost     0, benefit       69.0, efficiency   Infinity (-31 instructions)

Pass 1: speed optimization selection (cost limit 925):
  * Unroll loop at line 6:5                                      cost     3, benefit      500.0, efficiency      166.7 (+33 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    82 op lessThan *tmp4 :reverse.0:count 0
    83 jump *label19 equal *tmp4 false
    84 jump *label6 always
-    * set *tmp5 null
    85 jump *label20 always
    86 label *label19
-    * set *tmp5 null
    87 label *label20
    88 set :reverse.0:t :reverse.0:i
    89 set :reverse.0:i :reverse.0:j

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
     0 set :i 0
     1 label *label0
     2 jump *label2 greaterThanEq :i 10
-    * set *tmp0 :i
-    * writearr :i .array[] *tmp0
+    3 writearr :i .array[] :i
     4 label *label1
     5 op add :i :i 1
     6 jump *label0 always
     7 label *label2
-    * op idiv *tmp2 10 2
-    * set :reverse.0:count *tmp2
+    8 op idiv :reverse.0:count 10 2
     9 set :reverse.0:i .array*0
    10 set :reverse.0:j .array*9
    11 op add *tmp3 @counter 1

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    77 jump *label18 always
    78 label *label4
    79 op sub :reverse.0:count :reverse.0:count 1
-    * op lessThan *tmp4 :reverse.0:count 0
-    * jump *label19 equal *tmp4 false
+   80 jump *label19 greaterThanEq :reverse.0:count 0
    81 jump *label6 always
    82 jump *label20 always
    83 label *label19

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    79 op sub :reverse.0:count :reverse.0:count 1
    80 jump *label19 greaterThanEq :reverse.0:count 0
    81 jump *label6 always
-    * jump *label20 always
    82 label *label19
    83 label *label20
    84 set :reverse.0:t :reverse.0:i

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    12 jump *label4 always
    13 multilabel *label7
    14 set .array*0 :reverse.0:i
-    * set .array*9 :reverse.0:j
+   15 set .array*9 :reverse.0:t
    16 set :reverse.0:i .array*1
    17 set :reverse.0:j .array*8
    18 op add *tmp3 @counter 1
    19 jump *label4 always
    20 multilabel *label8
    21 set .array*1 :reverse.0:i
-    * set .array*8 :reverse.0:j
+   22 set .array*8 :reverse.0:t
    23 set :reverse.0:i .array*2
    24 set :reverse.0:j .array*7
    25 op add *tmp3 @counter 1
    26 jump *label4 always
    27 multilabel *label9
    28 set .array*2 :reverse.0:i
-    * set .array*7 :reverse.0:j
+   29 set .array*7 :reverse.0:t
    30 set :reverse.0:i .array*3
    31 set :reverse.0:j .array*6
    32 op add *tmp3 @counter 1
    33 jump *label4 always
    34 multilabel *label10
    35 set .array*3 :reverse.0:i
-    * set .array*6 :reverse.0:j
+   36 set .array*6 :reverse.0:t
    37 set :reverse.0:i .array*4
    38 set :reverse.0:j .array*5
    39 op add *tmp3 @counter 1
    40 jump *label4 always
    41 multilabel *label11
    42 set .array*4 :reverse.0:i
-    * set .array*5 :reverse.0:j
+   43 set .array*5 :reverse.0:t
    44 set :reverse.0:i .array*5
    45 set :reverse.0:j .array*4
    46 op add *tmp3 @counter 1
    47 jump *label4 always
    48 multilabel *label12
    49 set .array*5 :reverse.0:i
-    * set .array*4 :reverse.0:j
+   50 set .array*4 :reverse.0:t
    51 set :reverse.0:i .array*6
    52 set :reverse.0:j .array*3
    53 op add *tmp3 @counter 1
    54 jump *label4 always
    55 multilabel *label13
    56 set .array*6 :reverse.0:i
-    * set .array*3 :reverse.0:j
+   57 set .array*3 :reverse.0:t
    58 set :reverse.0:i .array*7
    59 set :reverse.0:j .array*2
    60 op add *tmp3 @counter 1
    61 jump *label4 always
    62 multilabel *label14
    63 set .array*7 :reverse.0:i
-    * set .array*2 :reverse.0:j
+   64 set .array*2 :reverse.0:t
    65 set :reverse.0:i .array*8
    66 set :reverse.0:j .array*1
    67 op add *tmp3 @counter 1
    68 jump *label4 always
    69 multilabel *label15
    70 set .array*8 :reverse.0:i
-    * set .array*1 :reverse.0:j
+   71 set .array*1 :reverse.0:t
    72 set :reverse.0:i .array*9
    73 set :reverse.0:j .array*0
    74 op add *tmp3 @counter 1
 
    89 multilabel *label16
    90 label *label18
    91 set .array*9 :reverse.0:i
-    * set .array*0 :reverse.0:j
+   92 set .array*0 :reverse.0:t
    93 label *label6
    94 label *label3
    95 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
    83 label *label20
    84 set :reverse.0:t :reverse.0:i
    85 set :reverse.0:i :reverse.0:j
-    * set :reverse.0:j :reverse.0:t
    86 label *label5
    87 multijump *tmp3 0 0
    88 multilabel *label16

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
    11 op add *tmp3 @counter 1
    12 jump *label4 always
    13 multilabel *label7
-    * set .array*0 :reverse.0:i
+   14 set .array*0 :reverse.0:j
    15 set .array*9 :reverse.0:t
    16 set :reverse.0:i .array*1
    17 set :reverse.0:j .array*8
    18 op add *tmp3 @counter 1
    19 jump *label4 always
    20 multilabel *label8
-    * set .array*1 :reverse.0:i
+   21 set .array*1 :reverse.0:j
    22 set .array*8 :reverse.0:t
    23 set :reverse.0:i .array*2
    24 set :reverse.0:j .array*7
    25 op add *tmp3 @counter 1
    26 jump *label4 always
    27 multilabel *label9
-    * set .array*2 :reverse.0:i
+   28 set .array*2 :reverse.0:j
    29 set .array*7 :reverse.0:t
    30 set :reverse.0:i .array*3
    31 set :reverse.0:j .array*6
    32 op add *tmp3 @counter 1
    33 jump *label4 always
    34 multilabel *label10
-    * set .array*3 :reverse.0:i
+   35 set .array*3 :reverse.0:j
    36 set .array*6 :reverse.0:t
    37 set :reverse.0:i .array*4
    38 set :reverse.0:j .array*5
    39 op add *tmp3 @counter 1
    40 jump *label4 always
    41 multilabel *label11
-    * set .array*4 :reverse.0:i
+   42 set .array*4 :reverse.0:j
    43 set .array*5 :reverse.0:t
    44 set :reverse.0:i .array*5
    45 set :reverse.0:j .array*4
    46 op add *tmp3 @counter 1
    47 jump *label4 always
    48 multilabel *label12
-    * set .array*5 :reverse.0:i
+   49 set .array*5 :reverse.0:j
    50 set .array*4 :reverse.0:t
    51 set :reverse.0:i .array*6
    52 set :reverse.0:j .array*3
    53 op add *tmp3 @counter 1
    54 jump *label4 always
    55 multilabel *label13
-    * set .array*6 :reverse.0:i
+   56 set .array*6 :reverse.0:j
    57 set .array*3 :reverse.0:t
    58 set :reverse.0:i .array*7
    59 set :reverse.0:j .array*2
    60 op add *tmp3 @counter 1
    61 jump *label4 always
    62 multilabel *label14
-    * set .array*7 :reverse.0:i
+   63 set .array*7 :reverse.0:j
    64 set .array*2 :reverse.0:t
    65 set :reverse.0:i .array*8
    66 set :reverse.0:j .array*1
    67 op add *tmp3 @counter 1
    68 jump *label4 always
    69 multilabel *label15
-    * set .array*8 :reverse.0:i
+   70 set .array*8 :reverse.0:j
    71 set .array*1 :reverse.0:t
    72 set :reverse.0:i .array*9
    73 set :reverse.0:j .array*0
 
    87 multijump *tmp3 0 0
    88 multilabel *label16
    89 label *label18
-    * set .array*9 :reverse.0:i
+   90 set .array*9 :reverse.0:j
    91 set .array*0 :reverse.0:t
    92 label *label6
    93 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    82 label *label19
    83 label *label20
    84 set :reverse.0:t :reverse.0:i
-    * set :reverse.0:i :reverse.0:j
    85 label *label5
    86 multijump *tmp3 0 0
    87 multilabel *label16

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5:
 
    12 jump *label4 always
    13 multilabel *label7
    14 set .array*0 :reverse.0:j
-    * set .array*9 :reverse.0:t
+   15 set .array*9 :reverse.0:i
    16 set :reverse.0:i .array*1
    17 set :reverse.0:j .array*8
    18 op add *tmp3 @counter 1
    19 jump *label4 always
    20 multilabel *label8
    21 set .array*1 :reverse.0:j
-    * set .array*8 :reverse.0:t
+   22 set .array*8 :reverse.0:i
    23 set :reverse.0:i .array*2
    24 set :reverse.0:j .array*7
    25 op add *tmp3 @counter 1
    26 jump *label4 always
    27 multilabel *label9
    28 set .array*2 :reverse.0:j
-    * set .array*7 :reverse.0:t
+   29 set .array*7 :reverse.0:i
    30 set :reverse.0:i .array*3
    31 set :reverse.0:j .array*6
    32 op add *tmp3 @counter 1
    33 jump *label4 always
    34 multilabel *label10
    35 set .array*3 :reverse.0:j
-    * set .array*6 :reverse.0:t
+   36 set .array*6 :reverse.0:i
    37 set :reverse.0:i .array*4
    38 set :reverse.0:j .array*5
    39 op add *tmp3 @counter 1
    40 jump *label4 always
    41 multilabel *label11
    42 set .array*4 :reverse.0:j
-    * set .array*5 :reverse.0:t
+   43 set .array*5 :reverse.0:i
    44 set :reverse.0:i .array*5
    45 set :reverse.0:j .array*4
    46 op add *tmp3 @counter 1
    47 jump *label4 always
    48 multilabel *label12
    49 set .array*5 :reverse.0:j
-    * set .array*4 :reverse.0:t
+   50 set .array*4 :reverse.0:i
    51 set :reverse.0:i .array*6
    52 set :reverse.0:j .array*3
    53 op add *tmp3 @counter 1
    54 jump *label4 always
    55 multilabel *label13
    56 set .array*6 :reverse.0:j
-    * set .array*3 :reverse.0:t
+   57 set .array*3 :reverse.0:i
    58 set :reverse.0:i .array*7
    59 set :reverse.0:j .array*2
    60 op add *tmp3 @counter 1
    61 jump *label4 always
    62 multilabel *label14
    63 set .array*7 :reverse.0:j
-    * set .array*2 :reverse.0:t
+   64 set .array*2 :reverse.0:i
    65 set :reverse.0:i .array*8
    66 set :reverse.0:j .array*1
    67 op add *tmp3 @counter 1
    68 jump *label4 always
    69 multilabel *label15
    70 set .array*8 :reverse.0:j
-    * set .array*1 :reverse.0:t
+   71 set .array*1 :reverse.0:i
    72 set :reverse.0:i .array*9
    73 set :reverse.0:j .array*0
    74 op add *tmp3 @counter 1
 
    87 multilabel *label16
    88 label *label18
    89 set .array*9 :reverse.0:j
-    * set .array*0 :reverse.0:t
+   90 set .array*0 :reverse.0:i
    91 label *label6
    92 label *label3
    93 assertflush

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 6 (-1 instructions):
 
    81 jump *label6 always
    82 label *label19
    83 label *label20
-    * set :reverse.0:t :reverse.0:i
    84 label *label5
    85 multijump *tmp3 0 0
    86 multilabel *label16

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :i 0
     1 label *label0
-    * jump *label2 greaterThanEq :i 10
+    2 label *label21
     3 writearr :i .array[] :i
     4 label *label1
     5 op add :i :i 1
-    * jump *label0 always
+    6 jump *label21 lessThan :i 10
     7 label *label2
     8 op idiv :reverse.0:count 10 2
     9 set :reverse.0:i .array*0

Modifications by Unroll iteration loop at line 18:5 (+15 instructions):
 
     6 jump *label21 lessThan :i 10
     7 label *label2
     8 op idiv :reverse.0:count 10 2
-    * set :reverse.0:i .array*0
-    * set :reverse.0:j .array*9
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label7
-    * set .array*0 :reverse.0:j
-    * set .array*9 :reverse.0:i
-    * set :reverse.0:i .array*1
-    * set :reverse.0:j .array*8
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label8
-    * set .array*1 :reverse.0:j
-    * set .array*8 :reverse.0:i
-    * set :reverse.0:i .array*2
-    * set :reverse.0:j .array*7
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label9
-    * set .array*2 :reverse.0:j
-    * set .array*7 :reverse.0:i
-    * set :reverse.0:i .array*3
-    * set :reverse.0:j .array*6
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label10
-    * set .array*3 :reverse.0:j
-    * set .array*6 :reverse.0:i
-    * set :reverse.0:i .array*4
-    * set :reverse.0:j .array*5
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label11
-    * set .array*4 :reverse.0:j
-    * set .array*5 :reverse.0:i
-    * set :reverse.0:i .array*5
-    * set :reverse.0:j .array*4
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label12
-    * set .array*5 :reverse.0:j
-    * set .array*4 :reverse.0:i
-    * set :reverse.0:i .array*6
-    * set :reverse.0:j .array*3
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label13
-    * set .array*6 :reverse.0:j
-    * set .array*3 :reverse.0:i
-    * set :reverse.0:i .array*7
-    * set :reverse.0:j .array*2
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label14
-    * set .array*7 :reverse.0:j
-    * set .array*2 :reverse.0:i
-    * set :reverse.0:i .array*8
-    * set :reverse.0:j .array*1
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label15
-    * set .array*8 :reverse.0:j
-    * set .array*1 :reverse.0:i
-    * set :reverse.0:i .array*9
-    * set :reverse.0:j .array*0
-    * op add *tmp3 @counter 1
-    * jump *label4 always
-    * multilabel *label17
-    * jump *label18 always
-    * label *label4
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label19 greaterThanEq :reverse.0:count 0
-    * jump *label6 always
-    * label *label19
-    * label *label20
-    * label *label5
-    * multijump *tmp3 0 0
-    * multilabel *label16
-    * label *label18
-    * set .array*9 :reverse.0:j
-    * set .array*0 :reverse.0:i
-    * label *label6
+    9 set :reverse.0:i .array*0
+   10 set :reverse.0:j .array*9
+   11 op add *tmp3 @counter 1
+   12 label *label22
+   13 op sub :reverse.0:count :reverse.0:count 1
+   14 jump *label23 greaterThanEq :reverse.0:count 0
+   15 jump *label6 always
+   16 label *label23
+   17 label *label24
+   18 label *label25
+   19 set .array*0 :reverse.0:j
+   20 set .array*9 :reverse.0:i
+   21 set :reverse.0:i .array*1
+   22 set :reverse.0:j .array*8
+   23 op add *tmp3 @counter 1
+   24 label *label28
+   25 op sub :reverse.0:count :reverse.0:count 1
+   26 jump *label29 greaterThanEq :reverse.0:count 0
+   27 jump *label6 always
+   28 label *label29
+   29 label *label30
+   30 label *label31
+   31 set .array*1 :reverse.0:j
+   32 set .array*8 :reverse.0:i
+   33 set :reverse.0:i .array*2
+   34 set :reverse.0:j .array*7
+   35 op add *tmp3 @counter 1
+   36 label *label34
+   37 op sub :reverse.0:count :reverse.0:count 1
+   38 jump *label35 greaterThanEq :reverse.0:count 0
+   39 jump *label6 always
+   40 label *label35
+   41 label *label36
+   42 label *label37
+   43 set .array*2 :reverse.0:j
+   44 set .array*7 :reverse.0:i
+   45 set :reverse.0:i .array*3
+   46 set :reverse.0:j .array*6
+   47 op add *tmp3 @counter 1
+   48 label *label40
+   49 op sub :reverse.0:count :reverse.0:count 1
+   50 jump *label41 greaterThanEq :reverse.0:count 0
+   51 jump *label6 always
+   52 label *label41
+   53 label *label42
+   54 label *label43
+   55 set .array*3 :reverse.0:j
+   56 set .array*6 :reverse.0:i
+   57 set :reverse.0:i .array*4
+   58 set :reverse.0:j .array*5
+   59 op add *tmp3 @counter 1
+   60 label *label46
+   61 op sub :reverse.0:count :reverse.0:count 1
+   62 jump *label47 greaterThanEq :reverse.0:count 0
+   63 jump *label6 always
+   64 label *label47
+   65 label *label48
+   66 label *label49
+   67 set .array*4 :reverse.0:j
+   68 set .array*5 :reverse.0:i
+   69 set :reverse.0:i .array*5
+   70 set :reverse.0:j .array*4
+   71 op add *tmp3 @counter 1
+   72 label *label52
+   73 op sub :reverse.0:count :reverse.0:count 1
+   74 jump *label53 greaterThanEq :reverse.0:count 0
+   75 jump *label6 always
+   76 label *label53
+   77 label *label54
+   78 label *label55
+   79 set .array*5 :reverse.0:j
+   80 set .array*4 :reverse.0:i
+   81 set :reverse.0:i .array*6
+   82 set :reverse.0:j .array*3
+   83 op add *tmp3 @counter 1
+   84 label *label58
+   85 op sub :reverse.0:count :reverse.0:count 1
+   86 jump *label59 greaterThanEq :reverse.0:count 0
+   87 jump *label6 always
+   88 label *label59
+   89 label *label60
+   90 label *label61
+   91 set .array*6 :reverse.0:j
+   92 set .array*3 :reverse.0:i
+   93 set :reverse.0:i .array*7
+   94 set :reverse.0:j .array*2
+   95 op add *tmp3 @counter 1
+   96 label *label64
+   97 op sub :reverse.0:count :reverse.0:count 1
+   98 jump *label65 greaterThanEq :reverse.0:count 0
+   99 jump *label6 always
+  100 label *label65
+  101 label *label66
+  102 label *label67
+  103 set .array*7 :reverse.0:j
+  104 set .array*2 :reverse.0:i
+  105 set :reverse.0:i .array*8
+  106 set :reverse.0:j .array*1
+  107 op add *tmp3 @counter 1
+  108 label *label70
+  109 op sub :reverse.0:count :reverse.0:count 1
+  110 jump *label71 greaterThanEq :reverse.0:count 0
+  111 jump *label6 always
+  112 label *label71
+  113 label *label72
+  114 label *label73
+  115 set .array*8 :reverse.0:j
+  116 set .array*1 :reverse.0:i
+  117 set :reverse.0:i .array*9
+  118 set :reverse.0:j .array*0
+  119 op add *tmp3 @counter 1
+  120 label *label76
+  121 op sub :reverse.0:count :reverse.0:count 1
+  122 jump *label77 greaterThanEq :reverse.0:count 0
+  123 jump *label6 always
+  124 label *label77
+  125 label *label78
+  126 label *label79
+  127 set .array*9 :reverse.0:j
+  128 set .array*0 :reverse.0:i
+  129 label *label18
+  130 label *label6
   131 label *label3
   132 assertflush
   133 print .array*0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-15 instructions):
 
     8 op idiv :reverse.0:count 10 2
     9 set :reverse.0:i .array*0
    10 set :reverse.0:j .array*9
-    * op add *tmp3 @counter 1
    11 label *label22
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label23 greaterThanEq :reverse.0:count 0
+   12 op sub :reverse.0:count 5 1
+   13 jump *label23 greaterThanEq 4 0
    14 jump *label6 always
    15 label *label23
    16 label *label24
    17 label *label25
-    * set .array*0 :reverse.0:j
+   18 set .array*0 .array*9
    19 set .array*9 :reverse.0:i
    20 set :reverse.0:i .array*1
    21 set :reverse.0:j .array*8
-    * op add *tmp3 @counter 1
    22 label *label28
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label29 greaterThanEq :reverse.0:count 0
+   23 op sub :reverse.0:count 4 1
+   24 jump *label29 greaterThanEq 3 0
    25 jump *label6 always
    26 label *label29
    27 label *label30
    28 label *label31
-    * set .array*1 :reverse.0:j
+   29 set .array*1 .array*8
    30 set .array*8 :reverse.0:i
    31 set :reverse.0:i .array*2
    32 set :reverse.0:j .array*7
-    * op add *tmp3 @counter 1
    33 label *label34
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label35 greaterThanEq :reverse.0:count 0
+   34 op sub :reverse.0:count 3 1
+   35 jump *label35 greaterThanEq 2 0
    36 jump *label6 always
    37 label *label35
    38 label *label36
    39 label *label37
-    * set .array*2 :reverse.0:j
+   40 set .array*2 .array*7
    41 set .array*7 :reverse.0:i
    42 set :reverse.0:i .array*3
    43 set :reverse.0:j .array*6
-    * op add *tmp3 @counter 1
    44 label *label40
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label41 greaterThanEq :reverse.0:count 0
+   45 op sub :reverse.0:count 2 1
+   46 jump *label41 greaterThanEq 1 0
    47 jump *label6 always
    48 label *label41
    49 label *label42
    50 label *label43
-    * set .array*3 :reverse.0:j
+   51 set .array*3 .array*6
    52 set .array*6 :reverse.0:i
    53 set :reverse.0:i .array*4
    54 set :reverse.0:j .array*5
-    * op add *tmp3 @counter 1
    55 label *label46
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label47 greaterThanEq :reverse.0:count 0
+   56 op sub :reverse.0:count 1 1
+   57 jump *label47 greaterThanEq 0 0
    58 jump *label6 always
    59 label *label47
    60 label *label48
    61 label *label49
-    * set .array*4 :reverse.0:j
+   62 set .array*4 .array*5
    63 set .array*5 :reverse.0:i
-    * set :reverse.0:i .array*5
-    * set :reverse.0:j .array*4
-    * op add *tmp3 @counter 1
+   64 set :reverse.0:i :reverse.0:i
+   65 set :reverse.0:j :reverse.0:j
    66 label *label52
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label53 greaterThanEq :reverse.0:count 0
+   67 op sub :reverse.0:count 0 1
+   68 jump *label53 greaterThanEq -1 0
    69 jump *label6 always
    70 label *label53
    71 label *label54
    72 label *label55
-    * set .array*5 :reverse.0:j
-    * set .array*4 :reverse.0:i
+   73 set .array*5 .array*4
    74 set :reverse.0:i .array*6
    75 set :reverse.0:j .array*3
-    * op add *tmp3 @counter 1
    76 label *label58
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label59 greaterThanEq :reverse.0:count 0
+   77 op sub :reverse.0:count -1 1
+   78 jump *label59 greaterThanEq -2 0
    79 jump *label6 always
    80 label *label59
    81 label *label60
    82 label *label61
-    * set .array*6 :reverse.0:j
-    * set .array*3 :reverse.0:i
+   83 set .array*6 .array*3
    84 set :reverse.0:i .array*7
    85 set :reverse.0:j .array*2
-    * op add *tmp3 @counter 1
    86 label *label64
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label65 greaterThanEq :reverse.0:count 0
+   87 op sub :reverse.0:count -2 1
+   88 jump *label65 greaterThanEq -3 0
    89 jump *label6 always
    90 label *label65
    91 label *label66
    92 label *label67
-    * set .array*7 :reverse.0:j
-    * set .array*2 :reverse.0:i
+   93 set .array*7 .array*2
    94 set :reverse.0:i .array*8
    95 set :reverse.0:j .array*1
-    * op add *tmp3 @counter 1
    96 label *label70
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label71 greaterThanEq :reverse.0:count 0
+   97 op sub :reverse.0:count -3 1
+   98 jump *label71 greaterThanEq -4 0
    99 jump *label6 always
   100 label *label71
   101 label *label72
   102 label *label73
-    * set .array*8 :reverse.0:j
-    * set .array*1 :reverse.0:i
+  103 set .array*8 .array*1
   104 set :reverse.0:i .array*9
   105 set :reverse.0:j .array*0
-    * op add *tmp3 @counter 1
   106 label *label76
-    * op sub :reverse.0:count :reverse.0:count 1
-    * jump *label77 greaterThanEq :reverse.0:count 0
+  107 op sub :reverse.0:count -4 1
+  108 jump *label77 greaterThanEq -5 0
   109 jump *label6 always
   110 label *label77
   111 label *label78
   112 label *label79
-    * set .array*9 :reverse.0:j
-    * set .array*0 :reverse.0:i
+  113 set .array*9 .array*0
   114 label *label18
   115 label *label6
   116 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-30 instructions):
 
     5 op add :i :i 1
     6 jump *label21 lessThan :i 10
     7 label *label2
-    * op idiv :reverse.0:count 10 2
     8 set :reverse.0:i .array*0
-    * set :reverse.0:j .array*9
     9 label *label22
-    * op sub :reverse.0:count 5 1
    10 jump *label23 greaterThanEq 4 0
    11 jump *label6 always
    12 label *label23
 
    15 set .array*0 .array*9
    16 set .array*9 :reverse.0:i
    17 set :reverse.0:i .array*1
-    * set :reverse.0:j .array*8
    18 label *label28
-    * op sub :reverse.0:count 4 1
    19 jump *label29 greaterThanEq 3 0
    20 jump *label6 always
    21 label *label29
 
    24 set .array*1 .array*8
    25 set .array*8 :reverse.0:i
    26 set :reverse.0:i .array*2
-    * set :reverse.0:j .array*7
    27 label *label34
-    * op sub :reverse.0:count 3 1
    28 jump *label35 greaterThanEq 2 0
    29 jump *label6 always
    30 label *label35
 
    33 set .array*2 .array*7
    34 set .array*7 :reverse.0:i
    35 set :reverse.0:i .array*3
-    * set :reverse.0:j .array*6
    36 label *label40
-    * op sub :reverse.0:count 2 1
    37 jump *label41 greaterThanEq 1 0
    38 jump *label6 always
    39 label *label41
 
    44 set :reverse.0:i .array*4
    45 set :reverse.0:j .array*5
    46 label *label46
-    * op sub :reverse.0:count 1 1
    47 jump *label47 greaterThanEq 0 0
    48 jump *label6 always
    49 label *label47
 
    51 label *label49
    52 set .array*4 .array*5
    53 set .array*5 :reverse.0:i
-    * set :reverse.0:i :reverse.0:i
-    * set :reverse.0:j :reverse.0:j
    54 label *label52
-    * op sub :reverse.0:count 0 1
    55 jump *label53 greaterThanEq -1 0
    56 jump *label6 always
    57 label *label53
    58 label *label54
    59 label *label55
-    * set .array*5 .array*4
-    * set :reverse.0:i .array*6
-    * set :reverse.0:j .array*3
    60 label *label58
-    * op sub :reverse.0:count -1 1
    61 jump *label59 greaterThanEq -2 0
    62 jump *label6 always
    63 label *label59
    64 label *label60
    65 label *label61
-    * set .array*6 .array*3
-    * set :reverse.0:i .array*7
-    * set :reverse.0:j .array*2
    66 label *label64
-    * op sub :reverse.0:count -2 1
    67 jump *label65 greaterThanEq -3 0
    68 jump *label6 always
    69 label *label65
    70 label *label66
    71 label *label67
-    * set .array*7 .array*2
-    * set :reverse.0:i .array*8
-    * set :reverse.0:j .array*1
    72 label *label70
-    * op sub :reverse.0:count -3 1
    73 jump *label71 greaterThanEq -4 0
    74 jump *label6 always
    75 label *label71
    76 label *label72
    77 label *label73
-    * set .array*8 .array*1
-    * set :reverse.0:i .array*9
-    * set :reverse.0:j .array*0
    78 label *label76
-    * op sub :reverse.0:count -4 1
    79 jump *label77 greaterThanEq -5 0
    80 jump *label6 always
    81 label *label77
    82 label *label78
    83 label *label79
-    * set .array*9 .array*0
    84 label *label18
    85 label *label6
    86 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-1 instructions):
 
    42 set .array*3 .array*6
    43 set .array*6 :reverse.0:i
    44 set :reverse.0:i .array*4
-    * set :reverse.0:j .array*5
    45 label *label46
    46 jump *label47 greaterThanEq 0 0
    47 jump *label6 always
 
    89 print .array*2
    90 print .array*3
    91 print .array*4
-    * print .array*5
+   92 print :reverse.0:i
    93 print .array*6
    94 print .array*7
    95 print .array*8

Modifications by Unroll loop at line 6:5 (+44 instructions):
-    * set :i 0
-    * label *label0
-    * label *label21
-    * writearr :i .array[] :i
-    * label *label1
-    * op add :i :i 1
-    * jump *label21 lessThan :i 10
-    * label *label2
+    0 set :i 0
+    1 label *label84
+    2 label *label85
+    3 writearr :i .array[] :i
+    4 label *label86
+    5 op add :i :i 1
+    6 label *label87
+    7 writearr :i .array[] :i
+    8 label *label88
+    9 op add :i :i 1
+   10 label *label89
+   11 writearr :i .array[] :i
+   12 label *label90
+   13 op add :i :i 1
+   14 label *label91
+   15 writearr :i .array[] :i
+   16 label *label92
+   17 op add :i :i 1
+   18 label *label93
+   19 writearr :i .array[] :i
+   20 label *label94
+   21 op add :i :i 1
+   22 label *label95
+   23 writearr :i .array[] :i
+   24 label *label96
+   25 op add :i :i 1
+   26 label *label97
+   27 writearr :i .array[] :i
+   28 label *label98
+   29 op add :i :i 1
+   30 label *label99
+   31 writearr :i .array[] :i
+   32 label *label100
+   33 op add :i :i 1
+   34 label *label101
+   35 writearr :i .array[] :i
+   36 label *label102
+   37 op add :i :i 1
+   38 label *label103
+   39 writearr :i .array[] :i
+   40 label *label104
+   41 op add :i :i 1
+   42 label *label2
    43 set :reverse.0:i .array*0
    44 label *label22
    45 jump *label23 greaterThanEq 4 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
     0 set :i 0
     1 label *label84
     2 label *label85
-    * writearr :i .array[] :i
+    3 writearr 0 .array[] 0
     4 label *label86
-    * op add :i :i 1
+    5 op add :i 0 1
     6 label *label87
-    * writearr :i .array[] :i
+    7 writearr 1 .array[] 1
     8 label *label88
-    * op add :i :i 1
+    9 op add :i 1 1
    10 label *label89
-    * writearr :i .array[] :i
+   11 writearr 2 .array[] 2
    12 label *label90
-    * op add :i :i 1
+   13 op add :i 2 1
    14 label *label91
-    * writearr :i .array[] :i
+   15 writearr 3 .array[] 3
    16 label *label92
-    * op add :i :i 1
+   17 op add :i 3 1
    18 label *label93
-    * writearr :i .array[] :i
+   19 writearr 4 .array[] 4
    20 label *label94
-    * op add :i :i 1
+   21 op add :i 4 1
    22 label *label95
-    * writearr :i .array[] :i
+   23 writearr 5 .array[] 5
    24 label *label96
-    * op add :i :i 1
+   25 op add :i 5 1
    26 label *label97
-    * writearr :i .array[] :i
+   27 writearr 6 .array[] 6
    28 label *label98
-    * op add :i :i 1
+   29 op add :i 6 1
    30 label *label99
-    * writearr :i .array[] :i
+   31 writearr 7 .array[] 7
    32 label *label100
-    * op add :i :i 1
+   33 op add :i 7 1
    34 label *label101
-    * writearr :i .array[] :i
+   35 writearr 8 .array[] 8
    36 label *label102
-    * op add :i :i 1
+   37 op add :i 8 1
    38 label *label103
-    * writearr :i .array[] :i
+   39 writearr 9 .array[] 9
    40 label *label104
-    * op add :i :i 1
+   41 op add :i 9 1
    42 label *label2
    43 set :reverse.0:i .array*0
    44 label *label22

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-11 instructions):
-    * set :i 0
     0 label *label84
     1 label *label85
     2 writearr 0 .array[] 0
     3 label *label86
-    * op add :i 0 1
     4 label *label87
     5 writearr 1 .array[] 1
     6 label *label88
-    * op add :i 1 1
     7 label *label89
     8 writearr 2 .array[] 2
     9 label *label90
-    * op add :i 2 1
    10 label *label91
    11 writearr 3 .array[] 3
    12 label *label92
-    * op add :i 3 1
    13 label *label93
    14 writearr 4 .array[] 4
    15 label *label94
-    * op add :i 4 1
    16 label *label95
    17 writearr 5 .array[] 5
    18 label *label96
-    * op add :i 5 1
    19 label *label97
    20 writearr 6 .array[] 6
    21 label *label98
-    * op add :i 6 1
    22 label *label99
    23 writearr 7 .array[] 7
    24 label *label100
-    * op add :i 7 1
    25 label *label101
    26 writearr 8 .array[] 8
    27 label *label102
-    * op add :i 8 1
    28 label *label103
    29 writearr 9 .array[] 9
    30 label *label104
-    * op add :i 9 1
    31 label *label2
    32 set :reverse.0:i .array*0
    33 label *label22

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-5 instructions):
 
    31 label *label2
    32 set :reverse.0:i .array*0
    33 label *label22
-    * jump *label23 greaterThanEq 4 0
+   34 jump *label23 always
    35 jump *label6 always
    36 label *label23
    37 label *label24
 
    40 set .array*9 :reverse.0:i
    41 set :reverse.0:i .array*1
    42 label *label28
-    * jump *label29 greaterThanEq 3 0
+   43 jump *label29 always
    44 jump *label6 always
    45 label *label29
    46 label *label30
 
    49 set .array*8 :reverse.0:i
    50 set :reverse.0:i .array*2
    51 label *label34
-    * jump *label35 greaterThanEq 2 0
+   52 jump *label35 always
    53 jump *label6 always
    54 label *label35
    55 label *label36
 
    58 set .array*7 :reverse.0:i
    59 set :reverse.0:i .array*3
    60 label *label40
-    * jump *label41 greaterThanEq 1 0
+   61 jump *label41 always
    62 jump *label6 always
    63 label *label41
    64 label *label42
 
    67 set .array*6 :reverse.0:i
    68 set :reverse.0:i .array*4
    69 label *label46
-    * jump *label47 greaterThanEq 0 0
+   70 jump *label47 always
    71 jump *label6 always
    72 label *label47
    73 label *label48
 
    75 set .array*4 .array*5
    76 set .array*5 :reverse.0:i
    77 label *label52
-    * jump *label53 greaterThanEq -1 0
    78 jump *label6 always
    79 label *label53
    80 label *label54
    81 label *label55
    82 label *label58
-    * jump *label59 greaterThanEq -2 0
    83 jump *label6 always
    84 label *label59
    85 label *label60
    86 label *label61
    87 label *label64
-    * jump *label65 greaterThanEq -3 0
    88 jump *label6 always
    89 label *label65
    90 label *label66
    91 label *label67
    92 label *label70
-    * jump *label71 greaterThanEq -4 0
    93 jump *label6 always
    94 label *label71
    95 label *label72
    96 label *label73
    97 label *label76
-    * jump *label77 greaterThanEq -5 0
    98 jump *label6 always
    99 label *label77
   100 label *label78

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1 (-50 instructions):
     0 label *label84
     1 label *label85
-    * writearr 0 .array[] 0
+    2 set .array*0 0
     3 label *label86
     4 label *label87
-    * writearr 1 .array[] 1
+    5 set .array*1 1
     6 label *label88
     7 label *label89
-    * writearr 2 .array[] 2
+    8 set .array*2 2
     9 label *label90
    10 label *label91
-    * writearr 3 .array[] 3
+   11 set .array*3 3
    12 label *label92
    13 label *label93
-    * writearr 4 .array[] 4
+   14 set .array*4 4
    15 label *label94
    16 label *label95
-    * writearr 5 .array[] 5
+   17 set .array*5 5
    18 label *label96
    19 label *label97
-    * writearr 6 .array[] 6
+   20 set .array*6 6
    21 label *label98
    22 label *label99
-    * writearr 7 .array[] 7
+   23 set .array*7 7
    24 label *label100
    25 label *label101
-    * writearr 8 .array[] 8
+   26 set .array*8 8
    27 label *label102
    28 label *label103
-    * writearr 9 .array[] 9
+   29 set .array*9 9
    30 label *label104
    31 label *label2
    32 set :reverse.0:i .array*0

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
     0 label *label84
     1 label *label85
-    * set .array*0 0
+    2 set :reverse.0:i 0
     3 label *label86
     4 label *label87
     5 set .array*1 1
 
    29 set .array*9 9
    30 label *label104
    31 label *label2
-    * set :reverse.0:i .array*0
    32 label *label22
    33 jump *label23 always
    34 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    26 set .array*8 8
    27 label *label102
    28 label *label103
-    * set .array*9 9
+   29 set .array*0 9
    30 label *label104
    31 label *label2
    32 label *label22
 
    35 label *label23
    36 label *label24
    37 label *label25
-    * set .array*0 .array*9
    38 set .array*9 :reverse.0:i
    39 set :reverse.0:i .array*1
    40 label *label28

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-1 instructions):
     0 label *label84
     1 label *label85
-    * set :reverse.0:i 0
+    2 set .array*9 0
     3 label *label86
     4 label *label87
     5 set .array*1 1
 
    35 label *label23
    36 label *label24
    37 label *label25
-    * set .array*9 :reverse.0:i
    38 set :reverse.0:i .array*1
    39 label *label28
    40 jump *label29 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 4 (-1 instructions):
 
     2 set .array*9 0
     3 label *label86
     4 label *label87
-    * set .array*1 1
+    5 set :reverse.0:i 1
     6 label *label88
     7 label *label89
     8 set .array*2 2
 
    35 label *label23
    36 label *label24
    37 label *label25
-    * set :reverse.0:i .array*1
    38 label *label28
    39 jump *label29 always
    40 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 5 (-1 instructions):
 
    23 set .array*7 7
    24 label *label100
    25 label *label101
-    * set .array*8 8
+   26 set .array*1 8
    27 label *label102
    28 label *label103
    29 set .array*0 9
 
    41 label *label29
    42 label *label30
    43 label *label31
-    * set .array*1 .array*8
    44 set .array*8 :reverse.0:i
    45 set :reverse.0:i .array*2
    46 label *label34

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 6 (-1 instructions):
 
     2 set .array*9 0
     3 label *label86
     4 label *label87
-    * set :reverse.0:i 1
+    5 set .array*8 1
     6 label *label88
     7 label *label89
     8 set .array*2 2
 
    41 label *label29
    42 label *label30
    43 label *label31
-    * set .array*8 :reverse.0:i
    44 set :reverse.0:i .array*2
    45 label *label34
    46 jump *label35 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 7 (-1 instructions):
 
     5 set .array*8 1
     6 label *label88
     7 label *label89
-    * set .array*2 2
+    8 set :reverse.0:i 2
     9 label *label90
    10 label *label91
    11 set .array*3 3
 
    41 label *label29
    42 label *label30
    43 label *label31
-    * set :reverse.0:i .array*2
    44 label *label34
    45 jump *label35 always
    46 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 8 (-1 instructions):
 
    20 set .array*6 6
    21 label *label98
    22 label *label99
-    * set .array*7 7
+   23 set .array*2 7
    24 label *label100
    25 label *label101
    26 set .array*1 8
 
    47 label *label35
    48 label *label36
    49 label *label37
-    * set .array*2 .array*7
    50 set .array*7 :reverse.0:i
    51 set :reverse.0:i .array*3
    52 label *label40

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 9 (-1 instructions):
 
     5 set .array*8 1
     6 label *label88
     7 label *label89
-    * set :reverse.0:i 2
+    8 set .array*7 2
     9 label *label90
    10 label *label91
    11 set .array*3 3
 
    47 label *label35
    48 label *label36
    49 label *label37
-    * set .array*7 :reverse.0:i
    50 set :reverse.0:i .array*3
    51 label *label40
    52 jump *label41 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 10 (-1 instructions):
 
     8 set .array*7 2
     9 label *label90
    10 label *label91
-    * set .array*3 3
+   11 set :reverse.0:i 3
    12 label *label92
    13 label *label93
    14 set .array*4 4
 
    47 label *label35
    48 label *label36
    49 label *label37
-    * set :reverse.0:i .array*3
    50 label *label40
    51 jump *label41 always
    52 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 11 (-1 instructions):
 
    17 set .array*5 5
    18 label *label96
    19 label *label97
-    * set .array*6 6
+   20 set .array*3 6
    21 label *label98
    22 label *label99
    23 set .array*2 7
 
    53 label *label41
    54 label *label42
    55 label *label43
-    * set .array*3 .array*6
    56 set .array*6 :reverse.0:i
    57 set :reverse.0:i .array*4
    58 label *label46

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 12 (-1 instructions):
 
     8 set .array*7 2
     9 label *label90
    10 label *label91
-    * set :reverse.0:i 3
+   11 set .array*6 3
    12 label *label92
    13 label *label93
    14 set .array*4 4
 
    53 label *label41
    54 label *label42
    55 label *label43
-    * set .array*6 :reverse.0:i
    56 set :reverse.0:i .array*4
    57 label *label46
    58 jump *label47 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 13 (-1 instructions):
 
    11 set .array*6 3
    12 label *label92
    13 label *label93
-    * set .array*4 4
+   14 set :reverse.0:i 4
    15 label *label94
    16 label *label95
    17 set .array*5 5
 
    53 label *label41
    54 label *label42
    55 label *label43
-    * set :reverse.0:i .array*4
    56 label *label46
    57 jump *label47 always
    58 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 14 (-1 instructions):
 
    14 set :reverse.0:i 4
    15 label *label94
    16 label *label95
-    * set .array*5 5
+   17 set .array*4 5
    18 label *label96
    19 label *label97
    20 set .array*3 6
 
    59 label *label47
    60 label *label48
    61 label *label49
-    * set .array*4 .array*5
    62 set .array*5 :reverse.0:i
    63 label *label52
    64 jump *label6 always

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 15:
 
    59 label *label47
    60 label *label48
    61 label *label49
-    * set .array*5 :reverse.0:i
+   62 set .array*5 4
    63 label *label52
    64 jump *label6 always
    65 label *label53
 
    89 label *label6
    90 label *label3
    91 assertflush
-    * print .array*0
-    * print .array*1
-    * print .array*2
-    * print .array*3
-    * print .array*4
-    * print :reverse.0:i
-    * print .array*6
-    * print .array*7
-    * print .array*8
-    * print .array*9
+   92 print 9
+   93 print 8
+   94 print 7
+   95 print 6
+   96 print 5
+   97 print 4
+   98 print 3
+   99 print 2
+  100 print 1
+  101 print 0
   102 assertprints "9876543210" "reverse array"
   103 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 16 (-11 instructions):
     0 label *label84
     1 label *label85
-    * set .array*9 0
     2 label *label86
     3 label *label87
-    * set .array*8 1
     4 label *label88
     5 label *label89
-    * set .array*7 2
     6 label *label90
     7 label *label91
-    * set .array*6 3
     8 label *label92
     9 label *label93
-    * set :reverse.0:i 4
    10 label *label94
    11 label *label95
-    * set .array*4 5
    12 label *label96
    13 label *label97
-    * set .array*3 6
    14 label *label98
    15 label *label99
-    * set .array*2 7
    16 label *label100
    17 label *label101
-    * set .array*1 8
    18 label *label102
    19 label *label103
-    * set .array*0 9
    20 label *label104
    21 label *label2
    22 label *label22
 
    49 label *label47
    50 label *label48
    51 label *label49
-    * set .array*5 4
    52 label *label52
    53 jump *label6 always
    54 label *label53

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-6 instructions):
 
    45 label *label43
    46 label *label46
    47 jump *label47 always
-    * jump *label6 always
    48 label *label47
    49 label *label48
    50 label *label49
    51 label *label52
-    * jump *label6 always
    52 label *label53
    53 label *label54
    54 label *label55
    55 label *label58
-    * jump *label6 always
    56 label *label59
    57 label *label60
    58 label *label61
    59 label *label64
-    * jump *label6 always
    60 label *label65
    61 label *label66
    62 label *label67
    63 label *label70
-    * jump *label6 always
    64 label *label71
    65 label *label72
    66 label *label73
    67 label *label76
-    * jump *label6 always
    68 label *label77
    69 label *label78
    70 label *label79

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 2 (-1 instructions):
 
    44 label *label42
    45 label *label43
    46 label *label46
-    * jump *label47 always
    47 label *label47
    48 label *label48
    49 label *label49

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 3 (-1 instructions):
 
    39 label *label37
    40 label *label40
    41 jump *label41 always
-    * jump *label6 always
    42 label *label41
    43 label *label42
    44 label *label43

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 4 (-1 instructions):
 
    38 label *label36
    39 label *label37
    40 label *label40
-    * jump *label41 always
    41 label *label41
    42 label *label42
    43 label *label43

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 5 (-1 instructions):
 
    33 label *label31
    34 label *label34
    35 jump *label35 always
-    * jump *label6 always
    36 label *label35
    37 label *label36
    38 label *label37

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 6 (-1 instructions):
 
    32 label *label30
    33 label *label31
    34 label *label34
-    * jump *label35 always
    35 label *label35
    36 label *label36
    37 label *label37

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 7 (-1 instructions):
 
    27 label *label25
    28 label *label28
    29 jump *label29 always
-    * jump *label6 always
    30 label *label29
    31 label *label30
    32 label *label31

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 8 (-1 instructions):
 
    26 label *label24
    27 label *label25
    28 label *label28
-    * jump *label29 always
    29 label *label29
    30 label *label30
    31 label *label31

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 9 (-1 instructions):
 
    21 label *label2
    22 label *label22
    23 jump *label23 always
-    * jump *label6 always
    24 label *label23
    25 label *label24
    26 label *label25

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 10 (-1 instructions):
 
    20 label *label104
    21 label *label2
    22 label *label22
-    * jump *label23 always
    23 label *label23
    24 label *label24
    25 label *label25

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
    74 print 1
    75 print 0
    76 assertprints "9876543210" "reverse array"
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-9 instructions):
 
    63 label *label6
    64 label *label3
    65 assertflush
-    * print 9
-    * print 8
-    * print 7
-    * print 6
-    * print 5
-    * print 4
-    * print 3
-    * print 2
-    * print 1
-    * print 0
+   66 print "9876543210"
    67 assertprints "9876543210" "reverse array"

Final code before resolving virtual instructions:

assertflush
print "9876543210"
assertprints "9876543210" "reverse array"
