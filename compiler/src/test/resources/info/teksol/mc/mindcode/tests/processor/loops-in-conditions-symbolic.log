    40 instructions before optimizations.
     1 instructions eliminated by Dead Code Elimination (4 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
     1 instructions eliminated by Jump Optimization (5 iterations).
     4 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by If Expression Optimization (3 iterations).
    39 instructions eliminated by Data Flow Optimization (4 passes, 14 iterations).
     2 instructions eliminated by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
    18 instructions added by Loop Unrolling (5 iterations).
     2 loops unrolled by Loop Unrolling.
     6 instructions eliminated by Print Merging.
     4 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 973):
  * Unroll loop at line 3:5                                      cost     0, benefit      200.0, efficiency   Infinity (-5 instructions)
    Unroll loop at line 3:5                                      cost     4, benefit      400.0, efficiency      100.0

Pass 1: speed optimization selection (cost limit 978):
  * Unroll loop at line 3:5                                      cost     4, benefit      400.0, efficiency      100.0 (-5 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    46 set :test:result *tmp6
    47 print "|"
    48 print :test:result
-    * set *tmp0 :test:result
    49 label *label0
    50 assertprints "6|28|Less|0" "loops in conditions"
    51 stop

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    35 jump *label5 always
    36 set *tmp3 null
    37 label *label5
-    * op lessThan *tmp5 *tmp1 *tmp3
-    * jump *label9 equal *tmp5 false
+   38 jump *label9 greaterThanEq *tmp1 *tmp3
    39 print "Less"
    40 set *tmp6 0
    41 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-2 instructions):
 
     2 # "Function: inline def sum(in n)"
     3 set :sum:n 4
     4 set :sum:c 0
-    * set *tmp2 :sum:n
+    5 set *tmp2 4
     6 set :sum:i 0
     7 label *label2
-    * jump *label4 greaterThanEq :sum:i *tmp2
+    8 jump *label4 greaterThanEq :sum:i :sum:n
     9 op add :sum:c :sum:c :sum:i
    10 label *label3
    11 op add :sum:i :sum:i 1
 
    15 print "|"
    16 set *tmp1 :sum:c
    17 jump *label1 always
-    * set *tmp1 null
    18 label *label1
    19 # "Function: inline def sum(in n)"
    20 set :sum.1:n 8
    21 set :sum.1:c 0
-    * set *tmp4 :sum.1:n
+   22 set *tmp4 8
    23 set :sum.1:i 0
    24 label *label6
-    * jump *label8 greaterThanEq :sum.1:i *tmp4
+   25 jump *label8 greaterThanEq :sum.1:i :sum.1:n
    26 op add :sum.1:c :sum.1:c :sum.1:i
    27 label *label7
    28 op add :sum.1:i :sum.1:i 1
 
    32 print "|"
    33 set *tmp3 :sum.1:c
    34 jump *label5 always
-    * set *tmp3 null
    35 label *label5
-    * jump *label9 greaterThanEq *tmp1 *tmp3
+   36 jump *label9 greaterThanEq :sum:c :sum.1:c
    37 print "Less"
    38 set *tmp6 0
    39 jump *label10 always
 
    42 label *label10
    43 set :test:result *tmp6
    44 print "|"
-    * print :test:result
+   45 print *tmp6
    46 label *label0
    47 assertprints "6|28|Less|0" "loops in conditions"
    48 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
     2 # "Function: inline def sum(in n)"
     3 set :sum:n 4
     4 set :sum:c 0
-    * set *tmp2 4
     5 set :sum:i 0
     6 label *label2
-    * jump *label4 greaterThanEq :sum:i :sum:n
+    7 jump *label4 greaterThanEq :sum:i 4
     8 op add :sum:c :sum:c :sum:i
     9 label *label3
    10 op add :sum:i :sum:i 1
 
    12 label *label4
    13 print :sum:c
    14 print "|"
-    * set *tmp1 :sum:c
    15 jump *label1 always
    16 label *label1
    17 # "Function: inline def sum(in n)"
    18 set :sum.1:n 8
    19 set :sum.1:c 0
-    * set *tmp4 8
    20 set :sum.1:i 0
    21 label *label6
-    * jump *label8 greaterThanEq :sum.1:i :sum.1:n
+   22 jump *label8 greaterThanEq :sum.1:i 8
    23 op add :sum.1:c :sum.1:c :sum.1:i
    24 label *label7
    25 op add :sum.1:i :sum.1:i 1
 
    27 label *label8
    28 print :sum.1:c
    29 print "|"
-    * set *tmp3 :sum.1:c
    30 jump *label5 always
    31 label *label5
    32 jump *label9 greaterThanEq :sum:c :sum.1:c
 
    36 label *label9
    37 set *tmp6 1
    38 label *label10
-    * set :test:result *tmp6
    39 print "|"
    40 print *tmp6
    41 label *label0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-2 instructions):
     0 assertflush
     1 # "Function: def test()"
     2 # "Function: inline def sum(in n)"
-    * set :sum:n 4
     3 set :sum:c 0
     4 set :sum:i 0
     5 label *label2
 
    14 jump *label1 always
    15 label *label1
    16 # "Function: inline def sum(in n)"
-    * set :sum.1:n 8
    17 set :sum.1:c 0
    18 set :sum.1:i 0
    19 label *label6

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-2 instructions):
 
     3 set :sum:c 0
     4 set :sum:i 0
     5 label *label2
-    * jump *label4 greaterThanEq :sum:i 4
+    6 label *label11
     7 op add :sum:c :sum:c :sum:i
     8 label *label3
     9 op add :sum:i :sum:i 1
-    * jump *label2 always
+   10 jump *label11 lessThan :sum:i 4
    11 label *label4
    12 print :sum:c
    13 print "|"
 
    17 set :sum.1:c 0
    18 set :sum.1:i 0
    19 label *label6
-    * jump *label8 greaterThanEq :sum.1:i 8
+   20 label *label12
    21 op add :sum.1:c :sum.1:c :sum.1:i
    22 label *label7
    23 op add :sum.1:i :sum.1:i 1
-    * jump *label6 always
+   24 jump *label12 lessThan :sum.1:i 8
    25 label *label8
    26 print :sum.1:c
    27 print "|"

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1:
     0 assertflush
     1 # "Function: def test()"
+    2 set *tmp6 1
     3 # "Function: inline def sum(in n)"
     4 set :sum:c 0
     5 set :sum:i 0
 
    28 print "|"
    29 jump *label5 always
    30 label *label5
-    * jump *label9 greaterThanEq :sum:c :sum.1:c
+   31 jump *label10 greaterThanEq :sum:c :sum.1:c
    32 print "Less"
    33 set *tmp6 0
    34 jump *label10 always
-    * label *label9
-    * set *tmp6 1
    35 label *label10
    36 print "|"
    37 print *tmp6

Modifications by Unroll loop at line 3:5 (+5 instructions):
 
     2 set *tmp6 1
     3 # "Function: inline def sum(in n)"
     4 set :sum:c 0
-    * set :sum:i 0
-    * label *label2
-    * label *label11
-    * op add :sum:c :sum:c :sum:i
-    * label *label3
-    * op add :sum:i :sum:i 1
-    * jump *label11 lessThan :sum:i 4
-    * label *label4
+    5 set :sum:i 0
+    6 label *label13
+    7 label *label14
+    8 op add :sum:c :sum:c :sum:i
+    9 label *label15
+   10 op add :sum:i :sum:i 1
+   11 label *label16
+   12 op add :sum:c :sum:c :sum:i
+   13 label *label17
+   14 op add :sum:i :sum:i 1
+   15 label *label18
+   16 op add :sum:c :sum:c :sum:i
+   17 label *label19
+   18 op add :sum:i :sum:i 1
+   19 label *label20
+   20 op add :sum:c :sum:c :sum:i
+   21 label *label21
+   22 op add :sum:i :sum:i 1
+   23 label *label4
    24 print :sum:c
    25 print "|"
    26 jump *label1 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     5 set :sum:i 0
     6 label *label13
     7 label *label14
-    * op add :sum:c :sum:c :sum:i
+    8 op add :sum:c 0 0
     9 label *label15
-    * op add :sum:i :sum:i 1
+   10 op add :sum:i 0 1
    11 label *label16
-    * op add :sum:c :sum:c :sum:i
+   12 op add :sum:c 0 1
    13 label *label17
-    * op add :sum:i :sum:i 1
+   14 op add :sum:i 1 1
    15 label *label18
-    * op add :sum:c :sum:c :sum:i
+   16 op add :sum:c 1 2
    17 label *label19
-    * op add :sum:i :sum:i 1
+   18 op add :sum:i 2 1
    19 label *label20
-    * op add :sum:c :sum:c :sum:i
+   20 op add :sum:c 3 3
    21 label *label21
-    * op add :sum:i :sum:i 1
+   22 op add :sum:i 3 1
    23 label *label4
-    * print :sum:c
+   24 print 6
    25 print "|"
    26 jump *label1 always
    27 label *label1
 
    39 print "|"
    40 jump *label5 always
    41 label *label5
-    * jump *label10 greaterThanEq :sum:c :sum.1:c
+   42 jump *label10 greaterThanEq 6 :sum.1:c
    43 print "Less"
    44 set *tmp6 0
    45 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
     1 # "Function: def test()"
     2 set *tmp6 1
     3 # "Function: inline def sum(in n)"
-    * set :sum:c 0
-    * set :sum:i 0
     4 label *label13
     5 label *label14
-    * op add :sum:c 0 0
     6 label *label15
-    * op add :sum:i 0 1
     7 label *label16
-    * op add :sum:c 0 1
     8 label *label17
-    * op add :sum:i 1 1
     9 label *label18
-    * op add :sum:c 1 2
    10 label *label19
-    * op add :sum:i 2 1
    11 label *label20
-    * op add :sum:c 3 3
    12 label *label21
-    * op add :sum:i 3 1
    13 label *label4
    14 print 6
    15 print "|"

Modifications by Unroll loop at line 3:5 (+13 instructions):
 
    17 label *label1
    18 # "Function: inline def sum(in n)"
    19 set :sum.1:c 0
-    * set :sum.1:i 0
-    * label *label6
-    * label *label12
-    * op add :sum.1:c :sum.1:c :sum.1:i
-    * label *label7
-    * op add :sum.1:i :sum.1:i 1
-    * jump *label12 lessThan :sum.1:i 8
-    * label *label8
+   20 set :sum.1:i 0
+   21 label *label22
+   22 label *label23
+   23 op add :sum.1:c :sum.1:c :sum.1:i
+   24 label *label24
+   25 op add :sum.1:i :sum.1:i 1
+   26 label *label25
+   27 op add :sum.1:c :sum.1:c :sum.1:i
+   28 label *label26
+   29 op add :sum.1:i :sum.1:i 1
+   30 label *label27
+   31 op add :sum.1:c :sum.1:c :sum.1:i
+   32 label *label28
+   33 op add :sum.1:i :sum.1:i 1
+   34 label *label29
+   35 op add :sum.1:c :sum.1:c :sum.1:i
+   36 label *label30
+   37 op add :sum.1:i :sum.1:i 1
+   38 label *label31
+   39 op add :sum.1:c :sum.1:c :sum.1:i
+   40 label *label32
+   41 op add :sum.1:i :sum.1:i 1
+   42 label *label33
+   43 op add :sum.1:c :sum.1:c :sum.1:i
+   44 label *label34
+   45 op add :sum.1:i :sum.1:i 1
+   46 label *label35
+   47 op add :sum.1:c :sum.1:c :sum.1:i
+   48 label *label36
+   49 op add :sum.1:i :sum.1:i 1
+   50 label *label37
+   51 op add :sum.1:c :sum.1:c :sum.1:i
+   52 label *label38
+   53 op add :sum.1:i :sum.1:i 1
+   54 label *label8
    55 print :sum.1:c
    56 print "|"
    57 jump *label5 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    20 set :sum.1:i 0
    21 label *label22
    22 label *label23
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   23 op add :sum.1:c 0 0
    24 label *label24
-    * op add :sum.1:i :sum.1:i 1
+   25 op add :sum.1:i 0 1
    26 label *label25
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   27 op add :sum.1:c 0 1
    28 label *label26
-    * op add :sum.1:i :sum.1:i 1
+   29 op add :sum.1:i 1 1
    30 label *label27
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   31 op add :sum.1:c 1 2
    32 label *label28
-    * op add :sum.1:i :sum.1:i 1
+   33 op add :sum.1:i 2 1
    34 label *label29
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   35 op add :sum.1:c 3 3
    36 label *label30
-    * op add :sum.1:i :sum.1:i 1
+   37 op add :sum.1:i 3 1
    38 label *label31
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   39 op add :sum.1:c 6 4
    40 label *label32
-    * op add :sum.1:i :sum.1:i 1
+   41 op add :sum.1:i 4 1
    42 label *label33
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   43 op add :sum.1:c 10 5
    44 label *label34
-    * op add :sum.1:i :sum.1:i 1
+   45 op add :sum.1:i 5 1
    46 label *label35
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   47 op add :sum.1:c 15 6
    48 label *label36
-    * op add :sum.1:i :sum.1:i 1
+   49 op add :sum.1:i 6 1
    50 label *label37
-    * op add :sum.1:c :sum.1:c :sum.1:i
+   51 op add :sum.1:c 21 7
    52 label *label38
-    * op add :sum.1:i :sum.1:i 1
+   53 op add :sum.1:i 7 1
    54 label *label8
-    * print :sum.1:c
+   55 print 28
    56 print "|"
    57 jump *label5 always
    58 label *label5
-    * jump *label10 greaterThanEq 6 :sum.1:c
+   59 jump *label10 greaterThanEq 6 28
    60 print "Less"
    61 set *tmp6 0
    62 jump *label10 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-18 instructions):
 
    16 jump *label1 always
    17 label *label1
    18 # "Function: inline def sum(in n)"
-    * set :sum.1:c 0
-    * set :sum.1:i 0
    19 label *label22
    20 label *label23
-    * op add :sum.1:c 0 0
    21 label *label24
-    * op add :sum.1:i 0 1
    22 label *label25
-    * op add :sum.1:c 0 1
    23 label *label26
-    * op add :sum.1:i 1 1
    24 label *label27
-    * op add :sum.1:c 1 2
    25 label *label28
-    * op add :sum.1:i 2 1
    26 label *label29
-    * op add :sum.1:c 3 3
    27 label *label30
-    * op add :sum.1:i 3 1
    28 label *label31
-    * op add :sum.1:c 6 4
    29 label *label32
-    * op add :sum.1:i 4 1
    30 label *label33
-    * op add :sum.1:c 10 5
    31 label *label34
-    * op add :sum.1:i 5 1
    32 label *label35
-    * op add :sum.1:c 15 6
    33 label *label36
-    * op add :sum.1:i 6 1
    34 label *label37
-    * op add :sum.1:c 21 7
    35 label *label38
-    * op add :sum.1:i 7 1
    36 label *label8
    37 print 28
    38 print "|"

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-1 instructions):
 
    38 print "|"
    39 jump *label5 always
    40 label *label5
-    * jump *label10 greaterThanEq 6 28
    41 print "Less"
    42 set *tmp6 0
    43 jump *label10 always

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-3 instructions):
 
    13 label *label4
    14 print 6
    15 print "|"
-    * jump *label1 always
    16 label *label1
    17 # "Function: inline def sum(in n)"
    18 label *label22
 
    35 label *label8
    36 print 28
    37 print "|"
-    * jump *label5 always
    38 label *label5
    39 print "Less"
    40 set *tmp6 0
-    * jump *label10 always
    41 label *label10
    42 print "|"
    43 print *tmp6

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
     0 assertflush
     1 # "Function: def test()"
-    * set *tmp6 1
     2 # "Function: inline def sum(in n)"
     3 label *label13
     4 label *label14
 
    39 set *tmp6 0
    40 label *label10
    41 print "|"
-    * print *tmp6
+   42 print 0
    43 label *label0
    44 assertprints "6|28|Less|0" "loops in conditions"
    45 stop

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    36 print "|"
    37 label *label5
    38 print "Less"
-    * set *tmp6 0
    39 label *label10
    40 print "|"
    41 print 0

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 assertflush
     1 # "Function: def test()"
     2 # "Function: inline def sum(in n)"
-    * label *label13
-    * label *label14
-    * label *label15
-    * label *label16
-    * label *label17
-    * label *label18
-    * label *label19
-    * label *label20
-    * label *label21
-    * label *label4
     3 print 6
     4 print "|"
-    * label *label1
     5 # "Function: inline def sum(in n)"
-    * label *label22
-    * label *label23
-    * label *label24
-    * label *label25
-    * label *label26
-    * label *label27
-    * label *label28
-    * label *label29
-    * label *label30
-    * label *label31
-    * label *label32
-    * label *label33
-    * label *label34
-    * label *label35
-    * label *label36
-    * label *label37
-    * label *label38
-    * label *label8
     6 print 28
     7 print "|"
-    * label *label5
     8 print "Less"
-    * label *label10
     9 print "|"
    10 print 0
-    * label *label0
    11 assertprints "6|28|Less|0" "loops in conditions"
    12 stop
    13 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
    10 print 0
    11 assertprints "6|28|Less|0" "loops in conditions"
    12 stop
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-6 instructions):
     0 assertflush
     1 # "Function: def test()"
     2 # "Function: inline def sum(in n)"
-    * print 6
-    * print "|"
+    3 print "6|28|Less|0"
     4 # "Function: inline def sum(in n)"
-    * print 28
-    * print "|"
-    * print "Less"
-    * print "|"
-    * print 0
     5 assertprints "6|28|Less|0" "loops in conditions"
     6 stop

Final code before resolving virtual instructions:

assertflush
# "Function: def test()"
# "Function: inline def sum(in n)"
print "6|28|Less|0"
# "Function: inline def sum(in n)"
assertprints "6|28|Less|0" "loops in conditions"
stop
