   152 instructions before optimizations.
     6 instructions eliminated by Temp Variables Elimination (5 iterations).
    15 instructions eliminated by Dead Code Elimination (6 iterations).
     3 instructions eliminated by Jump Optimization (4 iterations).
     3 instructions eliminated by Single Step Elimination (5 iterations).
     7 instructions eliminated by Data Flow Optimization (4 iterations).
     3 instructions eliminated by Unreachable Code Elimination (2 iterations).
    12 instructions eliminated by Stack Optimization.
   103 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-9 instructions):
 
     4 set :foo:b 0
     5 callrec bank1 *label0 *label3 :foo*retval
     6 label *label3
-    * set *tmp0 :foo*retval
     7 assertprints "0001111223221211" "foo"
     8 assertflush
     9 set :bar:n 3
 
    11 set :bar:b 0
    12 callrec bank1 *label1 *label4 :bar*retval
    13 label *label4
-    * set *tmp1 :bar*retval
    14 assertprints "0001111223333444" "bar"
    15 assertflush
    16 set :baz:n 3
 
    18 set :baz:b 0
    19 callrec bank1 *label2 *label5 :baz*retval
    20 label *label5
-    * set *tmp2 :baz*retval
    21 assertprints "0001111223221211" "baz"
    22 stop
    23 end
 
    44 pop bank1 :foo:a
    45 pop bank1 :foo:n
    46 set *tmp9 :foo*retval
-    * set *tmp5 *tmp9
    47 jump *label8 always
    48 label *label7
-    * set *tmp5 null
    49 label *label8
    50 op add *tmp10 :foo:b 1
    51 set :foo:b *tmp10
 
    78 set :bar:a *tmp18
    79 pop bank1 :bar:n
    80 set *tmp19 :bar*retval
-    * set *tmp13 *tmp19
    81 jump *label12 always
    82 label *label11
-    * set *tmp13 null
    83 label *label12
    84 op add *tmp20 :bar:b 1
    85 set :bar:b *tmp20
 
   112 pop bank1 :baz:b
   113 pop bank1 :baz:n
   114 set *tmp27 :baz*retval
-    * set *tmp23 *tmp27
   115 jump *label16 always
   116 label *label15
-    * set *tmp23 null
   117 label *label16
   118 op add *tmp28 :baz:b 1
   119 set :baz:b *tmp28

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-3 instructions):
 
    43 pop bank1 :foo:b
    44 pop bank1 :foo:a
    45 pop bank1 :foo:n
-    * set *tmp9 :foo*retval
    46 jump *label8 always
    47 label *label7
    48 label *label8
 
    76 set :bar:b *tmp17
    77 set :bar:a *tmp18
    78 pop bank1 :bar:n
-    * set *tmp19 :bar*retval
    79 jump *label12 always
    80 label *label11
    81 label *label12
 
   109 pop bank1 :baz:a
   110 pop bank1 :baz:b
   111 pop bank1 :baz:n
-    * set *tmp27 :baz*retval
   112 jump *label16 always
   113 label *label15
   114 label *label16

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-3 instructions):
 
    50 set :foo:b *tmp10
    51 print :foo:a
    52 print :foo:b
-    * set :foo*retval :foo:b
    53 label *label6
    54 returnrec bank1
    55 end
 
    82 set :bar:b *tmp20
    83 print :bar:a
    84 print :bar:b
-    * set :bar*retval :bar:b
    85 label *label10
    86 returnrec bank1
    87 end
 
   114 set :baz:b *tmp28
   115 print :baz:a
   116 print :baz:b
-    * set :baz*retval :baz:b
   117 label *label14
   118 returnrec bank1
   119 end

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-6 instructions):
 
    25 # "Function: def foo(in n, in a, in b)"
    26 print :foo:a
    27 print :foo:b
-    * op add *tmp3 :foo:a 1
-    * set :foo:a *tmp3
+   28 op add :foo:a :foo:a 1
    29 op greaterThan *tmp4 :foo:n 0
    30 jump *label7 equal *tmp4 false
    31 op sub *tmp6 :foo:n 1
 
    45 jump *label8 always
    46 label *label7
    47 label *label8
-    * op add *tmp10 :foo:b 1
-    * set :foo:b *tmp10
+   48 op add :foo:b :foo:b 1
    49 print :foo:a
    50 print :foo:b
    51 label *label6
 
    55 # "Function: def bar(in n, in out a, in out b)"
    56 print :bar:a
    57 print :bar:b
-    * op add *tmp11 :bar:a 1
-    * set :bar:a *tmp11
+   58 op add :bar:a :bar:a 1
    59 op greaterThan *tmp12 :bar:n 0
    60 jump *label11 equal *tmp12 false
    61 op sub *tmp14 :bar:n 1
 
    75 jump *label12 always
    76 label *label11
    77 label *label12
-    * op add *tmp20 :bar:b 1
-    * set :bar:b *tmp20
+   78 op add :bar:b :bar:b 1
    79 print :bar:a
    80 print :bar:b
    81 label *label10
 
    85 # "Function: def baz(in n, in out a, in out b)"
    86 print :baz:a
    87 print :baz:b
-    * op add *tmp21 :baz:a 1
-    * set :baz:a *tmp21
+   88 op add :baz:a :baz:a 1
    89 op greaterThan *tmp22 :baz:n 0
    90 jump *label15 equal *tmp22 false
    91 op sub *tmp24 :baz:n 1
 
   105 jump *label16 always
   106 label *label15
   107 label *label16
-    * op add *tmp28 :baz:b 1
-    * set :baz:b *tmp28
+  108 op add :baz:b :baz:b 1
   109 print :baz:a
   110 print :baz:b
   111 label *label14

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
    26 print :foo:a
    27 print :foo:b
    28 op add :foo:a :foo:a 1
-    * op greaterThan *tmp4 :foo:n 0
-    * jump *label7 equal *tmp4 false
+   29 jump *label7 lessThanEq :foo:n 0
    30 op sub *tmp6 :foo:n 1
    31 push bank1 :foo:n
    32 push bank1 :foo:a
 
    55 print :bar:a
    56 print :bar:b
    57 op add :bar:a :bar:a 1
-    * op greaterThan *tmp12 :bar:n 0
-    * jump *label11 equal *tmp12 false
+   58 jump *label11 lessThanEq :bar:n 0
    59 op sub *tmp14 :bar:n 1
    60 push bank1 :bar:n
    61 set *tmp15 :bar:b
 
    84 print :baz:a
    85 print :baz:b
    86 op add :baz:a :baz:a 1
-    * op greaterThan *tmp22 :baz:n 0
-    * jump *label15 equal *tmp22 false
+   87 jump *label15 lessThanEq :baz:n 0
    88 op sub *tmp24 :baz:n 1
    89 push bank1 :baz:n
    90 push bank1 :baz:b

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-3 instructions):
 
    41 pop bank1 :foo:b
    42 pop bank1 :foo:a
    43 pop bank1 :foo:n
-    * jump *label8 always
    44 label *label7
    45 label *label8
    46 op add :foo:b :foo:b 1
 
    69 set :bar:b *tmp17
    70 set :bar:a *tmp18
    71 pop bank1 :bar:n
-    * jump *label12 always
    72 label *label11
    73 label *label12
    74 op add :bar:b :bar:b 1
 
    97 pop bank1 :baz:a
    98 pop bank1 :baz:b
    99 pop bank1 :baz:n
-    * jump *label16 always
   100 label *label15
   101 label *label16
   102 op add :baz:b :baz:b 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    33 push bank1 :foo:b
    34 set *tmp7 :foo:b
    35 set *tmp8 :foo:a
-    * set :foo:n *tmp6
-    * set :foo:a *tmp7
+   36 op sub :foo:n :foo:n 1
+   37 set :foo:a :foo:b
    38 set :foo:b *tmp8
    39 callrec bank1 *label0 *label9 :foo*retval
    40 label *label9
 
    59 push bank1 :bar:n
    60 set *tmp15 :bar:b
    61 set *tmp16 :bar:a
-    * set :bar:n *tmp14
-    * set :bar:a *tmp15
+   62 op sub :bar:n :bar:n 1
+   63 set :bar:a :bar:b
    64 set :bar:b *tmp16
    65 callrec bank1 *label1 *label13 :bar*retval
    66 label *label13
    67 set *tmp17 :bar:a
    68 set *tmp18 :bar:b
-    * set :bar:b *tmp17
+   69 set :bar:b :bar:a
    70 set :bar:a *tmp18
    71 pop bank1 :bar:n
    72 label *label11
 
    89 push bank1 :baz:a
    90 set *tmp25 :baz:b
    91 set *tmp26 :baz:a
-    * set :baz:n *tmp24
-    * set :baz:a *tmp25
+   92 op sub :baz:n :baz:n 1
+   93 set :baz:a :baz:b
    94 set :baz:b *tmp26
    95 callrec bank1 *label2 *label17 :baz*retval
    96 label *label17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-7 instructions):
 
    27 print :foo:b
    28 op add :foo:a :foo:a 1
    29 jump *label7 lessThanEq :foo:n 0
-    * op sub *tmp6 :foo:n 1
    30 push bank1 :foo:n
    31 push bank1 :foo:a
    32 push bank1 :foo:b
-    * set *tmp7 :foo:b
    33 set *tmp8 :foo:a
    34 op sub :foo:n :foo:n 1
    35 set :foo:a :foo:b
 
    53 print :bar:b
    54 op add :bar:a :bar:a 1
    55 jump *label11 lessThanEq :bar:n 0
-    * op sub *tmp14 :bar:n 1
    56 push bank1 :bar:n
-    * set *tmp15 :bar:b
    57 set *tmp16 :bar:a
    58 op sub :bar:n :bar:n 1
    59 set :bar:a :bar:b
    60 set :bar:b *tmp16
    61 callrec bank1 *label1 *label13 :bar*retval
    62 label *label13
-    * set *tmp17 :bar:a
    63 set *tmp18 :bar:b
    64 set :bar:b :bar:a
    65 set :bar:a *tmp18
 
    78 print :baz:b
    79 op add :baz:a :baz:a 1
    80 jump *label15 lessThanEq :baz:n 0
-    * op sub *tmp24 :baz:n 1
    81 push bank1 :baz:n
    82 push bank1 :baz:b
    83 push bank1 :baz:a
-    * set *tmp25 :baz:b
    84 set *tmp26 :baz:a
    85 op sub :baz:n :baz:n 1
    86 set :baz:a :baz:b

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
 
    40 pop bank1 :foo:a
    41 pop bank1 :foo:n
    42 label *label7
-    * label *label8
    43 op add :foo:b :foo:b 1
    44 print :foo:a
    45 print :foo:b
-    * label *label6
    46 returnrec bank1
    47 end
    48 label *label1
 
    63 set :bar:a *tmp18
    64 pop bank1 :bar:n
    65 label *label11
-    * label *label12
    66 op add :bar:b :bar:b 1
    67 print :bar:a
    68 print :bar:b
-    * label *label10
    69 returnrec bank1
    70 end
    71 label *label2
 
    87 pop bank1 :baz:b
    88 pop bank1 :baz:n
    89 label *label15
-    * label *label16
    90 op add :baz:b :baz:b 1
    91 print :baz:a
    92 print :baz:b
-    * label *label14
    93 returnrec bank1
    94 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 3, iteration 1 (-3 instructions):
 
    44 print :foo:a
    45 print :foo:b
    46 returnrec bank1
-    * end
    47 label *label1
    48 # "Function: def bar(in n, in out a, in out b)"
    49 print :bar:a
 
    66 print :bar:a
    67 print :bar:b
    68 returnrec bank1
-    * end
    69 label *label2
    70 # "Function: def baz(in n, in out a, in out b)"
    71 print :baz:a
 
    89 print :baz:a
    90 print :baz:b
    91 returnrec bank1
-    * end

Modifications by Final phase, Stack Optimization, iteration 1 (-12 instructions):
 
    27 print :foo:b
    28 op add :foo:a :foo:a 1
    29 jump *label7 lessThanEq :foo:n 0
-    * push bank1 :foo:n
    30 push bank1 :foo:a
    31 push bank1 :foo:b
    32 set *tmp8 :foo:a
 
    37 label *label9
    38 pop bank1 :foo:b
    39 pop bank1 :foo:a
-    * pop bank1 :foo:n
    40 label *label7
    41 op add :foo:b :foo:b 1
    42 print :foo:a
 
    48 print :bar:b
    49 op add :bar:a :bar:a 1
    50 jump *label11 lessThanEq :bar:n 0
-    * push bank1 :bar:n
    51 set *tmp16 :bar:a
    52 op sub :bar:n :bar:n 1
    53 set :bar:a :bar:b
 
    57 set *tmp18 :bar:b
    58 set :bar:b :bar:a
    59 set :bar:a *tmp18
-    * pop bank1 :bar:n
    60 label *label11
    61 op add :bar:b :bar:b 1
    62 print :bar:a
 
    68 print :baz:b
    69 op add :baz:a :baz:a 1
    70 jump *label15 lessThanEq :baz:n 0
-    * push bank1 :baz:n
    71 push bank1 :baz:b
    72 push bank1 :baz:a
    73 set *tmp26 :baz:a
 
    78 label *label17
    79 pop bank1 :baz:a
    80 pop bank1 :baz:b
-    * pop bank1 :baz:n
    81 label *label15
    82 op add :baz:b :baz:b 1
    83 print :baz:a

Final code before resolving virtual instructions:

set *sp 0
assertflush
set :foo:n 3
set :foo:a 0
set :foo:b 0
callrec bank1 *label0 *label3 :foo*retval
label *label3
assertprints "0001111223221211" "foo"
assertflush
set :bar:n 3
set :bar:a 0
set :bar:b 0
callrec bank1 *label1 *label4 :bar*retval
label *label4
assertprints "0001111223333444" "bar"
assertflush
set :baz:n 3
set :baz:a 0
set :baz:b 0
callrec bank1 *label2 *label5 :baz*retval
label *label5
assertprints "0001111223221211" "baz"
stop
end
label *label0
# "Function: def foo(in n, in a, in b)"
print :foo:a
print :foo:b
op add :foo:a :foo:a 1
jump *label7 lessThanEq :foo:n 0
push bank1 :foo:a
push bank1 :foo:b
set *tmp8 :foo:a
op sub :foo:n :foo:n 1
set :foo:a :foo:b
set :foo:b *tmp8
callrec bank1 *label0 *label9 :foo*retval
label *label9
pop bank1 :foo:b
pop bank1 :foo:a
label *label7
op add :foo:b :foo:b 1
print :foo:a
print :foo:b
returnrec bank1
label *label1
# "Function: def bar(in n, in out a, in out b)"
print :bar:a
print :bar:b
op add :bar:a :bar:a 1
jump *label11 lessThanEq :bar:n 0
set *tmp16 :bar:a
op sub :bar:n :bar:n 1
set :bar:a :bar:b
set :bar:b *tmp16
callrec bank1 *label1 *label13 :bar*retval
label *label13
set *tmp18 :bar:b
set :bar:b :bar:a
set :bar:a *tmp18
label *label11
op add :bar:b :bar:b 1
print :bar:a
print :bar:b
returnrec bank1
label *label2
# "Function: def baz(in n, in out a, in out b)"
print :baz:a
print :baz:b
op add :baz:a :baz:a 1
jump *label15 lessThanEq :baz:n 0
push bank1 :baz:b
push bank1 :baz:a
set *tmp26 :baz:a
op sub :baz:n :baz:n 1
set :baz:a :baz:b
set :baz:b *tmp26
callrec bank1 *label2 *label17 :baz*retval
label *label17
pop bank1 :baz:a
pop bank1 :baz:b
label *label15
op add :baz:b :baz:b 1
print :baz:a
print :baz:b
returnrec bank1
