   540 instructions before optimizations.
    56 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
    43 instructions eliminated by Dead Code Elimination (6 iterations).
    20 instructions eliminated by Jump Optimization (5 iterations).
    16 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     5 instructions eliminated by If Expression Optimization (3 iterations).
    27 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
     3 instructions added by Loop Optimization (3 iterations).
     4 loops improved by Loop Optimization.
   137 instructions added by Case Switching (5 iterations).
     1 case expressions converted to switched jumps Case Switching.
    11 instructions eliminated by Jump Straightening (2 passes, 5 iterations).
     3 instructions updated by JumpThreading.
    22 instructions eliminated by Print Merging.
   479 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 622):
  * Replicate loop condition at line 160:1                       cost     1, benefit       25.0, efficiency     25.000 (-5 instructions)
    Convert case at line 20:9 (segments: 1)                      cost   137, benefit      625.0, efficiency      4.562

Pass 1: speed optimization selection (cost limit 627):
  * Convert case at line 20:9 (segments: 1)                      cost   137, benefit      625.0, efficiency      4.562 (+137 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    30 getlink *tmp6 :n
    31 set :block *tmp6
    32 sensor *tmp8 :block @type
-    * set *tmp9 *tmp8
-    * jump *label8 equal *tmp9 @message
+   33 jump *label8 equal *tmp8 @message
    34 jump *label7 always
    35 label *label8
    36 set .MESSAGE :block
    37 set *tmp7 .MESSAGE
    38 jump *label6 always
    39 label *label7
-    * jump *label10 equal *tmp9 @switch
+   40 jump *label10 equal *tmp8 @switch
    41 jump *label9 always
    42 label *label10
    43 set .SWITCH :block
    44 set *tmp7 .SWITCH
    45 jump *label6 always
    46 label *label9
-    * jump *label12 equal *tmp9 @logic-display
-    * jump *label12 equal *tmp9 @large-logic-display
+   47 jump *label12 equal *tmp8 @logic-display
+   48 jump *label12 equal *tmp8 @large-logic-display
    49 jump *label11 always
    50 label *label12
    51 set .DISPLAY :block
    52 set *tmp7 .DISPLAY
    53 jump *label6 always
    54 label *label11
-    * jump *label14 equal *tmp9 @silicon-smelter
+   55 jump *label14 equal *tmp8 @silicon-smelter
    56 jump *label13 always
    57 label *label14
    58 set .TYPE @silicon-smelter
 
    69 set *tmp7 .OUTPUT
    70 jump *label6 always
    71 label *label13
-    * jump *label16 equal *tmp9 @silicon-crucible
+   72 jump *label16 equal *tmp8 @silicon-crucible
    73 jump *label15 always
    74 label *label16
    75 set .TYPE @silicon-crucible
 
    86 set *tmp7 .OUTPUT
    87 jump *label6 always
    88 label *label15
-    * jump *label18 equal *tmp9 @kiln
+   89 jump *label18 equal *tmp8 @kiln
    90 jump *label17 always
    91 label *label18
    92 set .TYPE @kiln
 
   103 set *tmp7 .OUTPUT
   104 jump *label6 always
   105 label *label17
-    * jump *label20 equal *tmp9 @phase-weaver
+  106 jump *label20 equal *tmp8 @phase-weaver
   107 jump *label19 always
   108 label *label20
   109 set .TYPE @phase-weaver
 
   120 set *tmp7 .OUTPUT
   121 jump *label6 always
   122 label *label19
-    * jump *label22 equal *tmp9 @pyratite-mixer
+  123 jump *label22 equal *tmp8 @pyratite-mixer
   124 jump *label21 always
   125 label *label22
   126 set .TYPE @pyratite-mixer
 
   137 set *tmp7 .OUTPUT
   138 jump *label6 always
   139 label *label21
-    * jump *label24 equal *tmp9 @blast-mixer
+  140 jump *label24 equal *tmp8 @blast-mixer
   141 jump *label23 always
   142 label *label24
   143 set .TYPE @blast-mixer
 
   154 set *tmp7 .OUTPUT
   155 jump *label6 always
   156 label *label23
-    * jump *label26 equal *tmp9 @plastanium-compressor
+  157 jump *label26 equal *tmp8 @plastanium-compressor
   158 jump *label25 always
   159 label *label26
   160 set .TYPE @plastanium-compressor

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-35 instructions):
 
    34 jump *label7 always
    35 label *label8
    36 set .MESSAGE :block
-    * set *tmp7 .MESSAGE
    37 jump *label6 always
    38 label *label7
    39 jump *label10 equal *tmp8 @switch
    40 jump *label9 always
    41 label *label10
    42 set .SWITCH :block
-    * set *tmp7 .SWITCH
    43 jump *label6 always
    44 label *label9
    45 jump *label12 equal *tmp8 @logic-display
 
    47 jump *label11 always
    48 label *label12
    49 set .DISPLAY :block
-    * set *tmp7 .DISPLAY
    50 jump *label6 always
    51 label *label11
    52 jump *label14 equal *tmp8 @silicon-smelter
 
    63 set .MUL2 .MUL3
    64 set .MUL1 .MUL2
    65 set .OUTPUT @silicon
-    * set *tmp7 .OUTPUT
    66 jump *label6 always
    67 label *label13
    68 jump *label16 equal *tmp8 @silicon-crucible
 
    79 set .MUL2 .MUL3
    80 set .MUL1 .MUL2
    81 set .OUTPUT @silicon
-    * set *tmp7 .OUTPUT
    82 jump *label6 always
    83 label *label15
    84 jump *label18 equal *tmp8 @kiln
 
    95 set .MUL2 .MUL3
    96 set .MUL1 .MUL2
    97 set .OUTPUT @metaglass
-    * set *tmp7 .OUTPUT
    98 jump *label6 always
    99 label *label17
   100 jump *label20 equal *tmp8 @phase-weaver
 
   111 set .MUL2 .MUL3
   112 set .MUL1 .MUL2
   113 set .OUTPUT @phase-fabric
-    * set *tmp7 .OUTPUT
   114 jump *label6 always
   115 label *label19
   116 jump *label22 equal *tmp8 @pyratite-mixer
 
   127 set .MUL2 .MUL3
   128 set .MUL1 .MUL2
   129 set .OUTPUT @pyratite
-    * set *tmp7 .OUTPUT
   130 jump *label6 always
   131 label *label21
   132 jump *label24 equal *tmp8 @blast-mixer
 
   143 set .MUL2 .MUL3
   144 set .MUL1 .MUL2
   145 set .OUTPUT @blast-compound
-    * set *tmp7 .OUTPUT
   146 jump *label6 always
   147 label *label23
   148 jump *label26 equal *tmp8 @plastanium-compressor
 
   161 op div *tmp25 250 *tmp24
   162 set .MUL2 *tmp25
   163 set .OUTPUT @plastanium
-    * set *tmp7 .OUTPUT
   164 jump *label6 always
   165 label *label25
   166 print "\n  "
   167 print :block
   168 print " not supported"
-    * set *tmp7 " not supported"
   169 label *label6
   170 label *label4
   171 jump *label3 always
 
   202 op or *tmp28 *tmp26 *tmp27
   203 jump *label27 equal *tmp28 false
   204 print "No block to monitor or display."
-    * set *tmp29 "No block to monitor or display."
   205 jump *label28 always
   206 label *label27
-    * set *tmp29 null
   207 label *label28
   208 printflush .MESSAGE
   209 label *label1
 
   247 op sub *tmp43 *tmp40 :cly
   248 set :clh *tmp43
   249 set :crh :clh
-    * set *tmp32 :crh
   250 jump *label30 always
   251 label *label29
   252 set .OFFSET_X 5
 
   353 label *label46
   354 set *tmp45 *tmp75
   355 label *label36
-    * set *tmp32 *tmp45
   356 label *label30
   357 set *tmp87 .SWITCH
   358 control enabled *tmp87 0
 
   377 op greaterThanEq *tmp92 :index TO_INDEX
   378 jump *label55 equal *tmp92 false
   379 jump *label54 always
-    * set *tmp93 null
   380 jump *label56 always
   381 label *label55
-    * set *tmp93 null
   382 label *label56
   383 getlink *tmp94 :n
   384 set :factory *tmp94
 
   408 jump *label59 equal *tmp109 false
   409 set :minimum :r1
   410 set :icon .RES1
-    * set *tmp110 :icon
   411 jump *label60 always
   412 label *label59
-    * set *tmp110 null
   413 label *label60
   414 op lessThan *tmp111 :r2 :minimum
   415 jump *label61 equal *tmp111 false
   416 set :minimum :r2
   417 set :icon .RES2
-    * set *tmp112 :icon
   418 jump *label62 always
   419 label *label61
-    * set *tmp112 null
   420 label *label62
   421 op lessThan *tmp113 :r3 :minimum
   422 jump *label63 equal *tmp113 false
   423 set :minimum :r3
   424 set :icon .RES3
-    * set *tmp114 :icon
   425 jump *label64 always
   426 label *label63
-    * set *tmp114 null
   427 label *label64
   428 op greaterThan *tmp115 :output 33
   429 op sub *tmp116 100 :output
 
   432 set :showout *tmp118
   433 jump *label65 equal :showout false
   434 set :icon .OUTPUT
-    * set *tmp119 :icon
   435 jump *label66 always
   436 label *label65
-    * set *tmp119 null
   437 label *label66
   438 op idiv *tmp120 :index 8
   439 set :column *tmp120
 
   450 op land *tmp128 *tmp126 *tmp127
   451 jump *label67 equal *tmp128 false
   452 set :icon .TYPE
-    * set *tmp129 :icon
   453 jump *label68 always
   454 label *label67
-    * set *tmp129 null
   455 label *label68
   456 draw color 255 255 255 255
   457 jump *label69 equal :e false
 
   482 draw rect *tmp142 *tmp143 2 2
   483 set *tmp132 null
   484 label *label72
-    * set *tmp130 *tmp132
   485 jump *label70 always
   486 label *label69
   487 draw color 255 80 80 255
 
   501 op sub *tmp153 :y 1
   502 draw lineRect *tmp152 *tmp153 16 16
   503 draw stroke 2
-    * set *tmp130 null
   504 label *label70
   505 op add *tmp154 :x 16
   506 set :x *tmp154
 
   511 set :red 255
   512 set :green 0
   513 set :blue 0
-    * set *tmp158 :blue
   514 jump *label74 always
   515 label *label73
   516 jump *label75 equal :showout false
 
   542 set :blue 0
   543 set *tmp159 :blue
   544 label *label76
-    * set *tmp158 *tmp159
   545 label *label74
   546 op greaterThan *tmp166 :boost EXPECTED_BOOST
   547 jump *label81 equal *tmp166 false
 
   552 op max *tmp170 192 :blue
   553 set :blue *tmp170
   554 set :boost EXPECTED_BOOST
-    * set *tmp167 :boost
   555 jump *label82 always
   556 label *label81
-    * set *tmp167 null
   557 label *label82
   558 op mul *tmp171 .BAR_LENGTH :boost
   559 op idiv *tmp172 *tmp171 EXPECTED_BOOST
 
   566 draw lineRect :x :y :length .BAR_WIDTH
   567 op add *tmp175 :index 1
   568 set :index *tmp175
-    * set *tmp97 :index
   569 jump *label58 always
   570 label *label57
-    * set *tmp97 null
   571 label *label58
   572 label *label53
   573 op add :n :n 1

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-6 instructions):
 
   292 set :clw :crw
   293 set :cly :cry
   294 set :clh :crh
-    * set *tmp45 :clh
   295 jump *label36 always
   296 label *label35
   297 set :clx 0
 
   350 set :crh :clh
   351 set *tmp75 :crh
   352 label *label46
-    * set *tmp45 *tmp75
   353 label *label36
   354 label *label30
   355 set *tmp87 .SWITCH
 
   458 op add *tmp133 :x 7
   459 op add *tmp134 :y 7
   460 draw image *tmp133 *tmp134 :icon 16 0
-    * set *tmp132 null
   461 jump *label72 always
   462 label *label71
   463 draw color 255 80 80 255
 
   477 op add *tmp142 :x 4
   478 op add *tmp143 :y 6
   479 draw rect *tmp142 *tmp143 2 2
-    * set *tmp132 null
   480 label *label72
   481 jump *label70 always
   482 label *label69
 
   514 set :green 0
   515 set :blue 255
   516 set :minimum :output
-    * set *tmp159 :minimum
   517 jump *label76 always
   518 label *label75
   519 op greaterThan *tmp160 :minimum 66
 
   535 label *label80
   536 set :green *tmp165
   537 set :blue 0
-    * set *tmp159 :blue
   538 label *label76
   539 label *label74
   540 op greaterThan *tmp166 :boost EXPECTED_BOOST

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
   341 label *label48
   342 op sub *tmp86 *tmp82 :cry
   343 set :crh *tmp86
-    * set *tmp75 :crh
   344 jump *label46 always
   345 label *label45
   346 set :crx :clx
   347 set :crw :clw
   348 set :cry :cly
   349 set :crh :clh
-    * set *tmp75 :crh
   350 label *label46
   351 label *label36
   352 label *label30

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-56 instructions):
 
    20 jump *label2 equal *tmp2 false
    21 print "Universal Factory Monitor"
    22 print "\n"
-    * set *tmp3 @links
-    * set :n *tmp3
+   23 set :n @links
    24 label *label3
    25 op greaterThan *tmp4 :n 0
    26 jump *label5 equal *tmp4 false
-    * op sub *tmp5 :n 1
-    * set :n *tmp5
-    * getlink *tmp6 :n
-    * set :block *tmp6
+   27 op sub :n :n 1
+   28 getlink :block :n
    29 sensor *tmp8 :block @type
    30 jump *label8 equal *tmp8 @message
    31 jump *label7 always
 
    50 jump *label13 always
    51 label *label14
    52 set .TYPE @silicon-smelter
-    * sensor *tmp10 :block @itemCapacity
-    * set .CAPACITY *tmp10
+   53 sensor .CAPACITY :block @itemCapacity
    54 set .RES1 @sand
    55 set .RES2 @coal
    56 set .RES3 @itemCapacity
-    * op div *tmp11 100 .CAPACITY
-    * set .MUL3 *tmp11
+   57 op div .MUL3 100 .CAPACITY
    58 set .MUL2 .MUL3
    59 set .MUL1 .MUL2
    60 set .OUTPUT @silicon
 
    64 jump *label15 always
    65 label *label16
    66 set .TYPE @silicon-crucible
-    * sensor *tmp12 :block @itemCapacity
-    * set .CAPACITY *tmp12
+   67 sensor .CAPACITY :block @itemCapacity
    68 set .RES1 @sand
    69 set .RES2 @coal
    70 set .RES3 @pyratite
-    * op div *tmp13 100 .CAPACITY
-    * set .MUL3 *tmp13
+   71 op div .MUL3 100 .CAPACITY
    72 set .MUL2 .MUL3
    73 set .MUL1 .MUL2
    74 set .OUTPUT @silicon
 
    78 jump *label17 always
    79 label *label18
    80 set .TYPE @kiln
-    * sensor *tmp14 :block @itemCapacity
-    * set .CAPACITY *tmp14
+   81 sensor .CAPACITY :block @itemCapacity
    82 set .RES1 @sand
    83 set .RES2 @lead
    84 set .RES3 @itemCapacity
-    * op div *tmp15 100 .CAPACITY
-    * set .MUL3 *tmp15
+   85 op div .MUL3 100 .CAPACITY
    86 set .MUL2 .MUL3
    87 set .MUL1 .MUL2
    88 set .OUTPUT @metaglass
 
    92 jump *label19 always
    93 label *label20
    94 set .TYPE @phase-weaver
-    * sensor *tmp16 :block @itemCapacity
-    * set .CAPACITY *tmp16
+   95 sensor .CAPACITY :block @itemCapacity
    96 set .RES1 @sand
    97 set .RES2 @thorium
    98 set .RES3 @itemCapacity
-    * op div *tmp17 100 .CAPACITY
-    * set .MUL3 *tmp17
+   99 op div .MUL3 100 .CAPACITY
   100 set .MUL2 .MUL3
   101 set .MUL1 .MUL2
   102 set .OUTPUT @phase-fabric
 
   106 jump *label21 always
   107 label *label22
   108 set .TYPE @pyratite-mixer
-    * sensor *tmp18 :block @itemCapacity
-    * set .CAPACITY *tmp18
+  109 sensor .CAPACITY :block @itemCapacity
   110 set .RES1 @sand
   111 set .RES2 @coal
   112 set .RES3 @lead
-    * op div *tmp19 100 .CAPACITY
-    * set .MUL3 *tmp19
+  113 op div .MUL3 100 .CAPACITY
   114 set .MUL2 .MUL3
   115 set .MUL1 .MUL2
   116 set .OUTPUT @pyratite
 
   120 jump *label23 always
   121 label *label24
   122 set .TYPE @blast-mixer
-    * sensor *tmp20 :block @itemCapacity
-    * set .CAPACITY *tmp20
+  123 sensor .CAPACITY :block @itemCapacity
   124 set .RES1 @pyratite
   125 set .RES2 @spore-pod
   126 set .RES3 @itemCapacity
-    * op div *tmp21 100 .CAPACITY
-    * set .MUL3 *tmp21
+  127 op div .MUL3 100 .CAPACITY
   128 set .MUL2 .MUL3
   129 set .MUL1 .MUL2
   130 set .OUTPUT @blast-compound
 
   134 jump *label25 always
   135 label *label26
   136 set .TYPE @plastanium-compressor
-    * sensor *tmp22 :block @itemCapacity
-    * set .CAPACITY *tmp22
+  137 sensor .CAPACITY :block @itemCapacity
   138 set .RES1 @titanium
   139 set .RES2 @oil
   140 set .RES3 @itemCapacity
-    * op div *tmp23 100 .CAPACITY
-    * set .MUL3 *tmp23
+  141 op div .MUL3 100 .CAPACITY
   142 set .MUL1 .MUL3
   143 sensor *tmp24 :block @liquidCapacity
-    * op div *tmp25 250 *tmp24
-    * set .MUL2 *tmp25
+  144 op div .MUL2 250 *tmp24
   145 set .OUTPUT @plastanium
   146 jump *label6 always
   147 label *label25
 
   203 set :clx 0
   204 set :crx :clx
   205 op add *tmp33 .OFFSET_X .BAR_SPACE
-    * op sub *tmp34 *tmp33 2
-    * set :clw *tmp34
+  206 op sub :clw *tmp33 2
   207 set :crw :clw
   208 op equal *tmp35 FROM_INDEX 0
   209 jump *label31 equal *tmp35 false
 
   211 jump *label32 always
   212 label *label31
   213 op mul *tmp37 FROM_INDEX .BAR_GAP
-    * op add *tmp38 .OFFSET_Y *tmp37
-    * set *tmp36 *tmp38
+  214 op add *tmp36 .OFFSET_Y *tmp37
   215 label *label32
   216 set :cly *tmp36
   217 set :cry :cly
   218 op lessThan *tmp39 TO_INDEX 8
   219 jump *label33 equal *tmp39 false
   220 op mul *tmp41 TO_INDEX .BAR_GAP
-    * op add *tmp42 .OFFSET_Y *tmp41
-    * set *tmp40 *tmp42
+  221 op add *tmp40 .OFFSET_Y *tmp41
   222 jump *label34 always
   223 label *label33
   224 set *tmp40 176
   225 label *label34
-    * op sub *tmp43 *tmp40 :cly
-    * set :clh *tmp43
+  226 op sub :clh *tmp40 :cly
   227 set :crh :clh
   228 jump *label30 always
   229 label *label29
 
   236 op greaterThanEq *tmp44 FROM_INDEX 8
   237 jump *label35 equal *tmp44 false
   238 op add *tmp46 .OFFSET_X .BAR_SPACE
-    * op sub *tmp47 *tmp46 2
-    * set :crx *tmp47
+  239 op sub :crx *tmp46 2
   240 op add *tmp48 .OFFSET_X .BAR_SPACE
   241 op sub *tmp49 176 *tmp48
-    * op add *tmp50 *tmp49 1
-    * set :crw *tmp50
+  242 op add :crw *tmp49 1
   243 op mod *tmp51 FROM_INDEX 8
   244 op equal *tmp52 *tmp51 0
   245 jump *label37 equal *tmp52 false
 
   248 label *label37
   249 op mod *tmp54 FROM_INDEX 8
   250 op mul *tmp55 *tmp54 .BAR_GAP
-    * op add *tmp56 .OFFSET_Y *tmp55
-    * set *tmp53 *tmp56
+  251 op add *tmp53 .OFFSET_Y *tmp55
   252 label *label38
   253 set :cry *tmp53
   254 op lessThan *tmp57 TO_INDEX 16
   255 jump *label39 equal *tmp57 false
   256 op mod *tmp59 TO_INDEX 8
   257 op mul *tmp60 *tmp59 .BAR_GAP
-    * op add *tmp61 .OFFSET_Y *tmp60
-    * set *tmp58 *tmp61
+  258 op add *tmp58 .OFFSET_Y *tmp60
   259 jump *label40 always
   260 label *label39
   261 set *tmp58 176
   262 label *label40
-    * op sub *tmp62 *tmp58 :cry
-    * set :crh *tmp62
+  263 op sub :crh *tmp58 :cry
   264 set :clx :crx
   265 set :clw :crw
   266 set :cly :cry
 
   269 label *label35
   270 set :clx 0
   271 op add *tmp63 .OFFSET_X .BAR_SPACE
-    * op sub *tmp64 *tmp63 2
-    * set :clw *tmp64
+  272 op sub :clw *tmp63 2
   273 op equal *tmp65 FROM_INDEX 0
   274 jump *label41 equal *tmp65 false
   275 set *tmp66 0
   276 jump *label42 always
   277 label *label41
   278 op mul *tmp67 FROM_INDEX .BAR_GAP
-    * op add *tmp68 .OFFSET_Y *tmp67
-    * set *tmp66 *tmp68
+  279 op add *tmp66 .OFFSET_Y *tmp67
   280 label *label42
   281 set :cly *tmp66
   282 op lessThan *tmp69 TO_INDEX 8
   283 jump *label43 equal *tmp69 false
   284 op mul *tmp71 TO_INDEX .BAR_GAP
-    * op add *tmp72 .OFFSET_Y *tmp71
-    * set *tmp70 *tmp72
+  285 op add *tmp70 .OFFSET_Y *tmp71
   286 jump *label44 always
   287 label *label43
   288 set *tmp70 176
   289 label *label44
-    * op sub *tmp73 *tmp70 :cly
-    * set :clh *tmp73
+  290 op sub :clh *tmp70 :cly
   291 op greaterThanEq *tmp74 TO_INDEX 8
   292 jump *label45 equal *tmp74 false
   293 op add *tmp76 .OFFSET_X .BAR_SPACE
-    * op sub *tmp77 *tmp76 2
-    * set :crx *tmp77
+  294 op sub :crx *tmp76 2
   295 op add *tmp78 .OFFSET_X .BAR_SPACE
   296 op sub *tmp79 176 *tmp78
-    * op add *tmp80 *tmp79 1
-    * set :crw *tmp80
+  297 op add :crw *tmp79 1
   298 set :cry 0
   299 op lessThan *tmp81 TO_INDEX 16
   300 jump *label47 equal *tmp81 false
   301 op mod *tmp83 TO_INDEX 8
   302 op mul *tmp84 *tmp83 .BAR_GAP
-    * op add *tmp85 .OFFSET_Y *tmp84
-    * set *tmp82 *tmp85
+  303 op add *tmp82 .OFFSET_Y *tmp84
   304 jump *label48 always
   305 label *label47
   306 set *tmp82 176
   307 label *label48
-    * op sub *tmp86 *tmp82 :cry
-    * set :crh *tmp86
+  308 op sub :crh *tmp82 :cry
   309 jump *label46 always
   310 label *label45
   311 set :crx :clx
 
   315 label *label46
   316 label *label36
   317 label *label30
-    * set *tmp87 .SWITCH
-    * control enabled *tmp87 0
+  318 control enabled .SWITCH 0
   319 label *label49
   320 sensor *tmp89 .SWITCH @enabled
   321 op equal *tmp90 *tmp89 0
   322 jump *label51 equal *tmp90 false
-    * set *tmp91 @time
-    * set :start *tmp91
+  323 set :start @time
   324 print "Universal Factory Monitor"
   325 print "\n"
   326 print "Monitoring: "
 
   339 jump *label56 always
   340 label *label55
   341 label *label56
-    * getlink *tmp94 :n
-    * set :factory *tmp94
+  342 getlink :factory :n
   343 sensor *tmp95 :factory @type
   344 op equal *tmp96 *tmp95 .TYPE
   345 jump *label57 equal *tmp96 false
   346 set :minimum 101
   347 sensor *tmp98 :factory .RES1
-    * op mul *tmp99 .MUL1 *tmp98
-    * set :r1 *tmp99
+  348 op mul :r1 .MUL1 *tmp98
   349 sensor *tmp100 :factory .RES2
-    * op mul *tmp101 .MUL2 *tmp100
-    * set :r2 *tmp101
+  350 op mul :r2 .MUL2 *tmp100
   351 sensor *tmp102 :factory .RES3
-    * op mul *tmp103 .MUL3 *tmp102
-    * set :r3 *tmp103
+  352 op mul :r3 .MUL3 *tmp102
   353 sensor *tmp104 :factory .OUTPUT
-    * op mul *tmp105 .MUL1 *tmp104
-    * set :output *tmp105
-    * sensor *tmp106 :factory @enabled
-    * set :e *tmp106
-    * sensor *tmp107 :factory @totalPower
-    * set :power *tmp107
-    * sensor *tmp108 :factory @timescale
-    * set :boost *tmp108
+  354 op mul :output .MUL1 *tmp104
+  355 sensor :e :factory @enabled
+  356 sensor :power :factory @totalPower
+  357 sensor :boost :factory @timescale
   358 op lessThan *tmp109 :r1 :minimum
   359 jump *label59 equal *tmp109 false
   360 set :minimum :r1
 
   379 op greaterThan *tmp115 :output 33
   380 op sub *tmp116 100 :output
   381 op lessThan *tmp117 *tmp116 :minimum
-    * op land *tmp118 *tmp115 *tmp117
-    * set :showout *tmp118
+  382 op land :showout *tmp115 *tmp117
   383 jump *label65 equal :showout false
   384 set :icon .OUTPUT
   385 jump *label66 always
   386 label *label65
   387 label *label66
-    * op idiv *tmp120 :index 8
-    * set :column *tmp120
-    * op mod *tmp121 :index 8
-    * set :row *tmp121
+  388 op idiv :column :index 8
+  389 op mod :row :index 8
   390 op mul *tmp122 :column .BAR_SPACE
-    * op add *tmp123 .OFFSET_X *tmp122
-    * set :x *tmp123
+  391 op add :x .OFFSET_X *tmp122
   392 op mul *tmp124 :row .BAR_GAP
-    * op add *tmp125 .OFFSET_Y *tmp124
-    * set :y *tmp125
+  393 op add :y .OFFSET_Y *tmp124
   394 op greaterThan *tmp126 :minimum 66
   395 op equal *tmp127 :showout false
   396 op land *tmp128 *tmp126 *tmp127
 
   446 draw lineRect *tmp152 *tmp153 16 16
   447 draw stroke 2
   448 label *label70
-    * op add *tmp154 :x 16
-    * set :x *tmp154
+  449 op add :x :x 16
   450 op equal *tmp155 :power 0
   451 op equal *tmp156 :e 0
   452 op land *tmp157 *tmp155 *tmp156
 
   486 label *label74
   487 op greaterThan *tmp166 :boost EXPECTED_BOOST
   488 jump *label81 equal *tmp166 false
-    * op max *tmp168 192 :red
-    * set :red *tmp168
-    * op max *tmp169 192 :green
-    * set :green *tmp169
-    * op max *tmp170 192 :blue
-    * set :blue *tmp170
+  489 op max :red 192 :red
+  490 op max :green 192 :green
+  491 op max :blue 192 :blue
   492 set :boost EXPECTED_BOOST
   493 jump *label82 always
   494 label *label81
   495 label *label82
   496 op mul *tmp171 .BAR_LENGTH :boost
-    * op idiv *tmp172 *tmp171 EXPECTED_BOOST
-    * set :length *tmp172
+  497 op idiv :length *tmp171 EXPECTED_BOOST
   498 draw color :red :green :blue 128
   499 op mul *tmp173 :minimum :length
   500 op idiv *tmp174 *tmp173 100
   501 draw rect :x :y *tmp174 .BAR_WIDTH
   502 draw color :red :green :blue 255
   503 draw lineRect :x :y :length .BAR_WIDTH
-    * op add *tmp175 :index 1
-    * set :index *tmp175
+  504 op add :index :index 1
   505 jump *label58 always
   506 label *label57
   507 label *label58

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-10 instructions):
 
    27 op sub :n :n 1
    28 getlink :block :n
    29 sensor *tmp8 :block @type
-    * jump *label8 equal *tmp8 @message
-    * jump *label7 always
+   30 jump *label7 notEqual *tmp8 @message
    31 label *label8
    32 set .MESSAGE :block
    33 jump *label6 always
    34 label *label7
-    * jump *label10 equal *tmp8 @switch
-    * jump *label9 always
+   35 jump *label9 notEqual *tmp8 @switch
    36 label *label10
    37 set .SWITCH :block
    38 jump *label6 always
    39 label *label9
    40 jump *label12 equal *tmp8 @logic-display
-    * jump *label12 equal *tmp8 @large-logic-display
-    * jump *label11 always
+   41 jump *label11 notEqual *tmp8 @large-logic-display
    42 label *label12
    43 set .DISPLAY :block
    44 jump *label6 always
    45 label *label11
-    * jump *label14 equal *tmp8 @silicon-smelter
-    * jump *label13 always
+   46 jump *label13 notEqual *tmp8 @silicon-smelter
    47 label *label14
    48 set .TYPE @silicon-smelter
    49 sensor .CAPACITY :block @itemCapacity
 
    56 set .OUTPUT @silicon
    57 jump *label6 always
    58 label *label13
-    * jump *label16 equal *tmp8 @silicon-crucible
-    * jump *label15 always
+   59 jump *label15 notEqual *tmp8 @silicon-crucible
    60 label *label16
    61 set .TYPE @silicon-crucible
    62 sensor .CAPACITY :block @itemCapacity
 
    69 set .OUTPUT @silicon
    70 jump *label6 always
    71 label *label15
-    * jump *label18 equal *tmp8 @kiln
-    * jump *label17 always
+   72 jump *label17 notEqual *tmp8 @kiln
    73 label *label18
    74 set .TYPE @kiln
    75 sensor .CAPACITY :block @itemCapacity
 
    82 set .OUTPUT @metaglass
    83 jump *label6 always
    84 label *label17
-    * jump *label20 equal *tmp8 @phase-weaver
-    * jump *label19 always
+   85 jump *label19 notEqual *tmp8 @phase-weaver
    86 label *label20
    87 set .TYPE @phase-weaver
    88 sensor .CAPACITY :block @itemCapacity
 
    95 set .OUTPUT @phase-fabric
    96 jump *label6 always
    97 label *label19
-    * jump *label22 equal *tmp8 @pyratite-mixer
-    * jump *label21 always
+   98 jump *label21 notEqual *tmp8 @pyratite-mixer
    99 label *label22
   100 set .TYPE @pyratite-mixer
   101 sensor .CAPACITY :block @itemCapacity
 
   108 set .OUTPUT @pyratite
   109 jump *label6 always
   110 label *label21
-    * jump *label24 equal *tmp8 @blast-mixer
-    * jump *label23 always
+  111 jump *label23 notEqual *tmp8 @blast-mixer
   112 label *label24
   113 set .TYPE @blast-mixer
   114 sensor .CAPACITY :block @itemCapacity
 
   121 set .OUTPUT @blast-compound
   122 jump *label6 always
   123 label *label23
-    * jump *label26 equal *tmp8 @plastanium-compressor
-    * jump *label25 always
+  124 jump *label25 notEqual *tmp8 @plastanium-compressor
   125 label *label26
   126 set .TYPE @plastanium-compressor
   127 sensor .CAPACITY :block @itemCapacity

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-20 instructions):
 
    22 print "\n"
    23 set :n @links
    24 label *label3
-    * op greaterThan *tmp4 :n 0
-    * jump *label5 equal *tmp4 false
+   25 jump *label5 lessThanEq :n 0
    26 op sub :n :n 1
    27 getlink :block :n
    28 sensor *tmp8 :block @type
 
   181 jump *label0 always
   182 label *label2
   183 sensor *tmp30 .DISPLAY @type
-    * op equal *tmp31 *tmp30 @logic-display
-    * jump *label29 equal *tmp31 false
+  184 jump *label29 notEqual *tmp30 @logic-display
   185 set .OFFSET_X 2
   186 set .OFFSET_Y 2
   187 set .BAR_WIDTH 14
 
   193 op add *tmp33 .OFFSET_X .BAR_SPACE
   194 op sub :clw *tmp33 2
   195 set :crw :clw
-    * op equal *tmp35 FROM_INDEX 0
-    * jump *label31 equal *tmp35 false
+  196 jump *label31 notEqual FROM_INDEX 0
   197 set *tmp36 0
   198 jump *label32 always
   199 label *label31
 
   202 label *label32
   203 set :cly *tmp36
   204 set :cry :cly
-    * op lessThan *tmp39 TO_INDEX 8
-    * jump *label33 equal *tmp39 false
+  205 jump *label33 greaterThanEq TO_INDEX 8
   206 op mul *tmp41 TO_INDEX .BAR_GAP
   207 op add *tmp40 .OFFSET_Y *tmp41
   208 jump *label34 always
 
   219 set .BAR_LENGTH 61
   220 set .BAR_SPACE 88
   221 set .BAR_GAP 22
-    * op greaterThanEq *tmp44 FROM_INDEX 8
-    * jump *label35 equal *tmp44 false
+  222 jump *label35 lessThan FROM_INDEX 8
   223 op add *tmp46 .OFFSET_X .BAR_SPACE
   224 op sub :crx *tmp46 2
   225 op add *tmp48 .OFFSET_X .BAR_SPACE
   226 op sub *tmp49 176 *tmp48
   227 op add :crw *tmp49 1
   228 op mod *tmp51 FROM_INDEX 8
-    * op equal *tmp52 *tmp51 0
-    * jump *label37 equal *tmp52 false
+  229 jump *label37 notEqual *tmp51 0
   230 set *tmp53 0
   231 jump *label38 always
   232 label *label37
 
   235 op add *tmp53 .OFFSET_Y *tmp55
   236 label *label38
   237 set :cry *tmp53
-    * op lessThan *tmp57 TO_INDEX 16
-    * jump *label39 equal *tmp57 false
+  238 jump *label39 greaterThanEq TO_INDEX 16
   239 op mod *tmp59 TO_INDEX 8
   240 op mul *tmp60 *tmp59 .BAR_GAP
   241 op add *tmp58 .OFFSET_Y *tmp60
 
   253 set :clx 0
   254 op add *tmp63 .OFFSET_X .BAR_SPACE
   255 op sub :clw *tmp63 2
-    * op equal *tmp65 FROM_INDEX 0
-    * jump *label41 equal *tmp65 false
+  256 jump *label41 notEqual FROM_INDEX 0
   257 set *tmp66 0
   258 jump *label42 always
   259 label *label41
 
   261 op add *tmp66 .OFFSET_Y *tmp67
   262 label *label42
   263 set :cly *tmp66
-    * op lessThan *tmp69 TO_INDEX 8
-    * jump *label43 equal *tmp69 false
+  264 jump *label43 greaterThanEq TO_INDEX 8
   265 op mul *tmp71 TO_INDEX .BAR_GAP
   266 op add *tmp70 .OFFSET_Y *tmp71
   267 jump *label44 always
 
   269 set *tmp70 176
   270 label *label44
   271 op sub :clh *tmp70 :cly
-    * op greaterThanEq *tmp74 TO_INDEX 8
-    * jump *label45 equal *tmp74 false
+  272 jump *label45 lessThan TO_INDEX 8
   273 op add *tmp76 .OFFSET_X .BAR_SPACE
   274 op sub :crx *tmp76 2
   275 op add *tmp78 .OFFSET_X .BAR_SPACE
   276 op sub *tmp79 176 *tmp78
   277 op add :crw *tmp79 1
   278 set :cry 0
-    * op lessThan *tmp81 TO_INDEX 16
-    * jump *label47 equal *tmp81 false
+  279 jump *label47 greaterThanEq TO_INDEX 16
   280 op mod *tmp83 TO_INDEX 8
   281 op mul *tmp84 *tmp83 .BAR_GAP
   282 op add *tmp82 .OFFSET_Y *tmp84
 
   297 control enabled .SWITCH 0
   298 label *label49
   299 sensor *tmp89 .SWITCH @enabled
-    * op equal *tmp90 *tmp89 0
-    * jump *label51 equal *tmp90 false
+  300 jump *label51 notEqual *tmp89 0
   301 set :start @time
   302 print "Universal Factory Monitor"
   303 print "\n"
 
   311 set :n 0
   312 label *label52
   313 jump *label54 greaterThanEq :n @links
-    * op greaterThanEq *tmp92 :index TO_INDEX
-    * jump *label55 equal *tmp92 false
+  314 jump *label55 lessThan :index TO_INDEX
   315 jump *label54 always
   316 jump *label56 always
   317 label *label55
   318 label *label56
   319 getlink :factory :n
   320 sensor *tmp95 :factory @type
-    * op equal *tmp96 *tmp95 .TYPE
-    * jump *label57 equal *tmp96 false
+  321 jump *label57 notEqual *tmp95 .TYPE
   322 set :minimum 101
   323 sensor *tmp98 :factory .RES1
   324 op mul :r1 .MUL1 *tmp98
 
   331 sensor :e :factory @enabled
   332 sensor :power :factory @totalPower
   333 sensor :boost :factory @timescale
-    * op lessThan *tmp109 :r1 :minimum
-    * jump *label59 equal *tmp109 false
+  334 jump *label59 greaterThanEq :r1 :minimum
   335 set :minimum :r1
   336 set :icon .RES1
   337 jump *label60 always
   338 label *label59
   339 label *label60
-    * op lessThan *tmp111 :r2 :minimum
-    * jump *label61 equal *tmp111 false
+  340 jump *label61 greaterThanEq :r2 :minimum
   341 set :minimum :r2
   342 set :icon .RES2
   343 jump *label62 always
   344 label *label61
   345 label *label62
-    * op lessThan *tmp113 :r3 :minimum
-    * jump *label63 equal *tmp113 false
+  346 jump *label63 greaterThanEq :r3 :minimum
   347 set :minimum :r3
   348 set :icon .RES3
   349 jump *label64 always
 
   374 label *label68
   375 draw color 255 255 255 255
   376 jump *label69 equal :e false
-    * op greaterThan *tmp131 :power 0
-    * jump *label71 equal *tmp131 false
+  377 jump *label71 lessThanEq :power 0
   378 op add *tmp133 :x 7
   379 op add *tmp134 :y 7
   380 draw image *tmp133 *tmp134 :icon 16 0
 
   445 set *tmp163 255
   446 label *label78
   447 set :red *tmp163
-    * op greaterThan *tmp164 :minimum 33
-    * jump *label79 equal *tmp164 false
+  448 jump *label79 lessThanEq :minimum 33
   449 set *tmp165 255
   450 jump *label80 always
   451 label *label79
 
   455 set :blue 0
   456 label *label76
   457 label *label74
-    * op greaterThan *tmp166 :boost EXPECTED_BOOST
-    * jump *label81 equal *tmp166 false
+  458 jump *label81 lessThanEq :boost EXPECTED_BOOST
   459 op max :red 192 :red
   460 op max :green 192 :green
   461 op max :blue 192 :blue

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-9 instructions):
 
   173 op or *tmp28 *tmp26 *tmp27
   174 jump *label27 equal *tmp28 false
   175 print "No block to monitor or display."
-    * jump *label28 always
   176 label *label27
   177 label *label28
   178 printflush .MESSAGE
 
   312 jump *label54 greaterThanEq :n @links
   313 jump *label55 lessThan :index TO_INDEX
   314 jump *label54 always
-    * jump *label56 always
   315 label *label55
   316 label *label56
   317 getlink :factory :n
 
   332 jump *label59 greaterThanEq :r1 :minimum
   333 set :minimum :r1
   334 set :icon .RES1
-    * jump *label60 always
   335 label *label59
   336 label *label60
   337 jump *label61 greaterThanEq :r2 :minimum
   338 set :minimum :r2
   339 set :icon .RES2
-    * jump *label62 always
   340 label *label61
   341 label *label62
   342 jump *label63 greaterThanEq :r3 :minimum
   343 set :minimum :r3
   344 set :icon .RES3
-    * jump *label64 always
   345 label *label63
   346 label *label64
   347 op greaterThan *tmp115 :output 33
 
   350 op land :showout *tmp115 *tmp117
   351 jump *label65 equal :showout false
   352 set :icon .OUTPUT
-    * jump *label66 always
   353 label *label65
   354 label *label66
   355 op idiv :column :index 8
 
   363 op land *tmp128 *tmp126 *tmp127
   364 jump *label67 equal *tmp128 false
   365 set :icon .TYPE
-    * jump *label68 always
   366 label *label67
   367 label *label68
   368 draw color 255 255 255 255
 
   453 op max :green 192 :green
   454 op max :blue 192 :blue
   455 set :boost EXPECTED_BOOST
-    * jump *label82 always
   456 label *label81
   457 label *label82
   458 op mul *tmp171 .BAR_LENGTH :boost
 
   464 draw color :red :green :blue 255
   465 draw lineRect :x :y :length .BAR_WIDTH
   466 op add :index :index 1
-    * jump *label58 always
   467 label *label57
   468 label *label58
   469 label *label53

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set TO_INDEX 16
     2 set EXPECTED_BOOST 1.5
     3 set .TYPE null
-    * set .DISPLAY .TYPE
-    * set .SWITCH .DISPLAY
-    * set .MESSAGE .SWITCH
+    4 set .DISPLAY null
+    5 set .SWITCH .TYPE
+    6 set .MESSAGE .DISPLAY
     7 set .CAPACITY null
-    * set .OUTPUT .CAPACITY
-    * set .RES3 .OUTPUT
-    * set .RES2 .RES3
-    * set .RES1 .RES2
-    * set .MUL3 .RES1
-    * set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+    8 set .OUTPUT null
+    9 set .RES3 .CAPACITY
+   10 set .RES2 .OUTPUT
+   11 set .RES1 .RES3
+   12 set .MUL3 .RES2
+   13 set .MUL2 .RES1
+   14 set .MUL1 .MUL3
    15 set :icon null
    16 label *label0
    17 op equal *tmp0 .DISPLAY null
 
    51 set .RES3 @itemCapacity
    52 op div .MUL3 100 .CAPACITY
    53 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+   54 set .MUL1 .MUL3
    55 set .OUTPUT @silicon
    56 jump *label6 always
    57 label *label13
 
    64 set .RES3 @pyratite
    65 op div .MUL3 100 .CAPACITY
    66 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+   67 set .MUL1 .MUL3
    68 set .OUTPUT @silicon
    69 jump *label6 always
    70 label *label15
 
    77 set .RES3 @itemCapacity
    78 op div .MUL3 100 .CAPACITY
    79 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+   80 set .MUL1 .MUL3
    81 set .OUTPUT @metaglass
    82 jump *label6 always
    83 label *label17
 
    90 set .RES3 @itemCapacity
    91 op div .MUL3 100 .CAPACITY
    92 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+   93 set .MUL1 .MUL3
    94 set .OUTPUT @phase-fabric
    95 jump *label6 always
    96 label *label19
 
   103 set .RES3 @lead
   104 op div .MUL3 100 .CAPACITY
   105 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+  106 set .MUL1 .MUL3
   107 set .OUTPUT @pyratite
   108 jump *label6 always
   109 label *label21
 
   116 set .RES3 @itemCapacity
   117 op div .MUL3 100 .CAPACITY
   118 set .MUL2 .MUL3
-    * set .MUL1 .MUL2
+  119 set .MUL1 .MUL3
   120 set .OUTPUT @blast-compound
   121 jump *label6 always
   122 label *label23
 
   188 set .BAR_SPACE 80
   189 set .BAR_GAP 20
   190 set :clx 0
-    * set :crx :clx
-    * op add *tmp33 .OFFSET_X .BAR_SPACE
-    * op sub :clw *tmp33 2
-    * set :crw :clw
+  191 set :crx 0
+  192 op add *tmp33 2 80
+  193 op sub :clw 82 2
+  194 set :crw 80
   195 jump *label31 notEqual FROM_INDEX 0
   196 set *tmp36 0
   197 jump *label32 always
   198 label *label31
-    * op mul *tmp37 FROM_INDEX .BAR_GAP
-    * op add *tmp36 .OFFSET_Y *tmp37
+  199 op mul *tmp37 FROM_INDEX 20
+  200 op add *tmp36 2 *tmp37
   201 label *label32
   202 set :cly *tmp36
-    * set :cry :cly
+  203 set :cry *tmp36
   204 jump *label33 greaterThanEq TO_INDEX 8
-    * op mul *tmp41 TO_INDEX .BAR_GAP
-    * op add *tmp40 .OFFSET_Y *tmp41
+  205 op mul *tmp41 TO_INDEX 20
+  206 op add *tmp40 2 *tmp41
   207 jump *label34 always
   208 label *label33
   209 set *tmp40 176
   210 label *label34
-    * op sub :clh *tmp40 :cly
+  211 op sub :clh *tmp40 *tmp36
   212 set :crh :clh
   213 jump *label30 always
   214 label *label29
 
   219 set .BAR_SPACE 88
   220 set .BAR_GAP 22
   221 jump *label35 lessThan FROM_INDEX 8
-    * op add *tmp46 .OFFSET_X .BAR_SPACE
-    * op sub :crx *tmp46 2
-    * op add *tmp48 .OFFSET_X .BAR_SPACE
-    * op sub *tmp49 176 *tmp48
-    * op add :crw *tmp49 1
+  222 op add *tmp46 5 88
+  223 op sub :crx 93 2
+  224 op add *tmp48 5 88
+  225 op sub *tmp49 176 93
+  226 op add :crw 83 1
   227 op mod *tmp51 FROM_INDEX 8
   228 jump *label37 notEqual *tmp51 0
   229 set *tmp53 0
   230 jump *label38 always
   231 label *label37
   232 op mod *tmp54 FROM_INDEX 8
-    * op mul *tmp55 *tmp54 .BAR_GAP
-    * op add *tmp53 .OFFSET_Y *tmp55
+  233 op mul *tmp55 *tmp51 22
+  234 op add *tmp53 4 *tmp55
   235 label *label38
   236 set :cry *tmp53
   237 jump *label39 greaterThanEq TO_INDEX 16
   238 op mod *tmp59 TO_INDEX 8
-    * op mul *tmp60 *tmp59 .BAR_GAP
-    * op add *tmp58 .OFFSET_Y *tmp60
+  239 op mul *tmp60 *tmp59 22
+  240 op add *tmp58 4 *tmp60
   241 jump *label40 always
   242 label *label39
   243 set *tmp58 176
   244 label *label40
-    * op sub :crh *tmp58 :cry
-    * set :clx :crx
-    * set :clw :crw
-    * set :cly :cry
+  245 op sub :crh *tmp58 *tmp53
+  246 set :clx 91
+  247 set :clw 84
+  248 set :cly *tmp53
   249 set :clh :crh
   250 jump *label36 always
   251 label *label35
   252 set :clx 0
-    * op add *tmp63 .OFFSET_X .BAR_SPACE
-    * op sub :clw *tmp63 2
+  253 op add *tmp63 5 88
+  254 op sub :clw 93 2
   255 jump *label41 notEqual FROM_INDEX 0
   256 set *tmp66 0
   257 jump *label42 always
   258 label *label41
-    * op mul *tmp67 FROM_INDEX .BAR_GAP
-    * op add *tmp66 .OFFSET_Y *tmp67
+  259 op mul *tmp67 FROM_INDEX 22
+  260 op add *tmp66 4 *tmp67
   261 label *label42
   262 set :cly *tmp66
   263 jump *label43 greaterThanEq TO_INDEX 8
-    * op mul *tmp71 TO_INDEX .BAR_GAP
-    * op add *tmp70 .OFFSET_Y *tmp71
+  264 op mul *tmp71 TO_INDEX 22
+  265 op add *tmp70 4 *tmp71
   266 jump *label44 always
   267 label *label43
   268 set *tmp70 176
   269 label *label44
-    * op sub :clh *tmp70 :cly
+  270 op sub :clh *tmp70 *tmp66
   271 jump *label45 lessThan TO_INDEX 8
-    * op add *tmp76 .OFFSET_X .BAR_SPACE
-    * op sub :crx *tmp76 2
-    * op add *tmp78 .OFFSET_X .BAR_SPACE
-    * op sub *tmp79 176 *tmp78
-    * op add :crw *tmp79 1
+  272 op add *tmp76 5 88
+  273 op sub :crx 93 2
+  274 op add *tmp78 5 88
+  275 op sub *tmp79 176 93
+  276 op add :crw 83 1
   277 set :cry 0
   278 jump *label47 greaterThanEq TO_INDEX 16
   279 op mod *tmp83 TO_INDEX 8
-    * op mul *tmp84 *tmp83 .BAR_GAP
-    * op add *tmp82 .OFFSET_Y *tmp84
+  280 op mul *tmp84 *tmp83 22
+  281 op add *tmp82 4 *tmp84
   282 jump *label48 always
   283 label *label47
   284 set *tmp82 176
   285 label *label48
-    * op sub :crh *tmp82 :cry
+  286 op sub :crh *tmp82 0
   287 jump *label46 always
   288 label *label45
-    * set :crx :clx
-    * set :crw :clw
-    * set :cry :cly
+  289 set :crx 0
+  290 set :crw 91
+  291 set :cry *tmp66
   292 set :crh :clh
   293 label *label46
   294 label *label36
 
   329 sensor :e :factory @enabled
   330 sensor :power :factory @totalPower
   331 sensor :boost :factory @timescale
-    * jump *label59 greaterThanEq :r1 :minimum
+  332 jump *label59 greaterThanEq :r1 101
   333 set :minimum :r1
   334 set :icon .RES1
   335 label *label59
 
   382 draw rect *tmp136 *tmp137 8 4
   383 op add *tmp138 :x 12
   384 op add *tmp139 :y 3
-    * draw rect *tmp138 *tmp139 2 2
+  385 draw rect *tmp138 *tmp135 2 2
   386 op add *tmp140 :x 12
   387 op add *tmp141 :y 9
-    * draw rect *tmp140 *tmp141 2 2
+  388 draw rect *tmp138 *tmp141 2 2
   389 draw color 255 80 80 255
   390 op add *tmp142 :x 4
   391 op add *tmp143 :y 6
 
   404 op add *tmp149 :y 2
   405 op add *tmp150 :x 12
   406 op add *tmp151 :y 12
-    * draw line *tmp148 *tmp149 *tmp150 *tmp151
+  407 draw line *tmp144 *tmp147 *tmp146 *tmp145
   408 draw color 0 0 0 255
   409 op sub *tmp152 :x 1
   410 op sub *tmp153 :y 1
 
   430 label *label75
   431 op greaterThan *tmp160 :minimum 66
   432 op greaterThanEq *tmp161 :boost EXPECTED_BOOST
-    * op land *tmp162 *tmp160 *tmp161
+  433 op land *tmp162 *tmp126 *tmp161
   434 jump *label77 equal *tmp162 false
   435 set *tmp163 0
   436 jump *label78 always
 
   455 set :boost EXPECTED_BOOST
   456 label *label81
   457 label *label82
-    * op mul *tmp171 .BAR_LENGTH :boost
+  458 op mul *tmp171 61 :boost
   459 op idiv :length *tmp171 EXPECTED_BOOST
   460 draw color :red :green :blue 128
   461 op mul *tmp173 :minimum :length
   462 op idiv *tmp174 *tmp173 100
-    * draw rect :x :y *tmp174 .BAR_WIDTH
+  463 draw rect :x :y *tmp174 14
   464 draw color :red :green :blue 255
-    * draw lineRect :x :y :length .BAR_WIDTH
+  465 draw lineRect :x :y :length 14
   466 op add :index :index 1
   467 label *label57
   468 label *label58

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-20 instructions):
 
     2 set EXPECTED_BOOST 1.5
     3 set .TYPE null
     4 set .DISPLAY null
-    * set .SWITCH .TYPE
-    * set .MESSAGE .DISPLAY
+    5 set .SWITCH null
+    6 set .MESSAGE null
     7 set .CAPACITY null
     8 set .OUTPUT null
-    * set .RES3 .CAPACITY
-    * set .RES2 .OUTPUT
-    * set .RES1 .RES3
-    * set .MUL3 .RES2
-    * set .MUL2 .RES1
-    * set .MUL1 .MUL3
+    9 set .RES3 null
+   10 set .RES2 null
+   11 set .RES1 .CAPACITY
+   12 set .MUL3 .OUTPUT
+   13 set .MUL2 .RES3
+   14 set .MUL1 .RES2
    15 set :icon null
    16 label *label0
    17 op equal *tmp0 .DISPLAY null
 
   183 jump *label29 notEqual *tmp30 @logic-display
   184 set .OFFSET_X 2
   185 set .OFFSET_Y 2
-    * set .BAR_WIDTH 14
-    * set .BAR_LENGTH 61
   186 set .BAR_SPACE 80
   187 set .BAR_GAP 20
   188 set :clx 0
   189 set :crx 0
-    * op add *tmp33 2 80
   190 op sub :clw 82 2
   191 set :crw 80
   192 jump *label31 notEqual FROM_INDEX 0
 
   211 label *label29
   212 set .OFFSET_X 5
   213 set .OFFSET_Y 4
-    * set .BAR_WIDTH 14
-    * set .BAR_LENGTH 61
   214 set .BAR_SPACE 88
   215 set .BAR_GAP 22
   216 jump *label35 lessThan FROM_INDEX 8
-    * op add *tmp46 5 88
   217 op sub :crx 93 2
-    * op add *tmp48 5 88
-    * op sub *tmp49 176 93
   218 op add :crw 83 1
   219 op mod *tmp51 FROM_INDEX 8
   220 jump *label37 notEqual *tmp51 0
   221 set *tmp53 0
   222 jump *label38 always
   223 label *label37
-    * op mod *tmp54 FROM_INDEX 8
   224 op mul *tmp55 *tmp51 22
   225 op add *tmp53 4 *tmp55
   226 label *label38
 
   241 jump *label36 always
   242 label *label35
   243 set :clx 0
-    * op add *tmp63 5 88
   244 op sub :clw 93 2
   245 jump *label41 notEqual FROM_INDEX 0
   246 set *tmp66 0
 
   259 label *label44
   260 op sub :clh *tmp70 *tmp66
   261 jump *label45 lessThan TO_INDEX 8
-    * op add *tmp76 5 88
   262 op sub :crx 93 2
-    * op add *tmp78 5 88
-    * op sub *tmp79 176 93
   263 op add :crw 83 1
   264 set :cry 0
   265 jump *label47 greaterThanEq TO_INDEX 16
 
   368 op add *tmp137 :y 5
   369 draw rect *tmp136 *tmp137 8 4
   370 op add *tmp138 :x 12
-    * op add *tmp139 :y 3
   371 draw rect *tmp138 *tmp135 2 2
-    * op add *tmp140 :x 12
   372 op add *tmp141 :y 9
   373 draw rect *tmp138 *tmp141 2 2
   374 draw color 255 80 80 255
 
   385 op add *tmp146 :x 12
   386 op add *tmp147 :y 2
   387 draw line *tmp144 *tmp145 *tmp146 *tmp147
-    * op add *tmp148 :x 2
-    * op add *tmp149 :y 2
-    * op add *tmp150 :x 12
-    * op add *tmp151 :y 12
   388 draw line *tmp144 *tmp147 *tmp146 *tmp145
   389 draw color 0 0 0 255
   390 op sub *tmp152 :x 1
 
   409 set :minimum :output
   410 jump *label76 always
   411 label *label75
-    * op greaterThan *tmp160 :minimum 66
   412 op greaterThanEq *tmp161 :boost EXPECTED_BOOST
   413 op land *tmp162 *tmp126 *tmp161
   414 jump *label77 equal *tmp162 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
     8 set .OUTPUT null
     9 set .RES3 null
    10 set .RES2 null
-    * set .RES1 .CAPACITY
-    * set .MUL3 .OUTPUT
-    * set .MUL2 .RES3
-    * set .MUL1 .RES2
+   11 set .RES1 null
+   12 set .MUL3 null
+   13 set .MUL2 null
+   14 set .MUL1 null
    15 set :icon null
    16 label *label0
    17 op equal *tmp0 .DISPLAY null

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (+2 instructions):
 
    17 op equal *tmp0 .DISPLAY null
    18 op equal *tmp1 .TYPE null
    19 op or *tmp2 *tmp0 *tmp1
-    * jump *label2 equal *tmp2 false
+   20 label *label83
    21 print "Universal Factory Monitor"
    22 print "\n"
    23 set :n @links
    24 label *label3
    25 jump *label5 lessThanEq :n 0
+   26 label *label84
    27 op sub :n :n 1
    28 getlink :block :n
    29 sensor *tmp8 :block @type
 
   140 print " not supported"
   141 label *label6
   142 label *label4
-    * jump *label3 always
+  143 jump *label84 greaterThan :n 0
   144 label *label5
   145 print "Message: "
   146 print .MESSAGE
 
   178 label *label28
   179 printflush .MESSAGE
   180 label *label1
-    * jump *label0 always
+  181 op equal *tmp0 .DISPLAY null
+  182 op equal *tmp1 .TYPE null
+  183 op or *tmp2 *tmp0 *tmp1
+  184 jump *label83 notEqual *tmp2 false
   185 label *label2
   186 sensor *tmp30 .DISPLAY @type
   187 jump *label29 notEqual *tmp30 @logic-display
 
   301 set :n 0
   302 label *label52
   303 jump *label54 greaterThanEq :n @links
+  304 label *label85
   305 jump *label55 lessThan :index TO_INDEX
   306 jump *label54 always
   307 label *label55
 
   453 label *label58
   454 label *label53
   455 op add :n :n 1
-    * jump *label52 always
+  456 jump *label85 lessThan :n @links
   457 label *label54
   458 drawflush .DISPLAY
   459 op sub *tmp176 @time :start

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-5 instructions):
 
   193 set :crx 0
   194 op sub :clw 82 2
   195 set :crw 80
-    * jump *label31 notEqual FROM_INDEX 0
   196 set *tmp36 0
-    * jump *label32 always
+  197 jump *label32 equal FROM_INDEX 0
   198 label *label31
   199 op mul *tmp37 FROM_INDEX 20
   200 op add *tmp36 2 *tmp37
   201 label *label32
   202 set :cly *tmp36
   203 set :cry *tmp36
-    * jump *label33 greaterThanEq TO_INDEX 8
+  204 set *tmp40 176
+  205 jump *label34 greaterThanEq TO_INDEX 8
   206 op mul *tmp41 TO_INDEX 20
   207 op add *tmp40 2 *tmp41
   208 jump *label34 always
-    * label *label33
-    * set *tmp40 176
   209 label *label34
   210 op sub :clh *tmp40 *tmp36
   211 set :crh :clh
 
   218 jump *label35 lessThan FROM_INDEX 8
   219 op sub :crx 93 2
   220 op add :crw 83 1
+  221 set *tmp53 0
   222 op mod *tmp51 FROM_INDEX 8
-    * jump *label37 notEqual *tmp51 0
-    * set *tmp53 0
-    * jump *label38 always
+  223 jump *label38 equal *tmp51 0
   224 label *label37
   225 op mul *tmp55 *tmp51 22
   226 op add *tmp53 4 *tmp55
   227 label *label38
   228 set :cry *tmp53
-    * jump *label39 greaterThanEq TO_INDEX 16
+  229 set *tmp58 176
+  230 jump *label40 greaterThanEq TO_INDEX 16
   231 op mod *tmp59 TO_INDEX 8
   232 op mul *tmp60 *tmp59 22
   233 op add *tmp58 4 *tmp60
   234 jump *label40 always
-    * label *label39
-    * set *tmp58 176
   235 label *label40
   236 op sub :crh *tmp58 *tmp53
   237 set :clx 91
 
   242 label *label35
   243 set :clx 0
   244 op sub :clw 93 2
-    * jump *label41 notEqual FROM_INDEX 0
   245 set *tmp66 0
-    * jump *label42 always
+  246 jump *label42 equal FROM_INDEX 0
   247 label *label41
   248 op mul *tmp67 FROM_INDEX 22
   249 op add *tmp66 4 *tmp67
   250 label *label42
   251 set :cly *tmp66
-    * jump *label43 greaterThanEq TO_INDEX 8
+  252 set *tmp70 176
+  253 jump *label44 greaterThanEq TO_INDEX 8
   254 op mul *tmp71 TO_INDEX 22
   255 op add *tmp70 4 *tmp71
   256 jump *label44 always
-    * label *label43
-    * set *tmp70 176
   257 label *label44
   258 op sub :clh *tmp70 *tmp66
   259 jump *label45 lessThan TO_INDEX 8
   260 op sub :crx 93 2
   261 op add :crw 83 1
   262 set :cry 0
-    * jump *label47 greaterThanEq TO_INDEX 16
+  263 set *tmp82 176
+  264 jump *label48 greaterThanEq TO_INDEX 16
   265 op mod *tmp83 TO_INDEX 8
   266 op mul *tmp84 *tmp83 22
   267 op add *tmp82 4 *tmp84
   268 jump *label48 always
-    * label *label47
-    * set *tmp82 176
   269 label *label48
   270 op sub :crh *tmp82 0
   271 jump *label46 always
 
   407 set :minimum :output
   408 jump *label76 always
   409 label *label75
+  410 set :red 255
   411 op greaterThanEq *tmp161 :boost EXPECTED_BOOST
   412 op land *tmp162 *tmp126 *tmp161
-    * jump *label77 equal *tmp162 false
-    * set *tmp163 0
+  413 jump *label78 equal *tmp162 false
+  414 set :red 0
   415 jump *label78 always
-    * label *label77
-    * set *tmp163 255
   416 label *label78
-    * set :red *tmp163
-    * jump *label79 lessThanEq :minimum 33
-    * set *tmp165 255
+  417 set :green 0
+  418 jump *label80 lessThanEq :minimum 33
+  419 set :green 255
   420 jump *label80 always
-    * label *label79
-    * set *tmp165 0
   421 label *label80
-    * set :green *tmp165
   422 set :blue 0
   423 label *label76
   424 label *label74

Modifications by Replicate loop condition at line 160:1 (+1 instructions):
 
   281 label *label49
   282 sensor *tmp89 .SWITCH @enabled
   283 jump *label51 notEqual *tmp89 0
+  284 label *label86
   285 set :start @time
   286 print "Universal Factory Monitor"
   287 print "\n"
 
   453 print " ms"
   454 printflush .MESSAGE
   455 label *label50
-    * jump *label49 always
+  456 sensor *tmp89 .SWITCH @enabled
+  457 jump *label86 equal *tmp89 0
   458 label *label51
   459 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    14 set .MUL1 null
    15 set :icon null
    16 label *label0
-    * op equal *tmp0 .DISPLAY null
-    * op equal *tmp1 .TYPE null
-    * op or *tmp2 *tmp0 *tmp1
+   17 op equal *tmp0 null null
+   18 op equal *tmp1 null null
+   19 op or *tmp2 true true
    20 label *label83
    21 print "Universal Factory Monitor"
    22 print "\n"
 
   180 label *label1
   181 op equal *tmp0 .DISPLAY null
   182 op equal *tmp1 .TYPE null
-    * op or *tmp2 *tmp0 *tmp1
-    * jump *label83 notEqual *tmp2 false
+  183 op or *tmp2 *tmp26 *tmp27
+  184 jump *label83 notEqual *tmp28 false
   185 label *label2
   186 sensor *tmp30 .DISPLAY @type
   187 jump *label29 notEqual *tmp30 @logic-display
 
   294 set :index FROM_INDEX
   295 set :n 0
   296 label *label52
-    * jump *label54 greaterThanEq :n @links
+  297 jump *label54 greaterThanEq 0 @links
   298 label *label85
   299 jump *label55 lessThan :index TO_INDEX
   300 jump *label54 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
    14 set .MUL1 null
    15 set :icon null
    16 label *label0
-    * op equal *tmp0 null null
-    * op equal *tmp1 null null
-    * op or *tmp2 true true
    17 label *label83
    18 print "Universal Factory Monitor"
    19 print "\n"
 
   175 label *label28
   176 printflush .MESSAGE
   177 label *label1
-    * op equal *tmp0 .DISPLAY null
-    * op equal *tmp1 .TYPE null
-    * op or *tmp2 *tmp26 *tmp27
   178 jump *label83 notEqual *tmp28 false
   179 label *label2
   180 sensor *tmp30 .DISPLAY @type

Modifications by Convert case at line 20:9 (segments: 1) (+137 instructions):
 
    24 op sub :n :n 1
    25 getlink :block :n
    26 sensor *tmp8 :block @type
-    * jump *label7 notEqual *tmp8 @message
+   27 sensor *tmp178 *tmp8 @id
+   28 jump *label87 lessThan *tmp178 2
+   29 jump *label87 greaterThan *tmp178 145
+   30 multijump *label88 *tmp178 2 (m:*label232)
+   31 multilabel *label88 (m:*label232)
+   32 jump *label14 always
+   33 multilabel *label89 (m:*label232)
+   34 jump *label16 always
+   35 multilabel *label90 (m:*label232)
+   36 jump *label18 always
+   37 multilabel *label91 (m:*label232)
+   38 jump *label26 always
+   39 multilabel *label92 (m:*label232)
+   40 jump *label20 always
+   41 multilabel *label93 (m:*label232)
+   42 jump *label87 always
+   43 multilabel *label94 (m:*label232)
+   44 jump *label22 always
+   45 multilabel *label95 (m:*label232)
+   46 jump *label24 always
+   47 multilabel *label96 (m:*label232)
+   48 jump *label87 always
+   49 multilabel *label97 (m:*label232)
+   50 jump *label87 always
+   51 multilabel *label98 (m:*label232)
+   52 jump *label87 always
+   53 multilabel *label99 (m:*label232)
+   54 jump *label87 always
+   55 multilabel *label100 (m:*label232)
+   56 jump *label87 always
+   57 multilabel *label101 (m:*label232)
+   58 jump *label87 always
+   59 multilabel *label102 (m:*label232)
+   60 jump *label87 always
+   61 multilabel *label103 (m:*label232)
+   62 jump *label87 always
+   63 multilabel *label104 (m:*label232)
+   64 jump *label87 always
+   65 multilabel *label105 (m:*label232)
+   66 jump *label87 always
+   67 multilabel *label106 (m:*label232)
+   68 jump *label87 always
+   69 multilabel *label107 (m:*label232)
+   70 jump *label87 always
+   71 multilabel *label108 (m:*label232)
+   72 jump *label87 always
+   73 multilabel *label109 (m:*label232)
+   74 jump *label87 always
+   75 multilabel *label110 (m:*label232)
+   76 jump *label87 always
+   77 multilabel *label111 (m:*label232)
+   78 jump *label87 always
+   79 multilabel *label112 (m:*label232)
+   80 jump *label87 always
+   81 multilabel *label113 (m:*label232)
+   82 jump *label87 always
+   83 multilabel *label114 (m:*label232)
+   84 jump *label87 always
+   85 multilabel *label115 (m:*label232)
+   86 jump *label87 always
+   87 multilabel *label116 (m:*label232)
+   88 jump *label87 always
+   89 multilabel *label117 (m:*label232)
+   90 jump *label87 always
+   91 multilabel *label118 (m:*label232)
+   92 jump *label87 always
+   93 multilabel *label119 (m:*label232)
+   94 jump *label87 always
+   95 multilabel *label120 (m:*label232)
+   96 jump *label87 always
+   97 multilabel *label121 (m:*label232)
+   98 jump *label87 always
+   99 multilabel *label122 (m:*label232)
+  100 jump *label87 always
+  101 multilabel *label123 (m:*label232)
+  102 jump *label87 always
+  103 multilabel *label124 (m:*label232)
+  104 jump *label87 always
+  105 multilabel *label125 (m:*label232)
+  106 jump *label87 always
+  107 multilabel *label126 (m:*label232)
+  108 jump *label87 always
+  109 multilabel *label127 (m:*label232)
+  110 jump *label87 always
+  111 multilabel *label128 (m:*label232)
+  112 jump *label87 always
+  113 multilabel *label129 (m:*label232)
+  114 jump *label87 always
+  115 multilabel *label130 (m:*label232)
+  116 jump *label87 always
+  117 multilabel *label131 (m:*label232)
+  118 jump *label87 always
+  119 multilabel *label132 (m:*label232)
+  120 jump *label87 always
+  121 multilabel *label133 (m:*label232)
+  122 jump *label87 always
+  123 multilabel *label134 (m:*label232)
+  124 jump *label87 always
+  125 multilabel *label135 (m:*label232)
+  126 jump *label87 always
+  127 multilabel *label136 (m:*label232)
+  128 jump *label87 always
+  129 multilabel *label137 (m:*label232)
+  130 jump *label87 always
+  131 multilabel *label138 (m:*label232)
+  132 jump *label87 always
+  133 multilabel *label139 (m:*label232)
+  134 jump *label87 always
+  135 multilabel *label140 (m:*label232)
+  136 jump *label87 always
+  137 multilabel *label141 (m:*label232)
+  138 jump *label87 always
+  139 multilabel *label142 (m:*label232)
+  140 jump *label87 always
+  141 multilabel *label143 (m:*label232)
+  142 jump *label87 always
+  143 multilabel *label144 (m:*label232)
+  144 jump *label87 always
+  145 multilabel *label145 (m:*label232)
+  146 jump *label87 always
+  147 multilabel *label146 (m:*label232)
+  148 jump *label87 always
+  149 multilabel *label147 (m:*label232)
+  150 jump *label87 always
+  151 multilabel *label148 (m:*label232)
+  152 jump *label87 always
+  153 multilabel *label149 (m:*label232)
+  154 jump *label87 always
+  155 multilabel *label150 (m:*label232)
+  156 jump *label87 always
+  157 multilabel *label151 (m:*label232)
+  158 jump *label87 always
+  159 multilabel *label152 (m:*label232)
+  160 jump *label87 always
+  161 multilabel *label153 (m:*label232)
+  162 jump *label87 always
+  163 multilabel *label154 (m:*label232)
+  164 jump *label87 always
+  165 multilabel *label155 (m:*label232)
+  166 jump *label87 always
+  167 multilabel *label156 (m:*label232)
+  168 jump *label87 always
+  169 multilabel *label157 (m:*label232)
+  170 jump *label87 always
+  171 multilabel *label158 (m:*label232)
+  172 jump *label87 always
+  173 multilabel *label159 (m:*label232)
+  174 jump *label87 always
+  175 multilabel *label160 (m:*label232)
+  176 jump *label87 always
+  177 multilabel *label161 (m:*label232)
+  178 jump *label87 always
+  179 multilabel *label162 (m:*label232)
+  180 jump *label87 always
+  181 multilabel *label163 (m:*label232)
+  182 jump *label87 always
+  183 multilabel *label164 (m:*label232)
+  184 jump *label87 always
+  185 multilabel *label165 (m:*label232)
+  186 jump *label87 always
+  187 multilabel *label166 (m:*label232)
+  188 jump *label87 always
+  189 multilabel *label167 (m:*label232)
+  190 jump *label87 always
+  191 multilabel *label168 (m:*label232)
+  192 jump *label87 always
+  193 multilabel *label169 (m:*label232)
+  194 jump *label87 always
+  195 multilabel *label170 (m:*label232)
+  196 jump *label87 always
+  197 multilabel *label171 (m:*label232)
+  198 jump *label87 always
+  199 multilabel *label172 (m:*label232)
+  200 jump *label87 always
+  201 multilabel *label173 (m:*label232)
+  202 jump *label87 always
+  203 multilabel *label174 (m:*label232)
+  204 jump *label87 always
+  205 multilabel *label175 (m:*label232)
+  206 jump *label87 always
+  207 multilabel *label176 (m:*label232)
+  208 jump *label87 always
+  209 multilabel *label177 (m:*label232)
+  210 jump *label87 always
+  211 multilabel *label178 (m:*label232)
+  212 jump *label87 always
+  213 multilabel *label179 (m:*label232)
+  214 jump *label87 always
+  215 multilabel *label180 (m:*label232)
+  216 jump *label87 always
+  217 multilabel *label181 (m:*label232)
+  218 jump *label87 always
+  219 multilabel *label182 (m:*label232)
+  220 jump *label87 always
+  221 multilabel *label183 (m:*label232)
+  222 jump *label87 always
+  223 multilabel *label184 (m:*label232)
+  224 jump *label87 always
+  225 multilabel *label185 (m:*label232)
+  226 jump *label87 always
+  227 multilabel *label186 (m:*label232)
+  228 jump *label87 always
+  229 multilabel *label187 (m:*label232)
+  230 jump *label87 always
+  231 multilabel *label188 (m:*label232)
+  232 jump *label87 always
+  233 multilabel *label189 (m:*label232)
+  234 jump *label87 always
+  235 multilabel *label190 (m:*label232)
+  236 jump *label87 always
+  237 multilabel *label191 (m:*label232)
+  238 jump *label87 always
+  239 multilabel *label192 (m:*label232)
+  240 jump *label87 always
+  241 multilabel *label193 (m:*label232)
+  242 jump *label87 always
+  243 multilabel *label194 (m:*label232)
+  244 jump *label87 always
+  245 multilabel *label195 (m:*label232)
+  246 jump *label87 always
+  247 multilabel *label196 (m:*label232)
+  248 jump *label87 always
+  249 multilabel *label197 (m:*label232)
+  250 jump *label87 always
+  251 multilabel *label198 (m:*label232)
+  252 jump *label87 always
+  253 multilabel *label199 (m:*label232)
+  254 jump *label87 always
+  255 multilabel *label200 (m:*label232)
+  256 jump *label87 always
+  257 multilabel *label201 (m:*label232)
+  258 jump *label87 always
+  259 multilabel *label202 (m:*label232)
+  260 jump *label87 always
+  261 multilabel *label203 (m:*label232)
+  262 jump *label87 always
+  263 multilabel *label204 (m:*label232)
+  264 jump *label87 always
+  265 multilabel *label205 (m:*label232)
+  266 jump *label87 always
+  267 multilabel *label206 (m:*label232)
+  268 jump *label87 always
+  269 multilabel *label207 (m:*label232)
+  270 jump *label87 always
+  271 multilabel *label208 (m:*label232)
+  272 jump *label87 always
+  273 multilabel *label209 (m:*label232)
+  274 jump *label87 always
+  275 multilabel *label210 (m:*label232)
+  276 jump *label87 always
+  277 multilabel *label211 (m:*label232)
+  278 jump *label87 always
+  279 multilabel *label212 (m:*label232)
+  280 jump *label87 always
+  281 multilabel *label213 (m:*label232)
+  282 jump *label87 always
+  283 multilabel *label214 (m:*label232)
+  284 jump *label87 always
+  285 multilabel *label215 (m:*label232)
+  286 jump *label87 always
+  287 multilabel *label216 (m:*label232)
+  288 jump *label87 always
+  289 multilabel *label217 (m:*label232)
+  290 jump *label87 always
+  291 multilabel *label218 (m:*label232)
+  292 jump *label87 always
+  293 multilabel *label219 (m:*label232)
+  294 jump *label87 always
+  295 multilabel *label220 (m:*label232)
+  296 jump *label87 always
+  297 multilabel *label221 (m:*label232)
+  298 jump *label87 always
+  299 multilabel *label222 (m:*label232)
+  300 jump *label87 always
+  301 multilabel *label223 (m:*label232)
+  302 jump *label8 always
+  303 multilabel *label224 (m:*label232)
+  304 jump *label10 always
+  305 multilabel *label225 (m:*label232)
+  306 jump *label87 always
+  307 multilabel *label226 (m:*label232)
+  308 jump *label87 always
+  309 multilabel *label227 (m:*label232)
+  310 jump *label87 always
+  311 multilabel *label228 (m:*label232)
+  312 jump *label87 always
+  313 multilabel *label229 (m:*label232)
+  314 jump *label87 always
+  315 multilabel *label230 (m:*label232)
+  316 jump *label12 always
+  317 multilabel *label231 (m:*label232)
+  318 jump *label12 always
   319 label *label8
   320 set .MESSAGE :block
   321 jump *label6 always
   322 label *label7
-    * jump *label9 notEqual *tmp8 @switch
   323 label *label10
   324 set .SWITCH :block
   325 jump *label6 always
   326 label *label9
-    * jump *label12 equal *tmp8 @logic-display
-    * jump *label11 notEqual *tmp8 @large-logic-display
   327 label *label12
   328 set .DISPLAY :block
   329 jump *label6 always
   330 label *label11
-    * jump *label13 notEqual *tmp8 @silicon-smelter
   331 label *label14
   332 set .TYPE @silicon-smelter
   333 sensor .CAPACITY :block @itemCapacity
 
   340 set .OUTPUT @silicon
   341 jump *label6 always
   342 label *label13
-    * jump *label15 notEqual *tmp8 @silicon-crucible
   343 label *label16
   344 set .TYPE @silicon-crucible
   345 sensor .CAPACITY :block @itemCapacity
 
   352 set .OUTPUT @silicon
   353 jump *label6 always
   354 label *label15
-    * jump *label17 notEqual *tmp8 @kiln
   355 label *label18
   356 set .TYPE @kiln
   357 sensor .CAPACITY :block @itemCapacity
 
   364 set .OUTPUT @metaglass
   365 jump *label6 always
   366 label *label17
-    * jump *label19 notEqual *tmp8 @phase-weaver
   367 label *label20
   368 set .TYPE @phase-weaver
   369 sensor .CAPACITY :block @itemCapacity
 
   376 set .OUTPUT @phase-fabric
   377 jump *label6 always
   378 label *label19
-    * jump *label21 notEqual *tmp8 @pyratite-mixer
   379 label *label22
   380 set .TYPE @pyratite-mixer
   381 sensor .CAPACITY :block @itemCapacity
 
   388 set .OUTPUT @pyratite
   389 jump *label6 always
   390 label *label21
-    * jump *label23 notEqual *tmp8 @blast-mixer
   391 label *label24
   392 set .TYPE @blast-mixer
   393 sensor .CAPACITY :block @itemCapacity
 
   400 set .OUTPUT @blast-compound
   401 jump *label6 always
   402 label *label23
-    * jump *label25 notEqual *tmp8 @plastanium-compressor
   403 label *label26
   404 set .TYPE @plastanium-compressor
   405 sensor .CAPACITY :block @itemCapacity
 
   413 set .OUTPUT @plastanium
   414 jump *label6 always
   415 label *label25
+  416 label *label87
   417 print "\n  "
   418 print :block
   419 print " not supported"

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-6 instructions):
 
   481 jump *label34 greaterThanEq TO_INDEX 8
   482 op mul *tmp41 TO_INDEX 20
   483 op add *tmp40 2 *tmp41
-    * jump *label34 always
   484 label *label34
   485 op sub :clh *tmp40 *tmp36
   486 set :crh :clh
 
   506 op mod *tmp59 TO_INDEX 8
   507 op mul *tmp60 *tmp59 22
   508 op add *tmp58 4 *tmp60
-    * jump *label40 always
   509 label *label40
   510 op sub :crh *tmp58 *tmp53
   511 set :clx 91
 
   527 jump *label44 greaterThanEq TO_INDEX 8
   528 op mul *tmp71 TO_INDEX 22
   529 op add *tmp70 4 *tmp71
-    * jump *label44 always
   530 label *label44
   531 op sub :clh *tmp70 *tmp66
   532 jump *label45 lessThan TO_INDEX 8
 
   538 op mod *tmp83 TO_INDEX 8
   539 op mul *tmp84 *tmp83 22
   540 op add *tmp82 4 *tmp84
-    * jump *label48 always
   541 label *label48
   542 op sub :crh *tmp82 0
   543 jump *label46 always
 
   685 op land *tmp162 *tmp126 *tmp161
   686 jump *label78 equal *tmp162 false
   687 set :red 0
-    * jump *label78 always
   688 label *label78
   689 set :green 0
   690 jump *label80 lessThanEq :minimum 33
   691 set :green 255
-    * jump *label80 always
   692 label *label80
   693 set :blue 0
   694 label *label76

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   539 op mul *tmp84 *tmp83 22
   540 op add *tmp82 4 *tmp84
   541 label *label48
-    * op sub :crh *tmp82 0
+  542 set :crh *tmp82
   543 jump *label46 always
   544 label *label45
   545 set :crx 0

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
   533 op sub :crx 93 2
   534 op add :crw 83 1
   535 set :cry 0
-    * set *tmp82 176
+  536 set :crh 176
   537 jump *label48 greaterThanEq TO_INDEX 16
   538 op mod *tmp83 TO_INDEX 8
   539 op mul *tmp84 *tmp83 22
-    * op add *tmp82 4 *tmp84
+  540 op add :crh 4 *tmp84
   541 label *label48
-    * set :crh *tmp82
   542 jump *label46 always
   543 label *label45
   544 set :crx 0

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    13 set .MUL2 null
    14 set .MUL1 null
    15 set :icon null
-    * label *label0
    16 label *label83
    17 print "Universal Factory Monitor"
    18 print "\n"
    19 set :n @links
-    * label *label3
    20 jump *label5 lessThanEq :n 0
    21 label *label84
    22 op sub :n :n 1
 
   317 label *label8
   318 set .MESSAGE :block
   319 jump *label6 always
-    * label *label7
   320 label *label10
   321 set .SWITCH :block
   322 jump *label6 always
-    * label *label9
   323 label *label12
   324 set .DISPLAY :block
   325 jump *label6 always
-    * label *label11
   326 label *label14
   327 set .TYPE @silicon-smelter
   328 sensor .CAPACITY :block @itemCapacity
 
   334 set .MUL1 .MUL3
   335 set .OUTPUT @silicon
   336 jump *label6 always
-    * label *label13
   337 label *label16
   338 set .TYPE @silicon-crucible
   339 sensor .CAPACITY :block @itemCapacity
 
   345 set .MUL1 .MUL3
   346 set .OUTPUT @silicon
   347 jump *label6 always
-    * label *label15
   348 label *label18
   349 set .TYPE @kiln
   350 sensor .CAPACITY :block @itemCapacity
 
   356 set .MUL1 .MUL3
   357 set .OUTPUT @metaglass
   358 jump *label6 always
-    * label *label17
   359 label *label20
   360 set .TYPE @phase-weaver
   361 sensor .CAPACITY :block @itemCapacity
 
   367 set .MUL1 .MUL3
   368 set .OUTPUT @phase-fabric
   369 jump *label6 always
-    * label *label19
   370 label *label22
   371 set .TYPE @pyratite-mixer
   372 sensor .CAPACITY :block @itemCapacity
 
   378 set .MUL1 .MUL3
   379 set .OUTPUT @pyratite
   380 jump *label6 always
-    * label *label21
   381 label *label24
   382 set .TYPE @blast-mixer
   383 sensor .CAPACITY :block @itemCapacity
 
   389 set .MUL1 .MUL3
   390 set .OUTPUT @blast-compound
   391 jump *label6 always
-    * label *label23
   392 label *label26
   393 set .TYPE @plastanium-compressor
   394 sensor .CAPACITY :block @itemCapacity
 
   401 op div .MUL2 250 *tmp24
   402 set .OUTPUT @plastanium
   403 jump *label6 always
-    * label *label25
   404 label *label87
   405 print "\n  "
   406 print :block
   407 print " not supported"
   408 label *label6
-    * label *label4
   409 jump *label84 greaterThan :n 0
   410 label *label5
   411 print "Message: "
 
   441 jump *label27 equal *tmp28 false
   442 print "No block to monitor or display."
   443 label *label27
-    * label *label28
   444 printflush .MESSAGE
-    * label *label1
   445 jump *label83 notEqual *tmp28 false
-    * label *label2
   446 sensor *tmp30 .DISPLAY @type
   447 jump *label29 notEqual *tmp30 @logic-display
   448 set .OFFSET_X 2
 
   455 set :crw 80
   456 set *tmp36 0
   457 jump *label32 equal FROM_INDEX 0
-    * label *label31
   458 op mul *tmp37 FROM_INDEX 20
   459 op add *tmp36 2 *tmp37
   460 label *label32
 
   479 set *tmp53 0
   480 op mod *tmp51 FROM_INDEX 8
   481 jump *label38 equal *tmp51 0
-    * label *label37
   482 op mul *tmp55 *tmp51 22
   483 op add *tmp53 4 *tmp55
   484 label *label38
 
   500 op sub :clw 93 2
   501 set *tmp66 0
   502 jump *label42 equal FROM_INDEX 0
-    * label *label41
   503 op mul *tmp67 FROM_INDEX 22
   504 op add *tmp66 4 *tmp67
   505 label *label42
 
   530 label *label36
   531 label *label30
   532 control enabled .SWITCH 0
-    * label *label49
   533 sensor *tmp89 .SWITCH @enabled
   534 jump *label51 notEqual *tmp89 0
   535 label *label86
 
   544 draw stroke 2
   545 set :index FROM_INDEX
   546 set :n 0
-    * label *label52
   547 jump *label54 greaterThanEq 0 @links
   548 label *label85
   549 jump *label55 lessThan :index TO_INDEX
   550 jump *label54 always
   551 label *label55
-    * label *label56
   552 getlink :factory :n
   553 sensor *tmp95 :factory @type
   554 jump *label57 notEqual *tmp95 .TYPE
 
   568 set :minimum :r1
   569 set :icon .RES1
   570 label *label59
-    * label *label60
   571 jump *label61 greaterThanEq :r2 :minimum
   572 set :minimum :r2
   573 set :icon .RES2
   574 label *label61
-    * label *label62
   575 jump *label63 greaterThanEq :r3 :minimum
   576 set :minimum :r3
   577 set :icon .RES3
   578 label *label63
-    * label *label64
   579 op greaterThan *tmp115 :output 33
   580 op sub *tmp116 100 :output
   581 op lessThan *tmp117 *tmp116 :minimum
 
   583 jump *label65 equal :showout false
   584 set :icon .OUTPUT
   585 label *label65
-    * label *label66
   586 op idiv :column :index 8
   587 op mod :row :index 8
   588 op mul *tmp122 :column .BAR_SPACE
 
   595 jump *label67 equal *tmp128 false
   596 set :icon .TYPE
   597 label *label67
-    * label *label68
   598 draw color 255 255 255 255
   599 jump *label69 equal :e false
   600 jump *label71 lessThanEq :power 0
 
   671 op max :blue 192 :blue
   672 set :boost EXPECTED_BOOST
   673 label *label81
-    * label *label82
   674 op mul *tmp171 61 :boost
   675 op idiv :length *tmp171 EXPECTED_BOOST
   676 draw color :red :green :blue 128
 
   681 draw lineRect :x :y :length 14
   682 op add :index :index 1
   683 label *label57
-    * label *label58
-    * label *label53
   684 op add :n :n 1
   685 jump *label85 lessThan :n @links
   686 label *label54
 
   691 print *tmp177
   692 print " ms"
   693 printflush .MESSAGE
-    * label *label50
   694 sensor *tmp89 .SWITCH @enabled
   695 jump *label86 equal *tmp89 0
   696 label *label51

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-1 instructions):
 
   546 set :n 0
   547 jump *label54 greaterThanEq 0 @links
   548 label *label85
-    * jump *label55 lessThan :index TO_INDEX
-    * jump *label54 always
+  549 jump *label54 greaterThanEq :index TO_INDEX
   550 label *label55
   551 getlink :factory :n
   552 sensor *tmp95 :factory @type

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
   547 jump *label54 greaterThanEq 0 @links
   548 label *label85
   549 jump *label54 greaterThanEq :index TO_INDEX
-    * label *label55
   550 getlink :factory :n
   551 sensor *tmp95 :factory @type
   552 jump *label57 notEqual *tmp95 .TYPE

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
+    0 label __start__
     1 set FROM_INDEX 0
     2 set TO_INDEX 16
     3 set EXPECTED_BOOST 1.5
 
   516 op add :crw 83 1
   517 set :cry 0
   518 set :crh 176
-    * jump *label48 greaterThanEq TO_INDEX 16
+  519 jump *label46 greaterThanEq TO_INDEX 16
   520 op mod *tmp83 TO_INDEX 8
   521 op mul *tmp84 *tmp83 22
   522 op add :crh 4 *tmp84
 
   532 label *label30
   533 control enabled .SWITCH 0
   534 sensor *tmp89 .SWITCH @enabled
-    * jump *label51 notEqual *tmp89 0
+  535 jump __start__ notEqual *tmp89 0
   536 label *label86
   537 set :start @time
   538 print "Universal Factory Monitor"
 
   600 op add *tmp133 :x 7
   601 op add *tmp134 :y 7
   602 draw image *tmp133 *tmp134 :icon 16 0
-    * jump *label72 always
+  603 jump *label70 always
   604 label *label71
   605 draw color 255 80 80 255
   606 op add *tmp135 :y 3

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1:
 
   520 op mod *tmp83 TO_INDEX 8
   521 op mul *tmp84 *tmp83 22
   522 op add :crh 4 *tmp84
-    * label *label48
   523 jump *label46 always
   524 label *label45
   525 set :crx 0
 
   616 op add *tmp142 :x 4
   617 op add *tmp143 :y 6
   618 draw rect *tmp142 *tmp143 2 2
-    * label *label72
   619 jump *label70 always
   620 label *label69
   621 draw color 255 80 80 255
 
   690 printflush .MESSAGE
   691 sensor *tmp89 .SWITCH @enabled
   692 jump *label86 equal *tmp89 0
-    * label *label51
   693 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   690 printflush .MESSAGE
   691 sensor *tmp89 .SWITCH @enabled
   692 jump *label86 equal *tmp89 0
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-22 instructions):
 
    15 set .MUL1 null
    16 set :icon null
    17 label *label83
-    * print "Universal Factory Monitor"
-    * print "\n"
+   18 print "Universal Factory Monitor\n"
    19 set :n @links
    20 jump *label5 lessThanEq :n 0
    21 label *label84
 
   402 set .OUTPUT @plastanium
   403 jump *label6 always
   404 label *label87
-    * print "\n  "
-    * print :block
-    * print " not supported"
+  405 print "\n  {0} not supported"
+  406 format :block
   407 label *label6
   408 jump *label84 greaterThan :n 0
   409 label *label5
-    * print "Message: "
-    * print .MESSAGE
-    * print "\n"
-    * print "Switch: "
-    * print .SWITCH
-    * print "\n"
-    * print "Display: "
-    * print .DISPLAY
-    * print "\n"
-    * print "Monitoring: "
-    * print .TYPE
-    * print "\n"
-    * print "Capacity: "
-    * print .CAPACITY
-    * print "\n"
-    * print "Resource 1: "
-    * print .RES1
-    * print "\n"
-    * print "Resource 2: "
-    * print .RES2
-    * print "\n"
-    * print "Resource 3: "
-    * print .RES3
-    * print "\n"
-    * print "Output: "
-    * print .OUTPUT
-    * print "\n"
+  410 print "Message: {0}\nSwitch: {0}\nDisplay: {0}\nMonitoring: {0}\nCapacity: {0}\nResource 1: {0}\nResource 2: {0}\nResource 3: {0}\nOutput: {0}\n"
+  411 format .MESSAGE
+  412 format .SWITCH
+  413 format .DISPLAY
+  414 format .TYPE
+  415 format .CAPACITY
+  416 format .RES1
+  417 format .RES2
+  418 format .RES3
+  419 format .OUTPUT
   420 op equal *tmp26 .DISPLAY null
   421 op equal *tmp27 .TYPE null
   422 op or *tmp28 *tmp26 *tmp27
 
   515 jump __start__ notEqual *tmp89 0
   516 label *label86
   517 set :start @time
-    * print "Universal Factory Monitor"
-    * print "\n"
-    * print "Monitoring: "
+  518 print "Universal Factory Monitor\nMonitoring: "
   519 print .TYPE
   520 draw color 0 0 80 255
   521 draw rect :clx :cly :clw :clh
 
   663 drawflush .DISPLAY
   664 op sub *tmp176 @time :start
   665 op floor *tmp177 *tmp176
-    * print "\nDraw time: "
-    * print *tmp177
-    * print " ms"
+  666 print "\nDraw time: {0} ms"
+  667 format *tmp177
   668 printflush .MESSAGE
   669 sensor *tmp89 .SWITCH @enabled
   670 jump *label86 equal *tmp89 0

Final code before resolving virtual instructions:

label __start__
set FROM_INDEX 0
set TO_INDEX 16
set EXPECTED_BOOST 1.5
set .TYPE null
set .DISPLAY null
set .SWITCH null
set .MESSAGE null
set .CAPACITY null
set .OUTPUT null
set .RES3 null
set .RES2 null
set .RES1 null
set .MUL3 null
set .MUL2 null
set .MUL1 null
set :icon null
label *label83
print "Universal Factory Monitor\n"
set :n @links
jump *label5 lessThanEq :n 0
label *label84
op sub :n :n 1
getlink :block :n
sensor *tmp8 :block @type
sensor *tmp178 *tmp8 @id
jump *label87 lessThan *tmp178 2
jump *label87 greaterThan *tmp178 145
multijump *label88 *tmp178 2
multilabel *label88
jump *label14 always
multilabel *label89
jump *label16 always
multilabel *label90
jump *label18 always
multilabel *label91
jump *label26 always
multilabel *label92
jump *label20 always
multilabel *label93
jump *label87 always
multilabel *label94
jump *label22 always
multilabel *label95
jump *label24 always
multilabel *label96
jump *label87 always
multilabel *label97
jump *label87 always
multilabel *label98
jump *label87 always
multilabel *label99
jump *label87 always
multilabel *label100
jump *label87 always
multilabel *label101
jump *label87 always
multilabel *label102
jump *label87 always
multilabel *label103
jump *label87 always
multilabel *label104
jump *label87 always
multilabel *label105
jump *label87 always
multilabel *label106
jump *label87 always
multilabel *label107
jump *label87 always
multilabel *label108
jump *label87 always
multilabel *label109
jump *label87 always
multilabel *label110
jump *label87 always
multilabel *label111
jump *label87 always
multilabel *label112
jump *label87 always
multilabel *label113
jump *label87 always
multilabel *label114
jump *label87 always
multilabel *label115
jump *label87 always
multilabel *label116
jump *label87 always
multilabel *label117
jump *label87 always
multilabel *label118
jump *label87 always
multilabel *label119
jump *label87 always
multilabel *label120
jump *label87 always
multilabel *label121
jump *label87 always
multilabel *label122
jump *label87 always
multilabel *label123
jump *label87 always
multilabel *label124
jump *label87 always
multilabel *label125
jump *label87 always
multilabel *label126
jump *label87 always
multilabel *label127
jump *label87 always
multilabel *label128
jump *label87 always
multilabel *label129
jump *label87 always
multilabel *label130
jump *label87 always
multilabel *label131
jump *label87 always
multilabel *label132
jump *label87 always
multilabel *label133
jump *label87 always
multilabel *label134
jump *label87 always
multilabel *label135
jump *label87 always
multilabel *label136
jump *label87 always
multilabel *label137
jump *label87 always
multilabel *label138
jump *label87 always
multilabel *label139
jump *label87 always
multilabel *label140
jump *label87 always
multilabel *label141
jump *label87 always
multilabel *label142
jump *label87 always
multilabel *label143
jump *label87 always
multilabel *label144
jump *label87 always
multilabel *label145
jump *label87 always
multilabel *label146
jump *label87 always
multilabel *label147
jump *label87 always
multilabel *label148
jump *label87 always
multilabel *label149
jump *label87 always
multilabel *label150
jump *label87 always
multilabel *label151
jump *label87 always
multilabel *label152
jump *label87 always
multilabel *label153
jump *label87 always
multilabel *label154
jump *label87 always
multilabel *label155
jump *label87 always
multilabel *label156
jump *label87 always
multilabel *label157
jump *label87 always
multilabel *label158
jump *label87 always
multilabel *label159
jump *label87 always
multilabel *label160
jump *label87 always
multilabel *label161
jump *label87 always
multilabel *label162
jump *label87 always
multilabel *label163
jump *label87 always
multilabel *label164
jump *label87 always
multilabel *label165
jump *label87 always
multilabel *label166
jump *label87 always
multilabel *label167
jump *label87 always
multilabel *label168
jump *label87 always
multilabel *label169
jump *label87 always
multilabel *label170
jump *label87 always
multilabel *label171
jump *label87 always
multilabel *label172
jump *label87 always
multilabel *label173
jump *label87 always
multilabel *label174
jump *label87 always
multilabel *label175
jump *label87 always
multilabel *label176
jump *label87 always
multilabel *label177
jump *label87 always
multilabel *label178
jump *label87 always
multilabel *label179
jump *label87 always
multilabel *label180
jump *label87 always
multilabel *label181
jump *label87 always
multilabel *label182
jump *label87 always
multilabel *label183
jump *label87 always
multilabel *label184
jump *label87 always
multilabel *label185
jump *label87 always
multilabel *label186
jump *label87 always
multilabel *label187
jump *label87 always
multilabel *label188
jump *label87 always
multilabel *label189
jump *label87 always
multilabel *label190
jump *label87 always
multilabel *label191
jump *label87 always
multilabel *label192
jump *label87 always
multilabel *label193
jump *label87 always
multilabel *label194
jump *label87 always
multilabel *label195
jump *label87 always
multilabel *label196
jump *label87 always
multilabel *label197
jump *label87 always
multilabel *label198
jump *label87 always
multilabel *label199
jump *label87 always
multilabel *label200
jump *label87 always
multilabel *label201
jump *label87 always
multilabel *label202
jump *label87 always
multilabel *label203
jump *label87 always
multilabel *label204
jump *label87 always
multilabel *label205
jump *label87 always
multilabel *label206
jump *label87 always
multilabel *label207
jump *label87 always
multilabel *label208
jump *label87 always
multilabel *label209
jump *label87 always
multilabel *label210
jump *label87 always
multilabel *label211
jump *label87 always
multilabel *label212
jump *label87 always
multilabel *label213
jump *label87 always
multilabel *label214
jump *label87 always
multilabel *label215
jump *label87 always
multilabel *label216
jump *label87 always
multilabel *label217
jump *label87 always
multilabel *label218
jump *label87 always
multilabel *label219
jump *label87 always
multilabel *label220
jump *label87 always
multilabel *label221
jump *label87 always
multilabel *label222
jump *label87 always
multilabel *label223
jump *label8 always
multilabel *label224
jump *label10 always
multilabel *label225
jump *label87 always
multilabel *label226
jump *label87 always
multilabel *label227
jump *label87 always
multilabel *label228
jump *label87 always
multilabel *label229
jump *label87 always
multilabel *label230
jump *label12 always
multilabel *label231
jump *label12 always
label *label8
set .MESSAGE :block
jump *label6 always
label *label10
set .SWITCH :block
jump *label6 always
label *label12
set .DISPLAY :block
jump *label6 always
label *label14
set .TYPE @silicon-smelter
sensor .CAPACITY :block @itemCapacity
set .RES1 @sand
set .RES2 @coal
set .RES3 @itemCapacity
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @silicon
jump *label6 always
label *label16
set .TYPE @silicon-crucible
sensor .CAPACITY :block @itemCapacity
set .RES1 @sand
set .RES2 @coal
set .RES3 @pyratite
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @silicon
jump *label6 always
label *label18
set .TYPE @kiln
sensor .CAPACITY :block @itemCapacity
set .RES1 @sand
set .RES2 @lead
set .RES3 @itemCapacity
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @metaglass
jump *label6 always
label *label20
set .TYPE @phase-weaver
sensor .CAPACITY :block @itemCapacity
set .RES1 @sand
set .RES2 @thorium
set .RES3 @itemCapacity
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @phase-fabric
jump *label6 always
label *label22
set .TYPE @pyratite-mixer
sensor .CAPACITY :block @itemCapacity
set .RES1 @sand
set .RES2 @coal
set .RES3 @lead
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @pyratite
jump *label6 always
label *label24
set .TYPE @blast-mixer
sensor .CAPACITY :block @itemCapacity
set .RES1 @pyratite
set .RES2 @spore-pod
set .RES3 @itemCapacity
op div .MUL3 100 .CAPACITY
set .MUL2 .MUL3
set .MUL1 .MUL3
set .OUTPUT @blast-compound
jump *label6 always
label *label26
set .TYPE @plastanium-compressor
sensor .CAPACITY :block @itemCapacity
set .RES1 @titanium
set .RES2 @oil
set .RES3 @itemCapacity
op div .MUL3 100 .CAPACITY
set .MUL1 .MUL3
sensor *tmp24 :block @liquidCapacity
op div .MUL2 250 *tmp24
set .OUTPUT @plastanium
jump *label6 always
label *label87
print "\n  {0} not supported"
format :block
label *label6
jump *label84 greaterThan :n 0
label *label5
print "Message: {0}\nSwitch: {0}\nDisplay: {0}\nMonitoring: {0}\nCapacity: {0}\nResource 1: {0}\nResource 2: {0}\nResource 3: {0}\nOutput: {0}\n"
format .MESSAGE
format .SWITCH
format .DISPLAY
format .TYPE
format .CAPACITY
format .RES1
format .RES2
format .RES3
format .OUTPUT
op equal *tmp26 .DISPLAY null
op equal *tmp27 .TYPE null
op or *tmp28 *tmp26 *tmp27
jump *label27 equal *tmp28 false
print "No block to monitor or display."
label *label27
printflush .MESSAGE
jump *label83 notEqual *tmp28 false
sensor *tmp30 .DISPLAY @type
jump *label29 notEqual *tmp30 @logic-display
set .OFFSET_X 2
set .OFFSET_Y 2
set .BAR_SPACE 80
set .BAR_GAP 20
set :clx 0
set :crx 0
op sub :clw 82 2
set :crw 80
set *tmp36 0
jump *label32 equal FROM_INDEX 0
op mul *tmp37 FROM_INDEX 20
op add *tmp36 2 *tmp37
label *label32
set :cly *tmp36
set :cry *tmp36
set *tmp40 176
jump *label34 greaterThanEq TO_INDEX 8
op mul *tmp41 TO_INDEX 20
op add *tmp40 2 *tmp41
label *label34
op sub :clh *tmp40 *tmp36
set :crh :clh
jump *label30 always
label *label29
set .OFFSET_X 5
set .OFFSET_Y 4
set .BAR_SPACE 88
set .BAR_GAP 22
jump *label35 lessThan FROM_INDEX 8
op sub :crx 93 2
op add :crw 83 1
set *tmp53 0
op mod *tmp51 FROM_INDEX 8
jump *label38 equal *tmp51 0
op mul *tmp55 *tmp51 22
op add *tmp53 4 *tmp55
label *label38
set :cry *tmp53
set *tmp58 176
jump *label40 greaterThanEq TO_INDEX 16
op mod *tmp59 TO_INDEX 8
op mul *tmp60 *tmp59 22
op add *tmp58 4 *tmp60
label *label40
op sub :crh *tmp58 *tmp53
set :clx 91
set :clw 84
set :cly *tmp53
set :clh :crh
jump *label36 always
label *label35
set :clx 0
op sub :clw 93 2
set *tmp66 0
jump *label42 equal FROM_INDEX 0
op mul *tmp67 FROM_INDEX 22
op add *tmp66 4 *tmp67
label *label42
set :cly *tmp66
set *tmp70 176
jump *label44 greaterThanEq TO_INDEX 8
op mul *tmp71 TO_INDEX 22
op add *tmp70 4 *tmp71
label *label44
op sub :clh *tmp70 *tmp66
jump *label45 lessThan TO_INDEX 8
op sub :crx 93 2
op add :crw 83 1
set :cry 0
set :crh 176
jump *label46 greaterThanEq TO_INDEX 16
op mod *tmp83 TO_INDEX 8
op mul *tmp84 *tmp83 22
op add :crh 4 *tmp84
jump *label46 always
label *label45
set :crx 0
set :crw 91
set :cry *tmp66
set :crh :clh
label *label46
label *label36
label *label30
control enabled .SWITCH 0
sensor *tmp89 .SWITCH @enabled
jump __start__ notEqual *tmp89 0
label *label86
set :start @time
print "Universal Factory Monitor\nMonitoring: "
print .TYPE
draw color 0 0 80 255
draw rect :clx :cly :clw :clh
draw rect :crx :cry :crw :crh
draw stroke 2
set :index FROM_INDEX
set :n 0
jump *label54 greaterThanEq 0 @links
label *label85
jump *label54 greaterThanEq :index TO_INDEX
getlink :factory :n
sensor *tmp95 :factory @type
jump *label57 notEqual *tmp95 .TYPE
set :minimum 101
sensor *tmp98 :factory .RES1
op mul :r1 .MUL1 *tmp98
sensor *tmp100 :factory .RES2
op mul :r2 .MUL2 *tmp100
sensor *tmp102 :factory .RES3
op mul :r3 .MUL3 *tmp102
sensor *tmp104 :factory .OUTPUT
op mul :output .MUL1 *tmp104
sensor :e :factory @enabled
sensor :power :factory @totalPower
sensor :boost :factory @timescale
jump *label59 greaterThanEq :r1 101
set :minimum :r1
set :icon .RES1
label *label59
jump *label61 greaterThanEq :r2 :minimum
set :minimum :r2
set :icon .RES2
label *label61
jump *label63 greaterThanEq :r3 :minimum
set :minimum :r3
set :icon .RES3
label *label63
op greaterThan *tmp115 :output 33
op sub *tmp116 100 :output
op lessThan *tmp117 *tmp116 :minimum
op land :showout *tmp115 *tmp117
jump *label65 equal :showout false
set :icon .OUTPUT
label *label65
op idiv :column :index 8
op mod :row :index 8
op mul *tmp122 :column .BAR_SPACE
op add :x .OFFSET_X *tmp122
op mul *tmp124 :row .BAR_GAP
op add :y .OFFSET_Y *tmp124
op greaterThan *tmp126 :minimum 66
op equal *tmp127 :showout false
op land *tmp128 *tmp126 *tmp127
jump *label67 equal *tmp128 false
set :icon .TYPE
label *label67
draw color 255 255 255 255
jump *label69 equal :e false
jump *label71 lessThanEq :power 0
op add *tmp133 :x 7
op add *tmp134 :y 7
draw image *tmp133 *tmp134 :icon 16 0
jump *label70 always
label *label71
draw color 255 80 80 255
op add *tmp135 :y 3
draw rect :x *tmp135 14 8
draw color 0 0 0 255
op add *tmp136 :x 2
op add *tmp137 :y 5
draw rect *tmp136 *tmp137 8 4
op add *tmp138 :x 12
draw rect *tmp138 *tmp135 2 2
op add *tmp141 :y 9
draw rect *tmp138 *tmp141 2 2
draw color 255 80 80 255
op add *tmp142 :x 4
op add *tmp143 :y 6
draw rect *tmp142 *tmp143 2 2
jump *label70 always
label *label69
draw color 255 80 80 255
draw stroke 3
op add *tmp144 :x 2
op add *tmp145 :y 12
op add *tmp146 :x 12
op add *tmp147 :y 2
draw line *tmp144 *tmp145 *tmp146 *tmp147
draw line *tmp144 *tmp147 *tmp146 *tmp145
draw color 0 0 0 255
op sub *tmp152 :x 1
op sub *tmp153 :y 1
draw lineRect *tmp152 *tmp153 16 16
draw stroke 2
label *label70
op add :x :x 16
op equal *tmp155 :power 0
op equal *tmp156 :e 0
op land *tmp157 *tmp155 *tmp156
jump *label73 equal *tmp157 false
set :red 255
set :green 0
set :blue 0
jump *label74 always
label *label73
jump *label75 equal :showout false
set :red 255
set :green 0
set :blue 255
set :minimum :output
jump *label76 always
label *label75
set :red 255
op greaterThanEq *tmp161 :boost EXPECTED_BOOST
op land *tmp162 *tmp126 *tmp161
jump *label78 equal *tmp162 false
set :red 0
label *label78
set :green 0
jump *label80 lessThanEq :minimum 33
set :green 255
label *label80
set :blue 0
label *label76
label *label74
jump *label81 lessThanEq :boost EXPECTED_BOOST
op max :red 192 :red
op max :green 192 :green
op max :blue 192 :blue
set :boost EXPECTED_BOOST
label *label81
op mul *tmp171 61 :boost
op idiv :length *tmp171 EXPECTED_BOOST
draw color :red :green :blue 128
op mul *tmp173 :minimum :length
op idiv *tmp174 *tmp173 100
draw rect :x :y *tmp174 14
draw color :red :green :blue 255
draw lineRect :x :y :length 14
op add :index :index 1
label *label57
op add :n :n 1
jump *label85 lessThan :n @links
label *label54
drawflush .DISPLAY
op sub *tmp176 @time :start
op floor *tmp177 *tmp176
print "\nDraw time: {0} ms"
format *tmp177
printflush .MESSAGE
sensor *tmp89 .SWITCH @enabled
jump *label86 equal *tmp89 0
