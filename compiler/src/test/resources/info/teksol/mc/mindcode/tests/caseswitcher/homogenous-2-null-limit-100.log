    51 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (3 iterations).
     2 instructions eliminated by Data Flow Optimization (5 iterations).
     1 instructions eliminated by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
    46 instructions added by Case Switching (3 iterations).
     1 case expressions converted to switched jumps Case Switching.
    89 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 57):
  o Convert case at line 12:5 (#135, segments: 5)                size    -8, benefit      520.4, efficiency   Infinity
  o Convert case at line 12:5 (#206, segments: 5)                size    -7, benefit      523.3, efficiency   Infinity
  o Convert case at line 12:5 (#227, segments: 5)                size    +8, benefit      525.0, efficiency     65.625
  o Convert case at line 12:5 (#253, segments: 4)                size   +14, benefit      527.1, efficiency     37.651
  o Convert case at line 12:5 (#917, segments: 5, padded low)    size   +40, benefit      528.1, efficiency     13.202
  * Convert case at line 12:5 (#1559, segments: 4, padded low)   size   +46, benefit      530.2, efficiency     11.526 (+46 instructions)
  ! Convert case at line 12:5 (#4, segments: 1, padded both)     size  +237, benefit      546.1, efficiency      2.304

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    7 jump *label6 strictEqual :isWall:block null
+    8 jump *label6 equal :isWall:block @copper-wall
+    9 jump *label6 equal :isWall:block @copper-wall-large
+   10 jump *label6 equal :isWall:block @titanium-wall
+   11 jump *label6 equal :isWall:block @titanium-wall-large
+   12 jump *label6 equal :isWall:block @plastanium-wall
+   13 jump *label6 equal :isWall:block @plastanium-wall-large
+   14 jump *label6 equal :isWall:block @thorium-wall
+   15 jump *label6 equal :isWall:block @thorium-wall-large
+   16 jump *label6 equal :isWall:block @phase-wall
+   17 jump *label6 equal :isWall:block @phase-wall-large
+   18 jump *label6 equal :isWall:block @surge-wall
+   19 jump *label6 equal :isWall:block @surge-wall-large
+   20 jump *label6 equal :isWall:block @scrap-wall
+   21 jump *label6 equal :isWall:block @scrap-wall-large
+   22 jump *label6 equal :isWall:block @scrap-wall-huge
+   23 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   24 jump *label6 equal :isWall:block @beryllium-wall
+   25 jump *label6 equal :isWall:block @beryllium-wall-large
+   26 jump *label6 equal :isWall:block @tungsten-wall
+   27 jump *label6 equal :isWall:block @tungsten-wall-large
+   28 jump *label6 equal :isWall:block @reinforced-surge-wall
+   29 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   30 jump *label6 equal :isWall:block @carbide-wall
+   31 jump *label6 equal :isWall:block @carbide-wall-large
    32 jump *label5 always
    33 label *label6
    34 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    44 op add *tmp7 *tmp6 251
    45 op and *tmp8 *tmp7 0xFFFFFFFF
    46 set :hash *tmp8
-    * set *tmp4 :hash
    47 jump *label8 always
    48 label *label7
-    * set *tmp4 null
    49 label *label8
    50 label *label1
    51 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i -1
     2 label *label0
     3 jump *label2 greaterThanEq :i @blockCount
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 strictEqual :isWall:block null
     7 jump *label6 equal :isWall:block @copper-wall
 
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   44 op and :hash *tmp7 0xFFFFFFFF
    45 jump *label8 always
    46 label *label7
    47 label *label8

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i @blockCount
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
+    6 jump *label6 strictEqual :block null
+    7 jump *label6 equal :block @copper-wall
+    8 jump *label6 equal :block @copper-wall-large
+    9 jump *label6 equal :block @titanium-wall
+   10 jump *label6 equal :block @titanium-wall-large
+   11 jump *label6 equal :block @plastanium-wall
+   12 jump *label6 equal :block @plastanium-wall-large
+   13 jump *label6 equal :block @thorium-wall
+   14 jump *label6 equal :block @thorium-wall-large
+   15 jump *label6 equal :block @phase-wall
+   16 jump *label6 equal :block @phase-wall-large
+   17 jump *label6 equal :block @surge-wall
+   18 jump *label6 equal :block @surge-wall-large
+   19 jump *label6 equal :block @scrap-wall
+   20 jump *label6 equal :block @scrap-wall-large
+   21 jump *label6 equal :block @scrap-wall-huge
+   22 jump *label6 equal :block @scrap-wall-gigantic
+   23 jump *label6 equal :block @beryllium-wall
+   24 jump *label6 equal :block @beryllium-wall-large
+   25 jump *label6 equal :block @tungsten-wall
+   26 jump *label6 equal :block @tungsten-wall-large
+   27 jump *label6 equal :block @reinforced-surge-wall
+   28 jump *label6 equal :block @reinforced-surge-wall-large
+   29 jump *label6 equal :block @carbide-wall
+   30 jump *label6 equal :block @carbide-wall-large
    31 jump *label5 always
    32 label *label6
    33 set *tmp2 true
 
    37 label *label4
    38 set *tmp1 *tmp2
    39 label *label3
-    * jump *label7 equal *tmp1 false
+   40 jump *label7 equal *tmp2 false
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i @blockCount
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @copper-wall
     7 jump *label6 equal :block @copper-wall-large
 
    34 label *label5
    35 set *tmp2 false
    36 label *label4
-    * set *tmp1 *tmp2
    37 label *label3
    38 jump *label7 equal *tmp2 false
    39 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i -1
     2 label *label0
-    * jump *label2 greaterThanEq :i @blockCount
+    3 label *label9
     4 lookup block :block :i
     5 jump *label6 strictEqual :block null
     6 jump *label6 equal :block @copper-wall
 
    45 label *label8
    46 label *label1
    47 op add :i :i 1
-    * jump *label0 always
+   48 jump *label9 lessThan :i @blockCount
    49 label *label2
    50 print :hash
    51 assertequals 3138715214 :hash "Test selected blocks"

Modifications by Convert case at line 12:5 (#1559, segments: 4, padded low) (+46 instructions):
 
     2 label *label0
     3 label *label9
     4 lookup block :block :i
-    * jump *label6 strictEqual :block null
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label6 equal :block @carbide-wall-large
-    * jump *label5 always
+    5 sensor *tmp9 :block @id
+    6 jump *label12 greaterThanEq *tmp9 203
+    7 jump *label10 greaterThanEq *tmp9 35
+    8 multijump *label13 *tmp9 0 (m:*label48)
+    9 multilabel *label13 (m:*label48)
+   10 jump *label11 always
+   11 multilabel *label14 (m:*label48)
+   12 jump *label10 always
+   13 multilabel *label15 (m:*label48)
+   14 jump *label10 always
+   15 multilabel *label16 (m:*label48)
+   16 jump *label10 always
+   17 multilabel *label17 (m:*label48)
+   18 jump *label10 always
+   19 multilabel *label18 (m:*label48)
+   20 jump *label10 always
+   21 multilabel *label19 (m:*label48)
+   22 jump *label10 always
+   23 multilabel *label20 (m:*label48)
+   24 jump *label10 always
+   25 multilabel *label21 (m:*label48)
+   26 jump *label10 always
+   27 multilabel *label22 (m:*label48)
+   28 jump *label10 always
+   29 multilabel *label23 (m:*label48)
+   30 jump *label10 always
+   31 multilabel *label24 (m:*label48)
+   32 jump *label10 always
+   33 multilabel *label25 (m:*label48)
+   34 jump *label10 always
+   35 multilabel *label26 (m:*label48)
+   36 jump *label10 always
+   37 multilabel *label27 (m:*label48)
+   38 jump *label10 always
+   39 multilabel *label28 (m:*label48)
+   40 jump *label10 always
+   41 multilabel *label29 (m:*label48)
+   42 jump *label10 always
+   43 multilabel *label30 (m:*label48)
+   44 jump *label6 always
+   45 multilabel *label31 (m:*label48)
+   46 jump *label6 always
+   47 multilabel *label32 (m:*label48)
+   48 jump *label6 always
+   49 multilabel *label33 (m:*label48)
+   50 jump *label6 always
+   51 multilabel *label34 (m:*label48)
+   52 jump *label6 always
+   53 multilabel *label35 (m:*label48)
+   54 jump *label6 always
+   55 multilabel *label36 (m:*label48)
+   56 jump *label6 always
+   57 multilabel *label37 (m:*label48)
+   58 jump *label6 always
+   59 multilabel *label38 (m:*label48)
+   60 jump *label6 always
+   61 multilabel *label39 (m:*label48)
+   62 jump *label6 always
+   63 multilabel *label40 (m:*label48)
+   64 jump *label6 always
+   65 multilabel *label41 (m:*label48)
+   66 jump *label6 always
+   67 multilabel *label42 (m:*label48)
+   68 jump *label10 always
+   69 multilabel *label43 (m:*label48)
+   70 jump *label10 always
+   71 multilabel *label44 (m:*label48)
+   72 jump *label6 always
+   73 multilabel *label45 (m:*label48)
+   74 jump *label6 always
+   75 multilabel *label46 (m:*label48)
+   76 jump *label6 always
+   77 multilabel *label47 (m:*label48)
+   78 jump *label6 always
+   79 label *label12
+   80 jump *label10 greaterThanEq *tmp9 235
+   81 jump *label49 greaterThanEq *tmp9 208
+   82 jump *label10 equal *tmp9 205
+   83 jump *label6 always
+   84 label *label49
+   85 multijump *label50 *tmp9 208 (m:*label77)
+   86 multilabel *label50 (m:*label77)
+   87 jump *label10 always
+   88 multilabel *label51 (m:*label77)
+   89 jump *label10 always
+   90 multilabel *label52 (m:*label77)
+   91 jump *label10 always
+   92 multilabel *label53 (m:*label77)
+   93 jump *label10 always
+   94 multilabel *label54 (m:*label77)
+   95 jump *label10 always
+   96 multilabel *label55 (m:*label77)
+   97 jump *label10 always
+   98 multilabel *label56 (m:*label77)
+   99 jump *label10 always
+  100 multilabel *label57 (m:*label77)
+  101 jump *label10 always
+  102 multilabel *label58 (m:*label77)
+  103 jump *label10 always
+  104 multilabel *label59 (m:*label77)
+  105 jump *label10 always
+  106 multilabel *label60 (m:*label77)
+  107 jump *label10 always
+  108 multilabel *label61 (m:*label77)
+  109 jump *label10 always
+  110 multilabel *label62 (m:*label77)
+  111 jump *label6 always
+  112 multilabel *label63 (m:*label77)
+  113 jump *label6 always
+  114 multilabel *label64 (m:*label77)
+  115 jump *label10 always
+  116 multilabel *label65 (m:*label77)
+  117 jump *label10 always
+  118 multilabel *label66 (m:*label77)
+  119 jump *label10 always
+  120 multilabel *label67 (m:*label77)
+  121 jump *label6 always
+  122 multilabel *label68 (m:*label77)
+  123 jump *label10 always
+  124 multilabel *label69 (m:*label77)
+  125 jump *label10 always
+  126 multilabel *label70 (m:*label77)
+  127 jump *label10 always
+  128 multilabel *label71 (m:*label77)
+  129 jump *label10 always
+  130 multilabel *label72 (m:*label77)
+  131 jump *label10 always
+  132 multilabel *label73 (m:*label77)
+  133 jump *label10 always
+  134 multilabel *label74 (m:*label77)
+  135 jump *label10 always
+  136 multilabel *label75 (m:*label77)
+  137 jump *label10 always
+  138 multilabel *label76 (m:*label77)
+  139 jump *label6 always
   140 label *label6
   141 set *tmp2 true
   142 jump *label4 always
   143 label *label5
+  144 label *label11
+  145 jump *label6 strictEqual *tmp9 null
+  146 label *label10
   147 set *tmp2 false
   148 label *label4
   149 label *label3

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set :hash 0
     1 set :i -1
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 sensor *tmp9 :block @id
 
   139 label *label6
   140 set *tmp2 true
   141 jump *label4 always
-    * label *label5
   142 label *label11
   143 jump *label6 strictEqual *tmp9 null
   144 label *label10
   145 set *tmp2 false
   146 label *label4
-    * label *label3
   147 jump *label7 equal *tmp2 false
   148 op mul *tmp5 :hash 31
   149 op add *tmp6 *tmp5 :i
 
   152 jump *label8 always
   153 label *label7
   154 label *label8
-    * label *label1
   155 op add :i :i 1
   156 jump *label9 lessThan :i @blockCount
-    * label *label2
   157 print :hash
   158 assertequals 3138715214 :hash "Test selected blocks"
   159 end

Final code before resolving virtual instructions:

set :hash 0
set :i -1
label *label9
lookup block :block :i
sensor *tmp9 :block @id
jump *label12 greaterThanEq *tmp9 203
jump *label10 greaterThanEq *tmp9 35
multijump *label13 *tmp9 0
multilabel *label13
jump *label11 always
multilabel *label14
jump *label10 always
multilabel *label15
jump *label10 always
multilabel *label16
jump *label10 always
multilabel *label17
jump *label10 always
multilabel *label18
jump *label10 always
multilabel *label19
jump *label10 always
multilabel *label20
jump *label10 always
multilabel *label21
jump *label10 always
multilabel *label22
jump *label10 always
multilabel *label23
jump *label10 always
multilabel *label24
jump *label10 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label10 always
multilabel *label28
jump *label10 always
multilabel *label29
jump *label10 always
multilabel *label30
jump *label6 always
multilabel *label31
jump *label6 always
multilabel *label32
jump *label6 always
multilabel *label33
jump *label6 always
multilabel *label34
jump *label6 always
multilabel *label35
jump *label6 always
multilabel *label36
jump *label6 always
multilabel *label37
jump *label6 always
multilabel *label38
jump *label6 always
multilabel *label39
jump *label6 always
multilabel *label40
jump *label6 always
multilabel *label41
jump *label6 always
multilabel *label42
jump *label10 always
multilabel *label43
jump *label10 always
multilabel *label44
jump *label6 always
multilabel *label45
jump *label6 always
multilabel *label46
jump *label6 always
multilabel *label47
jump *label6 always
label *label12
jump *label10 greaterThanEq *tmp9 235
jump *label49 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label6 always
label *label49
multijump *label50 *tmp9 208
multilabel *label50
jump *label10 always
multilabel *label51
jump *label10 always
multilabel *label52
jump *label10 always
multilabel *label53
jump *label10 always
multilabel *label54
jump *label10 always
multilabel *label55
jump *label10 always
multilabel *label56
jump *label10 always
multilabel *label57
jump *label10 always
multilabel *label58
jump *label10 always
multilabel *label59
jump *label10 always
multilabel *label60
jump *label10 always
multilabel *label61
jump *label10 always
multilabel *label62
jump *label6 always
multilabel *label63
jump *label6 always
multilabel *label64
jump *label10 always
multilabel *label65
jump *label10 always
multilabel *label66
jump *label10 always
multilabel *label67
jump *label6 always
multilabel *label68
jump *label10 always
multilabel *label69
jump *label10 always
multilabel *label70
jump *label10 always
multilabel *label71
jump *label10 always
multilabel *label72
jump *label10 always
multilabel *label73
jump *label10 always
multilabel *label74
jump *label10 always
multilabel *label75
jump *label10 always
multilabel *label76
jump *label6 always
label *label6
set *tmp2 true
jump *label4 always
label *label11
jump *label6 strictEqual *tmp9 null
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
jump *label8 always
label *label7
label *label8
op add :i :i 1
jump *label9 lessThan :i @blockCount
print :hash
assertequals 3138715214 :hash "Test selected blocks"
end
