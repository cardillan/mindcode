   372 instructions before optimizations.
    63 instructions eliminated by Temp Variables Elimination.
     6 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Single Step Elimination (5 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
   180 instructions eliminated by Data Flow Optimization (3 passes, 13 iterations).
    17 instructions added by Function Inlining (4 iterations).
     6 function calls inlined by Function Inlining.
   139 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 828):
  * Inline function 'assertEqualsRound' defined at line 3:1      cost    19, benefit       27.0, efficiency        1.4 (-25 instructions)
    Inline function call at line 78:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 79:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 80:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 82:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 83:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 84:1                            cost     4, benefit        4.5, efficiency        1.1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-63 instructions):
     0 set NULL null
     1 set zero 0
     2 set :d.0:n 3
-    * op add *tmp1 zero :d.0:n
-    * set *tmp0 *tmp1
+    3 op add *tmp0 zero :d.0:n
     4 label *label4
     5 op add *tmp2 2 *tmp0
     6 assertequals 5 *tmp2 "add"
     7 set :d.1:n 6
-    * op add *tmp4 zero :d.1:n
-    * set *tmp3 *tmp4
+    8 op add *tmp3 zero :d.1:n
     9 label *label5
    10 op sub *tmp5 7 *tmp3
    11 assertequals 1 *tmp5 "sub"
    12 set :d.2:n 2
-    * op add *tmp7 zero :d.2:n
-    * set *tmp6 *tmp7
+   13 op add *tmp6 zero :d.2:n
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 set :d.3:n 4
-    * op add *tmp10 zero :d.3:n
-    * set *tmp9 *tmp10
+   18 op add *tmp9 zero :d.3:n
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 set :d.4:n 100000
-    * op add *tmp13 zero :d.4:n
-    * set *tmp12 *tmp13
+   23 op add *tmp12 zero :d.4:n
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 set :d.5:n 4
-    * op add *tmp16 zero :d.5:n
-    * set *tmp15 *tmp16
+   28 op add *tmp15 zero :d.5:n
    29 label *label9
    30 op idiv *tmp17 6 *tmp15
    31 assertequals 1 *tmp17 "idiv"
    32 set :d.6:n 4
-    * op add *tmp19 zero :d.6:n
-    * set *tmp18 *tmp19
+   33 op add *tmp18 zero :d.6:n
    34 label *label10
    35 op mod *tmp20 6 *tmp18
    36 assertequals 2 *tmp20 "mod"
    37 set :d.7:n 4
-    * op add *tmp22 zero :d.7:n
-    * set *tmp21 *tmp22
+   38 op add *tmp21 zero :d.7:n
    39 label *label11
    40 op pow *tmp23 2 *tmp21
    41 assertequals 16 *tmp23 "pow"
    42 set :d.8:n 5
-    * op add *tmp25 zero :d.8:n
-    * set *tmp24 *tmp25
+   43 op add *tmp24 zero :d.8:n
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 set :d.9:n 6
-    * op add *tmp28 zero :d.9:n
-    * set *tmp27 *tmp28
+   48 op add *tmp27 zero :d.9:n
    49 label *label13
    50 op equal *tmp29 5 *tmp27
    51 assertequals false *tmp29 "equal 2"
    52 set :d.10:n null
-    * op add *tmp31 zero :d.10:n
-    * set *tmp30 *tmp31
+   53 op add *tmp30 zero :d.10:n
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 set :d.11:n 5
-    * op add *tmp34 zero :d.11:n
-    * set *tmp33 *tmp34
+   58 op add *tmp33 zero :d.11:n
    59 label *label15
    60 op notEqual *tmp35 5 *tmp33
    61 assertequals false *tmp35 "notEqual 1"
    62 set :d.12:n 6
-    * op add *tmp37 zero :d.12:n
-    * set *tmp36 *tmp37
+   63 op add *tmp36 zero :d.12:n
    64 label *label16
    65 op notEqual *tmp38 5 *tmp36
    66 assertequals true *tmp38 "notEqual 2"
    67 set :d.13:n null
-    * op add *tmp40 zero :d.13:n
-    * set *tmp39 *tmp40
+   68 op add *tmp39 zero :d.13:n
    69 label *label17
    70 op notEqual *tmp41 0 *tmp39
    71 assertequals false *tmp41 "notEqual null"
    72 set :d.14:n 0
-    * op add *tmp43 zero :d.14:n
-    * set *tmp42 *tmp43
+   73 op add *tmp42 zero :d.14:n
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 set :d.15:n 2
-    * op add *tmp46 zero :d.15:n
-    * set *tmp45 *tmp46
+   78 op add *tmp45 zero :d.15:n
    79 label *label19
    80 op land *tmp47 1 *tmp45
    81 assertequals true *tmp47 "land 2"
    82 set :d.16:n 1
-    * op add *tmp49 zero :d.16:n
-    * set *tmp48 *tmp49
+   83 op add *tmp48 zero :d.16:n
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 set :d.17:n 0
-    * op add *tmp52 zero :d.17:n
-    * set *tmp51 *tmp52
+   88 op add *tmp51 zero :d.17:n
    89 label *label21
    90 op lessThan *tmp53 1 *tmp51
    91 assertequals false *tmp53 "lessThan 2"
    92 set :d.18:n 1
-    * op add *tmp55 zero :d.18:n
-    * set *tmp54 *tmp55
+   93 op add *tmp54 zero :d.18:n
    94 label *label22
    95 op lessThanEq *tmp56 1 *tmp54
    96 assertequals true *tmp56 "lessThanEq 1"
    97 set :d.19:n 0
-    * op add *tmp58 zero :d.19:n
-    * set *tmp57 *tmp58
+   98 op add *tmp57 zero :d.19:n
    99 label *label23
   100 op lessThanEq *tmp59 1 *tmp57
   101 assertequals false *tmp59 "lessThanEq 2"
   102 set :d.20:n 1
-    * op add *tmp61 zero :d.20:n
-    * set *tmp60 *tmp61
+  103 op add *tmp60 zero :d.20:n
   104 label *label24
   105 op greaterThan *tmp62 2 *tmp60
   106 assertequals true *tmp62 "greaterThan 1"
   107 set :d.21:n 2
-    * op add *tmp64 zero :d.21:n
-    * set *tmp63 *tmp64
+  108 op add *tmp63 zero :d.21:n
   109 label *label25
   110 op greaterThan *tmp65 1 *tmp63
   111 assertequals false *tmp65 "greaterThan 2"
   112 set :d.22:n 1
-    * op add *tmp67 zero :d.22:n
-    * set *tmp66 *tmp67
+  113 op add *tmp66 zero :d.22:n
   114 label *label26
   115 op greaterThanEq *tmp68 1 *tmp66
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 set :d.23:n 2
-    * op add *tmp70 zero :d.23:n
-    * set *tmp69 *tmp70
+  118 op add *tmp69 zero :d.23:n
   119 label *label27
   120 op greaterThanEq *tmp71 1 *tmp69
   121 assertequals false *tmp71 "greaterThanEq 2"
 
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 set :d.24:n 2
-    * op add *tmp75 zero :d.24:n
-    * set *tmp74 *tmp75
+  127 op add *tmp74 zero :d.24:n
   128 label *label28
   129 op shl *tmp76 1 *tmp74
   130 assertequals 4 *tmp76 "shl"
   131 set :d.25:n 2
-    * op add *tmp78 zero :d.25:n
-    * set *tmp77 *tmp78
+  132 op add *tmp77 zero :d.25:n
   133 label *label29
   134 op shr *tmp79 9 *tmp77
   135 assertequals 2 *tmp79 "shr"
   136 set :d.26:n 2
-    * op add *tmp81 zero :d.26:n
-    * set *tmp80 *tmp81
+  137 op add *tmp80 zero :d.26:n
   138 label *label30
   139 op or *tmp82 1 *tmp80
   140 assertequals 3 *tmp82 "or"
   141 set :d.27:n 2
-    * op add *tmp84 zero :d.27:n
-    * set *tmp83 *tmp84
+  142 op add *tmp83 zero :d.27:n
   143 label *label31
   144 op and *tmp85 3 *tmp83
   145 assertequals 2 *tmp85 "and"
   146 set :d.28:n 2
-    * op add *tmp87 zero :d.28:n
-    * set *tmp86 *tmp87
+  147 op add *tmp86 zero :d.28:n
   148 label *label32
   149 op xor *tmp88 3 *tmp86
   150 assertequals 1 *tmp88 "xor"
   151 set :d.29:n 0
-    * op add *tmp90 zero :d.29:n
-    * set *tmp89 *tmp90
+  152 op add *tmp89 zero :d.29:n
   153 label *label33
   154 op not *tmp91 *tmp89
   155 assertequals -1 *tmp91 "not 1"
   156 set :d.30:n 65535
-    * op add *tmp93 zero :d.30:n
-    * set *tmp92 *tmp93
+  157 op add *tmp92 zero :d.30:n
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
 
   162 op add *tmp95 :a 1
   163 op sub *tmp96 0 *tmp95
   164 set :d.31:n :a
-    * op add *tmp98 zero :d.31:n
-    * set *tmp97 *tmp98
+  165 op add *tmp97 zero :d.31:n
   166 label *label35
   167 op not *tmp99 *tmp97
   168 assertequals *tmp96 *tmp99 "not 3"
   169 set :d.32:n 4
-    * op add *tmp101 zero :d.32:n
-    * set *tmp100 *tmp101
+  170 op add *tmp100 zero :d.32:n
   171 label *label36
   172 op max *tmp102 2 *tmp100
   173 assertequals 4 *tmp102 "max"
   174 set :d.33:n 4
-    * op add *tmp104 zero :d.33:n
-    * set *tmp103 *tmp104
+  175 op add *tmp103 zero :d.33:n
   176 label *label37
   177 op min *tmp105 2 *tmp103
   178 assertequals 2 *tmp105 "min"
   179 set :d.34:n -2
-    * op add *tmp107 zero :d.34:n
-    * set *tmp106 *tmp107
+  180 op add *tmp106 zero :d.34:n
   181 label *label38
   182 op abs *tmp108 *tmp106
   183 assertequals 2 *tmp108 "abs"
   184 set :d.35:n 2.718281828459045
-    * op add *tmp110 zero :d.35:n
-    * set *tmp109 *tmp110
+  185 op add *tmp109 zero :d.35:n
   186 label *label39
   187 op log *tmp111 *tmp109
   188 assertequals 1 *tmp111 "log"
   189 set :d.36:n 10
-    * op add *tmp113 zero :d.36:n
-    * set *tmp112 *tmp113
+  190 op add *tmp112 zero :d.36:n
   191 label *label40
   192 op log10 *tmp114 *tmp112
   193 assertequals 1 *tmp114 "log10"
   194 set :d.37:n 2.5
-    * op add *tmp116 zero :d.37:n
-    * set *tmp115 *tmp116
+  195 op add *tmp115 zero :d.37:n
   196 label *label41
   197 op floor *tmp117 *tmp115
   198 assertequals 2 *tmp117 "floor"
   199 set :d.38:n 2.5
-    * op add *tmp119 zero :d.38:n
-    * set *tmp118 *tmp119
+  200 op add *tmp118 zero :d.38:n
   201 label *label42
   202 op ceil *tmp120 *tmp118
   203 assertequals 3 *tmp120 "ceil"
   204 set :d.39:n 16
-    * op add *tmp122 zero :d.39:n
-    * set *tmp121 *tmp122
+  205 op add *tmp121 zero :d.39:n
   206 label *label43
   207 op sqrt *tmp123 *tmp121
   208 assertequals 4 *tmp123 "sqrt"
   209 set :d.40:n 1
-    * op add *tmp125 zero :d.40:n
-    * set *tmp124 *tmp125
+  210 op add *tmp124 zero :d.40:n
   211 label *label44
   212 op angle *tmp126 1 *tmp124
   213 assertequals 45 *tmp126 "angle"
   214 set :d.41:n 135
-    * op add *tmp128 zero :d.41:n
-    * set *tmp127 *tmp128
+  215 op add *tmp127 zero :d.41:n
   216 label *label45
   217 op angleDiff *tmp129 45 *tmp127
   218 assertequals 90 *tmp129 "angleDiff"
 
   254 call *label3 *invalid :assertEqualsRound.0*retval
   255 label *label51
   256 set :d.42:n 8
-    * op add *tmp131 zero :d.42:n
-    * set *tmp130 *tmp131
+  257 op add *tmp130 zero :d.42:n
   258 label *label52
   259 op sub *tmp132 0 *tmp130
   260 assertequals -8 *tmp132 "unary minus"
   261 set :d.43:n 0
-    * op add *tmp134 zero :d.43:n
-    * set *tmp133 *tmp134
+  262 op add *tmp133 zero :d.43:n
   263 label *label53
   264 op equal *tmp135 *tmp133 false
   265 assertequals 1 *tmp135 "boolean negation 1"
   266 set :d.44:n 1
-    * op add *tmp137 zero :d.44:n
-    * set *tmp136 *tmp137
+  267 op add *tmp136 zero :d.44:n
   268 label *label54
   269 op equal *tmp138 *tmp136 false
   270 assertequals 0 *tmp138 "boolean negation 2"
   271 set :d.45:n 2
-    * op add *tmp140 zero :d.45:n
-    * set *tmp139 *tmp140
+  272 op add *tmp139 zero :d.45:n
   273 label *label55
   274 op equal *tmp141 *tmp139 false
   275 assertequals 0 *tmp141 "boolean negation 3"
   276 set :a 2
   277 set :d.46:n 4
-    * op add *tmp143 zero :d.46:n
-    * set *tmp142 *tmp143
+  278 op add *tmp142 zero :d.46:n
   279 label *label56
   280 op pow :a :a *tmp142
   281 assertequals 16 :a "**="
   282 set :a 2
   283 set :d.47:n 4
-    * op add *tmp145 zero :d.47:n
-    * set *tmp144 *tmp145
+  284 op add *tmp144 zero :d.47:n
   285 label *label57
   286 op mul :a :a *tmp144
   287 assertequals 8 :a "*="
   288 set :a 6
   289 set :d.48:n 4
-    * op add *tmp147 zero :d.48:n
-    * set *tmp146 *tmp147
+  290 op add *tmp146 zero :d.48:n
   291 label *label58
   292 op div :a :a *tmp146
   293 assertequals 1.5 :a "/="
   294 set :a 6
   295 set :d.49:n 4
-    * op add *tmp149 zero :d.49:n
-    * set *tmp148 *tmp149
+  296 op add *tmp148 zero :d.49:n
   297 label *label59
   298 op idiv :a :a *tmp148
   299 assertequals 1 :a "\="
   300 set :a 6
   301 set :d.50:n 4
-    * op add *tmp151 zero :d.50:n
-    * set *tmp150 *tmp151
+  302 op add *tmp150 zero :d.50:n
   303 label *label60
   304 op mod :a :a *tmp150
   305 assertequals 2 :a "%="
   306 set :a 4
   307 set :d.51:n 2
-    * op add *tmp153 zero :d.51:n
-    * set *tmp152 *tmp153
+  308 op add *tmp152 zero :d.51:n
   309 label *label61
   310 op add :a :a *tmp152
   311 assertequals 6 :a "+="
   312 set :a 4
   313 set :d.52:n 2
-    * op add *tmp155 zero :d.52:n
-    * set *tmp154 *tmp155
+  314 op add *tmp154 zero :d.52:n
   315 label *label62
   316 op sub :a :a *tmp154
   317 assertequals 2 :a "-="
   318 set :a 1
   319 set :d.53:n 2
-    * op add *tmp157 zero :d.53:n
-    * set *tmp156 *tmp157
+  320 op add *tmp156 zero :d.53:n
   321 label *label63
   322 op shl :a :a *tmp156
   323 assertequals 4 :a "<<="
   324 set :a 9
   325 set :d.54:n 2
-    * op add *tmp159 zero :d.54:n
-    * set *tmp158 *tmp159
+  326 op add *tmp158 zero :d.54:n
   327 label *label64
   328 op shr :a :a *tmp158
   329 assertequals 2 :a ">>="
   330 set :a 1
   331 set :d.55:n 2
-    * op add *tmp161 zero :d.55:n
-    * set *tmp160 *tmp161
+  332 op add *tmp160 zero :d.55:n
   333 label *label65
   334 op or :a :a *tmp160
   335 assertequals 3 :a "|="
   336 set :a 3
   337 set :d.56:n 2
-    * op add *tmp163 zero :d.56:n
-    * set *tmp162 *tmp163
+  338 op add *tmp162 zero :d.56:n
   339 label *label66
   340 op and :a :a *tmp162
   341 assertequals 2 :a "&="
   342 set :a 3
   343 set :d.57:n 2
-    * op add *tmp165 zero :d.57:n
-    * set *tmp164 *tmp165
+  344 op add *tmp164 zero :d.57:n
   345 label *label67
   346 op xor :a :a *tmp164
   347 assertequals 1 :a "^="
   348 set :a 1
   349 set :d.58:n 0
-    * op add *tmp167 zero :d.58:n
-    * set *tmp166 *tmp167
+  350 op add *tmp166 zero :d.58:n
   351 label *label68
   352 op land :a :a *tmp166
   353 assertequals false :a "&&="
   354 set :a 1
   355 set :d.59:n 2
-    * op add *tmp169 zero :d.59:n
-    * set *tmp168 *tmp169
+  356 op add *tmp168 zero :d.59:n
   357 label *label69
   358 op land :a :a *tmp168
   359 assertequals true :a "&&="
   360 set :a 0
   361 set :d.60:n 2
-    * op add *tmp171 zero :d.60:n
-    * set *tmp170 *tmp171
+  362 op add *tmp170 zero :d.60:n
   363 label *label70
   364 op or *tmp172 :a *tmp170
   365 op notEqual :a *tmp172 false
 
   367 stop
   368 end
   369 label *label3
-    * op mul *tmp173 :assertEqualsRound.0:actual 100000000
-    * set :round.0:x *tmp173
+  370 op mul :round.0:x :assertEqualsRound.0:actual 100000000
   371 op add *tmp175 :round.0:x 0.5
-    * op floor *tmp176 *tmp175
-    * set *tmp174 *tmp176
+  372 op floor *tmp174 *tmp175
   373 label *label72
   374 op div *tmp177 *tmp174 100000000
   375 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
     0 set NULL null
     1 set zero 0
     2 set :d.0:n 3
-    * op add *tmp0 zero :d.0:n
+    3 op add *tmp0 zero 3
     4 label *label4
     5 op add *tmp2 2 *tmp0
     6 assertequals 5 *tmp2 "add"
     7 set :d.1:n 6
-    * op add *tmp3 zero :d.1:n
+    8 op add *tmp3 zero 6
     9 label *label5
    10 op sub *tmp5 7 *tmp3
    11 assertequals 1 *tmp5 "sub"
    12 set :d.2:n 2
-    * op add *tmp6 zero :d.2:n
+   13 op add *tmp6 zero 2
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 set :d.3:n 4
-    * op add *tmp9 zero :d.3:n
+   18 op add *tmp9 zero 4
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 set :d.4:n 100000
-    * op add *tmp12 zero :d.4:n
+   23 op add *tmp12 zero 100000
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 set :d.5:n 4
-    * op add *tmp15 zero :d.5:n
+   28 op add *tmp15 zero 4
    29 label *label9
    30 op idiv *tmp17 6 *tmp15
    31 assertequals 1 *tmp17 "idiv"
    32 set :d.6:n 4
-    * op add *tmp18 zero :d.6:n
+   33 op add *tmp18 zero 4
    34 label *label10
    35 op mod *tmp20 6 *tmp18
    36 assertequals 2 *tmp20 "mod"
    37 set :d.7:n 4
-    * op add *tmp21 zero :d.7:n
+   38 op add *tmp21 zero 4
    39 label *label11
    40 op pow *tmp23 2 *tmp21
    41 assertequals 16 *tmp23 "pow"
    42 set :d.8:n 5
-    * op add *tmp24 zero :d.8:n
+   43 op add *tmp24 zero 5
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 set :d.9:n 6
-    * op add *tmp27 zero :d.9:n
+   48 op add *tmp27 zero 6
    49 label *label13
    50 op equal *tmp29 5 *tmp27
    51 assertequals false *tmp29 "equal 2"
    52 set :d.10:n null
-    * op add *tmp30 zero :d.10:n
+   53 op add *tmp30 zero null
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 set :d.11:n 5
-    * op add *tmp33 zero :d.11:n
+   58 op add *tmp33 zero 5
    59 label *label15
    60 op notEqual *tmp35 5 *tmp33
    61 assertequals false *tmp35 "notEqual 1"
    62 set :d.12:n 6
-    * op add *tmp36 zero :d.12:n
+   63 op add *tmp36 zero 6
    64 label *label16
    65 op notEqual *tmp38 5 *tmp36
    66 assertequals true *tmp38 "notEqual 2"
    67 set :d.13:n null
-    * op add *tmp39 zero :d.13:n
+   68 op add *tmp39 zero null
    69 label *label17
    70 op notEqual *tmp41 0 *tmp39
    71 assertequals false *tmp41 "notEqual null"
    72 set :d.14:n 0
-    * op add *tmp42 zero :d.14:n
+   73 op add *tmp42 zero 0
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 set :d.15:n 2
-    * op add *tmp45 zero :d.15:n
+   78 op add *tmp45 zero 2
    79 label *label19
    80 op land *tmp47 1 *tmp45
    81 assertequals true *tmp47 "land 2"
    82 set :d.16:n 1
-    * op add *tmp48 zero :d.16:n
+   83 op add *tmp48 zero 1
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 set :d.17:n 0
-    * op add *tmp51 zero :d.17:n
+   88 op add *tmp51 zero 0
    89 label *label21
    90 op lessThan *tmp53 1 *tmp51
    91 assertequals false *tmp53 "lessThan 2"
    92 set :d.18:n 1
-    * op add *tmp54 zero :d.18:n
+   93 op add *tmp54 zero 1
    94 label *label22
    95 op lessThanEq *tmp56 1 *tmp54
    96 assertequals true *tmp56 "lessThanEq 1"
    97 set :d.19:n 0
-    * op add *tmp57 zero :d.19:n
+   98 op add *tmp57 zero 0
    99 label *label23
   100 op lessThanEq *tmp59 1 *tmp57
   101 assertequals false *tmp59 "lessThanEq 2"
   102 set :d.20:n 1
-    * op add *tmp60 zero :d.20:n
+  103 op add *tmp60 zero 1
   104 label *label24
   105 op greaterThan *tmp62 2 *tmp60
   106 assertequals true *tmp62 "greaterThan 1"
   107 set :d.21:n 2
-    * op add *tmp63 zero :d.21:n
+  108 op add *tmp63 zero 2
   109 label *label25
   110 op greaterThan *tmp65 1 *tmp63
   111 assertequals false *tmp65 "greaterThan 2"
   112 set :d.22:n 1
-    * op add *tmp66 zero :d.22:n
+  113 op add *tmp66 zero 1
   114 label *label26
   115 op greaterThanEq *tmp68 1 *tmp66
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 set :d.23:n 2
-    * op add *tmp69 zero :d.23:n
+  118 op add *tmp69 zero 2
   119 label *label27
   120 op greaterThanEq *tmp71 1 *tmp69
   121 assertequals false *tmp71 "greaterThanEq 2"
 
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 set :d.24:n 2
-    * op add *tmp74 zero :d.24:n
+  127 op add *tmp74 zero 2
   128 label *label28
   129 op shl *tmp76 1 *tmp74
   130 assertequals 4 *tmp76 "shl"
   131 set :d.25:n 2
-    * op add *tmp77 zero :d.25:n
+  132 op add *tmp77 zero 2
   133 label *label29
   134 op shr *tmp79 9 *tmp77
   135 assertequals 2 *tmp79 "shr"
   136 set :d.26:n 2
-    * op add *tmp80 zero :d.26:n
+  137 op add *tmp80 zero 2
   138 label *label30
   139 op or *tmp82 1 *tmp80
   140 assertequals 3 *tmp82 "or"
   141 set :d.27:n 2
-    * op add *tmp83 zero :d.27:n
+  142 op add *tmp83 zero 2
   143 label *label31
   144 op and *tmp85 3 *tmp83
   145 assertequals 2 *tmp85 "and"
   146 set :d.28:n 2
-    * op add *tmp86 zero :d.28:n
+  147 op add *tmp86 zero 2
   148 label *label32
   149 op xor *tmp88 3 *tmp86
   150 assertequals 1 *tmp88 "xor"
   151 set :d.29:n 0
-    * op add *tmp89 zero :d.29:n
+  152 op add *tmp89 zero 0
   153 label *label33
   154 op not *tmp91 *tmp89
   155 assertequals -1 *tmp91 "not 1"
   156 set :d.30:n 65535
-    * op add *tmp92 zero :d.30:n
+  157 op add *tmp92 zero 65535
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
   161 set :a 0xabcdefabcdef
-    * op add *tmp95 :a 1
-    * op sub *tmp96 0 *tmp95
-    * set :d.31:n :a
-    * op add *tmp97 zero :d.31:n
+  162 op add *tmp95 0xabcdefabcdef 1
+  163 op sub *tmp96 0 188900977659376
+  164 set :d.31:n 0xabcdefabcdef
+  165 op add *tmp97 zero :a
   166 label *label35
   167 op not *tmp99 *tmp97
-    * assertequals *tmp96 *tmp99 "not 3"
+  168 assertequals -188900977659376 *tmp99 "not 3"
   169 set :d.32:n 4
-    * op add *tmp100 zero :d.32:n
+  170 op add *tmp100 zero 4
   171 label *label36
   172 op max *tmp102 2 *tmp100
   173 assertequals 4 *tmp102 "max"
   174 set :d.33:n 4
-    * op add *tmp103 zero :d.33:n
+  175 op add *tmp103 zero 4
   176 label *label37
   177 op min *tmp105 2 *tmp103
   178 assertequals 2 *tmp105 "min"
   179 set :d.34:n -2
-    * op add *tmp106 zero :d.34:n
+  180 op add *tmp106 zero -2
   181 label *label38
   182 op abs *tmp108 *tmp106
   183 assertequals 2 *tmp108 "abs"
   184 set :d.35:n 2.718281828459045
-    * op add *tmp109 zero :d.35:n
+  185 op add *tmp109 zero 2.718281828459045
   186 label *label39
   187 op log *tmp111 *tmp109
   188 assertequals 1 *tmp111 "log"
   189 set :d.36:n 10
-    * op add *tmp112 zero :d.36:n
+  190 op add *tmp112 zero 10
   191 label *label40
   192 op log10 *tmp114 *tmp112
   193 assertequals 1 *tmp114 "log10"
   194 set :d.37:n 2.5
-    * op add *tmp115 zero :d.37:n
+  195 op add *tmp115 zero 2.5
   196 label *label41
   197 op floor *tmp117 *tmp115
   198 assertequals 2 *tmp117 "floor"
   199 set :d.38:n 2.5
-    * op add *tmp118 zero :d.38:n
+  200 op add *tmp118 zero 2.5
   201 label *label42
   202 op ceil *tmp120 *tmp118
   203 assertequals 3 *tmp120 "ceil"
   204 set :d.39:n 16
-    * op add *tmp121 zero :d.39:n
+  205 op add *tmp121 zero 16
   206 label *label43
   207 op sqrt *tmp123 *tmp121
   208 assertequals 4 *tmp123 "sqrt"
   209 set :d.40:n 1
-    * op add *tmp124 zero :d.40:n
+  210 op add *tmp124 zero 1
   211 label *label44
   212 op angle *tmp126 1 *tmp124
   213 assertequals 45 *tmp126 "angle"
   214 set :d.41:n 135
-    * op add *tmp127 zero :d.41:n
+  215 op add *tmp127 zero 135
   216 label *label45
   217 op angleDiff *tmp129 45 *tmp127
   218 assertequals 90 *tmp129 "angleDiff"
 
   254 call *label3 *invalid :assertEqualsRound.0*retval
   255 label *label51
   256 set :d.42:n 8
-    * op add *tmp130 zero :d.42:n
+  257 op add *tmp130 zero 8
   258 label *label52
   259 op sub *tmp132 0 *tmp130
   260 assertequals -8 *tmp132 "unary minus"
   261 set :d.43:n 0
-    * op add *tmp133 zero :d.43:n
+  262 op add *tmp133 zero 0
   263 label *label53
   264 op equal *tmp135 *tmp133 false
   265 assertequals 1 *tmp135 "boolean negation 1"
   266 set :d.44:n 1
-    * op add *tmp136 zero :d.44:n
+  267 op add *tmp136 zero 1
   268 label *label54
   269 op equal *tmp138 *tmp136 false
   270 assertequals 0 *tmp138 "boolean negation 2"
   271 set :d.45:n 2
-    * op add *tmp139 zero :d.45:n
+  272 op add *tmp139 zero 2
   273 label *label55
   274 op equal *tmp141 *tmp139 false
   275 assertequals 0 *tmp141 "boolean negation 3"
   276 set :a 2
   277 set :d.46:n 4
-    * op add *tmp142 zero :d.46:n
+  278 op add *tmp142 zero 4
   279 label *label56
-    * op pow :a :a *tmp142
+  280 op pow :a 2 *tmp142
   281 assertequals 16 :a "**="
   282 set :a 2
   283 set :d.47:n 4
-    * op add *tmp144 zero :d.47:n
+  284 op add *tmp144 zero 4
   285 label *label57
-    * op mul :a :a *tmp144
+  286 op mul :a 2 *tmp144
   287 assertequals 8 :a "*="
   288 set :a 6
   289 set :d.48:n 4
-    * op add *tmp146 zero :d.48:n
+  290 op add *tmp146 zero 4
   291 label *label58
-    * op div :a :a *tmp146
+  292 op div :a 6 *tmp146
   293 assertequals 1.5 :a "/="
   294 set :a 6
   295 set :d.49:n 4
-    * op add *tmp148 zero :d.49:n
+  296 op add *tmp148 zero 4
   297 label *label59
-    * op idiv :a :a *tmp148
+  298 op idiv :a 6 *tmp148
   299 assertequals 1 :a "\="
   300 set :a 6
   301 set :d.50:n 4
-    * op add *tmp150 zero :d.50:n
+  302 op add *tmp150 zero 4
   303 label *label60
-    * op mod :a :a *tmp150
+  304 op mod :a 6 *tmp150
   305 assertequals 2 :a "%="
   306 set :a 4
   307 set :d.51:n 2
-    * op add *tmp152 zero :d.51:n
+  308 op add *tmp152 zero 2
   309 label *label61
-    * op add :a :a *tmp152
+  310 op add :a 4 *tmp152
   311 assertequals 6 :a "+="
   312 set :a 4
   313 set :d.52:n 2
-    * op add *tmp154 zero :d.52:n
+  314 op add *tmp154 zero 2
   315 label *label62
-    * op sub :a :a *tmp154
+  316 op sub :a 4 *tmp154
   317 assertequals 2 :a "-="
   318 set :a 1
   319 set :d.53:n 2
-    * op add *tmp156 zero :d.53:n
+  320 op add *tmp156 zero 2
   321 label *label63
-    * op shl :a :a *tmp156
+  322 op shl :a 1 *tmp156
   323 assertequals 4 :a "<<="
   324 set :a 9
   325 set :d.54:n 2
-    * op add *tmp158 zero :d.54:n
+  326 op add *tmp158 zero 2
   327 label *label64
-    * op shr :a :a *tmp158
+  328 op shr :a 9 *tmp158
   329 assertequals 2 :a ">>="
   330 set :a 1
   331 set :d.55:n 2
-    * op add *tmp160 zero :d.55:n
+  332 op add *tmp160 zero 2
   333 label *label65
-    * op or :a :a *tmp160
+  334 op or :a 1 *tmp160
   335 assertequals 3 :a "|="
   336 set :a 3
   337 set :d.56:n 2
-    * op add *tmp162 zero :d.56:n
+  338 op add *tmp162 zero 2
   339 label *label66
-    * op and :a :a *tmp162
+  340 op and :a 3 *tmp162
   341 assertequals 2 :a "&="
   342 set :a 3
   343 set :d.57:n 2
-    * op add *tmp164 zero :d.57:n
+  344 op add *tmp164 zero 2
   345 label *label67
-    * op xor :a :a *tmp164
+  346 op xor :a 3 *tmp164
   347 assertequals 1 :a "^="
   348 set :a 1
   349 set :d.58:n 0
-    * op add *tmp166 zero :d.58:n
+  350 op add *tmp166 zero 0
   351 label *label68
-    * op land :a :a *tmp166
+  352 op land :a 1 *tmp166
   353 assertequals false :a "&&="
   354 set :a 1
   355 set :d.59:n 2
-    * op add *tmp168 zero :d.59:n
+  356 op add *tmp168 zero 2
   357 label *label69
-    * op land :a :a *tmp168
+  358 op land :a 1 *tmp168
   359 assertequals true :a "&&="
   360 set :a 0
   361 set :d.60:n 2
-    * op add *tmp170 zero :d.60:n
+  362 op add *tmp170 zero 2
   363 label *label70
-    * op or *tmp172 :a *tmp170
+  364 op or *tmp172 0 *tmp170
   365 op notEqual :a *tmp172 false
   366 assertequals true :a "||="
   367 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-78 instructions):
     0 set NULL null
     1 set zero 0
-    * set :d.0:n 3
     2 op add *tmp0 zero 3
     3 label *label4
-    * op add *tmp2 2 *tmp0
+    4 op add *tmp2 zero 5
     5 assertequals 5 *tmp2 "add"
-    * set :d.1:n 6
     6 op add *tmp3 zero 6
     7 label *label5
-    * op sub *tmp5 7 *tmp3
+    8 op sub *tmp5 1 zero
     9 assertequals 1 *tmp5 "sub"
-    * set :d.2:n 2
    10 op add *tmp6 zero 2
    11 label *label6
    12 op mul *tmp8 3 *tmp6
    13 assertequals 6 *tmp8 "mul"
-    * set :d.3:n 4
    14 op add *tmp9 zero 4
    15 label *label7
    16 op div *tmp11 6 *tmp9
    17 assertequals 1.5 *tmp11 "div"
-    * set :d.4:n 100000
    18 op add *tmp12 zero 100000
    19 label *label8
    20 op div *tmp14 1 *tmp12
    21 assertequals 0.00001 *tmp14 "div exp"
-    * set :d.5:n 4
    22 op add *tmp15 zero 4
    23 label *label9
-    * op idiv *tmp17 6 *tmp15
+   24 op idiv *tmp17 6 *tmp9
    25 assertequals 1 *tmp17 "idiv"
-    * set :d.6:n 4
    26 op add *tmp18 zero 4
    27 label *label10
-    * op mod *tmp20 6 *tmp18
+   28 op mod *tmp20 6 *tmp9
    29 assertequals 2 *tmp20 "mod"
-    * set :d.7:n 4
    30 op add *tmp21 zero 4
    31 label *label11
-    * op pow *tmp23 2 *tmp21
+   32 op pow *tmp23 2 *tmp9
    33 assertequals 16 *tmp23 "pow"
-    * set :d.8:n 5
    34 op add *tmp24 zero 5
    35 label *label12
    36 op equal *tmp26 5 *tmp24
    37 assertequals true *tmp26 "equal 1"
-    * set :d.9:n 6
    38 op add *tmp27 zero 6
    39 label *label13
-    * op equal *tmp29 5 *tmp27
+   40 op equal *tmp29 5 *tmp3
    41 assertequals false *tmp29 "equal 2"
-    * set :d.10:n null
    42 op add *tmp30 zero null
    43 label *label14
    44 op equal *tmp32 0 *tmp30
    45 assertequals true *tmp32 "equal null"
-    * set :d.11:n 5
    46 op add *tmp33 zero 5
    47 label *label15
-    * op notEqual *tmp35 5 *tmp33
+   48 op notEqual *tmp35 5 *tmp24
    49 assertequals false *tmp35 "notEqual 1"
-    * set :d.12:n 6
    50 op add *tmp36 zero 6
    51 label *label16
-    * op notEqual *tmp38 5 *tmp36
+   52 op notEqual *tmp38 5 *tmp3
    53 assertequals true *tmp38 "notEqual 2"
-    * set :d.13:n null
    54 op add *tmp39 zero null
    55 label *label17
-    * op notEqual *tmp41 0 *tmp39
+   56 op notEqual *tmp41 0 *tmp30
    57 assertequals false *tmp41 "notEqual null"
-    * set :d.14:n 0
    58 op add *tmp42 zero 0
    59 label *label18
    60 op land *tmp44 1 *tmp42
    61 assertequals false *tmp44 "land 1"
-    * set :d.15:n 2
    62 op add *tmp45 zero 2
    63 label *label19
-    * op land *tmp47 1 *tmp45
+   64 op land *tmp47 1 *tmp6
    65 assertequals true *tmp47 "land 2"
-    * set :d.16:n 1
    66 op add *tmp48 zero 1
    67 label *label20
    68 op lessThan *tmp50 0 *tmp48
    69 assertequals true *tmp50 "lessThan 1"
-    * set :d.17:n 0
    70 op add *tmp51 zero 0
    71 label *label21
-    * op lessThan *tmp53 1 *tmp51
+   72 op lessThan *tmp53 1 *tmp42
    73 assertequals false *tmp53 "lessThan 2"
-    * set :d.18:n 1
    74 op add *tmp54 zero 1
    75 label *label22
-    * op lessThanEq *tmp56 1 *tmp54
+   76 op lessThanEq *tmp56 1 *tmp48
    77 assertequals true *tmp56 "lessThanEq 1"
-    * set :d.19:n 0
    78 op add *tmp57 zero 0
    79 label *label23
-    * op lessThanEq *tmp59 1 *tmp57
+   80 op lessThanEq *tmp59 1 *tmp42
    81 assertequals false *tmp59 "lessThanEq 2"
-    * set :d.20:n 1
    82 op add *tmp60 zero 1
    83 label *label24
-    * op greaterThan *tmp62 2 *tmp60
+   84 op greaterThan *tmp62 2 *tmp48
    85 assertequals true *tmp62 "greaterThan 1"
-    * set :d.21:n 2
    86 op add *tmp63 zero 2
    87 label *label25
-    * op greaterThan *tmp65 1 *tmp63
+   88 op greaterThan *tmp65 1 *tmp6
    89 assertequals false *tmp65 "greaterThan 2"
-    * set :d.22:n 1
    90 op add *tmp66 zero 1
    91 label *label26
-    * op greaterThanEq *tmp68 1 *tmp66
+   92 op greaterThanEq *tmp68 1 *tmp48
    93 assertequals true *tmp68 "greaterThanEq 1"
-    * set :d.23:n 2
    94 op add *tmp69 zero 2
    95 label *label27
-    * op greaterThanEq *tmp71 1 *tmp69
+   96 op greaterThanEq *tmp71 1 *tmp6
    97 assertequals false *tmp71 "greaterThanEq 2"
    98 op strictEqual *tmp72 0 NULL
    99 assertequals false *tmp72 "strictEqual 1"
   100 op strictEqual *tmp73 null NULL
   101 assertequals true *tmp73 "strictEqual 2"
-    * set :d.24:n 2
   102 op add *tmp74 zero 2
   103 label *label28
-    * op shl *tmp76 1 *tmp74
+  104 op shl *tmp76 1 *tmp6
   105 assertequals 4 *tmp76 "shl"
-    * set :d.25:n 2
   106 op add *tmp77 zero 2
   107 label *label29
-    * op shr *tmp79 9 *tmp77
+  108 op shr *tmp79 9 *tmp6
   109 assertequals 2 *tmp79 "shr"
-    * set :d.26:n 2
   110 op add *tmp80 zero 2
   111 label *label30
-    * op or *tmp82 1 *tmp80
+  112 op or *tmp82 1 *tmp6
   113 assertequals 3 *tmp82 "or"
-    * set :d.27:n 2
   114 op add *tmp83 zero 2
   115 label *label31
-    * op and *tmp85 3 *tmp83
+  116 op and *tmp85 3 *tmp6
   117 assertequals 2 *tmp85 "and"
-    * set :d.28:n 2
   118 op add *tmp86 zero 2
   119 label *label32
-    * op xor *tmp88 3 *tmp86
+  120 op xor *tmp88 3 *tmp6
   121 assertequals 1 *tmp88 "xor"
-    * set :d.29:n 0
   122 op add *tmp89 zero 0
   123 label *label33
-    * op not *tmp91 *tmp89
+  124 op not *tmp91 *tmp42
   125 assertequals -1 *tmp91 "not 1"
-    * set :d.30:n 65535
   126 op add *tmp92 zero 65535
   127 label *label34
   128 op not *tmp94 *tmp92
   129 assertequals -65536 *tmp94 "not 2"
   130 set :a 0xabcdefabcdef
-    * op add *tmp95 0xabcdefabcdef 1
-    * op sub *tmp96 0 188900977659376
-    * set :d.31:n 0xabcdefabcdef
-    * op add *tmp97 zero :a
+  131 op add *tmp97 zero 0xabcdefabcdef
   132 label *label35
   133 op not *tmp99 *tmp97
   134 assertequals -188900977659376 *tmp99 "not 3"
-    * set :d.32:n 4
   135 op add *tmp100 zero 4
   136 label *label36
-    * op max *tmp102 2 *tmp100
+  137 op max *tmp102 2 *tmp9
   138 assertequals 4 *tmp102 "max"
-    * set :d.33:n 4
   139 op add *tmp103 zero 4
   140 label *label37
-    * op min *tmp105 2 *tmp103
+  141 op min *tmp105 2 *tmp9
   142 assertequals 2 *tmp105 "min"
-    * set :d.34:n -2
   143 op add *tmp106 zero -2
   144 label *label38
   145 op abs *tmp108 *tmp106
   146 assertequals 2 *tmp108 "abs"
-    * set :d.35:n 2.718281828459045
   147 op add *tmp109 zero 2.718281828459045
   148 label *label39
   149 op log *tmp111 *tmp109
   150 assertequals 1 *tmp111 "log"
-    * set :d.36:n 10
   151 op add *tmp112 zero 10
   152 label *label40
   153 op log10 *tmp114 *tmp112
   154 assertequals 1 *tmp114 "log10"
-    * set :d.37:n 2.5
   155 op add *tmp115 zero 2.5
   156 label *label41
   157 op floor *tmp117 *tmp115
   158 assertequals 2 *tmp117 "floor"
-    * set :d.38:n 2.5
   159 op add *tmp118 zero 2.5
   160 label *label42
-    * op ceil *tmp120 *tmp118
+  161 op ceil *tmp120 *tmp115
   162 assertequals 3 *tmp120 "ceil"
-    * set :d.39:n 16
   163 op add *tmp121 zero 16
   164 label *label43
   165 op sqrt *tmp123 *tmp121
   166 assertequals 4 *tmp123 "sqrt"
-    * set :d.40:n 1
   167 op add *tmp124 zero 1
   168 label *label44
-    * op angle *tmp126 1 *tmp124
+  169 op angle *tmp126 1 *tmp48
   170 assertequals 45 *tmp126 "angle"
-    * set :d.41:n 135
   171 op add *tmp127 zero 135
   172 label *label45
   173 op angleDiff *tmp129 45 *tmp127
 
   209 setaddr :assertEqualsRound.0*retaddr *label51
   210 call *label3 *invalid :assertEqualsRound.0*retval
   211 label *label51
-    * set :d.42:n 8
   212 op add *tmp130 zero 8
   213 label *label52
-    * op sub *tmp132 0 *tmp130
+  214 op sub *tmp132 -8 zero
   215 assertequals -8 *tmp132 "unary minus"
-    * set :d.43:n 0
   216 op add *tmp133 zero 0
   217 label *label53
-    * op equal *tmp135 *tmp133 false
+  218 op equal *tmp135 *tmp42 false
   219 assertequals 1 *tmp135 "boolean negation 1"
-    * set :d.44:n 1
   220 op add *tmp136 zero 1
   221 label *label54
-    * op equal *tmp138 *tmp136 false
+  222 op equal *tmp138 *tmp48 false
   223 assertequals 0 *tmp138 "boolean negation 2"
-    * set :d.45:n 2
   224 op add *tmp139 zero 2
   225 label *label55
-    * op equal *tmp141 *tmp139 false
+  226 op equal *tmp141 *tmp6 false
   227 assertequals 0 *tmp141 "boolean negation 3"
-    * set :a 2
-    * set :d.46:n 4
   228 op add *tmp142 zero 4
   229 label *label56
-    * op pow :a 2 *tmp142
-    * assertequals 16 :a "**="
-    * set :a 2
-    * set :d.47:n 4
+  230 op pow :a 2 *tmp9
+  231 assertequals 16 *tmp23 "**="
   232 op add *tmp144 zero 4
   233 label *label57
-    * op mul :a 2 *tmp144
+  234 op mul :a 2 *tmp9
   235 assertequals 8 :a "*="
-    * set :a 6
-    * set :d.48:n 4
   236 op add *tmp146 zero 4
   237 label *label58
-    * op div :a 6 *tmp146
-    * assertequals 1.5 :a "/="
-    * set :a 6
-    * set :d.49:n 4
+  238 op div :a 6 *tmp9
+  239 assertequals 1.5 *tmp11 "/="
   240 op add *tmp148 zero 4
   241 label *label59
-    * op idiv :a 6 *tmp148
-    * assertequals 1 :a "\="
-    * set :a 6
-    * set :d.50:n 4
+  242 op idiv :a 6 *tmp9
+  243 assertequals 1 *tmp17 "\="
   244 op add *tmp150 zero 4
   245 label *label60
-    * op mod :a 6 *tmp150
-    * assertequals 2 :a "%="
-    * set :a 4
-    * set :d.51:n 2
+  246 op mod :a 6 *tmp9
+  247 assertequals 2 *tmp20 "%="
   248 op add *tmp152 zero 2
   249 label *label61
-    * op add :a 4 *tmp152
+  250 op add :a 4 *tmp6
   251 assertequals 6 :a "+="
-    * set :a 4
-    * set :d.52:n 2
   252 op add *tmp154 zero 2
   253 label *label62
-    * op sub :a 4 *tmp154
+  254 op sub :a 4 *tmp6
   255 assertequals 2 :a "-="
-    * set :a 1
-    * set :d.53:n 2
   256 op add *tmp156 zero 2
   257 label *label63
-    * op shl :a 1 *tmp156
-    * assertequals 4 :a "<<="
-    * set :a 9
-    * set :d.54:n 2
+  258 op shl :a 1 *tmp6
+  259 assertequals 4 *tmp76 "<<="
   260 op add *tmp158 zero 2
   261 label *label64
-    * op shr :a 9 *tmp158
-    * assertequals 2 :a ">>="
-    * set :a 1
-    * set :d.55:n 2
+  262 op shr :a 9 *tmp6
+  263 assertequals 2 *tmp79 ">>="
   264 op add *tmp160 zero 2
   265 label *label65
-    * op or :a 1 *tmp160
-    * assertequals 3 :a "|="
-    * set :a 3
-    * set :d.56:n 2
+  266 op or :a 1 *tmp6
+  267 assertequals 3 *tmp82 "|="
   268 op add *tmp162 zero 2
   269 label *label66
-    * op and :a 3 *tmp162
-    * assertequals 2 :a "&="
-    * set :a 3
-    * set :d.57:n 2
+  270 op and :a 3 *tmp6
+  271 assertequals 2 *tmp85 "&="
   272 op add *tmp164 zero 2
   273 label *label67
-    * op xor :a 3 *tmp164
-    * assertequals 1 :a "^="
-    * set :a 1
-    * set :d.58:n 0
+  274 op xor :a 3 *tmp6
+  275 assertequals 1 *tmp88 "^="
   276 op add *tmp166 zero 0
   277 label *label68
-    * op land :a 1 *tmp166
-    * assertequals false :a "&&="
-    * set :a 1
-    * set :d.59:n 2
+  278 op land :a 1 *tmp42
+  279 assertequals false *tmp44 "&&="
   280 op add *tmp168 zero 2
   281 label *label69
-    * op land :a 1 *tmp168
-    * assertequals true :a "&&="
-    * set :a 0
-    * set :d.60:n 2
+  282 op land :a 1 *tmp6
+  283 assertequals true *tmp47 "&&="
   284 op add *tmp170 zero 2
   285 label *label70
-    * op or *tmp172 0 *tmp170
+  286 op or *tmp172 0 *tmp6
   287 op notEqual :a *tmp172 false
   288 assertequals true :a "||="
   289 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-57 instructions):
     0 set NULL null
     1 set zero 0
-    * op add *tmp0 zero 3
     2 label *label4
     3 op add *tmp2 zero 5
     4 assertequals 5 *tmp2 "add"
 
    18 label *label8
    19 op div *tmp14 1 *tmp12
    20 assertequals 0.00001 *tmp14 "div exp"
-    * op add *tmp15 zero 4
    21 label *label9
    22 op idiv *tmp17 6 *tmp9
    23 assertequals 1 *tmp17 "idiv"
-    * op add *tmp18 zero 4
    24 label *label10
    25 op mod *tmp20 6 *tmp9
    26 assertequals 2 *tmp20 "mod"
-    * op add *tmp21 zero 4
    27 label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
    30 op add *tmp24 zero 5
    31 label *label12
-    * op equal *tmp26 5 *tmp24
+   32 op equal *tmp26 5 *tmp2
    33 assertequals true *tmp26 "equal 1"
-    * op add *tmp27 zero 6
    34 label *label13
    35 op equal *tmp29 5 *tmp3
    36 assertequals false *tmp29 "equal 2"
 
    38 label *label14
    39 op equal *tmp32 0 *tmp30
    40 assertequals true *tmp32 "equal null"
-    * op add *tmp33 zero 5
    41 label *label15
-    * op notEqual *tmp35 5 *tmp24
+   42 op notEqual *tmp35 5 *tmp2
    43 assertequals false *tmp35 "notEqual 1"
-    * op add *tmp36 zero 6
    44 label *label16
    45 op notEqual *tmp38 5 *tmp3
    46 assertequals true *tmp38 "notEqual 2"
-    * op add *tmp39 zero null
    47 label *label17
    48 op notEqual *tmp41 0 *tmp30
    49 assertequals false *tmp41 "notEqual null"
 
    51 label *label18
    52 op land *tmp44 1 *tmp42
    53 assertequals false *tmp44 "land 1"
-    * op add *tmp45 zero 2
    54 label *label19
    55 op land *tmp47 1 *tmp6
    56 assertequals true *tmp47 "land 2"
 
    58 label *label20
    59 op lessThan *tmp50 0 *tmp48
    60 assertequals true *tmp50 "lessThan 1"
-    * op add *tmp51 zero 0
    61 label *label21
    62 op lessThan *tmp53 1 *tmp42
    63 assertequals false *tmp53 "lessThan 2"
-    * op add *tmp54 zero 1
    64 label *label22
    65 op lessThanEq *tmp56 1 *tmp48
    66 assertequals true *tmp56 "lessThanEq 1"
-    * op add *tmp57 zero 0
    67 label *label23
    68 op lessThanEq *tmp59 1 *tmp42
    69 assertequals false *tmp59 "lessThanEq 2"
-    * op add *tmp60 zero 1
    70 label *label24
    71 op greaterThan *tmp62 2 *tmp48
    72 assertequals true *tmp62 "greaterThan 1"
-    * op add *tmp63 zero 2
    73 label *label25
    74 op greaterThan *tmp65 1 *tmp6
    75 assertequals false *tmp65 "greaterThan 2"
-    * op add *tmp66 zero 1
    76 label *label26
    77 op greaterThanEq *tmp68 1 *tmp48
    78 assertequals true *tmp68 "greaterThanEq 1"
-    * op add *tmp69 zero 2
    79 label *label27
    80 op greaterThanEq *tmp71 1 *tmp6
    81 assertequals false *tmp71 "greaterThanEq 2"
 
    83 assertequals false *tmp72 "strictEqual 1"
    84 op strictEqual *tmp73 null NULL
    85 assertequals true *tmp73 "strictEqual 2"
-    * op add *tmp74 zero 2
    86 label *label28
    87 op shl *tmp76 1 *tmp6
    88 assertequals 4 *tmp76 "shl"
-    * op add *tmp77 zero 2
    89 label *label29
    90 op shr *tmp79 9 *tmp6
    91 assertequals 2 *tmp79 "shr"
-    * op add *tmp80 zero 2
    92 label *label30
    93 op or *tmp82 1 *tmp6
    94 assertequals 3 *tmp82 "or"
-    * op add *tmp83 zero 2
    95 label *label31
    96 op and *tmp85 3 *tmp6
    97 assertequals 2 *tmp85 "and"
-    * op add *tmp86 zero 2
    98 label *label32
    99 op xor *tmp88 3 *tmp6
   100 assertequals 1 *tmp88 "xor"
-    * op add *tmp89 zero 0
   101 label *label33
   102 op not *tmp91 *tmp42
   103 assertequals -1 *tmp91 "not 1"
 
   105 label *label34
   106 op not *tmp94 *tmp92
   107 assertequals -65536 *tmp94 "not 2"
-    * set :a 0xabcdefabcdef
   108 op add *tmp97 zero 0xabcdefabcdef
   109 label *label35
   110 op not *tmp99 *tmp97
   111 assertequals -188900977659376 *tmp99 "not 3"
-    * op add *tmp100 zero 4
   112 label *label36
   113 op max *tmp102 2 *tmp9
   114 assertequals 4 *tmp102 "max"
-    * op add *tmp103 zero 4
   115 label *label37
   116 op min *tmp105 2 *tmp9
   117 assertequals 2 *tmp105 "min"
 
   131 label *label41
   132 op floor *tmp117 *tmp115
   133 assertequals 2 *tmp117 "floor"
-    * op add *tmp118 zero 2.5
   134 label *label42
   135 op ceil *tmp120 *tmp115
   136 assertequals 3 *tmp120 "ceil"
 
   138 label *label43
   139 op sqrt *tmp123 *tmp121
   140 assertequals 4 *tmp123 "sqrt"
-    * op add *tmp124 zero 1
   141 label *label44
   142 op angle *tmp126 1 *tmp48
   143 assertequals 45 *tmp126 "angle"
 
   182 setaddr :assertEqualsRound.0*retaddr *label51
   183 call *label3 *invalid :assertEqualsRound.0*retval
   184 label *label51
-    * op add *tmp130 zero 8
   185 label *label52
   186 op sub *tmp132 -8 zero
   187 assertequals -8 *tmp132 "unary minus"
-    * op add *tmp133 zero 0
   188 label *label53
   189 op equal *tmp135 *tmp42 false
   190 assertequals 1 *tmp135 "boolean negation 1"
-    * op add *tmp136 zero 1
   191 label *label54
   192 op equal *tmp138 *tmp48 false
   193 assertequals 0 *tmp138 "boolean negation 2"
-    * op add *tmp139 zero 2
   194 label *label55
   195 op equal *tmp141 *tmp6 false
   196 assertequals 0 *tmp141 "boolean negation 3"
-    * op add *tmp142 zero 4
   197 label *label56
-    * op pow :a 2 *tmp9
   198 assertequals 16 *tmp23 "**="
-    * op add *tmp144 zero 4
   199 label *label57
   200 op mul :a 2 *tmp9
   201 assertequals 8 :a "*="
-    * op add *tmp146 zero 4
   202 label *label58
-    * op div :a 6 *tmp9
   203 assertequals 1.5 *tmp11 "/="
-    * op add *tmp148 zero 4
   204 label *label59
-    * op idiv :a 6 *tmp9
   205 assertequals 1 *tmp17 "\="
-    * op add *tmp150 zero 4
   206 label *label60
-    * op mod :a 6 *tmp9
   207 assertequals 2 *tmp20 "%="
-    * op add *tmp152 zero 2
   208 label *label61
-    * op add :a 4 *tmp6
+  209 op add :a zero 6
   210 assertequals 6 :a "+="
-    * op add *tmp154 zero 2
   211 label *label62
-    * op sub :a 4 *tmp6
+  212 op sub :a 2 zero
   213 assertequals 2 :a "-="
-    * op add *tmp156 zero 2
   214 label *label63
-    * op shl :a 1 *tmp6
   215 assertequals 4 *tmp76 "<<="
-    * op add *tmp158 zero 2
   216 label *label64
-    * op shr :a 9 *tmp6
   217 assertequals 2 *tmp79 ">>="
-    * op add *tmp160 zero 2
   218 label *label65
-    * op or :a 1 *tmp6
   219 assertequals 3 *tmp82 "|="
-    * op add *tmp162 zero 2
   220 label *label66
-    * op and :a 3 *tmp6
   221 assertequals 2 *tmp85 "&="
-    * op add *tmp164 zero 2
   222 label *label67
-    * op xor :a 3 *tmp6
   223 assertequals 1 *tmp88 "^="
-    * op add *tmp166 zero 0
   224 label *label68
-    * op land :a 1 *tmp42
   225 assertequals false *tmp44 "&&="
-    * op add *tmp168 zero 2
   226 label *label69
-    * op land :a 1 *tmp6
   227 assertequals true *tmp47 "&&="
-    * op add *tmp170 zero 2
   228 label *label70
   229 op or *tmp172 0 *tmp6
   230 op notEqual :a *tmp172 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    27 label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
-    * op add *tmp24 zero 5
    30 label *label12
    31 op equal *tmp26 5 *tmp2
    32 assertequals true *tmp26 "equal 1"
 
   206 assertequals 2 *tmp20 "%="
   207 label *label61
   208 op add :a zero 6
-    * assertequals 6 :a "+="
+  209 assertequals 6 *tmp3 "+="
   210 label *label62
   211 op sub :a 2 zero
   212 assertequals 2 :a "-="

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
   205 label *label60
   206 assertequals 2 *tmp20 "%="
   207 label *label61
-    * op add :a zero 6
   208 assertequals 6 *tmp3 "+="
   209 label *label62
   210 op sub :a 2 zero

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+17 instructions):
 
   149 set :assertEqualsRound.0:actual 1
   150 set :assertEqualsRound.0:title "sin"
   151 setaddr :assertEqualsRound.0*retaddr *label46
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label46
+  152 label *label73
+  153 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  154 op add *tmp175 :round.0:x 0.5
+  155 op floor *tmp174 *tmp175
+  156 label *label74
+  157 op div *tmp177 *tmp174 100000000
+  158 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  159 label *label75
   160 set :assertEqualsRound.0:expected -1
   161 set :assertEqualsRound.0:actual -1
   162 set :assertEqualsRound.0:title "cos"
   163 setaddr :assertEqualsRound.0*retaddr *label47
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label47
+  164 label *label76
+  165 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  166 op add *tmp175 :round.0:x 0.5
+  167 op floor *tmp174 *tmp175
+  168 label *label77
+  169 op div *tmp177 *tmp174 100000000
+  170 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  171 label *label78
   172 set :assertEqualsRound.0:expected 1
   173 set :assertEqualsRound.0:actual 0.9999999999999999
   174 set :assertEqualsRound.0:title "tan"
   175 setaddr :assertEqualsRound.0*retaddr *label48
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label48
+  176 label *label79
+  177 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  178 op add *tmp175 :round.0:x 0.5
+  179 op floor *tmp174 *tmp175
+  180 label *label80
+  181 op div *tmp177 *tmp174 100000000
+  182 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  183 label *label81
   184 set :assertEqualsRound.0:expected 90
   185 set :assertEqualsRound.0:actual 90
   186 set :assertEqualsRound.0:title "asin"
   187 setaddr :assertEqualsRound.0*retaddr *label49
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label49
+  188 label *label82
+  189 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  190 op add *tmp175 :round.0:x 0.5
+  191 op floor *tmp174 *tmp175
+  192 label *label83
+  193 op div *tmp177 *tmp174 100000000
+  194 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  195 label *label84
   196 set :assertEqualsRound.0:expected 0
   197 set :assertEqualsRound.0:actual 0
   198 set :assertEqualsRound.0:title "acos"
   199 setaddr :assertEqualsRound.0*retaddr *label50
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label50
+  200 label *label85
+  201 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  202 op add *tmp175 :round.0:x 0.5
+  203 op floor *tmp174 *tmp175
+  204 label *label86
+  205 op div *tmp177 *tmp174 100000000
+  206 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  207 label *label87
   208 set :assertEqualsRound.0:expected 45
   209 set :assertEqualsRound.0:actual 45
   210 set :assertEqualsRound.0:title "atan"
   211 setaddr :assertEqualsRound.0*retaddr *label51
-    * call *label3 *invalid :assertEqualsRound.0*retval
-    * label *label51
+  212 label *label88
+  213 op mul :round.0:x :assertEqualsRound.0:actual 100000000
+  214 op add *tmp175 :round.0:x 0.5
+  215 op floor *tmp174 *tmp175
+  216 label *label89
+  217 op div *tmp177 *tmp174 100000000
+  218 assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  219 label *label90
   220 label *label52
   221 op sub *tmp132 -8 zero
   222 assertequals -8 *tmp132 "unary minus"
 
   265 assertequals true :a "||="
   266 stop
   267 end
-    * label *label3
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
-    * label *label72
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
-    * label *label71
-    * return :assertEqualsRound.0*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   150 set :assertEqualsRound.0:title "sin"
   151 setaddr :assertEqualsRound.0*retaddr *label46
   152 label *label73
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  153 op mul :round.0:x 1 100000000
+  154 op add *tmp175 100000000 0.5
+  155 op floor *tmp174 100000000.5
   156 label *label74
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  157 op div *tmp177 100000000 100000000
+  158 assertequals 1 1 "sin"
   159 label *label75
   160 set :assertEqualsRound.0:expected -1
   161 set :assertEqualsRound.0:actual -1
   162 set :assertEqualsRound.0:title "cos"
   163 setaddr :assertEqualsRound.0*retaddr *label47
   164 label *label76
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  165 op mul :round.0:x -1 100000000
+  166 op add *tmp175 -100000000 0.5
+  167 op floor *tmp174 -99999999.5
   168 label *label77
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  169 op div *tmp177 -100000000 100000000
+  170 assertequals -1 -1 "cos"
   171 label *label78
   172 set :assertEqualsRound.0:expected 1
   173 set :assertEqualsRound.0:actual 0.9999999999999999
   174 set :assertEqualsRound.0:title "tan"
   175 setaddr :assertEqualsRound.0*retaddr *label48
   176 label *label79
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  177 op mul :round.0:x 0.9999999999999999 100000000
+  178 op add *tmp175 99999999.99999999 0.5
+  179 op floor *tmp174 100000000.49999999
   180 label *label80
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  181 op div *tmp177 100000000 100000000
+  182 assertequals 1 1 "tan"
   183 label *label81
   184 set :assertEqualsRound.0:expected 90
   185 set :assertEqualsRound.0:actual 90
   186 set :assertEqualsRound.0:title "asin"
   187 setaddr :assertEqualsRound.0*retaddr *label49
   188 label *label82
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  189 op mul :round.0:x 90 100000000
+  190 op add *tmp175 9000000000 0.5
+  191 op floor *tmp174 9000000000.5
   192 label *label83
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  193 op div *tmp177 9000000000 100000000
+  194 assertequals 90 90 "asin"
   195 label *label84
   196 set :assertEqualsRound.0:expected 0
   197 set :assertEqualsRound.0:actual 0
   198 set :assertEqualsRound.0:title "acos"
   199 setaddr :assertEqualsRound.0*retaddr *label50
   200 label *label85
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  201 op mul :round.0:x 0 100000000
+  202 op add *tmp175 0 0.5
+  203 op floor *tmp174 0.5
   204 label *label86
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  205 op div *tmp177 0 100000000
+  206 assertequals 0 0 "acos"
   207 label *label87
   208 set :assertEqualsRound.0:expected 45
   209 set :assertEqualsRound.0:actual 45
   210 set :assertEqualsRound.0:title "atan"
   211 setaddr :assertEqualsRound.0*retaddr *label51
   212 label *label88
-    * op mul :round.0:x :assertEqualsRound.0:actual 100000000
-    * op add *tmp175 :round.0:x 0.5
-    * op floor *tmp174 *tmp175
+  213 op mul :round.0:x 45 100000000
+  214 op add *tmp175 4500000000 0.5
+  215 op floor *tmp174 4500000000.5
   216 label *label89
-    * op div *tmp177 *tmp174 100000000
-    * assertequals :assertEqualsRound.0:expected *tmp177 :assertEqualsRound.0:title
+  217 op div *tmp177 4500000000 100000000
+  218 assertequals 45 45 "atan"
   219 label *label90
   220 label *label52
   221 op sub *tmp132 -8 zero

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
   145 op angleDiff *tmp129 45 *tmp127
   146 assertequals 90 *tmp129 "angleDiff"
   147 assertequals 5 5 "len"
-    * set :assertEqualsRound.0:expected 1
-    * set :assertEqualsRound.0:actual 1
-    * set :assertEqualsRound.0:title "sin"
   148 setaddr :assertEqualsRound.0*retaddr *label46
   149 label *label73
-    * op mul :round.0:x 1 100000000
-    * op add *tmp175 100000000 0.5
-    * op floor *tmp174 100000000.5
   150 label *label74
-    * op div *tmp177 100000000 100000000
   151 assertequals 1 1 "sin"
   152 label *label75
-    * set :assertEqualsRound.0:expected -1
-    * set :assertEqualsRound.0:actual -1
-    * set :assertEqualsRound.0:title "cos"
   153 setaddr :assertEqualsRound.0*retaddr *label47
   154 label *label76
-    * op mul :round.0:x -1 100000000
-    * op add *tmp175 -100000000 0.5
-    * op floor *tmp174 -99999999.5
   155 label *label77
-    * op div *tmp177 -100000000 100000000
   156 assertequals -1 -1 "cos"
   157 label *label78
-    * set :assertEqualsRound.0:expected 1
-    * set :assertEqualsRound.0:actual 0.9999999999999999
-    * set :assertEqualsRound.0:title "tan"
   158 setaddr :assertEqualsRound.0*retaddr *label48
   159 label *label79
-    * op mul :round.0:x 0.9999999999999999 100000000
-    * op add *tmp175 99999999.99999999 0.5
-    * op floor *tmp174 100000000.49999999
   160 label *label80
-    * op div *tmp177 100000000 100000000
   161 assertequals 1 1 "tan"
   162 label *label81
-    * set :assertEqualsRound.0:expected 90
-    * set :assertEqualsRound.0:actual 90
-    * set :assertEqualsRound.0:title "asin"
   163 setaddr :assertEqualsRound.0*retaddr *label49
   164 label *label82
-    * op mul :round.0:x 90 100000000
-    * op add *tmp175 9000000000 0.5
-    * op floor *tmp174 9000000000.5
   165 label *label83
-    * op div *tmp177 9000000000 100000000
   166 assertequals 90 90 "asin"
   167 label *label84
-    * set :assertEqualsRound.0:expected 0
-    * set :assertEqualsRound.0:actual 0
-    * set :assertEqualsRound.0:title "acos"
   168 setaddr :assertEqualsRound.0*retaddr *label50
   169 label *label85
-    * op mul :round.0:x 0 100000000
-    * op add *tmp175 0 0.5
-    * op floor *tmp174 0.5
   170 label *label86
-    * op div *tmp177 0 100000000
   171 assertequals 0 0 "acos"
   172 label *label87
-    * set :assertEqualsRound.0:expected 45
-    * set :assertEqualsRound.0:actual 45
-    * set :assertEqualsRound.0:title "atan"
   173 setaddr :assertEqualsRound.0*retaddr *label51
   174 label *label88
-    * op mul :round.0:x 45 100000000
-    * op add *tmp175 4500000000 0.5
-    * op floor *tmp174 4500000000.5
   175 label *label89
-    * op div *tmp177 4500000000 100000000
   176 assertequals 45 45 "atan"
   177 label *label90
   178 label *label52

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    46 label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
-    * op add *tmp42 zero 0
+   49 set *tmp42 zero
    50 label *label18
    51 op land *tmp44 1 *tmp42
    52 assertequals false *tmp44 "land 1"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    48 assertequals false *tmp41 "notEqual null"
    49 set *tmp42 zero
    50 label *label18
-    * op land *tmp44 1 *tmp42
+   51 op land *tmp44 1 zero
    52 assertequals false *tmp44 "land 1"
    53 label *label19
    54 op land *tmp47 1 *tmp6
 
    58 op lessThan *tmp50 0 *tmp48
    59 assertequals true *tmp50 "lessThan 1"
    60 label *label21
-    * op lessThan *tmp53 1 *tmp42
+   61 op lessThan *tmp53 1 zero
    62 assertequals false *tmp53 "lessThan 2"
    63 label *label22
    64 op lessThanEq *tmp56 1 *tmp48
    65 assertequals true *tmp56 "lessThanEq 1"
    66 label *label23
-    * op lessThanEq *tmp59 1 *tmp42
+   67 op lessThanEq *tmp59 1 zero
    68 assertequals false *tmp59 "lessThanEq 2"
    69 label *label24
    70 op greaterThan *tmp62 2 *tmp48
 
    98 op xor *tmp88 3 *tmp6
    99 assertequals 1 *tmp88 "xor"
   100 label *label33
-    * op not *tmp91 *tmp42
+  101 op not *tmp91 zero
   102 assertequals -1 *tmp91 "not 1"
   103 op add *tmp92 zero 65535
   104 label *label34
 
   179 op sub *tmp132 -8 zero
   180 assertequals -8 *tmp132 "unary minus"
   181 label *label53
-    * op equal *tmp135 *tmp42 false
+  182 op equal *tmp135 zero false
   183 assertequals 1 *tmp135 "boolean negation 1"
   184 label *label54
   185 op equal *tmp138 *tmp48 false

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    46 label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
-    * set *tmp42 zero
    49 label *label18
    50 op land *tmp44 1 zero
    51 assertequals false *tmp44 "land 1"

Modifications by Final phase, Dead Code Elimination, iteration 1 (-6 instructions):
 
   144 op angleDiff *tmp129 45 *tmp127
   145 assertequals 90 *tmp129 "angleDiff"
   146 assertequals 5 5 "len"
-    * setaddr :assertEqualsRound.0*retaddr *label46
   147 label *label73
   148 label *label74
   149 assertequals 1 1 "sin"
   150 label *label75
-    * setaddr :assertEqualsRound.0*retaddr *label47
   151 label *label76
   152 label *label77
   153 assertequals -1 -1 "cos"
   154 label *label78
-    * setaddr :assertEqualsRound.0*retaddr *label48
   155 label *label79
   156 label *label80
   157 assertequals 1 1 "tan"
   158 label *label81
-    * setaddr :assertEqualsRound.0*retaddr *label49
   159 label *label82
   160 label *label83
   161 assertequals 90 90 "asin"
   162 label *label84
-    * setaddr :assertEqualsRound.0*retaddr *label50
   163 label *label85
   164 label *label86
   165 assertequals 0 0 "acos"
   166 label *label87
-    * setaddr :assertEqualsRound.0*retaddr *label51
   167 label *label88
   168 label *label89
   169 assertequals 45 45 "atan"

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
   215 op notEqual :a *tmp172 false
   216 assertequals true :a "||="
   217 stop
-    * end

Final code before resolving virtual instructions:

set NULL null
set zero 0
op add *tmp2 zero 5
assertequals 5 *tmp2 "add"
op add *tmp3 zero 6
op sub *tmp5 1 zero
assertequals 1 *tmp5 "sub"
op add *tmp6 zero 2
op mul *tmp8 3 *tmp6
assertequals 6 *tmp8 "mul"
op add *tmp9 zero 4
op div *tmp11 6 *tmp9
assertequals 1.5 *tmp11 "div"
op add *tmp12 zero 100000
op div *tmp14 1 *tmp12
assertequals 0.00001 *tmp14 "div exp"
op idiv *tmp17 6 *tmp9
assertequals 1 *tmp17 "idiv"
op mod *tmp20 6 *tmp9
assertequals 2 *tmp20 "mod"
op pow *tmp23 2 *tmp9
assertequals 16 *tmp23 "pow"
op equal *tmp26 5 *tmp2
assertequals true *tmp26 "equal 1"
op equal *tmp29 5 *tmp3
assertequals false *tmp29 "equal 2"
op add *tmp30 zero null
op equal *tmp32 0 *tmp30
assertequals true *tmp32 "equal null"
op notEqual *tmp35 5 *tmp2
assertequals false *tmp35 "notEqual 1"
op notEqual *tmp38 5 *tmp3
assertequals true *tmp38 "notEqual 2"
op notEqual *tmp41 0 *tmp30
assertequals false *tmp41 "notEqual null"
op land *tmp44 1 zero
assertequals false *tmp44 "land 1"
op land *tmp47 1 *tmp6
assertequals true *tmp47 "land 2"
op add *tmp48 zero 1
op lessThan *tmp50 0 *tmp48
assertequals true *tmp50 "lessThan 1"
op lessThan *tmp53 1 zero
assertequals false *tmp53 "lessThan 2"
op lessThanEq *tmp56 1 *tmp48
assertequals true *tmp56 "lessThanEq 1"
op lessThanEq *tmp59 1 zero
assertequals false *tmp59 "lessThanEq 2"
op greaterThan *tmp62 2 *tmp48
assertequals true *tmp62 "greaterThan 1"
op greaterThan *tmp65 1 *tmp6
assertequals false *tmp65 "greaterThan 2"
op greaterThanEq *tmp68 1 *tmp48
assertequals true *tmp68 "greaterThanEq 1"
op greaterThanEq *tmp71 1 *tmp6
assertequals false *tmp71 "greaterThanEq 2"
op strictEqual *tmp72 0 NULL
assertequals false *tmp72 "strictEqual 1"
op strictEqual *tmp73 null NULL
assertequals true *tmp73 "strictEqual 2"
op shl *tmp76 1 *tmp6
assertequals 4 *tmp76 "shl"
op shr *tmp79 9 *tmp6
assertequals 2 *tmp79 "shr"
op or *tmp82 1 *tmp6
assertequals 3 *tmp82 "or"
op and *tmp85 3 *tmp6
assertequals 2 *tmp85 "and"
op xor *tmp88 3 *tmp6
assertequals 1 *tmp88 "xor"
op not *tmp91 zero
assertequals -1 *tmp91 "not 1"
op add *tmp92 zero 65535
op not *tmp94 *tmp92
assertequals -65536 *tmp94 "not 2"
op add *tmp97 zero 0xabcdefabcdef
op not *tmp99 *tmp97
assertequals -188900977659376 *tmp99 "not 3"
op max *tmp102 2 *tmp9
assertequals 4 *tmp102 "max"
op min *tmp105 2 *tmp9
assertequals 2 *tmp105 "min"
op add *tmp106 zero -2
op abs *tmp108 *tmp106
assertequals 2 *tmp108 "abs"
op add *tmp109 zero 2.718281828459045
op log *tmp111 *tmp109
assertequals 1 *tmp111 "log"
op add *tmp112 zero 10
op log10 *tmp114 *tmp112
assertequals 1 *tmp114 "log10"
op add *tmp115 zero 2.5
op floor *tmp117 *tmp115
assertequals 2 *tmp117 "floor"
op ceil *tmp120 *tmp115
assertequals 3 *tmp120 "ceil"
op add *tmp121 zero 16
op sqrt *tmp123 *tmp121
assertequals 4 *tmp123 "sqrt"
op angle *tmp126 1 *tmp48
assertequals 45 *tmp126 "angle"
op add *tmp127 zero 135
op angleDiff *tmp129 45 *tmp127
assertequals 90 *tmp129 "angleDiff"
assertequals 5 5 "len"
assertequals 1 1 "sin"
assertequals -1 -1 "cos"
assertequals 1 1 "tan"
assertequals 90 90 "asin"
assertequals 0 0 "acos"
assertequals 45 45 "atan"
op sub *tmp132 -8 zero
assertequals -8 *tmp132 "unary minus"
op equal *tmp135 zero false
assertequals 1 *tmp135 "boolean negation 1"
op equal *tmp138 *tmp48 false
assertequals 0 *tmp138 "boolean negation 2"
op equal *tmp141 *tmp6 false
assertequals 0 *tmp141 "boolean negation 3"
assertequals 16 *tmp23 "**="
op mul :a 2 *tmp9
assertequals 8 :a "*="
assertequals 1.5 *tmp11 "/="
assertequals 1 *tmp17 "\="
assertequals 2 *tmp20 "%="
assertequals 6 *tmp3 "+="
op sub :a 2 zero
assertequals 2 :a "-="
assertequals 4 *tmp76 "<<="
assertequals 2 *tmp79 ">>="
assertequals 3 *tmp82 "|="
assertequals 2 *tmp85 "&="
assertequals 1 *tmp88 "^="
assertequals false *tmp44 "&&="
assertequals true *tmp47 "&&="
op or *tmp172 0 *tmp6
op notEqual :a *tmp172 false
assertequals true :a "||="
stop
