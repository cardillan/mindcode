   397 instructions before optimizations.
    66 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
     2 instructions modified by Expression Optimization (4 iterations).
     1 instructions eliminated by If Expression Optimization (2 passes, 4 iterations).
   188 instructions eliminated by Data Flow Optimization (3 passes, 14 iterations).
    11 instructions added by Function Inlining (5 iterations).
     6 function calls inlined by Function Inlining.
   151 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 815):
  * Inline function 'assertEqualsRound' defined at line 3:1      cost    19, benefit       27.0, efficiency      1.421 (-31 instructions)
    Inline function call at line 83:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 84:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 85:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 87:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 88:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 89:1                            cost     4, benefit        4.5, efficiency      1.125

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-66 instructions):
     0 set NULL null
     1 set zero 0
     2 set :d:n 3
-    * op add *tmp1 zero :d:n
-    * set *tmp0 *tmp1
+    3 op add *tmp0 zero :d:n
     4 label *label4
     5 op add *tmp2 2 *tmp0
     6 assertequals 5 *tmp2 "add"
     7 set :d.1:n 6
-    * op add *tmp4 zero :d.1:n
-    * set *tmp3 *tmp4
+    8 op add *tmp3 zero :d.1:n
     9 label *label5
    10 op sub *tmp5 7 *tmp3
    11 assertequals 1 *tmp5 "sub"
    12 set :d.2:n 2
-    * op add *tmp7 zero :d.2:n
-    * set *tmp6 *tmp7
+   13 op add *tmp6 zero :d.2:n
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 set :d.3:n 4
-    * op add *tmp10 zero :d.3:n
-    * set *tmp9 *tmp10
+   18 op add *tmp9 zero :d.3:n
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 set :d.4:n 100000
-    * op add *tmp13 zero :d.4:n
-    * set *tmp12 *tmp13
+   23 op add *tmp12 zero :d.4:n
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 set :d.5:n 4
-    * op add *tmp16 zero :d.5:n
-    * set *tmp15 *tmp16
+   28 op add *tmp15 zero :d.5:n
    29 label *label9
    30 op idiv *tmp17 6 *tmp15
    31 assertequals 1 *tmp17 "idiv"
    32 set :d.6:n 4
-    * op add *tmp19 zero :d.6:n
-    * set *tmp18 *tmp19
+   33 op add *tmp18 zero :d.6:n
    34 label *label10
    35 op mod *tmp20 6 *tmp18
    36 assertequals 2 *tmp20 "mod"
    37 set :d.7:n 4
-    * op add *tmp22 zero :d.7:n
-    * set *tmp21 *tmp22
+   38 op add *tmp21 zero :d.7:n
    39 label *label11
    40 op pow *tmp23 2 *tmp21
    41 assertequals 16 *tmp23 "pow"
    42 set :d.8:n 5
-    * op add *tmp25 zero :d.8:n
-    * set *tmp24 *tmp25
+   43 op add *tmp24 zero :d.8:n
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 set :d.9:n 6
-    * op add *tmp28 zero :d.9:n
-    * set *tmp27 *tmp28
+   48 op add *tmp27 zero :d.9:n
    49 label *label13
    50 op equal *tmp29 5 *tmp27
    51 assertequals false *tmp29 "equal 2"
    52 set :d.10:n null
-    * op add *tmp31 zero :d.10:n
-    * set *tmp30 *tmp31
+   53 op add *tmp30 zero :d.10:n
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 set :d.11:n 5
-    * op add *tmp34 zero :d.11:n
-    * set *tmp33 *tmp34
+   58 op add *tmp33 zero :d.11:n
    59 label *label15
    60 op notEqual *tmp35 5 *tmp33
    61 assertequals false *tmp35 "notEqual 1"
    62 set :d.12:n 6
-    * op add *tmp37 zero :d.12:n
-    * set *tmp36 *tmp37
+   63 op add *tmp36 zero :d.12:n
    64 label *label16
    65 op notEqual *tmp38 5 *tmp36
    66 assertequals true *tmp38 "notEqual 2"
    67 set :d.13:n null
-    * op add *tmp40 zero :d.13:n
-    * set *tmp39 *tmp40
+   68 op add *tmp39 zero :d.13:n
    69 label *label17
    70 op notEqual *tmp41 0 *tmp39
    71 assertequals false *tmp41 "notEqual null"
    72 set :d.14:n 0
-    * op add *tmp43 zero :d.14:n
-    * set *tmp42 *tmp43
+   73 op add *tmp42 zero :d.14:n
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 set :d.15:n 2
-    * op add *tmp46 zero :d.15:n
-    * set *tmp45 *tmp46
+   78 op add *tmp45 zero :d.15:n
    79 label *label19
    80 op land *tmp47 1 *tmp45
    81 assertequals true *tmp47 "land 2"
    82 set :d.16:n 1
-    * op add *tmp49 zero :d.16:n
-    * set *tmp48 *tmp49
+   83 op add *tmp48 zero :d.16:n
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 set :d.17:n 0
-    * op add *tmp52 zero :d.17:n
-    * set *tmp51 *tmp52
+   88 op add *tmp51 zero :d.17:n
    89 label *label21
    90 op lessThan *tmp53 1 *tmp51
    91 assertequals false *tmp53 "lessThan 2"
    92 set :d.18:n 1
-    * op add *tmp55 zero :d.18:n
-    * set *tmp54 *tmp55
+   93 op add *tmp54 zero :d.18:n
    94 label *label22
    95 op lessThanEq *tmp56 1 *tmp54
    96 assertequals true *tmp56 "lessThanEq 1"
    97 set :d.19:n 0
-    * op add *tmp58 zero :d.19:n
-    * set *tmp57 *tmp58
+   98 op add *tmp57 zero :d.19:n
    99 label *label23
   100 op lessThanEq *tmp59 1 *tmp57
   101 assertequals false *tmp59 "lessThanEq 2"
   102 set :d.20:n 1
-    * op add *tmp61 zero :d.20:n
-    * set *tmp60 *tmp61
+  103 op add *tmp60 zero :d.20:n
   104 label *label24
   105 op greaterThan *tmp62 2 *tmp60
   106 assertequals true *tmp62 "greaterThan 1"
   107 set :d.21:n 2
-    * op add *tmp64 zero :d.21:n
-    * set *tmp63 *tmp64
+  108 op add *tmp63 zero :d.21:n
   109 label *label25
   110 op greaterThan *tmp65 1 *tmp63
   111 assertequals false *tmp65 "greaterThan 2"
   112 set :d.22:n 1
-    * op add *tmp67 zero :d.22:n
-    * set *tmp66 *tmp67
+  113 op add *tmp66 zero :d.22:n
   114 label *label26
   115 op greaterThanEq *tmp68 1 *tmp66
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 set :d.23:n 2
-    * op add *tmp70 zero :d.23:n
-    * set *tmp69 *tmp70
+  118 op add *tmp69 zero :d.23:n
   119 label *label27
   120 op greaterThanEq *tmp71 1 *tmp69
   121 assertequals false *tmp71 "greaterThanEq 2"
 
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 set :d.24:n 2
-    * op add *tmp75 zero :d.24:n
-    * set *tmp74 *tmp75
+  127 op add *tmp74 zero :d.24:n
   128 label *label28
   129 op shl *tmp76 1 *tmp74
   130 assertequals 4 *tmp76 "shl"
   131 set :d.25:n 2
-    * op add *tmp78 zero :d.25:n
-    * set *tmp77 *tmp78
+  132 op add *tmp77 zero :d.25:n
   133 label *label29
   134 op shr *tmp79 9 *tmp77
   135 assertequals 2 *tmp79 "shr"
   136 set :d.26:n 2
-    * op add *tmp81 zero :d.26:n
-    * set *tmp80 *tmp81
+  137 op add *tmp80 zero :d.26:n
   138 label *label30
   139 op or *tmp82 1 *tmp80
   140 assertequals 3 *tmp82 "or"
   141 set :d.27:n 2
-    * op add *tmp84 zero :d.27:n
-    * set *tmp83 *tmp84
+  142 op add *tmp83 zero :d.27:n
   143 label *label31
   144 op and *tmp85 3 *tmp83
   145 assertequals 2 *tmp85 "and"
   146 set :d.28:n 2
-    * op add *tmp87 zero :d.28:n
-    * set *tmp86 *tmp87
+  147 op add *tmp86 zero :d.28:n
   148 label *label32
   149 op xor *tmp88 3 *tmp86
   150 assertequals 1 *tmp88 "xor"
   151 set :d.29:n 0
-    * op add *tmp90 zero :d.29:n
-    * set *tmp89 *tmp90
+  152 op add *tmp89 zero :d.29:n
   153 label *label33
   154 op not *tmp91 *tmp89
   155 assertequals -1 *tmp91 "not 1"
   156 set :d.30:n 65535
-    * op add *tmp93 zero :d.30:n
-    * set *tmp92 *tmp93
+  157 op add *tmp92 zero :d.30:n
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
 
   162 op add *tmp95 :a 1
   163 op sub *tmp96 0 *tmp95
   164 set :d.31:n :a
-    * op add *tmp98 zero :d.31:n
-    * set *tmp97 *tmp98
+  165 op add *tmp97 zero :d.31:n
   166 label *label35
   167 op not *tmp99 *tmp97
   168 assertequals *tmp96 *tmp99 "not 3"
   169 set :d.32:n 4
-    * op add *tmp101 zero :d.32:n
-    * set *tmp100 *tmp101
+  170 op add *tmp100 zero :d.32:n
   171 label *label36
   172 op max *tmp102 2 *tmp100
   173 assertequals 4 *tmp102 "max"
   174 set :d.33:n 4
-    * op add *tmp104 zero :d.33:n
-    * set *tmp103 *tmp104
+  175 op add *tmp103 zero :d.33:n
   176 label *label37
   177 op min *tmp105 2 *tmp103
   178 assertequals 2 *tmp105 "min"
   179 set :d.34:n -2
-    * op add *tmp107 zero :d.34:n
-    * set *tmp106 *tmp107
+  180 op add *tmp106 zero :d.34:n
   181 label *label38
   182 op abs *tmp108 *tmp106
   183 assertequals 2 *tmp108 "abs"
   184 set :d.35:n -2
-    * op add *tmp110 zero :d.35:n
-    * set *tmp109 *tmp110
+  185 op add *tmp109 zero :d.35:n
   186 label *label39
   187 op sign *tmp111 *tmp109
   188 assertequals -1 *tmp111 "sign(-2)"
   189 set :d.36:n 2
-    * op add *tmp113 zero :d.36:n
-    * set *tmp112 *tmp113
+  190 op add *tmp112 zero :d.36:n
   191 label *label40
   192 op sign *tmp114 *tmp112
   193 assertequals 1 *tmp114 "sign(2)"
   194 set :d.37:n 0
-    * op add *tmp116 zero :d.37:n
-    * set *tmp115 *tmp116
+  195 op add *tmp115 zero :d.37:n
   196 label *label41
   197 op sign *tmp117 *tmp115
   198 assertequals 0 *tmp117 "sign(0)"
   199 set :d.38:n 2.718281828459045
-    * op add *tmp119 zero :d.38:n
-    * set *tmp118 *tmp119
+  200 op add *tmp118 zero :d.38:n
   201 label *label42
   202 op log *tmp120 *tmp118
   203 assertequals 1 *tmp120 "log"
   204 set :d.39:n 10
-    * op add *tmp122 zero :d.39:n
-    * set *tmp121 *tmp122
+  205 op add *tmp121 zero :d.39:n
   206 label *label43
   207 op log10 *tmp123 *tmp121
   208 assertequals 1 *tmp123 "log10"
   209 set :d.40:n 2.5
-    * op add *tmp125 zero :d.40:n
-    * set *tmp124 *tmp125
+  210 op add *tmp124 zero :d.40:n
   211 label *label44
   212 op floor *tmp126 *tmp124
   213 assertequals 2 *tmp126 "floor"
   214 set :d.41:n 2.5
-    * op add *tmp128 zero :d.41:n
-    * set *tmp127 *tmp128
+  215 op add *tmp127 zero :d.41:n
   216 label *label45
   217 op ceil *tmp129 *tmp127
   218 assertequals 3 *tmp129 "ceil"
   219 set :d.42:n 16
-    * op add *tmp131 zero :d.42:n
-    * set *tmp130 *tmp131
+  220 op add *tmp130 zero :d.42:n
   221 label *label46
   222 op sqrt *tmp132 *tmp130
   223 assertequals 4 *tmp132 "sqrt"
   224 set :d.43:n 1
-    * op add *tmp134 zero :d.43:n
-    * set *tmp133 *tmp134
+  225 op add *tmp133 zero :d.43:n
   226 label *label47
   227 op angle *tmp135 1 *tmp133
   228 assertequals 45 *tmp135 "angle"
   229 set :d.44:n 135
-    * op add *tmp137 zero :d.44:n
-    * set *tmp136 *tmp137
+  230 op add *tmp136 zero :d.44:n
   231 label *label48
   232 op angleDiff *tmp138 45 *tmp136
   233 assertequals 90 *tmp138 "angleDiff"
 
   269 call *label3 *invalid :assertEqualsRound*retval (m:*label54) (h:*label54)
   270 label *label54
   271 set :d.45:n 8
-    * op add *tmp140 zero :d.45:n
-    * set *tmp139 *tmp140
+  272 op add *tmp139 zero :d.45:n
   273 label *label55
   274 op sub *tmp141 0 *tmp139
   275 assertequals -8 *tmp141 "unary minus"
   276 set :d.46:n 0
-    * op add *tmp143 zero :d.46:n
-    * set *tmp142 *tmp143
+  277 op add *tmp142 zero :d.46:n
   278 label *label56
   279 op equal *tmp144 *tmp142 false
   280 assertequals 1 *tmp144 "boolean negation 1"
   281 set :d.47:n 1
-    * op add *tmp146 zero :d.47:n
-    * set *tmp145 *tmp146
+  282 op add *tmp145 zero :d.47:n
   283 label *label57
   284 op equal *tmp147 *tmp145 false
   285 assertequals 0 *tmp147 "boolean negation 2"
   286 set :d.48:n 2
-    * op add *tmp149 zero :d.48:n
-    * set *tmp148 *tmp149
+  287 op add *tmp148 zero :d.48:n
   288 label *label58
   289 op equal *tmp150 *tmp148 false
   290 assertequals 0 *tmp150 "boolean negation 3"
   291 set :a 2
   292 set :d.49:n 4
-    * op add *tmp152 zero :d.49:n
-    * set *tmp151 *tmp152
+  293 op add *tmp151 zero :d.49:n
   294 label *label59
   295 op pow :a :a *tmp151
   296 assertequals 16 :a "**="
   297 set :a 2
   298 set :d.50:n 4
-    * op add *tmp154 zero :d.50:n
-    * set *tmp153 *tmp154
+  299 op add *tmp153 zero :d.50:n
   300 label *label60
   301 op mul :a :a *tmp153
   302 assertequals 8 :a "*="
   303 set :a 6
   304 set :d.51:n 4
-    * op add *tmp156 zero :d.51:n
-    * set *tmp155 *tmp156
+  305 op add *tmp155 zero :d.51:n
   306 label *label61
   307 op div :a :a *tmp155
   308 assertequals 1.5 :a "/="
   309 set :a 6
   310 set :d.52:n 4
-    * op add *tmp158 zero :d.52:n
-    * set *tmp157 *tmp158
+  311 op add *tmp157 zero :d.52:n
   312 label *label62
   313 op idiv :a :a *tmp157
   314 assertequals 1 :a "\="
   315 set :a 6
   316 set :d.53:n 4
-    * op add *tmp160 zero :d.53:n
-    * set *tmp159 *tmp160
+  317 op add *tmp159 zero :d.53:n
   318 label *label63
   319 op mod :a :a *tmp159
   320 assertequals 2 :a "%="
   321 set :a 4
   322 set :d.54:n 2
-    * op add *tmp162 zero :d.54:n
-    * set *tmp161 *tmp162
+  323 op add *tmp161 zero :d.54:n
   324 label *label64
   325 op add :a :a *tmp161
   326 assertequals 6 :a "+="
   327 set :a 4
   328 set :d.55:n 2
-    * op add *tmp164 zero :d.55:n
-    * set *tmp163 *tmp164
+  329 op add *tmp163 zero :d.55:n
   330 label *label65
   331 op sub :a :a *tmp163
   332 assertequals 2 :a "-="
   333 set :a 1
   334 set :d.56:n 2
-    * op add *tmp166 zero :d.56:n
-    * set *tmp165 *tmp166
+  335 op add *tmp165 zero :d.56:n
   336 label *label66
   337 op shl :a :a *tmp165
   338 assertequals 4 :a "<<="
   339 set :a 9
   340 set :d.57:n 2
-    * op add *tmp168 zero :d.57:n
-    * set *tmp167 *tmp168
+  341 op add *tmp167 zero :d.57:n
   342 label *label67
   343 op shr :a :a *tmp167
   344 assertequals 2 :a ">>="
   345 set :a 1
   346 set :d.58:n 2
-    * op add *tmp170 zero :d.58:n
-    * set *tmp169 *tmp170
+  347 op add *tmp169 zero :d.58:n
   348 label *label68
   349 op or :a :a *tmp169
   350 assertequals 3 :a "|="
   351 set :a 3
   352 set :d.59:n 2
-    * op add *tmp172 zero :d.59:n
-    * set *tmp171 *tmp172
+  353 op add *tmp171 zero :d.59:n
   354 label *label69
   355 op and :a :a *tmp171
   356 assertequals 2 :a "&="
   357 set :a 3
   358 set :d.60:n 2
-    * op add *tmp174 zero :d.60:n
-    * set *tmp173 *tmp174
+  359 op add *tmp173 zero :d.60:n
   360 label *label70
   361 op xor :a :a *tmp173
   362 assertequals 1 :a "^="
   363 set :a 1
   364 set :d.61:n 0
-    * op add *tmp176 zero :d.61:n
-    * set *tmp175 *tmp176
+  365 op add *tmp175 zero :d.61:n
   366 label *label71
   367 op land :a :a *tmp175
   368 assertequals false :a "&&="
   369 set :a 1
   370 set :d.62:n 2
-    * op add *tmp178 zero :d.62:n
-    * set *tmp177 *tmp178
+  371 op add *tmp177 zero :d.62:n
   372 label *label72
   373 op land :a :a *tmp177
   374 assertequals true :a "&&="
   375 set :a 0
   376 set :d.63:n 2
-    * op add *tmp180 zero :d.63:n
-    * set *tmp179 *tmp180
+  377 op add *tmp179 zero :d.63:n
   378 label *label73
   379 op or *tmp181 :a *tmp179
   380 op notEqual :a *tmp181 false
 
   395 stop
   396 end
   397 label *label3
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
-    * set :round:x *tmp185
+  398 op mul :round:x :assertEqualsRound:actual 100000000
   399 op add *tmp187 :round:x 0.5
-    * op floor *tmp188 *tmp187
-    * set *tmp186 *tmp188
+  400 op floor *tmp186 *tmp187
   401 label *label78
   402 op div *tmp189 *tmp186 100000000
   403 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
     0 set NULL null
     1 set zero 0
     2 set :d:n 3
-    * op add *tmp0 zero :d:n
+    3 op add *tmp0 zero 3
     4 label *label4
     5 op add *tmp2 2 *tmp0
     6 assertequals 5 *tmp2 "add"
     7 set :d.1:n 6
-    * op add *tmp3 zero :d.1:n
+    8 op add *tmp3 zero 6
     9 label *label5
    10 op sub *tmp5 7 *tmp3
    11 assertequals 1 *tmp5 "sub"
    12 set :d.2:n 2
-    * op add *tmp6 zero :d.2:n
+   13 op add *tmp6 zero 2
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 set :d.3:n 4
-    * op add *tmp9 zero :d.3:n
+   18 op add *tmp9 zero 4
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 set :d.4:n 100000
-    * op add *tmp12 zero :d.4:n
+   23 op add *tmp12 zero 100000
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 set :d.5:n 4
-    * op add *tmp15 zero :d.5:n
+   28 op add *tmp15 zero 4
    29 label *label9
    30 op idiv *tmp17 6 *tmp15
    31 assertequals 1 *tmp17 "idiv"
    32 set :d.6:n 4
-    * op add *tmp18 zero :d.6:n
+   33 op add *tmp18 zero 4
    34 label *label10
    35 op mod *tmp20 6 *tmp18
    36 assertequals 2 *tmp20 "mod"
    37 set :d.7:n 4
-    * op add *tmp21 zero :d.7:n
+   38 op add *tmp21 zero 4
    39 label *label11
    40 op pow *tmp23 2 *tmp21
    41 assertequals 16 *tmp23 "pow"
    42 set :d.8:n 5
-    * op add *tmp24 zero :d.8:n
+   43 op add *tmp24 zero 5
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 set :d.9:n 6
-    * op add *tmp27 zero :d.9:n
+   48 op add *tmp27 zero 6
    49 label *label13
    50 op equal *tmp29 5 *tmp27
    51 assertequals false *tmp29 "equal 2"
    52 set :d.10:n null
-    * op add *tmp30 zero :d.10:n
+   53 op add *tmp30 zero null
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 set :d.11:n 5
-    * op add *tmp33 zero :d.11:n
+   58 op add *tmp33 zero 5
    59 label *label15
    60 op notEqual *tmp35 5 *tmp33
    61 assertequals false *tmp35 "notEqual 1"
    62 set :d.12:n 6
-    * op add *tmp36 zero :d.12:n
+   63 op add *tmp36 zero 6
    64 label *label16
    65 op notEqual *tmp38 5 *tmp36
    66 assertequals true *tmp38 "notEqual 2"
    67 set :d.13:n null
-    * op add *tmp39 zero :d.13:n
+   68 op add *tmp39 zero null
    69 label *label17
    70 op notEqual *tmp41 0 *tmp39
    71 assertequals false *tmp41 "notEqual null"
    72 set :d.14:n 0
-    * op add *tmp42 zero :d.14:n
+   73 op add *tmp42 zero 0
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 set :d.15:n 2
-    * op add *tmp45 zero :d.15:n
+   78 op add *tmp45 zero 2
    79 label *label19
    80 op land *tmp47 1 *tmp45
    81 assertequals true *tmp47 "land 2"
    82 set :d.16:n 1
-    * op add *tmp48 zero :d.16:n
+   83 op add *tmp48 zero 1
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 set :d.17:n 0
-    * op add *tmp51 zero :d.17:n
+   88 op add *tmp51 zero 0
    89 label *label21
    90 op lessThan *tmp53 1 *tmp51
    91 assertequals false *tmp53 "lessThan 2"
    92 set :d.18:n 1
-    * op add *tmp54 zero :d.18:n
+   93 op add *tmp54 zero 1
    94 label *label22
    95 op lessThanEq *tmp56 1 *tmp54
    96 assertequals true *tmp56 "lessThanEq 1"
    97 set :d.19:n 0
-    * op add *tmp57 zero :d.19:n
+   98 op add *tmp57 zero 0
    99 label *label23
   100 op lessThanEq *tmp59 1 *tmp57
   101 assertequals false *tmp59 "lessThanEq 2"
   102 set :d.20:n 1
-    * op add *tmp60 zero :d.20:n
+  103 op add *tmp60 zero 1
   104 label *label24
   105 op greaterThan *tmp62 2 *tmp60
   106 assertequals true *tmp62 "greaterThan 1"
   107 set :d.21:n 2
-    * op add *tmp63 zero :d.21:n
+  108 op add *tmp63 zero 2
   109 label *label25
   110 op greaterThan *tmp65 1 *tmp63
   111 assertequals false *tmp65 "greaterThan 2"
   112 set :d.22:n 1
-    * op add *tmp66 zero :d.22:n
+  113 op add *tmp66 zero 1
   114 label *label26
   115 op greaterThanEq *tmp68 1 *tmp66
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 set :d.23:n 2
-    * op add *tmp69 zero :d.23:n
+  118 op add *tmp69 zero 2
   119 label *label27
   120 op greaterThanEq *tmp71 1 *tmp69
   121 assertequals false *tmp71 "greaterThanEq 2"
 
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 set :d.24:n 2
-    * op add *tmp74 zero :d.24:n
+  127 op add *tmp74 zero 2
   128 label *label28
   129 op shl *tmp76 1 *tmp74
   130 assertequals 4 *tmp76 "shl"
   131 set :d.25:n 2
-    * op add *tmp77 zero :d.25:n
+  132 op add *tmp77 zero 2
   133 label *label29
   134 op shr *tmp79 9 *tmp77
   135 assertequals 2 *tmp79 "shr"
   136 set :d.26:n 2
-    * op add *tmp80 zero :d.26:n
+  137 op add *tmp80 zero 2
   138 label *label30
   139 op or *tmp82 1 *tmp80
   140 assertequals 3 *tmp82 "or"
   141 set :d.27:n 2
-    * op add *tmp83 zero :d.27:n
+  142 op add *tmp83 zero 2
   143 label *label31
   144 op and *tmp85 3 *tmp83
   145 assertequals 2 *tmp85 "and"
   146 set :d.28:n 2
-    * op add *tmp86 zero :d.28:n
+  147 op add *tmp86 zero 2
   148 label *label32
   149 op xor *tmp88 3 *tmp86
   150 assertequals 1 *tmp88 "xor"
   151 set :d.29:n 0
-    * op add *tmp89 zero :d.29:n
+  152 op add *tmp89 zero 0
   153 label *label33
   154 op not *tmp91 *tmp89
   155 assertequals -1 *tmp91 "not 1"
   156 set :d.30:n 65535
-    * op add *tmp92 zero :d.30:n
+  157 op add *tmp92 zero 65535
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
   161 set :a 0xabcdefabcdef
-    * op add *tmp95 :a 1
-    * op sub *tmp96 0 *tmp95
-    * set :d.31:n :a
-    * op add *tmp97 zero :d.31:n
+  162 op add *tmp95 0xabcdefabcdef 1
+  163 op sub *tmp96 0 188900977659376
+  164 set :d.31:n 0xabcdefabcdef
+  165 op add *tmp97 zero :a
   166 label *label35
   167 op not *tmp99 *tmp97
-    * assertequals *tmp96 *tmp99 "not 3"
+  168 assertequals -188900977659376 *tmp99 "not 3"
   169 set :d.32:n 4
-    * op add *tmp100 zero :d.32:n
+  170 op add *tmp100 zero 4
   171 label *label36
   172 op max *tmp102 2 *tmp100
   173 assertequals 4 *tmp102 "max"
   174 set :d.33:n 4
-    * op add *tmp103 zero :d.33:n
+  175 op add *tmp103 zero 4
   176 label *label37
   177 op min *tmp105 2 *tmp103
   178 assertequals 2 *tmp105 "min"
   179 set :d.34:n -2
-    * op add *tmp106 zero :d.34:n
+  180 op add *tmp106 zero -2
   181 label *label38
   182 op abs *tmp108 *tmp106
   183 assertequals 2 *tmp108 "abs"
   184 set :d.35:n -2
-    * op add *tmp109 zero :d.35:n
+  185 op add *tmp109 zero -2
   186 label *label39
   187 op sign *tmp111 *tmp109
   188 assertequals -1 *tmp111 "sign(-2)"
   189 set :d.36:n 2
-    * op add *tmp112 zero :d.36:n
+  190 op add *tmp112 zero 2
   191 label *label40
   192 op sign *tmp114 *tmp112
   193 assertequals 1 *tmp114 "sign(2)"
   194 set :d.37:n 0
-    * op add *tmp115 zero :d.37:n
+  195 op add *tmp115 zero 0
   196 label *label41
   197 op sign *tmp117 *tmp115
   198 assertequals 0 *tmp117 "sign(0)"
   199 set :d.38:n 2.718281828459045
-    * op add *tmp118 zero :d.38:n
+  200 op add *tmp118 zero 2.718281828459045
   201 label *label42
   202 op log *tmp120 *tmp118
   203 assertequals 1 *tmp120 "log"
   204 set :d.39:n 10
-    * op add *tmp121 zero :d.39:n
+  205 op add *tmp121 zero 10
   206 label *label43
   207 op log10 *tmp123 *tmp121
   208 assertequals 1 *tmp123 "log10"
   209 set :d.40:n 2.5
-    * op add *tmp124 zero :d.40:n
+  210 op add *tmp124 zero 2.5
   211 label *label44
   212 op floor *tmp126 *tmp124
   213 assertequals 2 *tmp126 "floor"
   214 set :d.41:n 2.5
-    * op add *tmp127 zero :d.41:n
+  215 op add *tmp127 zero 2.5
   216 label *label45
   217 op ceil *tmp129 *tmp127
   218 assertequals 3 *tmp129 "ceil"
   219 set :d.42:n 16
-    * op add *tmp130 zero :d.42:n
+  220 op add *tmp130 zero 16
   221 label *label46
   222 op sqrt *tmp132 *tmp130
   223 assertequals 4 *tmp132 "sqrt"
   224 set :d.43:n 1
-    * op add *tmp133 zero :d.43:n
+  225 op add *tmp133 zero 1
   226 label *label47
   227 op angle *tmp135 1 *tmp133
   228 assertequals 45 *tmp135 "angle"
   229 set :d.44:n 135
-    * op add *tmp136 zero :d.44:n
+  230 op add *tmp136 zero 135
   231 label *label48
   232 op angleDiff *tmp138 45 *tmp136
   233 assertequals 90 *tmp138 "angleDiff"
 
   269 call *label3 *invalid :assertEqualsRound*retval (m:*label54) (h:*label54)
   270 label *label54
   271 set :d.45:n 8
-    * op add *tmp139 zero :d.45:n
+  272 op add *tmp139 zero 8
   273 label *label55
   274 op sub *tmp141 0 *tmp139
   275 assertequals -8 *tmp141 "unary minus"
   276 set :d.46:n 0
-    * op add *tmp142 zero :d.46:n
+  277 op add *tmp142 zero 0
   278 label *label56
   279 op equal *tmp144 *tmp142 false
   280 assertequals 1 *tmp144 "boolean negation 1"
   281 set :d.47:n 1
-    * op add *tmp145 zero :d.47:n
+  282 op add *tmp145 zero 1
   283 label *label57
   284 op equal *tmp147 *tmp145 false
   285 assertequals 0 *tmp147 "boolean negation 2"
   286 set :d.48:n 2
-    * op add *tmp148 zero :d.48:n
+  287 op add *tmp148 zero 2
   288 label *label58
   289 op equal *tmp150 *tmp148 false
   290 assertequals 0 *tmp150 "boolean negation 3"
   291 set :a 2
   292 set :d.49:n 4
-    * op add *tmp151 zero :d.49:n
+  293 op add *tmp151 zero 4
   294 label *label59
-    * op pow :a :a *tmp151
+  295 op pow :a 2 *tmp151
   296 assertequals 16 :a "**="
   297 set :a 2
   298 set :d.50:n 4
-    * op add *tmp153 zero :d.50:n
+  299 op add *tmp153 zero 4
   300 label *label60
-    * op mul :a :a *tmp153
+  301 op mul :a 2 *tmp153
   302 assertequals 8 :a "*="
   303 set :a 6
   304 set :d.51:n 4
-    * op add *tmp155 zero :d.51:n
+  305 op add *tmp155 zero 4
   306 label *label61
-    * op div :a :a *tmp155
+  307 op div :a 6 *tmp155
   308 assertequals 1.5 :a "/="
   309 set :a 6
   310 set :d.52:n 4
-    * op add *tmp157 zero :d.52:n
+  311 op add *tmp157 zero 4
   312 label *label62
-    * op idiv :a :a *tmp157
+  313 op idiv :a 6 *tmp157
   314 assertequals 1 :a "\="
   315 set :a 6
   316 set :d.53:n 4
-    * op add *tmp159 zero :d.53:n
+  317 op add *tmp159 zero 4
   318 label *label63
-    * op mod :a :a *tmp159
+  319 op mod :a 6 *tmp159
   320 assertequals 2 :a "%="
   321 set :a 4
   322 set :d.54:n 2
-    * op add *tmp161 zero :d.54:n
+  323 op add *tmp161 zero 2
   324 label *label64
-    * op add :a :a *tmp161
+  325 op add :a 4 *tmp161
   326 assertequals 6 :a "+="
   327 set :a 4
   328 set :d.55:n 2
-    * op add *tmp163 zero :d.55:n
+  329 op add *tmp163 zero 2
   330 label *label65
-    * op sub :a :a *tmp163
+  331 op sub :a 4 *tmp163
   332 assertequals 2 :a "-="
   333 set :a 1
   334 set :d.56:n 2
-    * op add *tmp165 zero :d.56:n
+  335 op add *tmp165 zero 2
   336 label *label66
-    * op shl :a :a *tmp165
+  337 op shl :a 1 *tmp165
   338 assertequals 4 :a "<<="
   339 set :a 9
   340 set :d.57:n 2
-    * op add *tmp167 zero :d.57:n
+  341 op add *tmp167 zero 2
   342 label *label67
-    * op shr :a :a *tmp167
+  343 op shr :a 9 *tmp167
   344 assertequals 2 :a ">>="
   345 set :a 1
   346 set :d.58:n 2
-    * op add *tmp169 zero :d.58:n
+  347 op add *tmp169 zero 2
   348 label *label68
-    * op or :a :a *tmp169
+  349 op or :a 1 *tmp169
   350 assertequals 3 :a "|="
   351 set :a 3
   352 set :d.59:n 2
-    * op add *tmp171 zero :d.59:n
+  353 op add *tmp171 zero 2
   354 label *label69
-    * op and :a :a *tmp171
+  355 op and :a 3 *tmp171
   356 assertequals 2 :a "&="
   357 set :a 3
   358 set :d.60:n 2
-    * op add *tmp173 zero :d.60:n
+  359 op add *tmp173 zero 2
   360 label *label70
-    * op xor :a :a *tmp173
+  361 op xor :a 3 *tmp173
   362 assertequals 1 :a "^="
   363 set :a 1
   364 set :d.61:n 0
-    * op add *tmp175 zero :d.61:n
+  365 op add *tmp175 zero 0
   366 label *label71
-    * op land :a :a *tmp175
+  367 op land :a 1 *tmp175
   368 assertequals false :a "&&="
   369 set :a 1
   370 set :d.62:n 2
-    * op add *tmp177 zero :d.62:n
+  371 op add *tmp177 zero 2
   372 label *label72
-    * op land :a :a *tmp177
+  373 op land :a 1 *tmp177
   374 assertequals true :a "&&="
   375 set :a 0
   376 set :d.63:n 2
-    * op add *tmp179 zero :d.63:n
+  377 op add *tmp179 zero 2
   378 label *label73
-    * op or *tmp181 :a *tmp179
+  379 op or *tmp181 0 *tmp179
   380 op notEqual :a *tmp181 false
   381 assertequals true :a "||="
   382 assertequals %ff0000ff %ff0000 "short color literals"
 
   386 set *tmp183 null
   387 jump *label76 always
   388 label *label75
-    * set *tmp183 :o:n
+  389 set *tmp183 @copper-wall
   390 label *label76
   391 set *tmp182 *tmp183
   392 label *label74
-    * sensor *tmp184 *tmp182 @id
+  393 sensor *tmp184 *tmp183 @id
   394 assertequals 17 *tmp184 "Logic ID"
   395 stop
   396 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-83 instructions):
     0 set NULL null
     1 set zero 0
-    * set :d:n 3
     2 op add *tmp0 zero 3
     3 label *label4
-    * op add *tmp2 2 *tmp0
+    4 op add *tmp2 zero 5
     5 assertequals 5 *tmp2 "add"
-    * set :d.1:n 6
     6 op add *tmp3 zero 6
     7 label *label5
-    * op sub *tmp5 7 *tmp3
+    8 op sub *tmp5 1 zero
     9 assertequals 1 *tmp5 "sub"
-    * set :d.2:n 2
    10 op add *tmp6 zero 2
    11 label *label6
    12 op mul *tmp8 3 *tmp6
    13 assertequals 6 *tmp8 "mul"
-    * set :d.3:n 4
    14 op add *tmp9 zero 4
    15 label *label7
    16 op div *tmp11 6 *tmp9
    17 assertequals 1.5 *tmp11 "div"
-    * set :d.4:n 100000
    18 op add *tmp12 zero 100000
    19 label *label8
    20 op div *tmp14 1 *tmp12
    21 assertequals 0.00001 *tmp14 "div exp"
-    * set :d.5:n 4
    22 op add *tmp15 zero 4
    23 label *label9
-    * op idiv *tmp17 6 *tmp15
+   24 op idiv *tmp17 6 *tmp9
    25 assertequals 1 *tmp17 "idiv"
-    * set :d.6:n 4
    26 op add *tmp18 zero 4
    27 label *label10
-    * op mod *tmp20 6 *tmp18
+   28 op mod *tmp20 6 *tmp9
    29 assertequals 2 *tmp20 "mod"
-    * set :d.7:n 4
    30 op add *tmp21 zero 4
    31 label *label11
-    * op pow *tmp23 2 *tmp21
+   32 op pow *tmp23 2 *tmp9
    33 assertequals 16 *tmp23 "pow"
-    * set :d.8:n 5
    34 op add *tmp24 zero 5
    35 label *label12
    36 op equal *tmp26 5 *tmp24
    37 assertequals true *tmp26 "equal 1"
-    * set :d.9:n 6
    38 op add *tmp27 zero 6
    39 label *label13
-    * op equal *tmp29 5 *tmp27
+   40 op equal *tmp29 5 *tmp3
    41 assertequals false *tmp29 "equal 2"
-    * set :d.10:n null
    42 op add *tmp30 zero null
    43 label *label14
    44 op equal *tmp32 0 *tmp30
    45 assertequals true *tmp32 "equal null"
-    * set :d.11:n 5
    46 op add *tmp33 zero 5
    47 label *label15
-    * op notEqual *tmp35 5 *tmp33
+   48 op notEqual *tmp35 5 *tmp24
    49 assertequals false *tmp35 "notEqual 1"
-    * set :d.12:n 6
    50 op add *tmp36 zero 6
    51 label *label16
-    * op notEqual *tmp38 5 *tmp36
+   52 op notEqual *tmp38 5 *tmp3
    53 assertequals true *tmp38 "notEqual 2"
-    * set :d.13:n null
    54 op add *tmp39 zero null
    55 label *label17
-    * op notEqual *tmp41 0 *tmp39
+   56 op notEqual *tmp41 0 *tmp30
    57 assertequals false *tmp41 "notEqual null"
-    * set :d.14:n 0
    58 op add *tmp42 zero 0
    59 label *label18
    60 op land *tmp44 1 *tmp42
    61 assertequals false *tmp44 "land 1"
-    * set :d.15:n 2
    62 op add *tmp45 zero 2
    63 label *label19
-    * op land *tmp47 1 *tmp45
+   64 op land *tmp47 1 *tmp6
    65 assertequals true *tmp47 "land 2"
-    * set :d.16:n 1
    66 op add *tmp48 zero 1
    67 label *label20
    68 op lessThan *tmp50 0 *tmp48
    69 assertequals true *tmp50 "lessThan 1"
-    * set :d.17:n 0
    70 op add *tmp51 zero 0
    71 label *label21
-    * op lessThan *tmp53 1 *tmp51
+   72 op lessThan *tmp53 1 *tmp42
    73 assertequals false *tmp53 "lessThan 2"
-    * set :d.18:n 1
    74 op add *tmp54 zero 1
    75 label *label22
-    * op lessThanEq *tmp56 1 *tmp54
+   76 op lessThanEq *tmp56 1 *tmp48
    77 assertequals true *tmp56 "lessThanEq 1"
-    * set :d.19:n 0
    78 op add *tmp57 zero 0
    79 label *label23
-    * op lessThanEq *tmp59 1 *tmp57
+   80 op lessThanEq *tmp59 1 *tmp42
    81 assertequals false *tmp59 "lessThanEq 2"
-    * set :d.20:n 1
    82 op add *tmp60 zero 1
    83 label *label24
-    * op greaterThan *tmp62 2 *tmp60
+   84 op greaterThan *tmp62 2 *tmp48
    85 assertequals true *tmp62 "greaterThan 1"
-    * set :d.21:n 2
    86 op add *tmp63 zero 2
    87 label *label25
-    * op greaterThan *tmp65 1 *tmp63
+   88 op greaterThan *tmp65 1 *tmp6
    89 assertequals false *tmp65 "greaterThan 2"
-    * set :d.22:n 1
    90 op add *tmp66 zero 1
    91 label *label26
-    * op greaterThanEq *tmp68 1 *tmp66
+   92 op greaterThanEq *tmp68 1 *tmp48
    93 assertequals true *tmp68 "greaterThanEq 1"
-    * set :d.23:n 2
    94 op add *tmp69 zero 2
    95 label *label27
-    * op greaterThanEq *tmp71 1 *tmp69
+   96 op greaterThanEq *tmp71 1 *tmp6
    97 assertequals false *tmp71 "greaterThanEq 2"
    98 op strictEqual *tmp72 0 NULL
    99 assertequals false *tmp72 "strictEqual 1"
   100 op strictEqual *tmp73 null NULL
   101 assertequals true *tmp73 "strictEqual 2"
-    * set :d.24:n 2
   102 op add *tmp74 zero 2
   103 label *label28
-    * op shl *tmp76 1 *tmp74
+  104 op shl *tmp76 1 *tmp6
   105 assertequals 4 *tmp76 "shl"
-    * set :d.25:n 2
   106 op add *tmp77 zero 2
   107 label *label29
-    * op shr *tmp79 9 *tmp77
+  108 op shr *tmp79 9 *tmp6
   109 assertequals 2 *tmp79 "shr"
-    * set :d.26:n 2
   110 op add *tmp80 zero 2
   111 label *label30
-    * op or *tmp82 1 *tmp80
+  112 op or *tmp82 1 *tmp6
   113 assertequals 3 *tmp82 "or"
-    * set :d.27:n 2
   114 op add *tmp83 zero 2
   115 label *label31
-    * op and *tmp85 3 *tmp83
+  116 op and *tmp85 3 *tmp6
   117 assertequals 2 *tmp85 "and"
-    * set :d.28:n 2
   118 op add *tmp86 zero 2
   119 label *label32
-    * op xor *tmp88 3 *tmp86
+  120 op xor *tmp88 3 *tmp6
   121 assertequals 1 *tmp88 "xor"
-    * set :d.29:n 0
   122 op add *tmp89 zero 0
   123 label *label33
-    * op not *tmp91 *tmp89
+  124 op not *tmp91 *tmp42
   125 assertequals -1 *tmp91 "not 1"
-    * set :d.30:n 65535
   126 op add *tmp92 zero 65535
   127 label *label34
   128 op not *tmp94 *tmp92
   129 assertequals -65536 *tmp94 "not 2"
   130 set :a 0xabcdefabcdef
-    * op add *tmp95 0xabcdefabcdef 1
-    * op sub *tmp96 0 188900977659376
-    * set :d.31:n 0xabcdefabcdef
-    * op add *tmp97 zero :a
+  131 op add *tmp97 zero 0xabcdefabcdef
   132 label *label35
   133 op not *tmp99 *tmp97
   134 assertequals -188900977659376 *tmp99 "not 3"
-    * set :d.32:n 4
   135 op add *tmp100 zero 4
   136 label *label36
-    * op max *tmp102 2 *tmp100
+  137 op max *tmp102 2 *tmp9
   138 assertequals 4 *tmp102 "max"
-    * set :d.33:n 4
   139 op add *tmp103 zero 4
   140 label *label37
-    * op min *tmp105 2 *tmp103
+  141 op min *tmp105 2 *tmp9
   142 assertequals 2 *tmp105 "min"
-    * set :d.34:n -2
   143 op add *tmp106 zero -2
   144 label *label38
   145 op abs *tmp108 *tmp106
   146 assertequals 2 *tmp108 "abs"
-    * set :d.35:n -2
   147 op add *tmp109 zero -2
   148 label *label39
-    * op sign *tmp111 *tmp109
+  149 op sign *tmp111 *tmp106
   150 assertequals -1 *tmp111 "sign(-2)"
-    * set :d.36:n 2
   151 op add *tmp112 zero 2
   152 label *label40
-    * op sign *tmp114 *tmp112
+  153 op sign *tmp114 *tmp6
   154 assertequals 1 *tmp114 "sign(2)"
-    * set :d.37:n 0
   155 op add *tmp115 zero 0
   156 label *label41
-    * op sign *tmp117 *tmp115
+  157 op sign *tmp117 *tmp42
   158 assertequals 0 *tmp117 "sign(0)"
-    * set :d.38:n 2.718281828459045
   159 op add *tmp118 zero 2.718281828459045
   160 label *label42
   161 op log *tmp120 *tmp118
   162 assertequals 1 *tmp120 "log"
-    * set :d.39:n 10
   163 op add *tmp121 zero 10
   164 label *label43
   165 op log10 *tmp123 *tmp121
   166 assertequals 1 *tmp123 "log10"
-    * set :d.40:n 2.5
   167 op add *tmp124 zero 2.5
   168 label *label44
   169 op floor *tmp126 *tmp124
   170 assertequals 2 *tmp126 "floor"
-    * set :d.41:n 2.5
   171 op add *tmp127 zero 2.5
   172 label *label45
-    * op ceil *tmp129 *tmp127
+  173 op ceil *tmp129 *tmp124
   174 assertequals 3 *tmp129 "ceil"
-    * set :d.42:n 16
   175 op add *tmp130 zero 16
   176 label *label46
   177 op sqrt *tmp132 *tmp130
   178 assertequals 4 *tmp132 "sqrt"
-    * set :d.43:n 1
   179 op add *tmp133 zero 1
   180 label *label47
-    * op angle *tmp135 1 *tmp133
+  181 op angle *tmp135 1 *tmp48
   182 assertequals 45 *tmp135 "angle"
-    * set :d.44:n 135
   183 op add *tmp136 zero 135
   184 label *label48
   185 op angleDiff *tmp138 45 *tmp136
 
   221 setaddr :assertEqualsRound*retaddr *label54 (h:*label54)
   222 call *label3 *invalid :assertEqualsRound*retval (m:*label54) (h:*label54)
   223 label *label54
-    * set :d.45:n 8
   224 op add *tmp139 zero 8
   225 label *label55
-    * op sub *tmp141 0 *tmp139
+  226 op sub *tmp141 -8 zero
   227 assertequals -8 *tmp141 "unary minus"
-    * set :d.46:n 0
   228 op add *tmp142 zero 0
   229 label *label56
-    * op equal *tmp144 *tmp142 false
+  230 op equal *tmp144 *tmp42 false
   231 assertequals 1 *tmp144 "boolean negation 1"
-    * set :d.47:n 1
   232 op add *tmp145 zero 1
   233 label *label57
-    * op equal *tmp147 *tmp145 false
+  234 op equal *tmp147 *tmp48 false
   235 assertequals 0 *tmp147 "boolean negation 2"
-    * set :d.48:n 2
   236 op add *tmp148 zero 2
   237 label *label58
-    * op equal *tmp150 *tmp148 false
+  238 op equal *tmp150 *tmp6 false
   239 assertequals 0 *tmp150 "boolean negation 3"
-    * set :a 2
-    * set :d.49:n 4
   240 op add *tmp151 zero 4
   241 label *label59
-    * op pow :a 2 *tmp151
-    * assertequals 16 :a "**="
-    * set :a 2
-    * set :d.50:n 4
+  242 op pow :a 2 *tmp9
+  243 assertequals 16 *tmp23 "**="
   244 op add *tmp153 zero 4
   245 label *label60
-    * op mul :a 2 *tmp153
+  246 op mul :a 2 *tmp9
   247 assertequals 8 :a "*="
-    * set :a 6
-    * set :d.51:n 4
   248 op add *tmp155 zero 4
   249 label *label61
-    * op div :a 6 *tmp155
-    * assertequals 1.5 :a "/="
-    * set :a 6
-    * set :d.52:n 4
+  250 op div :a 6 *tmp9
+  251 assertequals 1.5 *tmp11 "/="
   252 op add *tmp157 zero 4
   253 label *label62
-    * op idiv :a 6 *tmp157
-    * assertequals 1 :a "\="
-    * set :a 6
-    * set :d.53:n 4
+  254 op idiv :a 6 *tmp9
+  255 assertequals 1 *tmp17 "\="
   256 op add *tmp159 zero 4
   257 label *label63
-    * op mod :a 6 *tmp159
-    * assertequals 2 :a "%="
-    * set :a 4
-    * set :d.54:n 2
+  258 op mod :a 6 *tmp9
+  259 assertequals 2 *tmp20 "%="
   260 op add *tmp161 zero 2
   261 label *label64
-    * op add :a 4 *tmp161
+  262 op add :a 4 *tmp6
   263 assertequals 6 :a "+="
-    * set :a 4
-    * set :d.55:n 2
   264 op add *tmp163 zero 2
   265 label *label65
-    * op sub :a 4 *tmp163
+  266 op sub :a 4 *tmp6
   267 assertequals 2 :a "-="
-    * set :a 1
-    * set :d.56:n 2
   268 op add *tmp165 zero 2
   269 label *label66
-    * op shl :a 1 *tmp165
-    * assertequals 4 :a "<<="
-    * set :a 9
-    * set :d.57:n 2
+  270 op shl :a 1 *tmp6
+  271 assertequals 4 *tmp76 "<<="
   272 op add *tmp167 zero 2
   273 label *label67
-    * op shr :a 9 *tmp167
-    * assertequals 2 :a ">>="
-    * set :a 1
-    * set :d.58:n 2
+  274 op shr :a 9 *tmp6
+  275 assertequals 2 *tmp79 ">>="
   276 op add *tmp169 zero 2
   277 label *label68
-    * op or :a 1 *tmp169
-    * assertequals 3 :a "|="
-    * set :a 3
-    * set :d.59:n 2
+  278 op or :a 1 *tmp6
+  279 assertequals 3 *tmp82 "|="
   280 op add *tmp171 zero 2
   281 label *label69
-    * op and :a 3 *tmp171
-    * assertequals 2 :a "&="
-    * set :a 3
-    * set :d.60:n 2
+  282 op and :a 3 *tmp6
+  283 assertequals 2 *tmp85 "&="
   284 op add *tmp173 zero 2
   285 label *label70
-    * op xor :a 3 *tmp173
-    * assertequals 1 :a "^="
-    * set :a 1
-    * set :d.61:n 0
+  286 op xor :a 3 *tmp6
+  287 assertequals 1 *tmp88 "^="
   288 op add *tmp175 zero 0
   289 label *label71
-    * op land :a 1 *tmp175
-    * assertequals false :a "&&="
-    * set :a 1
-    * set :d.62:n 2
+  290 op land :a 1 *tmp42
+  291 assertequals false *tmp44 "&&="
   292 op add *tmp177 zero 2
   293 label *label72
-    * op land :a 1 *tmp177
-    * assertequals true :a "&&="
-    * set :a 0
-    * set :d.63:n 2
+  294 op land :a 1 *tmp6
+  295 assertequals true *tmp47 "&&="
   296 op add *tmp179 zero 2
   297 label *label73
-    * op or *tmp181 0 *tmp179
+  298 op or *tmp181 0 *tmp6
   299 op notEqual :a *tmp181 false
   300 assertequals true :a "||="
   301 assertequals %ff0000ff %ff0000 "short color literals"
   302 assertequals %ffffffff %[white] "named color literals"
-    * set :o:n @copper-wall
   303 jump *label75 equal zero false
   304 set *tmp183 null
   305 jump *label76 always
   306 label *label75
   307 set *tmp183 @copper-wall
   308 label *label76
-    * set *tmp182 *tmp183
   309 label *label74
   310 sensor *tmp184 *tmp183 @id
   311 assertequals 17 *tmp184 "Logic ID"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-60 instructions):
     0 set NULL null
     1 set zero 0
-    * op add *tmp0 zero 3
     2 label *label4
     3 op add *tmp2 zero 5
     4 assertequals 5 *tmp2 "add"
 
    18 label *label8
    19 op div *tmp14 1 *tmp12
    20 assertequals 0.00001 *tmp14 "div exp"
-    * op add *tmp15 zero 4
    21 label *label9
    22 op idiv *tmp17 6 *tmp9
    23 assertequals 1 *tmp17 "idiv"
-    * op add *tmp18 zero 4
    24 label *label10
    25 op mod *tmp20 6 *tmp9
    26 assertequals 2 *tmp20 "mod"
-    * op add *tmp21 zero 4
    27 label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
    30 op add *tmp24 zero 5
    31 label *label12
-    * op equal *tmp26 5 *tmp24
+   32 op equal *tmp26 5 *tmp2
    33 assertequals true *tmp26 "equal 1"
-    * op add *tmp27 zero 6
    34 label *label13
    35 op equal *tmp29 5 *tmp3
    36 assertequals false *tmp29 "equal 2"
 
    38 label *label14
    39 op equal *tmp32 0 *tmp30
    40 assertequals true *tmp32 "equal null"
-    * op add *tmp33 zero 5
    41 label *label15
-    * op notEqual *tmp35 5 *tmp24
+   42 op notEqual *tmp35 5 *tmp2
    43 assertequals false *tmp35 "notEqual 1"
-    * op add *tmp36 zero 6
    44 label *label16
    45 op notEqual *tmp38 5 *tmp3
    46 assertequals true *tmp38 "notEqual 2"
-    * op add *tmp39 zero null
    47 label *label17
    48 op notEqual *tmp41 0 *tmp30
    49 assertequals false *tmp41 "notEqual null"
 
    51 label *label18
    52 op land *tmp44 1 *tmp42
    53 assertequals false *tmp44 "land 1"
-    * op add *tmp45 zero 2
    54 label *label19
    55 op land *tmp47 1 *tmp6
    56 assertequals true *tmp47 "land 2"
 
    58 label *label20
    59 op lessThan *tmp50 0 *tmp48
    60 assertequals true *tmp50 "lessThan 1"
-    * op add *tmp51 zero 0
    61 label *label21
    62 op lessThan *tmp53 1 *tmp42
    63 assertequals false *tmp53 "lessThan 2"
-    * op add *tmp54 zero 1
    64 label *label22
    65 op lessThanEq *tmp56 1 *tmp48
    66 assertequals true *tmp56 "lessThanEq 1"
-    * op add *tmp57 zero 0
    67 label *label23
    68 op lessThanEq *tmp59 1 *tmp42
    69 assertequals false *tmp59 "lessThanEq 2"
-    * op add *tmp60 zero 1
    70 label *label24
    71 op greaterThan *tmp62 2 *tmp48
    72 assertequals true *tmp62 "greaterThan 1"
-    * op add *tmp63 zero 2
    73 label *label25
    74 op greaterThan *tmp65 1 *tmp6
    75 assertequals false *tmp65 "greaterThan 2"
-    * op add *tmp66 zero 1
    76 label *label26
    77 op greaterThanEq *tmp68 1 *tmp48
    78 assertequals true *tmp68 "greaterThanEq 1"
-    * op add *tmp69 zero 2
    79 label *label27
    80 op greaterThanEq *tmp71 1 *tmp6
    81 assertequals false *tmp71 "greaterThanEq 2"
 
    83 assertequals false *tmp72 "strictEqual 1"
    84 op strictEqual *tmp73 null NULL
    85 assertequals true *tmp73 "strictEqual 2"
-    * op add *tmp74 zero 2
    86 label *label28
    87 op shl *tmp76 1 *tmp6
    88 assertequals 4 *tmp76 "shl"
-    * op add *tmp77 zero 2
    89 label *label29
    90 op shr *tmp79 9 *tmp6
    91 assertequals 2 *tmp79 "shr"
-    * op add *tmp80 zero 2
    92 label *label30
    93 op or *tmp82 1 *tmp6
    94 assertequals 3 *tmp82 "or"
-    * op add *tmp83 zero 2
    95 label *label31
    96 op and *tmp85 3 *tmp6
    97 assertequals 2 *tmp85 "and"
-    * op add *tmp86 zero 2
    98 label *label32
    99 op xor *tmp88 3 *tmp6
   100 assertequals 1 *tmp88 "xor"
-    * op add *tmp89 zero 0
   101 label *label33
   102 op not *tmp91 *tmp42
   103 assertequals -1 *tmp91 "not 1"
 
   105 label *label34
   106 op not *tmp94 *tmp92
   107 assertequals -65536 *tmp94 "not 2"
-    * set :a 0xabcdefabcdef
   108 op add *tmp97 zero 0xabcdefabcdef
   109 label *label35
   110 op not *tmp99 *tmp97
   111 assertequals -188900977659376 *tmp99 "not 3"
-    * op add *tmp100 zero 4
   112 label *label36
   113 op max *tmp102 2 *tmp9
   114 assertequals 4 *tmp102 "max"
-    * op add *tmp103 zero 4
   115 label *label37
   116 op min *tmp105 2 *tmp9
   117 assertequals 2 *tmp105 "min"
 
   119 label *label38
   120 op abs *tmp108 *tmp106
   121 assertequals 2 *tmp108 "abs"
-    * op add *tmp109 zero -2
   122 label *label39
   123 op sign *tmp111 *tmp106
   124 assertequals -1 *tmp111 "sign(-2)"
-    * op add *tmp112 zero 2
   125 label *label40
   126 op sign *tmp114 *tmp6
   127 assertequals 1 *tmp114 "sign(2)"
-    * op add *tmp115 zero 0
   128 label *label41
   129 op sign *tmp117 *tmp42
   130 assertequals 0 *tmp117 "sign(0)"
 
   140 label *label44
   141 op floor *tmp126 *tmp124
   142 assertequals 2 *tmp126 "floor"
-    * op add *tmp127 zero 2.5
   143 label *label45
   144 op ceil *tmp129 *tmp124
   145 assertequals 3 *tmp129 "ceil"
 
   147 label *label46
   148 op sqrt *tmp132 *tmp130
   149 assertequals 4 *tmp132 "sqrt"
-    * op add *tmp133 zero 1
   150 label *label47
   151 op angle *tmp135 1 *tmp48
   152 assertequals 45 *tmp135 "angle"
 
   191 setaddr :assertEqualsRound*retaddr *label54 (h:*label54)
   192 call *label3 *invalid :assertEqualsRound*retval (m:*label54) (h:*label54)
   193 label *label54
-    * op add *tmp139 zero 8
   194 label *label55
   195 op sub *tmp141 -8 zero
   196 assertequals -8 *tmp141 "unary minus"
-    * op add *tmp142 zero 0
   197 label *label56
   198 op equal *tmp144 *tmp42 false
   199 assertequals 1 *tmp144 "boolean negation 1"
-    * op add *tmp145 zero 1
   200 label *label57
   201 op equal *tmp147 *tmp48 false
   202 assertequals 0 *tmp147 "boolean negation 2"
-    * op add *tmp148 zero 2
   203 label *label58
   204 op equal *tmp150 *tmp6 false
   205 assertequals 0 *tmp150 "boolean negation 3"
-    * op add *tmp151 zero 4
   206 label *label59
-    * op pow :a 2 *tmp9
   207 assertequals 16 *tmp23 "**="
-    * op add *tmp153 zero 4
   208 label *label60
   209 op mul :a 2 *tmp9
   210 assertequals 8 :a "*="
-    * op add *tmp155 zero 4
   211 label *label61
-    * op div :a 6 *tmp9
   212 assertequals 1.5 *tmp11 "/="
-    * op add *tmp157 zero 4
   213 label *label62
-    * op idiv :a 6 *tmp9
   214 assertequals 1 *tmp17 "\="
-    * op add *tmp159 zero 4
   215 label *label63
-    * op mod :a 6 *tmp9
   216 assertequals 2 *tmp20 "%="
-    * op add *tmp161 zero 2
   217 label *label64
-    * op add :a 4 *tmp6
+  218 op add :a zero 6
   219 assertequals 6 :a "+="
-    * op add *tmp163 zero 2
   220 label *label65
-    * op sub :a 4 *tmp6
+  221 op sub :a 2 zero
   222 assertequals 2 :a "-="
-    * op add *tmp165 zero 2
   223 label *label66
-    * op shl :a 1 *tmp6
   224 assertequals 4 *tmp76 "<<="
-    * op add *tmp167 zero 2
   225 label *label67
-    * op shr :a 9 *tmp6
   226 assertequals 2 *tmp79 ">>="
-    * op add *tmp169 zero 2
   227 label *label68
-    * op or :a 1 *tmp6
   228 assertequals 3 *tmp82 "|="
-    * op add *tmp171 zero 2
   229 label *label69
-    * op and :a 3 *tmp6
   230 assertequals 2 *tmp85 "&="
-    * op add *tmp173 zero 2
   231 label *label70
-    * op xor :a 3 *tmp6
   232 assertequals 1 *tmp88 "^="
-    * op add *tmp175 zero 0
   233 label *label71
-    * op land :a 1 *tmp42
   234 assertequals false *tmp44 "&&="
-    * op add *tmp177 zero 2
   235 label *label72
-    * op land :a 1 *tmp6
   236 assertequals true *tmp47 "&&="
-    * op add *tmp179 zero 2
   237 label *label73
   238 op or *tmp181 0 *tmp6
   239 op notEqual :a *tmp181 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    27 label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
-    * op add *tmp24 zero 5
    30 label *label12
    31 op equal *tmp26 5 *tmp2
    32 assertequals true *tmp26 "equal 1"
 
   215 assertequals 2 *tmp20 "%="
   216 label *label64
   217 op add :a zero 6
-    * assertequals 6 :a "+="
+  218 assertequals 6 *tmp3 "+="
   219 label *label65
   220 op sub :a 2 zero
   221 assertequals 2 :a "-="

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
   214 label *label63
   215 assertequals 2 *tmp20 "%="
   216 label *label64
-    * op add :a zero 6
   217 assertequals 6 *tmp3 "+="
   218 label *label65
   219 op sub :a 2 zero

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   239 assertequals %ff0000ff %ff0000 "short color literals"
   240 assertequals %ffffffff %[white] "named color literals"
   241 jump *label75 equal zero false
-    * set *tmp183 null
+  242 sensor *tmp184 null @id
   243 jump *label76 always
   244 label *label75
-    * set *tmp183 @copper-wall
+  245 sensor *tmp184 @copper-wall @id
   246 label *label76
   247 label *label74
-    * sensor *tmp184 *tmp183 @id
   248 assertequals 17 *tmp184 "Logic ID"
   249 stop
   250 end

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+11 instructions):
 
   157 set :assertEqualsRound:expected 1
   158 set :assertEqualsRound:actual 1
   159 set :assertEqualsRound:title "sin"
-    * setaddr :assertEqualsRound*retaddr *label49 (h:*label49)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label49) (h:*label49)
-    * label *label49
+  160 label *label79
+  161 op mul :round:x :assertEqualsRound:actual 100000000
+  162 op add *tmp187 :round:x 0.5
+  163 op floor *tmp186 *tmp187
+  164 label *label80
+  165 op div *tmp189 *tmp186 100000000
+  166 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  167 label *label81
   168 set :assertEqualsRound:expected -1
   169 set :assertEqualsRound:actual -1
   170 set :assertEqualsRound:title "cos"
-    * setaddr :assertEqualsRound*retaddr *label50 (h:*label50)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label50) (h:*label50)
-    * label *label50
+  171 label *label82
+  172 op mul :round:x :assertEqualsRound:actual 100000000
+  173 op add *tmp187 :round:x 0.5
+  174 op floor *tmp186 *tmp187
+  175 label *label83
+  176 op div *tmp189 *tmp186 100000000
+  177 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  178 label *label84
   179 set :assertEqualsRound:expected 1
   180 set :assertEqualsRound:actual 0.9999999999999999
   181 set :assertEqualsRound:title "tan"
-    * setaddr :assertEqualsRound*retaddr *label51 (h:*label51)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label51) (h:*label51)
-    * label *label51
+  182 label *label85
+  183 op mul :round:x :assertEqualsRound:actual 100000000
+  184 op add *tmp187 :round:x 0.5
+  185 op floor *tmp186 *tmp187
+  186 label *label86
+  187 op div *tmp189 *tmp186 100000000
+  188 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  189 label *label87
   190 set :assertEqualsRound:expected 90
   191 set :assertEqualsRound:actual 90
   192 set :assertEqualsRound:title "asin"
-    * setaddr :assertEqualsRound*retaddr *label52 (h:*label52)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label52) (h:*label52)
-    * label *label52
+  193 label *label88
+  194 op mul :round:x :assertEqualsRound:actual 100000000
+  195 op add *tmp187 :round:x 0.5
+  196 op floor *tmp186 *tmp187
+  197 label *label89
+  198 op div *tmp189 *tmp186 100000000
+  199 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  200 label *label90
   201 set :assertEqualsRound:expected 0
   202 set :assertEqualsRound:actual 0
   203 set :assertEqualsRound:title "acos"
-    * setaddr :assertEqualsRound*retaddr *label53 (h:*label53)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label53) (h:*label53)
-    * label *label53
+  204 label *label91
+  205 op mul :round:x :assertEqualsRound:actual 100000000
+  206 op add *tmp187 :round:x 0.5
+  207 op floor *tmp186 *tmp187
+  208 label *label92
+  209 op div *tmp189 *tmp186 100000000
+  210 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  211 label *label93
   212 set :assertEqualsRound:expected 45
   213 set :assertEqualsRound:actual 45
   214 set :assertEqualsRound:title "atan"
-    * setaddr :assertEqualsRound*retaddr *label54 (h:*label54)
-    * call *label3 *invalid :assertEqualsRound*retval (m:*label54) (h:*label54)
-    * label *label54
+  215 label *label94
+  216 op mul :round:x :assertEqualsRound:actual 100000000
+  217 op add *tmp187 :round:x 0.5
+  218 op floor *tmp186 *tmp187
+  219 label *label95
+  220 op div *tmp189 *tmp186 100000000
+  221 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  222 label *label96
   223 label *label55
   224 op sub *tmp141 -8 zero
   225 assertequals -8 *tmp141 "unary minus"
 
   278 assertequals 17 *tmp184 "Logic ID"
   279 stop
   280 end
-    * label *label3
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
-    * label *label78
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
-    * label *label77
-    * return :assertEqualsRound*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   158 set :assertEqualsRound:actual 1
   159 set :assertEqualsRound:title "sin"
   160 label *label79
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  161 op mul :round:x 1 100000000
+  162 op add *tmp187 100000000 0.5
+  163 op floor *tmp186 100000000.5
   164 label *label80
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  165 op div *tmp189 100000000 100000000
+  166 assertequals 1 1 "sin"
   167 label *label81
   168 set :assertEqualsRound:expected -1
   169 set :assertEqualsRound:actual -1
   170 set :assertEqualsRound:title "cos"
   171 label *label82
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  172 op mul :round:x -1 100000000
+  173 op add *tmp187 -100000000 0.5
+  174 op floor *tmp186 -99999999.5
   175 label *label83
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  176 op div *tmp189 -100000000 100000000
+  177 assertequals -1 -1 "cos"
   178 label *label84
   179 set :assertEqualsRound:expected 1
   180 set :assertEqualsRound:actual 0.9999999999999999
   181 set :assertEqualsRound:title "tan"
   182 label *label85
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  183 op mul :round:x 0.9999999999999999 100000000
+  184 op add *tmp187 99999999.99999999 0.5
+  185 op floor *tmp186 100000000.49999999
   186 label *label86
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  187 op div *tmp189 100000000 100000000
+  188 assertequals 1 1 "tan"
   189 label *label87
   190 set :assertEqualsRound:expected 90
   191 set :assertEqualsRound:actual 90
   192 set :assertEqualsRound:title "asin"
   193 label *label88
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  194 op mul :round:x 90 100000000
+  195 op add *tmp187 9000000000 0.5
+  196 op floor *tmp186 9000000000.5
   197 label *label89
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  198 op div *tmp189 9000000000 100000000
+  199 assertequals 90 90 "asin"
   200 label *label90
   201 set :assertEqualsRound:expected 0
   202 set :assertEqualsRound:actual 0
   203 set :assertEqualsRound:title "acos"
   204 label *label91
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  205 op mul :round:x 0 100000000
+  206 op add *tmp187 0 0.5
+  207 op floor *tmp186 0.5
   208 label *label92
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  209 op div *tmp189 0 100000000
+  210 assertequals 0 0 "acos"
   211 label *label93
   212 set :assertEqualsRound:expected 45
   213 set :assertEqualsRound:actual 45
   214 set :assertEqualsRound:title "atan"
   215 label *label94
-    * op mul :round:x :assertEqualsRound:actual 100000000
-    * op add *tmp187 :round:x 0.5
-    * op floor *tmp186 *tmp187
+  216 op mul :round:x 45 100000000
+  217 op add *tmp187 4500000000 0.5
+  218 op floor *tmp186 4500000000.5
   219 label *label95
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  220 op div *tmp189 4500000000 100000000
+  221 assertequals 45 45 "atan"
   222 label *label96
   223 label *label55
   224 op sub *tmp141 -8 zero

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
   154 op angleDiff *tmp138 45 *tmp136
   155 assertequals 90 *tmp138 "angleDiff"
   156 assertequals 5 5 "len"
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 1
-    * set :assertEqualsRound:title "sin"
   157 label *label79
-    * op mul :round:x 1 100000000
-    * op add *tmp187 100000000 0.5
-    * op floor *tmp186 100000000.5
   158 label *label80
-    * op div *tmp189 100000000 100000000
   159 assertequals 1 1 "sin"
   160 label *label81
-    * set :assertEqualsRound:expected -1
-    * set :assertEqualsRound:actual -1
-    * set :assertEqualsRound:title "cos"
   161 label *label82
-    * op mul :round:x -1 100000000
-    * op add *tmp187 -100000000 0.5
-    * op floor *tmp186 -99999999.5
   162 label *label83
-    * op div *tmp189 -100000000 100000000
   163 assertequals -1 -1 "cos"
   164 label *label84
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 0.9999999999999999
-    * set :assertEqualsRound:title "tan"
   165 label *label85
-    * op mul :round:x 0.9999999999999999 100000000
-    * op add *tmp187 99999999.99999999 0.5
-    * op floor *tmp186 100000000.49999999
   166 label *label86
-    * op div *tmp189 100000000 100000000
   167 assertequals 1 1 "tan"
   168 label *label87
-    * set :assertEqualsRound:expected 90
-    * set :assertEqualsRound:actual 90
-    * set :assertEqualsRound:title "asin"
   169 label *label88
-    * op mul :round:x 90 100000000
-    * op add *tmp187 9000000000 0.5
-    * op floor *tmp186 9000000000.5
   170 label *label89
-    * op div *tmp189 9000000000 100000000
   171 assertequals 90 90 "asin"
   172 label *label90
-    * set :assertEqualsRound:expected 0
-    * set :assertEqualsRound:actual 0
-    * set :assertEqualsRound:title "acos"
   173 label *label91
-    * op mul :round:x 0 100000000
-    * op add *tmp187 0 0.5
-    * op floor *tmp186 0.5
   174 label *label92
-    * op div *tmp189 0 100000000
   175 assertequals 0 0 "acos"
   176 label *label93
-    * set :assertEqualsRound:expected 45
-    * set :assertEqualsRound:actual 45
-    * set :assertEqualsRound:title "atan"
   177 label *label94
-    * op mul :round:x 45 100000000
-    * op add *tmp187 4500000000 0.5
-    * op floor *tmp186 4500000000.5
   178 label *label95
-    * op div *tmp189 4500000000 100000000
   179 assertequals 45 45 "atan"
   180 label *label96
   181 label *label55

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    46 label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
-    * op add *tmp42 zero 0
+   49 set *tmp42 zero
    50 label *label18
    51 op land *tmp44 1 *tmp42
    52 assertequals false *tmp44 "land 1"
 
   230 sensor *tmp184 null @id
   231 jump *label76 always
   232 label *label75
-    * sensor *tmp184 @copper-wall @id
+  233 set *tmp184 17
   234 label *label76
   235 label *label74
   236 assertequals 17 *tmp184 "Logic ID"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    48 assertequals false *tmp41 "notEqual null"
    49 set *tmp42 zero
    50 label *label18
-    * op land *tmp44 1 *tmp42
+   51 op land *tmp44 1 zero
    52 assertequals false *tmp44 "land 1"
    53 label *label19
    54 op land *tmp47 1 *tmp6
 
    58 op lessThan *tmp50 0 *tmp48
    59 assertequals true *tmp50 "lessThan 1"
    60 label *label21
-    * op lessThan *tmp53 1 *tmp42
+   61 op lessThan *tmp53 1 zero
    62 assertequals false *tmp53 "lessThan 2"
    63 label *label22
    64 op lessThanEq *tmp56 1 *tmp48
    65 assertequals true *tmp56 "lessThanEq 1"
    66 label *label23
-    * op lessThanEq *tmp59 1 *tmp42
+   67 op lessThanEq *tmp59 1 zero
    68 assertequals false *tmp59 "lessThanEq 2"
    69 label *label24
    70 op greaterThan *tmp62 2 *tmp48
 
    98 op xor *tmp88 3 *tmp6
    99 assertequals 1 *tmp88 "xor"
   100 label *label33
-    * op not *tmp91 *tmp42
+  101 op not *tmp91 zero
   102 assertequals -1 *tmp91 "not 1"
   103 op add *tmp92 zero 65535
   104 label *label34
 
   125 op sign *tmp114 *tmp6
   126 assertequals 1 *tmp114 "sign(2)"
   127 label *label41
-    * op sign *tmp117 *tmp42
+  128 op sign *tmp117 zero
   129 assertequals 0 *tmp117 "sign(0)"
   130 op add *tmp118 zero 2.718281828459045
   131 label *label42
 
   182 op sub *tmp141 -8 zero
   183 assertequals -8 *tmp141 "unary minus"
   184 label *label56
-    * op equal *tmp144 *tmp42 false
+  185 op equal *tmp144 zero false
   186 assertequals 1 *tmp144 "boolean negation 1"
   187 label *label57
   188 op equal *tmp147 *tmp48 false

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    46 label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
-    * set *tmp42 zero
    49 label *label18
    50 op land *tmp44 1 zero
    51 assertequals false *tmp44 "land 1"

Modifications by Iterated phase, If Expression Optimization, pass 2, iteration 1:
 
   225 assertequals true :a "||="
   226 assertequals %ff0000ff %ff0000 "short color literals"
   227 assertequals %ffffffff %[white] "named color literals"
-    * jump *label75 equal zero false
+  228 set *tmp184 17
+  229 jump *label76 equal zero false
   230 sensor *tmp184 null @id
   231 jump *label76 always
-    * label *label75
-    * set *tmp184 17
   232 label *label76
   233 label *label74
   234 assertequals 17 *tmp184 "Logic ID"

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   228 set *tmp184 17
   229 jump *label76 equal zero false
   230 sensor *tmp184 null @id
-    * jump *label76 always
   231 label *label76
   232 label *label74
   233 assertequals 17 *tmp184 "Logic ID"

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set NULL null
     1 set zero 0
-    * label *label4
     2 op add *tmp2 zero 5
     3 assertequals 5 *tmp2 "add"
     4 op add *tmp3 zero 6
-    * label *label5
     5 op sub *tmp5 1 zero
     6 assertequals 1 *tmp5 "sub"
     7 op add *tmp6 zero 2
-    * label *label6
     8 op mul *tmp8 3 *tmp6
     9 assertequals 6 *tmp8 "mul"
    10 op add *tmp9 zero 4
-    * label *label7
    11 op div *tmp11 6 *tmp9
    12 assertequals 1.5 *tmp11 "div"
    13 op add *tmp12 zero 100000
-    * label *label8
    14 op div *tmp14 1 *tmp12
    15 assertequals 0.00001 *tmp14 "div exp"
-    * label *label9
    16 op idiv *tmp17 6 *tmp9
    17 assertequals 1 *tmp17 "idiv"
-    * label *label10
    18 op mod *tmp20 6 *tmp9
    19 assertequals 2 *tmp20 "mod"
-    * label *label11
    20 op pow *tmp23 2 *tmp9
    21 assertequals 16 *tmp23 "pow"
-    * label *label12
    22 op equal *tmp26 5 *tmp2
    23 assertequals true *tmp26 "equal 1"
-    * label *label13
    24 op equal *tmp29 5 *tmp3
    25 assertequals false *tmp29 "equal 2"
    26 op add *tmp30 zero null
-    * label *label14
    27 op equal *tmp32 0 *tmp30
    28 assertequals true *tmp32 "equal null"
-    * label *label15
    29 op notEqual *tmp35 5 *tmp2
    30 assertequals false *tmp35 "notEqual 1"
-    * label *label16
    31 op notEqual *tmp38 5 *tmp3
    32 assertequals true *tmp38 "notEqual 2"
-    * label *label17
    33 op notEqual *tmp41 0 *tmp30
    34 assertequals false *tmp41 "notEqual null"
-    * label *label18
    35 op land *tmp44 1 zero
    36 assertequals false *tmp44 "land 1"
-    * label *label19
    37 op land *tmp47 1 *tmp6
    38 assertequals true *tmp47 "land 2"
    39 op add *tmp48 zero 1
-    * label *label20
    40 op lessThan *tmp50 0 *tmp48
    41 assertequals true *tmp50 "lessThan 1"
-    * label *label21
    42 op lessThan *tmp53 1 zero
    43 assertequals false *tmp53 "lessThan 2"
-    * label *label22
    44 op lessThanEq *tmp56 1 *tmp48
    45 assertequals true *tmp56 "lessThanEq 1"
-    * label *label23
    46 op lessThanEq *tmp59 1 zero
    47 assertequals false *tmp59 "lessThanEq 2"
-    * label *label24
    48 op greaterThan *tmp62 2 *tmp48
    49 assertequals true *tmp62 "greaterThan 1"
-    * label *label25
    50 op greaterThan *tmp65 1 *tmp6
    51 assertequals false *tmp65 "greaterThan 2"
-    * label *label26
    52 op greaterThanEq *tmp68 1 *tmp48
    53 assertequals true *tmp68 "greaterThanEq 1"
-    * label *label27
    54 op greaterThanEq *tmp71 1 *tmp6
    55 assertequals false *tmp71 "greaterThanEq 2"
    56 op strictEqual *tmp72 0 NULL
    57 assertequals false *tmp72 "strictEqual 1"
    58 op strictEqual *tmp73 null NULL
    59 assertequals true *tmp73 "strictEqual 2"
-    * label *label28
    60 op shl *tmp76 1 *tmp6
    61 assertequals 4 *tmp76 "shl"
-    * label *label29
    62 op shr *tmp79 9 *tmp6
    63 assertequals 2 *tmp79 "shr"
-    * label *label30
    64 op or *tmp82 1 *tmp6
    65 assertequals 3 *tmp82 "or"
-    * label *label31
    66 op and *tmp85 3 *tmp6
    67 assertequals 2 *tmp85 "and"
-    * label *label32
    68 op xor *tmp88 3 *tmp6
    69 assertequals 1 *tmp88 "xor"
-    * label *label33
    70 op not *tmp91 zero
    71 assertequals -1 *tmp91 "not 1"
    72 op add *tmp92 zero 65535
-    * label *label34
    73 op not *tmp94 *tmp92
    74 assertequals -65536 *tmp94 "not 2"
    75 op add *tmp97 zero 0xabcdefabcdef
-    * label *label35
    76 op not *tmp99 *tmp97
    77 assertequals -188900977659376 *tmp99 "not 3"
-    * label *label36
    78 op max *tmp102 2 *tmp9
    79 assertequals 4 *tmp102 "max"
-    * label *label37
    80 op min *tmp105 2 *tmp9
    81 assertequals 2 *tmp105 "min"
    82 op add *tmp106 zero -2
-    * label *label38
    83 op abs *tmp108 *tmp106
    84 assertequals 2 *tmp108 "abs"
-    * label *label39
    85 op sign *tmp111 *tmp106
    86 assertequals -1 *tmp111 "sign(-2)"
-    * label *label40
    87 op sign *tmp114 *tmp6
    88 assertequals 1 *tmp114 "sign(2)"
-    * label *label41
    89 op sign *tmp117 zero
    90 assertequals 0 *tmp117 "sign(0)"
    91 op add *tmp118 zero 2.718281828459045
-    * label *label42
    92 op log *tmp120 *tmp118
    93 assertequals 1 *tmp120 "log"
    94 op add *tmp121 zero 10
-    * label *label43
    95 op log10 *tmp123 *tmp121
    96 assertequals 1 *tmp123 "log10"
    97 op add *tmp124 zero 2.5
-    * label *label44
    98 op floor *tmp126 *tmp124
    99 assertequals 2 *tmp126 "floor"
-    * label *label45
   100 op ceil *tmp129 *tmp124
   101 assertequals 3 *tmp129 "ceil"
   102 op add *tmp130 zero 16
-    * label *label46
   103 op sqrt *tmp132 *tmp130
   104 assertequals 4 *tmp132 "sqrt"
-    * label *label47
   105 op angle *tmp135 1 *tmp48
   106 assertequals 45 *tmp135 "angle"
   107 op add *tmp136 zero 135
-    * label *label48
   108 op angleDiff *tmp138 45 *tmp136
   109 assertequals 90 *tmp138 "angleDiff"
   110 assertequals 5 5 "len"
-    * label *label79
-    * label *label80
   111 assertequals 1 1 "sin"
-    * label *label81
-    * label *label82
-    * label *label83
   112 assertequals -1 -1 "cos"
-    * label *label84
-    * label *label85
-    * label *label86
   113 assertequals 1 1 "tan"
-    * label *label87
-    * label *label88
-    * label *label89
   114 assertequals 90 90 "asin"
-    * label *label90
-    * label *label91
-    * label *label92
   115 assertequals 0 0 "acos"
-    * label *label93
-    * label *label94
-    * label *label95
   116 assertequals 45 45 "atan"
-    * label *label96
-    * label *label55
   117 op sub *tmp141 -8 zero
   118 assertequals -8 *tmp141 "unary minus"
-    * label *label56
   119 op equal *tmp144 zero false
   120 assertequals 1 *tmp144 "boolean negation 1"
-    * label *label57
   121 op equal *tmp147 *tmp48 false
   122 assertequals 0 *tmp147 "boolean negation 2"
-    * label *label58
   123 op equal *tmp150 *tmp6 false
   124 assertequals 0 *tmp150 "boolean negation 3"
-    * label *label59
   125 assertequals 16 *tmp23 "**="
-    * label *label60
   126 op mul :a 2 *tmp9
   127 assertequals 8 :a "*="
-    * label *label61
   128 assertequals 1.5 *tmp11 "/="
-    * label *label62
   129 assertequals 1 *tmp17 "\="
-    * label *label63
   130 assertequals 2 *tmp20 "%="
-    * label *label64
   131 assertequals 6 *tmp3 "+="
-    * label *label65
   132 op sub :a 2 zero
   133 assertequals 2 :a "-="
-    * label *label66
   134 assertequals 4 *tmp76 "<<="
-    * label *label67
   135 assertequals 2 *tmp79 ">>="
-    * label *label68
   136 assertequals 3 *tmp82 "|="
-    * label *label69
   137 assertequals 2 *tmp85 "&="
-    * label *label70
   138 assertequals 1 *tmp88 "^="
-    * label *label71
   139 assertequals false *tmp44 "&&="
-    * label *label72
   140 assertequals true *tmp47 "&&="
-    * label *label73
   141 op or *tmp181 0 *tmp6
   142 op notEqual :a *tmp181 false
   143 assertequals true :a "||="
 
   147 jump *label76 equal zero false
   148 sensor *tmp184 null @id
   149 label *label76
-    * label *label74
   150 assertequals 17 *tmp184 "Logic ID"
   151 stop
   152 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
   149 label *label76
   150 assertequals 17 *tmp184 "Logic ID"
   151 stop
-    * end

Final code before resolving virtual instructions:

set NULL null
set zero 0
op add *tmp2 zero 5
assertequals 5 *tmp2 "add"
op add *tmp3 zero 6
op sub *tmp5 1 zero
assertequals 1 *tmp5 "sub"
op add *tmp6 zero 2
op mul *tmp8 3 *tmp6
assertequals 6 *tmp8 "mul"
op add *tmp9 zero 4
op div *tmp11 6 *tmp9
assertequals 1.5 *tmp11 "div"
op add *tmp12 zero 100000
op div *tmp14 1 *tmp12
assertequals 0.00001 *tmp14 "div exp"
op idiv *tmp17 6 *tmp9
assertequals 1 *tmp17 "idiv"
op mod *tmp20 6 *tmp9
assertequals 2 *tmp20 "mod"
op pow *tmp23 2 *tmp9
assertequals 16 *tmp23 "pow"
op equal *tmp26 5 *tmp2
assertequals true *tmp26 "equal 1"
op equal *tmp29 5 *tmp3
assertequals false *tmp29 "equal 2"
op add *tmp30 zero null
op equal *tmp32 0 *tmp30
assertequals true *tmp32 "equal null"
op notEqual *tmp35 5 *tmp2
assertequals false *tmp35 "notEqual 1"
op notEqual *tmp38 5 *tmp3
assertequals true *tmp38 "notEqual 2"
op notEqual *tmp41 0 *tmp30
assertequals false *tmp41 "notEqual null"
op land *tmp44 1 zero
assertequals false *tmp44 "land 1"
op land *tmp47 1 *tmp6
assertequals true *tmp47 "land 2"
op add *tmp48 zero 1
op lessThan *tmp50 0 *tmp48
assertequals true *tmp50 "lessThan 1"
op lessThan *tmp53 1 zero
assertequals false *tmp53 "lessThan 2"
op lessThanEq *tmp56 1 *tmp48
assertequals true *tmp56 "lessThanEq 1"
op lessThanEq *tmp59 1 zero
assertequals false *tmp59 "lessThanEq 2"
op greaterThan *tmp62 2 *tmp48
assertequals true *tmp62 "greaterThan 1"
op greaterThan *tmp65 1 *tmp6
assertequals false *tmp65 "greaterThan 2"
op greaterThanEq *tmp68 1 *tmp48
assertequals true *tmp68 "greaterThanEq 1"
op greaterThanEq *tmp71 1 *tmp6
assertequals false *tmp71 "greaterThanEq 2"
op strictEqual *tmp72 0 NULL
assertequals false *tmp72 "strictEqual 1"
op strictEqual *tmp73 null NULL
assertequals true *tmp73 "strictEqual 2"
op shl *tmp76 1 *tmp6
assertequals 4 *tmp76 "shl"
op shr *tmp79 9 *tmp6
assertequals 2 *tmp79 "shr"
op or *tmp82 1 *tmp6
assertequals 3 *tmp82 "or"
op and *tmp85 3 *tmp6
assertequals 2 *tmp85 "and"
op xor *tmp88 3 *tmp6
assertequals 1 *tmp88 "xor"
op not *tmp91 zero
assertequals -1 *tmp91 "not 1"
op add *tmp92 zero 65535
op not *tmp94 *tmp92
assertequals -65536 *tmp94 "not 2"
op add *tmp97 zero 0xabcdefabcdef
op not *tmp99 *tmp97
assertequals -188900977659376 *tmp99 "not 3"
op max *tmp102 2 *tmp9
assertequals 4 *tmp102 "max"
op min *tmp105 2 *tmp9
assertequals 2 *tmp105 "min"
op add *tmp106 zero -2
op abs *tmp108 *tmp106
assertequals 2 *tmp108 "abs"
op sign *tmp111 *tmp106
assertequals -1 *tmp111 "sign(-2)"
op sign *tmp114 *tmp6
assertequals 1 *tmp114 "sign(2)"
op sign *tmp117 zero
assertequals 0 *tmp117 "sign(0)"
op add *tmp118 zero 2.718281828459045
op log *tmp120 *tmp118
assertequals 1 *tmp120 "log"
op add *tmp121 zero 10
op log10 *tmp123 *tmp121
assertequals 1 *tmp123 "log10"
op add *tmp124 zero 2.5
op floor *tmp126 *tmp124
assertequals 2 *tmp126 "floor"
op ceil *tmp129 *tmp124
assertequals 3 *tmp129 "ceil"
op add *tmp130 zero 16
op sqrt *tmp132 *tmp130
assertequals 4 *tmp132 "sqrt"
op angle *tmp135 1 *tmp48
assertequals 45 *tmp135 "angle"
op add *tmp136 zero 135
op angleDiff *tmp138 45 *tmp136
assertequals 90 *tmp138 "angleDiff"
assertequals 5 5 "len"
assertequals 1 1 "sin"
assertequals -1 -1 "cos"
assertequals 1 1 "tan"
assertequals 90 90 "asin"
assertequals 0 0 "acos"
assertequals 45 45 "atan"
op sub *tmp141 -8 zero
assertequals -8 *tmp141 "unary minus"
op equal *tmp144 zero false
assertequals 1 *tmp144 "boolean negation 1"
op equal *tmp147 *tmp48 false
assertequals 0 *tmp147 "boolean negation 2"
op equal *tmp150 *tmp6 false
assertequals 0 *tmp150 "boolean negation 3"
assertequals 16 *tmp23 "**="
op mul :a 2 *tmp9
assertequals 8 :a "*="
assertequals 1.5 *tmp11 "/="
assertequals 1 *tmp17 "\="
assertequals 2 *tmp20 "%="
assertequals 6 *tmp3 "+="
op sub :a 2 zero
assertequals 2 :a "-="
assertequals 4 *tmp76 "<<="
assertequals 2 *tmp79 ">>="
assertequals 3 *tmp82 "|="
assertequals 2 *tmp85 "&="
assertequals 1 *tmp88 "^="
assertequals false *tmp44 "&&="
assertequals true *tmp47 "&&="
op or *tmp181 0 *tmp6
op notEqual :a *tmp181 false
assertequals true :a "||="
assertequals %ff0000ff %ff0000 "short color literals"
assertequals %ffffffff %[white] "named color literals"
set *tmp184 17
jump *label76 equal zero false
sensor *tmp184 null @id
label *label76
assertequals 17 *tmp184 "Logic ID"
stop
