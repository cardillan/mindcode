    65 instructions before optimizations.
     5 instructions eliminated by Temp Variables Elimination.
     5 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Jump Optimization (5 iterations).
     4 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
    11 instructions eliminated by Data Flow Optimization (6 iterations).
    63 instructions added by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
    13 instructions eliminated by Jump Straightening (5 iterations).
     1 instructions eliminated by Unreachable Code Elimination (2 iterations).
     4 instructions eliminated by Print Merging.
    83 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 949):
  * Unroll iteration loop at line 4:5                            cost    57, benefit       27.0, efficiency        0.5 (+52 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-5 instructions):
 
    44 op equal *tmp6 *tmp5 3
    45 jump *label14 equal *tmp6 false
    46 jump *label3 always
-    * set *tmp7 null
    47 jump *label15 always
    48 label *label14
-    * set *tmp7 null
    49 label *label15
    50 print :test.0:i
    51 print "|"
 
    55 op equal *tmp9 *tmp8 12
    56 jump *label16 equal *tmp9 false
    57 jump *label4 always
-    * set *tmp10 null
    58 jump *label17 always
    59 label *label16
-    * set *tmp10 null
    60 label *label17
    61 label *label3
    62 multijump *tmp1 0 0 (m:marker0)
    63 multilabel *label11 (m:marker0)
    64 label *label13
    65 label *label4
-    * set *tmp0 null
    66 label *label1
    67 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
    68 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-5 instructions):
 
     5 multilabel *label5 (m:marker0)
     6 set :d.0:n 2
     7 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp2 :d.0*retval
-    * set :test.0:i *tmp2
+    8 set :test.0:i :d.0*retval
     9 op add *tmp1 @counter 1
    10 jump *label2 always
    11 multilabel *label6 (m:marker0)
 
    15 multilabel *label7 (m:marker0)
    16 set :d.0:n 5
    17 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp3 :d.0*retval
-    * set :test.0:i *tmp3
+   18 set :test.0:i :d.0*retval
    19 op add *tmp1 @counter 1
    20 jump *label2 always
    21 multilabel *label8 (m:marker0)
 
    25 multilabel *label9 (m:marker0)
    26 set :d.0:n 12
    27 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp4 :d.0*retval
-    * set :test.0:i *tmp4
+   28 set :test.0:i :d.0*retval
    29 op add *tmp1 @counter 1
    30 jump *label2 always
    31 multilabel *label10 (m:marker0)
 
    37 label *label2
    38 set :d.0:n :test.0:i
    39 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp5 :d.0*retval
-    * op equal *tmp6 *tmp5 3
+   40 op equal *tmp6 :d.0*retval 3
    41 jump *label14 equal *tmp6 false
    42 jump *label3 always
    43 jump *label15 always
 
    47 print "|"
    48 set :d.0:n :test.0:i
    49 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp8 :d.0*retval
-    * op equal *tmp9 *tmp8 12
+   50 op equal *tmp9 :d.0*retval 12
    51 jump *label16 equal *tmp9 false
    52 jump *label4 always
    53 jump *label17 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    37 label *label2
    38 set :d.0:n :test.0:i
    39 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp6 :d.0*retval 3
-    * jump *label14 equal *tmp6 false
+   40 jump *label14 notEqual :d.0*retval 3
    41 jump *label3 always
    42 jump *label15 always
    43 label *label14
 
    46 print "|"
    47 set :d.0:n :test.0:i
    48 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp9 :d.0*retval 12
-    * jump *label16 equal *tmp9 false
+   49 jump *label16 notEqual :d.0*retval 12
    50 jump *label4 always
    51 jump *label17 always
    52 label *label16

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    39 call *label0 :d.0*retaddr :d.0*retval
    40 jump *label14 notEqual :d.0*retval 3
    41 jump *label3 always
-    * jump *label15 always
    42 label *label14
    43 label *label15
    44 print :test.0:i
 
    47 call *label0 :d.0*retaddr :d.0*retval
    48 jump *label16 notEqual :d.0*retval 12
    49 jump *label4 always
-    * jump *label17 always
    50 label *label16
    51 label *label17
    52 label *label3

Modifications by Unroll iteration loop at line 4:5 (+63 instructions):
     0 assertflush
     1 # "Function: def test()"
-    * set :test.0:i 1
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label5 (m:marker0)
-    * set :d.0:n 2
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label6 (m:marker0)
-    * set :test.0:i 3
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label7 (m:marker0)
-    * set :d.0:n 5
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label8 (m:marker0)
-    * set :test.0:i 8
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label9 (m:marker0)
-    * set :d.0:n 12
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label10 (m:marker0)
-    * set :test.0:i 15
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label12 (m:marker0)
-    * jump *label13 always
-    * label *label2
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label14 notEqual :d.0*retval 3
-    * jump *label3 always
-    * label *label14
-    * label *label15
-    * print :test.0:i
-    * print "|"
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label16 notEqual :d.0*retval 12
-    * jump *label4 always
-    * label *label16
-    * label *label17
-    * label *label3
-    * multijump *tmp1 0 0 (m:marker0)
-    * multilabel *label11 (m:marker0)
-    * label *label13
-    * label *label4
+    2 set :test.0:i 1
+    3 op add *tmp1 @counter 1
+    4 label *label19
+    5 set :d.0:n :test.0:i
+    6 call *label0 :d.0*retaddr :d.0*retval
+    7 jump *label20 notEqual :d.0*retval 3
+    8 jump *label24 always
+    9 label *label20
+   10 label *label21
+   11 print :test.0:i
+   12 print "|"
+   13 set :d.0:n :test.0:i
+   14 call *label0 :d.0*retaddr :d.0*retval
+   15 jump *label22 notEqual :d.0*retval 12
+   16 jump *label4 always
+   17 label *label22
+   18 label *label23
+   19 label *label24
+   20 set :d.0:n 2
+   21 call *label0 :d.0*retaddr :d.0*retval
+   22 set :test.0:i :d.0*retval
+   23 op add *tmp1 @counter 1
+   24 label *label27
+   25 set :d.0:n :test.0:i
+   26 call *label0 :d.0*retaddr :d.0*retval
+   27 jump *label28 notEqual :d.0*retval 3
+   28 jump *label32 always
+   29 label *label28
+   30 label *label29
+   31 print :test.0:i
+   32 print "|"
+   33 set :d.0:n :test.0:i
+   34 call *label0 :d.0*retaddr :d.0*retval
+   35 jump *label30 notEqual :d.0*retval 12
+   36 jump *label4 always
+   37 label *label30
+   38 label *label31
+   39 label *label32
+   40 set :test.0:i 3
+   41 op add *tmp1 @counter 1
+   42 label *label35
+   43 set :d.0:n :test.0:i
+   44 call *label0 :d.0*retaddr :d.0*retval
+   45 jump *label36 notEqual :d.0*retval 3
+   46 jump *label40 always
+   47 label *label36
+   48 label *label37
+   49 print :test.0:i
+   50 print "|"
+   51 set :d.0:n :test.0:i
+   52 call *label0 :d.0*retaddr :d.0*retval
+   53 jump *label38 notEqual :d.0*retval 12
+   54 jump *label4 always
+   55 label *label38
+   56 label *label39
+   57 label *label40
+   58 set :d.0:n 5
+   59 call *label0 :d.0*retaddr :d.0*retval
+   60 set :test.0:i :d.0*retval
+   61 op add *tmp1 @counter 1
+   62 label *label43
+   63 set :d.0:n :test.0:i
+   64 call *label0 :d.0*retaddr :d.0*retval
+   65 jump *label44 notEqual :d.0*retval 3
+   66 jump *label48 always
+   67 label *label44
+   68 label *label45
+   69 print :test.0:i
+   70 print "|"
+   71 set :d.0:n :test.0:i
+   72 call *label0 :d.0*retaddr :d.0*retval
+   73 jump *label46 notEqual :d.0*retval 12
+   74 jump *label4 always
+   75 label *label46
+   76 label *label47
+   77 label *label48
+   78 set :test.0:i 8
+   79 op add *tmp1 @counter 1
+   80 label *label51
+   81 set :d.0:n :test.0:i
+   82 call *label0 :d.0*retaddr :d.0*retval
+   83 jump *label52 notEqual :d.0*retval 3
+   84 jump *label56 always
+   85 label *label52
+   86 label *label53
+   87 print :test.0:i
+   88 print "|"
+   89 set :d.0:n :test.0:i
+   90 call *label0 :d.0*retaddr :d.0*retval
+   91 jump *label54 notEqual :d.0*retval 12
+   92 jump *label4 always
+   93 label *label54
+   94 label *label55
+   95 label *label56
+   96 set :d.0:n 12
+   97 call *label0 :d.0*retaddr :d.0*retval
+   98 set :test.0:i :d.0*retval
+   99 op add *tmp1 @counter 1
+  100 label *label59
+  101 set :d.0:n :test.0:i
+  102 call *label0 :d.0*retaddr :d.0*retval
+  103 jump *label60 notEqual :d.0*retval 3
+  104 jump *label64 always
+  105 label *label60
+  106 label *label61
+  107 print :test.0:i
+  108 print "|"
+  109 set :d.0:n :test.0:i
+  110 call *label0 :d.0*retaddr :d.0*retval
+  111 jump *label62 notEqual :d.0*retval 12
+  112 jump *label4 always
+  113 label *label62
+  114 label *label63
+  115 label *label64
+  116 set :test.0:i 15
+  117 op add *tmp1 @counter 1
+  118 label *label67
+  119 set :d.0:n :test.0:i
+  120 call *label0 :d.0*retaddr :d.0*retval
+  121 jump *label68 notEqual :d.0*retval 3
+  122 jump *label72 always
+  123 label *label68
+  124 label *label69
+  125 print :test.0:i
+  126 print "|"
+  127 set :d.0:n :test.0:i
+  128 call *label0 :d.0*retaddr :d.0*retval
+  129 jump *label70 notEqual :d.0*retval 12
+  130 jump *label4 always
+  131 label *label70
+  132 label *label71
+  133 label *label72
+  134 label *label13
+  135 label *label4
   136 label *label1
   137 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
   138 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-7 instructions):
     0 assertflush
     1 # "Function: def test()"
     2 set :test.0:i 1
-    * op add *tmp1 @counter 1
     3 label *label19
-    * set :d.0:n :test.0:i
+    4 set :d.0:n 1
     5 call *label0 :d.0*retaddr :d.0*retval
     6 jump *label20 notEqual :d.0*retval 3
     7 jump *label24 always
     8 label *label20
     9 label *label21
-    * print :test.0:i
+   10 print 1
    11 print "|"
-    * set :d.0:n :test.0:i
+   12 set :d.0:n 1
    13 call *label0 :d.0*retaddr :d.0*retval
    14 jump *label22 notEqual :d.0*retval 12
    15 jump *label4 always
 
    19 set :d.0:n 2
    20 call *label0 :d.0*retaddr :d.0*retval
    21 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    22 label *label27
-    * set :d.0:n :test.0:i
+   23 set :d.0:n :d.0*retval
    24 call *label0 :d.0*retaddr :d.0*retval
    25 jump *label28 notEqual :d.0*retval 3
    26 jump *label32 always
 
    36 label *label31
    37 label *label32
    38 set :test.0:i 3
-    * op add *tmp1 @counter 1
    39 label *label35
-    * set :d.0:n :test.0:i
+   40 set :d.0:n 3
    41 call *label0 :d.0*retaddr :d.0*retval
    42 jump *label36 notEqual :d.0*retval 3
    43 jump *label40 always
    44 label *label36
    45 label *label37
-    * print :test.0:i
+   46 print 3
    47 print "|"
-    * set :d.0:n :test.0:i
+   48 set :d.0:n 3
    49 call *label0 :d.0*retaddr :d.0*retval
    50 jump *label38 notEqual :d.0*retval 12
    51 jump *label4 always
 
    55 set :d.0:n 5
    56 call *label0 :d.0*retaddr :d.0*retval
    57 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    58 label *label43
-    * set :d.0:n :test.0:i
+   59 set :d.0:n :d.0*retval
    60 call *label0 :d.0*retaddr :d.0*retval
    61 jump *label44 notEqual :d.0*retval 3
    62 jump *label48 always
 
    72 label *label47
    73 label *label48
    74 set :test.0:i 8
-    * op add *tmp1 @counter 1
    75 label *label51
-    * set :d.0:n :test.0:i
+   76 set :d.0:n 8
    77 call *label0 :d.0*retaddr :d.0*retval
    78 jump *label52 notEqual :d.0*retval 3
    79 jump *label56 always
    80 label *label52
    81 label *label53
-    * print :test.0:i
+   82 print 8
    83 print "|"
-    * set :d.0:n :test.0:i
+   84 set :d.0:n 8
    85 call *label0 :d.0*retaddr :d.0*retval
    86 jump *label54 notEqual :d.0*retval 12
    87 jump *label4 always
 
    91 set :d.0:n 12
    92 call *label0 :d.0*retaddr :d.0*retval
    93 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    94 label *label59
-    * set :d.0:n :test.0:i
+   95 set :d.0:n :d.0*retval
    96 call *label0 :d.0*retaddr :d.0*retval
    97 jump *label60 notEqual :d.0*retval 3
    98 jump *label64 always
 
   108 label *label63
   109 label *label64
   110 set :test.0:i 15
-    * op add *tmp1 @counter 1
   111 label *label67
-    * set :d.0:n :test.0:i
+  112 set :d.0:n 15
   113 call *label0 :d.0*retaddr :d.0*retval
   114 jump *label68 notEqual :d.0*retval 3
   115 jump *label72 always
   116 label *label68
   117 label *label69
-    * print :test.0:i
+  118 print 15
   119 print "|"
-    * set :d.0:n :test.0:i
+  120 set :d.0:n 15
   121 call *label0 :d.0*retaddr :d.0*retval
   122 jump *label70 notEqual :d.0*retval 12
   123 jump *label4 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
     0 assertflush
     1 # "Function: def test()"
-    * set :test.0:i 1
     2 label *label19
     3 set :d.0:n 1
     4 call *label0 :d.0*retaddr :d.0*retval
 
    34 label *label30
    35 label *label31
    36 label *label32
-    * set :test.0:i 3
    37 label *label35
    38 set :d.0:n 3
    39 call *label0 :d.0*retaddr :d.0*retval
 
    69 label *label46
    70 label *label47
    71 label *label48
-    * set :test.0:i 8
    72 label *label51
    73 set :d.0:n 8
    74 call *label0 :d.0*retaddr :d.0*retval
 
   104 label *label62
   105 label *label63
   106 label *label64
-    * set :test.0:i 15
   107 label *label67
   108 set :d.0:n 15
   109 call *label0 :d.0*retaddr :d.0*retval

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
   116 set :d.0:n 15
   117 call *label0 :d.0*retaddr :d.0*retval
   118 jump *label70 notEqual :d.0*retval 12
-    * jump *label4 always
   119 label *label70
   120 label *label71
   121 label *label72

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 2 (-1 instructions):
 
   115 print "|"
   116 set :d.0:n 15
   117 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label70 notEqual :d.0*retval 12
   118 label *label70
   119 label *label71
   120 label *label72

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 assertflush
     1 # "Function: def test()"
-    * label *label19
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
     4 jump *label20 notEqual :d.0*retval 3
     5 jump *label24 always
     6 label *label20
-    * label *label21
     7 print 1
     8 print "|"
     9 set :d.0:n 1
 
    11 jump *label22 notEqual :d.0*retval 12
    12 jump *label4 always
    13 label *label22
-    * label *label23
    14 label *label24
    15 set :d.0:n 2
    16 call *label0 :d.0*retaddr :d.0*retval
    17 set :test.0:i :d.0*retval
-    * label *label27
    18 set :d.0:n :d.0*retval
    19 call *label0 :d.0*retaddr :d.0*retval
    20 jump *label28 notEqual :d.0*retval 3
    21 jump *label32 always
    22 label *label28
-    * label *label29
    23 print :test.0:i
    24 print "|"
    25 set :d.0:n :test.0:i
 
    27 jump *label30 notEqual :d.0*retval 12
    28 jump *label4 always
    29 label *label30
-    * label *label31
    30 label *label32
-    * label *label35
    31 set :d.0:n 3
    32 call *label0 :d.0*retaddr :d.0*retval
    33 jump *label36 notEqual :d.0*retval 3
    34 jump *label40 always
    35 label *label36
-    * label *label37
    36 print 3
    37 print "|"
    38 set :d.0:n 3
 
    40 jump *label38 notEqual :d.0*retval 12
    41 jump *label4 always
    42 label *label38
-    * label *label39
    43 label *label40
    44 set :d.0:n 5
    45 call *label0 :d.0*retaddr :d.0*retval
    46 set :test.0:i :d.0*retval
-    * label *label43
    47 set :d.0:n :d.0*retval
    48 call *label0 :d.0*retaddr :d.0*retval
    49 jump *label44 notEqual :d.0*retval 3
    50 jump *label48 always
    51 label *label44
-    * label *label45
    52 print :test.0:i
    53 print "|"
    54 set :d.0:n :test.0:i
 
    56 jump *label46 notEqual :d.0*retval 12
    57 jump *label4 always
    58 label *label46
-    * label *label47
    59 label *label48
-    * label *label51
    60 set :d.0:n 8
    61 call *label0 :d.0*retaddr :d.0*retval
    62 jump *label52 notEqual :d.0*retval 3
    63 jump *label56 always
    64 label *label52
-    * label *label53
    65 print 8
    66 print "|"
    67 set :d.0:n 8
 
    69 jump *label54 notEqual :d.0*retval 12
    70 jump *label4 always
    71 label *label54
-    * label *label55
    72 label *label56
    73 set :d.0:n 12
    74 call *label0 :d.0*retaddr :d.0*retval
    75 set :test.0:i :d.0*retval
-    * label *label59
    76 set :d.0:n :d.0*retval
    77 call *label0 :d.0*retaddr :d.0*retval
    78 jump *label60 notEqual :d.0*retval 3
    79 jump *label64 always
    80 label *label60
-    * label *label61
    81 print :test.0:i
    82 print "|"
    83 set :d.0:n :test.0:i
 
    85 jump *label62 notEqual :d.0*retval 12
    86 jump *label4 always
    87 label *label62
-    * label *label63
    88 label *label64
-    * label *label67
    89 set :d.0:n 15
    90 call *label0 :d.0*retaddr :d.0*retval
    91 jump *label68 notEqual :d.0*retval 3
    92 jump *label72 always
    93 label *label68
-    * label *label69
    94 print 15
    95 print "|"
    96 set :d.0:n 15
    97 call *label0 :d.0*retaddr :d.0*retval
-    * label *label70
-    * label *label71
    98 label *label72
-    * label *label13
    99 label *label4
-    * label *label1
   100 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
   101 stop
   102 end
   103 label *label0
   104 # "Function: noinline def d(in n)"
   105 set :d.0*retval :d.0:n
-    * label *label18
   106 return :d.0*retaddr
   107 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-13 instructions):
 
     1 # "Function: def test()"
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label20 notEqual :d.0*retval 3
-    * jump *label24 always
+    4 jump *label24 equal :d.0*retval 3
     5 label *label20
     6 print 1
     7 print "|"
     8 set :d.0:n 1
     9 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label22 notEqual :d.0*retval 12
-    * jump *label4 always
+   10 jump *label4 equal :d.0*retval 12
    11 label *label22
    12 label *label24
    13 set :d.0:n 2
 
    15 set :test.0:i :d.0*retval
    16 set :d.0:n :d.0*retval
    17 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label28 notEqual :d.0*retval 3
-    * jump *label32 always
+   18 jump *label32 equal :d.0*retval 3
    19 label *label28
    20 print :test.0:i
    21 print "|"
    22 set :d.0:n :test.0:i
    23 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label30 notEqual :d.0*retval 12
-    * jump *label4 always
+   24 jump *label4 equal :d.0*retval 12
    25 label *label30
    26 label *label32
    27 set :d.0:n 3
    28 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label36 notEqual :d.0*retval 3
-    * jump *label40 always
+   29 jump *label40 equal :d.0*retval 3
    30 label *label36
    31 print 3
    32 print "|"
    33 set :d.0:n 3
    34 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label38 notEqual :d.0*retval 12
-    * jump *label4 always
+   35 jump *label4 equal :d.0*retval 12
    36 label *label38
    37 label *label40
    38 set :d.0:n 5
 
    40 set :test.0:i :d.0*retval
    41 set :d.0:n :d.0*retval
    42 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label44 notEqual :d.0*retval 3
-    * jump *label48 always
+   43 jump *label48 equal :d.0*retval 3
    44 label *label44
    45 print :test.0:i
    46 print "|"
    47 set :d.0:n :test.0:i
    48 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label46 notEqual :d.0*retval 12
-    * jump *label4 always
+   49 jump *label4 equal :d.0*retval 12
    50 label *label46
    51 label *label48
    52 set :d.0:n 8
    53 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label52 notEqual :d.0*retval 3
-    * jump *label56 always
+   54 jump *label56 equal :d.0*retval 3
    55 label *label52
    56 print 8
    57 print "|"
    58 set :d.0:n 8
    59 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label54 notEqual :d.0*retval 12
-    * jump *label4 always
+   60 jump *label4 equal :d.0*retval 12
    61 label *label54
    62 label *label56
    63 set :d.0:n 12
 
    65 set :test.0:i :d.0*retval
    66 set :d.0:n :d.0*retval
    67 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label60 notEqual :d.0*retval 3
-    * jump *label64 always
+   68 jump *label64 equal :d.0*retval 3
    69 label *label60
    70 print :test.0:i
    71 print "|"
    72 set :d.0:n :test.0:i
    73 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label62 notEqual :d.0*retval 12
-    * jump *label4 always
+   74 jump *label4 equal :d.0*retval 12
    75 label *label62
    76 label *label64
    77 set :d.0:n 15
    78 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label68 notEqual :d.0*retval 3
-    * jump *label72 always
+   79 jump *label72 equal :d.0*retval 3
    80 label *label68
    81 print 15
    82 print "|"

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
     4 jump *label24 equal :d.0*retval 3
-    * label *label20
     5 print 1
     6 print "|"
     7 set :d.0:n 1
     8 call *label0 :d.0*retaddr :d.0*retval
     9 jump *label4 equal :d.0*retval 12
-    * label *label22
    10 label *label24
    11 set :d.0:n 2
    12 call *label0 :d.0*retaddr :d.0*retval
 
    14 set :d.0:n :d.0*retval
    15 call *label0 :d.0*retaddr :d.0*retval
    16 jump *label32 equal :d.0*retval 3
-    * label *label28
    17 print :test.0:i
    18 print "|"
    19 set :d.0:n :test.0:i
    20 call *label0 :d.0*retaddr :d.0*retval
    21 jump *label4 equal :d.0*retval 12
-    * label *label30
    22 label *label32
    23 set :d.0:n 3
    24 call *label0 :d.0*retaddr :d.0*retval
    25 jump *label40 equal :d.0*retval 3
-    * label *label36
    26 print 3
    27 print "|"
    28 set :d.0:n 3
    29 call *label0 :d.0*retaddr :d.0*retval
    30 jump *label4 equal :d.0*retval 12
-    * label *label38
    31 label *label40
    32 set :d.0:n 5
    33 call *label0 :d.0*retaddr :d.0*retval
 
    35 set :d.0:n :d.0*retval
    36 call *label0 :d.0*retaddr :d.0*retval
    37 jump *label48 equal :d.0*retval 3
-    * label *label44
    38 print :test.0:i
    39 print "|"
    40 set :d.0:n :test.0:i
    41 call *label0 :d.0*retaddr :d.0*retval
    42 jump *label4 equal :d.0*retval 12
-    * label *label46
    43 label *label48
    44 set :d.0:n 8
    45 call *label0 :d.0*retaddr :d.0*retval
    46 jump *label56 equal :d.0*retval 3
-    * label *label52
    47 print 8
    48 print "|"
    49 set :d.0:n 8
    50 call *label0 :d.0*retaddr :d.0*retval
    51 jump *label4 equal :d.0*retval 12
-    * label *label54
    52 label *label56
    53 set :d.0:n 12
    54 call *label0 :d.0*retaddr :d.0*retval
 
    56 set :d.0:n :d.0*retval
    57 call *label0 :d.0*retaddr :d.0*retval
    58 jump *label64 equal :d.0*retval 3
-    * label *label60
    59 print :test.0:i
    60 print "|"
    61 set :d.0:n :test.0:i
    62 call *label0 :d.0*retaddr :d.0*retval
    63 jump *label4 equal :d.0*retval 12
-    * label *label62
    64 label *label64
    65 set :d.0:n 15
    66 call *label0 :d.0*retaddr :d.0*retval
    67 jump *label72 equal :d.0*retval 3
-    * label *label68
    68 print 15
    69 print "|"
    70 set :d.0:n 15

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-1 instructions):
 
    78 # "Function: noinline def d(in n)"
    79 set :d.0*retval :d.0:n
    80 return :d.0*retaddr
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-4 instructions):
 
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
     4 jump *label24 equal :d.0*retval 3
-    * print 1
-    * print "|"
+    5 print "1|"
     6 set :d.0:n 1
     7 call *label0 :d.0*retaddr :d.0*retval
     8 jump *label4 equal :d.0*retval 12
 
    22 set :d.0:n 3
    23 call *label0 :d.0*retaddr :d.0*retval
    24 jump *label40 equal :d.0*retval 3
-    * print 3
-    * print "|"
+   25 print "3|"
    26 set :d.0:n 3
    27 call *label0 :d.0*retaddr :d.0*retval
    28 jump *label4 equal :d.0*retval 12
 
    42 set :d.0:n 8
    43 call *label0 :d.0*retaddr :d.0*retval
    44 jump *label56 equal :d.0*retval 3
-    * print 8
-    * print "|"
+   45 print "8|"
    46 set :d.0:n 8
    47 call *label0 :d.0*retaddr :d.0*retval
    48 jump *label4 equal :d.0*retval 12
 
    62 set :d.0:n 15
    63 call *label0 :d.0*retaddr :d.0*retval
    64 jump *label72 equal :d.0*retval 3
-    * print 15
-    * print "|"
+   65 print "15|"
    66 set :d.0:n 15
    67 call *label0 :d.0*retaddr :d.0*retval
    68 label *label72

Final code before resolving virtual instructions:

assertflush
# "Function: def test()"
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label24 equal :d.0*retval 3
print "1|"
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label24
set :d.0:n 2
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label32 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label32
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label40 equal :d.0*retval 3
print "3|"
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label40
set :d.0:n 5
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label48 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label48
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label56 equal :d.0*retval 3
print "8|"
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label56
set :d.0:n 12
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label64 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label64
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
jump *label72 equal :d.0*retval 3
print "15|"
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
label *label72
label *label4
assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
stop
end
label *label0
# "Function: noinline def d(in n)"
set :d.0*retval :d.0:n
return :d.0*retaddr
