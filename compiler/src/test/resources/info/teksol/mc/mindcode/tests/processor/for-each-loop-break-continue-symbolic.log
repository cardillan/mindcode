    65 instructions before optimizations.
     5 instructions eliminated by Temp Variables Elimination.
     5 instructions eliminated by Dead Code Elimination (3 iterations).
     2 instructions eliminated by Jump Optimization (4 iterations).
     4 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
    11 instructions eliminated by Data Flow Optimization (6 iterations).
    63 instructions added by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
    13 instructions eliminated by Jump Straightening (4 iterations).
     1 instructions eliminated by Unreachable Code Elimination.
     4 instructions eliminated by Print Merging.
    83 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 949):
  * Unroll iteration loop at line 4:5                            cost    57, benefit       27.0, efficiency        0.5 (+52 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-5 instructions):
 
    43 op equal *tmp6 *tmp5 3
    44 jump *label14 equal *tmp6 false
    45 jump *label3 always
-    * set *tmp7 null
    46 jump *label15 always
    47 label *label14
-    * set *tmp7 null
    48 label *label15
    49 print :test.0:i
    50 print "|"
 
    54 op equal *tmp9 *tmp8 12
    55 jump *label16 equal *tmp9 false
    56 jump *label4 always
-    * set *tmp10 null
    57 jump *label17 always
    58 label *label16
-    * set *tmp10 null
    59 label *label17
    60 label *label3
    61 multijump *tmp1 0 0
    62 multilabel *label11
    63 label *label13
    64 label *label4
-    * set *tmp0 null
    65 label *label1
    66 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
    67 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-5 instructions):
 
     4 multilabel *label5
     5 set :d.0:n 2
     6 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp2 :d.0*retval
-    * set :test.0:i *tmp2
+    7 set :test.0:i :d.0*retval
     8 op add *tmp1 @counter 1
     9 jump *label2 always
    10 multilabel *label6
 
    14 multilabel *label7
    15 set :d.0:n 5
    16 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp3 :d.0*retval
-    * set :test.0:i *tmp3
+   17 set :test.0:i :d.0*retval
    18 op add *tmp1 @counter 1
    19 jump *label2 always
    20 multilabel *label8
 
    24 multilabel *label9
    25 set :d.0:n 12
    26 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp4 :d.0*retval
-    * set :test.0:i *tmp4
+   27 set :test.0:i :d.0*retval
    28 op add *tmp1 @counter 1
    29 jump *label2 always
    30 multilabel *label10
 
    36 label *label2
    37 set :d.0:n :test.0:i
    38 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp5 :d.0*retval
-    * op equal *tmp6 *tmp5 3
+   39 op equal *tmp6 :d.0*retval 3
    40 jump *label14 equal *tmp6 false
    41 jump *label3 always
    42 jump *label15 always
 
    46 print "|"
    47 set :d.0:n :test.0:i
    48 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp8 :d.0*retval
-    * op equal *tmp9 *tmp8 12
+   49 op equal *tmp9 :d.0*retval 12
    50 jump *label16 equal *tmp9 false
    51 jump *label4 always
    52 jump *label17 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    36 label *label2
    37 set :d.0:n :test.0:i
    38 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp6 :d.0*retval 3
-    * jump *label14 equal *tmp6 false
+   39 jump *label14 notEqual :d.0*retval 3
    40 jump *label3 always
    41 jump *label15 always
    42 label *label14
 
    45 print "|"
    46 set :d.0:n :test.0:i
    47 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp9 :d.0*retval 12
-    * jump *label16 equal *tmp9 false
+   48 jump *label16 notEqual :d.0*retval 12
    49 jump *label4 always
    50 jump *label17 always
    51 label *label16

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    38 call *label0 :d.0*retaddr :d.0*retval
    39 jump *label14 notEqual :d.0*retval 3
    40 jump *label3 always
-    * jump *label15 always
    41 label *label14
    42 label *label15
    43 print :test.0:i
 
    46 call *label0 :d.0*retaddr :d.0*retval
    47 jump *label16 notEqual :d.0*retval 12
    48 jump *label4 always
-    * jump *label17 always
    49 label *label16
    50 label *label17
    51 label *label3

Modifications by Unroll iteration loop at line 4:5 (+63 instructions):
     0 assertflush
-    * set :test.0:i 1
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label5
-    * set :d.0:n 2
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label6
-    * set :test.0:i 3
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label7
-    * set :d.0:n 5
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label8
-    * set :test.0:i 8
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label9
-    * set :d.0:n 12
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label10
-    * set :test.0:i 15
-    * op add *tmp1 @counter 1
-    * jump *label2 always
-    * multilabel *label12
-    * jump *label13 always
-    * label *label2
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label14 notEqual :d.0*retval 3
-    * jump *label3 always
-    * label *label14
-    * label *label15
-    * print :test.0:i
-    * print "|"
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label16 notEqual :d.0*retval 12
-    * jump *label4 always
-    * label *label16
-    * label *label17
-    * label *label3
-    * multijump *tmp1 0 0
-    * multilabel *label11
-    * label *label13
-    * label *label4
+    1 set :test.0:i 1
+    2 op add *tmp1 @counter 1
+    3 label *label19
+    4 set :d.0:n :test.0:i
+    5 call *label0 :d.0*retaddr :d.0*retval
+    6 jump *label20 notEqual :d.0*retval 3
+    7 jump *label24 always
+    8 label *label20
+    9 label *label21
+   10 print :test.0:i
+   11 print "|"
+   12 set :d.0:n :test.0:i
+   13 call *label0 :d.0*retaddr :d.0*retval
+   14 jump *label22 notEqual :d.0*retval 12
+   15 jump *label4 always
+   16 label *label22
+   17 label *label23
+   18 label *label24
+   19 set :d.0:n 2
+   20 call *label0 :d.0*retaddr :d.0*retval
+   21 set :test.0:i :d.0*retval
+   22 op add *tmp1 @counter 1
+   23 label *label27
+   24 set :d.0:n :test.0:i
+   25 call *label0 :d.0*retaddr :d.0*retval
+   26 jump *label28 notEqual :d.0*retval 3
+   27 jump *label32 always
+   28 label *label28
+   29 label *label29
+   30 print :test.0:i
+   31 print "|"
+   32 set :d.0:n :test.0:i
+   33 call *label0 :d.0*retaddr :d.0*retval
+   34 jump *label30 notEqual :d.0*retval 12
+   35 jump *label4 always
+   36 label *label30
+   37 label *label31
+   38 label *label32
+   39 set :test.0:i 3
+   40 op add *tmp1 @counter 1
+   41 label *label35
+   42 set :d.0:n :test.0:i
+   43 call *label0 :d.0*retaddr :d.0*retval
+   44 jump *label36 notEqual :d.0*retval 3
+   45 jump *label40 always
+   46 label *label36
+   47 label *label37
+   48 print :test.0:i
+   49 print "|"
+   50 set :d.0:n :test.0:i
+   51 call *label0 :d.0*retaddr :d.0*retval
+   52 jump *label38 notEqual :d.0*retval 12
+   53 jump *label4 always
+   54 label *label38
+   55 label *label39
+   56 label *label40
+   57 set :d.0:n 5
+   58 call *label0 :d.0*retaddr :d.0*retval
+   59 set :test.0:i :d.0*retval
+   60 op add *tmp1 @counter 1
+   61 label *label43
+   62 set :d.0:n :test.0:i
+   63 call *label0 :d.0*retaddr :d.0*retval
+   64 jump *label44 notEqual :d.0*retval 3
+   65 jump *label48 always
+   66 label *label44
+   67 label *label45
+   68 print :test.0:i
+   69 print "|"
+   70 set :d.0:n :test.0:i
+   71 call *label0 :d.0*retaddr :d.0*retval
+   72 jump *label46 notEqual :d.0*retval 12
+   73 jump *label4 always
+   74 label *label46
+   75 label *label47
+   76 label *label48
+   77 set :test.0:i 8
+   78 op add *tmp1 @counter 1
+   79 label *label51
+   80 set :d.0:n :test.0:i
+   81 call *label0 :d.0*retaddr :d.0*retval
+   82 jump *label52 notEqual :d.0*retval 3
+   83 jump *label56 always
+   84 label *label52
+   85 label *label53
+   86 print :test.0:i
+   87 print "|"
+   88 set :d.0:n :test.0:i
+   89 call *label0 :d.0*retaddr :d.0*retval
+   90 jump *label54 notEqual :d.0*retval 12
+   91 jump *label4 always
+   92 label *label54
+   93 label *label55
+   94 label *label56
+   95 set :d.0:n 12
+   96 call *label0 :d.0*retaddr :d.0*retval
+   97 set :test.0:i :d.0*retval
+   98 op add *tmp1 @counter 1
+   99 label *label59
+  100 set :d.0:n :test.0:i
+  101 call *label0 :d.0*retaddr :d.0*retval
+  102 jump *label60 notEqual :d.0*retval 3
+  103 jump *label64 always
+  104 label *label60
+  105 label *label61
+  106 print :test.0:i
+  107 print "|"
+  108 set :d.0:n :test.0:i
+  109 call *label0 :d.0*retaddr :d.0*retval
+  110 jump *label62 notEqual :d.0*retval 12
+  111 jump *label4 always
+  112 label *label62
+  113 label *label63
+  114 label *label64
+  115 set :test.0:i 15
+  116 op add *tmp1 @counter 1
+  117 label *label67
+  118 set :d.0:n :test.0:i
+  119 call *label0 :d.0*retaddr :d.0*retval
+  120 jump *label68 notEqual :d.0*retval 3
+  121 jump *label72 always
+  122 label *label68
+  123 label *label69
+  124 print :test.0:i
+  125 print "|"
+  126 set :d.0:n :test.0:i
+  127 call *label0 :d.0*retaddr :d.0*retval
+  128 jump *label70 notEqual :d.0*retval 12
+  129 jump *label4 always
+  130 label *label70
+  131 label *label71
+  132 label *label72
+  133 label *label13
+  134 label *label4
   135 label *label1
   136 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
   137 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-7 instructions):
     0 assertflush
     1 set :test.0:i 1
-    * op add *tmp1 @counter 1
     2 label *label19
-    * set :d.0:n :test.0:i
+    3 set :d.0:n 1
     4 call *label0 :d.0*retaddr :d.0*retval
     5 jump *label20 notEqual :d.0*retval 3
     6 jump *label24 always
     7 label *label20
     8 label *label21
-    * print :test.0:i
+    9 print 1
    10 print "|"
-    * set :d.0:n :test.0:i
+   11 set :d.0:n 1
    12 call *label0 :d.0*retaddr :d.0*retval
    13 jump *label22 notEqual :d.0*retval 12
    14 jump *label4 always
 
    18 set :d.0:n 2
    19 call *label0 :d.0*retaddr :d.0*retval
    20 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    21 label *label27
-    * set :d.0:n :test.0:i
+   22 set :d.0:n :d.0*retval
    23 call *label0 :d.0*retaddr :d.0*retval
    24 jump *label28 notEqual :d.0*retval 3
    25 jump *label32 always
 
    35 label *label31
    36 label *label32
    37 set :test.0:i 3
-    * op add *tmp1 @counter 1
    38 label *label35
-    * set :d.0:n :test.0:i
+   39 set :d.0:n 3
    40 call *label0 :d.0*retaddr :d.0*retval
    41 jump *label36 notEqual :d.0*retval 3
    42 jump *label40 always
    43 label *label36
    44 label *label37
-    * print :test.0:i
+   45 print 3
    46 print "|"
-    * set :d.0:n :test.0:i
+   47 set :d.0:n 3
    48 call *label0 :d.0*retaddr :d.0*retval
    49 jump *label38 notEqual :d.0*retval 12
    50 jump *label4 always
 
    54 set :d.0:n 5
    55 call *label0 :d.0*retaddr :d.0*retval
    56 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    57 label *label43
-    * set :d.0:n :test.0:i
+   58 set :d.0:n :d.0*retval
    59 call *label0 :d.0*retaddr :d.0*retval
    60 jump *label44 notEqual :d.0*retval 3
    61 jump *label48 always
 
    71 label *label47
    72 label *label48
    73 set :test.0:i 8
-    * op add *tmp1 @counter 1
    74 label *label51
-    * set :d.0:n :test.0:i
+   75 set :d.0:n 8
    76 call *label0 :d.0*retaddr :d.0*retval
    77 jump *label52 notEqual :d.0*retval 3
    78 jump *label56 always
    79 label *label52
    80 label *label53
-    * print :test.0:i
+   81 print 8
    82 print "|"
-    * set :d.0:n :test.0:i
+   83 set :d.0:n 8
    84 call *label0 :d.0*retaddr :d.0*retval
    85 jump *label54 notEqual :d.0*retval 12
    86 jump *label4 always
 
    90 set :d.0:n 12
    91 call *label0 :d.0*retaddr :d.0*retval
    92 set :test.0:i :d.0*retval
-    * op add *tmp1 @counter 1
    93 label *label59
-    * set :d.0:n :test.0:i
+   94 set :d.0:n :d.0*retval
    95 call *label0 :d.0*retaddr :d.0*retval
    96 jump *label60 notEqual :d.0*retval 3
    97 jump *label64 always
 
   107 label *label63
   108 label *label64
   109 set :test.0:i 15
-    * op add *tmp1 @counter 1
   110 label *label67
-    * set :d.0:n :test.0:i
+  111 set :d.0:n 15
   112 call *label0 :d.0*retaddr :d.0*retval
   113 jump *label68 notEqual :d.0*retval 3
   114 jump *label72 always
   115 label *label68
   116 label *label69
-    * print :test.0:i
+  117 print 15
   118 print "|"
-    * set :d.0:n :test.0:i
+  119 set :d.0:n 15
   120 call *label0 :d.0*retaddr :d.0*retval
   121 jump *label70 notEqual :d.0*retval 12
   122 jump *label4 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
     0 assertflush
-    * set :test.0:i 1
     1 label *label19
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
 
    33 label *label30
    34 label *label31
    35 label *label32
-    * set :test.0:i 3
    36 label *label35
    37 set :d.0:n 3
    38 call *label0 :d.0*retaddr :d.0*retval
 
    68 label *label46
    69 label *label47
    70 label *label48
-    * set :test.0:i 8
    71 label *label51
    72 set :d.0:n 8
    73 call *label0 :d.0*retaddr :d.0*retval
 
   103 label *label62
   104 label *label63
   105 label *label64
-    * set :test.0:i 15
   106 label *label67
   107 set :d.0:n 15
   108 call *label0 :d.0*retaddr :d.0*retval

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
   115 set :d.0:n 15
   116 call *label0 :d.0*retaddr :d.0*retval
   117 jump *label70 notEqual :d.0*retval 12
-    * jump *label4 always
   118 label *label70
   119 label *label71
   120 label *label72

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 2 (-1 instructions):
 
   114 print "|"
   115 set :d.0:n 15
   116 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label70 notEqual :d.0*retval 12
   117 label *label70
   118 label *label71
   119 label *label72

Modifications by Final phase, Jump Straightening, iteration 1 (-13 instructions):
 
     1 label *label19
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label20 notEqual :d.0*retval 3
-    * jump *label24 always
+    4 jump *label24 equal :d.0*retval 3
     5 label *label20
     6 label *label21
     7 print 1
     8 print "|"
     9 set :d.0:n 1
    10 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label22 notEqual :d.0*retval 12
-    * jump *label4 always
+   11 jump *label4 equal :d.0*retval 12
    12 label *label22
    13 label *label23
    14 label *label24
 
    18 label *label27
    19 set :d.0:n :d.0*retval
    20 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label28 notEqual :d.0*retval 3
-    * jump *label32 always
+   21 jump *label32 equal :d.0*retval 3
    22 label *label28
    23 label *label29
    24 print :test.0:i
    25 print "|"
    26 set :d.0:n :test.0:i
    27 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label30 notEqual :d.0*retval 12
-    * jump *label4 always
+   28 jump *label4 equal :d.0*retval 12
    29 label *label30
    30 label *label31
    31 label *label32
    32 label *label35
    33 set :d.0:n 3
    34 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label36 notEqual :d.0*retval 3
-    * jump *label40 always
+   35 jump *label40 equal :d.0*retval 3
    36 label *label36
    37 label *label37
    38 print 3
    39 print "|"
    40 set :d.0:n 3
    41 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label38 notEqual :d.0*retval 12
-    * jump *label4 always
+   42 jump *label4 equal :d.0*retval 12
    43 label *label38
    44 label *label39
    45 label *label40
 
    49 label *label43
    50 set :d.0:n :d.0*retval
    51 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label44 notEqual :d.0*retval 3
-    * jump *label48 always
+   52 jump *label48 equal :d.0*retval 3
    53 label *label44
    54 label *label45
    55 print :test.0:i
    56 print "|"
    57 set :d.0:n :test.0:i
    58 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label46 notEqual :d.0*retval 12
-    * jump *label4 always
+   59 jump *label4 equal :d.0*retval 12
    60 label *label46
    61 label *label47
    62 label *label48
    63 label *label51
    64 set :d.0:n 8
    65 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label52 notEqual :d.0*retval 3
-    * jump *label56 always
+   66 jump *label56 equal :d.0*retval 3
    67 label *label52
    68 label *label53
    69 print 8
    70 print "|"
    71 set :d.0:n 8
    72 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label54 notEqual :d.0*retval 12
-    * jump *label4 always
+   73 jump *label4 equal :d.0*retval 12
    74 label *label54
    75 label *label55
    76 label *label56
 
    80 label *label59
    81 set :d.0:n :d.0*retval
    82 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label60 notEqual :d.0*retval 3
-    * jump *label64 always
+   83 jump *label64 equal :d.0*retval 3
    84 label *label60
    85 label *label61
    86 print :test.0:i
    87 print "|"
    88 set :d.0:n :test.0:i
    89 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label62 notEqual :d.0*retval 12
-    * jump *label4 always
+   90 jump *label4 equal :d.0*retval 12
    91 label *label62
    92 label *label63
    93 label *label64
    94 label *label67
    95 set :d.0:n 15
    96 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label68 notEqual :d.0*retval 3
-    * jump *label72 always
+   97 jump *label72 equal :d.0*retval 3
    98 label *label68
    99 label *label69
   100 print 15

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-1 instructions):
 
   114 set :d.0*retval :d.0:n
   115 label *label18
   116 return :d.0*retaddr
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-4 instructions):
 
     4 jump *label24 equal :d.0*retval 3
     5 label *label20
     6 label *label21
-    * print 1
-    * print "|"
+    7 print "1|"
     8 set :d.0:n 1
     9 call *label0 :d.0*retaddr :d.0*retval
    10 jump *label4 equal :d.0*retval 12
 
    34 jump *label40 equal :d.0*retval 3
    35 label *label36
    36 label *label37
-    * print 3
-    * print "|"
+   37 print "3|"
    38 set :d.0:n 3
    39 call *label0 :d.0*retaddr :d.0*retval
    40 jump *label4 equal :d.0*retval 12
 
    64 jump *label56 equal :d.0*retval 3
    65 label *label52
    66 label *label53
-    * print 8
-    * print "|"
+   67 print "8|"
    68 set :d.0:n 8
    69 call *label0 :d.0*retaddr :d.0*retval
    70 jump *label4 equal :d.0*retval 12
 
    94 jump *label72 equal :d.0*retval 3
    95 label *label68
    96 label *label69
-    * print 15
-    * print "|"
+   97 print "15|"
    98 set :d.0:n 15
    99 call *label0 :d.0*retaddr :d.0*retval
   100 label *label70

Final code before resolving virtual instructions:

assertflush
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label24 equal :d.0*retval 3
print "1|"
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label24
set :d.0:n 2
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label32 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label32
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label40 equal :d.0*retval 3
print "3|"
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label40
set :d.0:n 5
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label48 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label48
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label56 equal :d.0*retval 3
print "8|"
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label56
set :d.0:n 12
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label64 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label64
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
jump *label72 equal :d.0*retval 3
print "15|"
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
label *label72
label *label4
assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
stop
end
label *label0
set :d.0*retval :d.0:n
return :d.0*retaddr
