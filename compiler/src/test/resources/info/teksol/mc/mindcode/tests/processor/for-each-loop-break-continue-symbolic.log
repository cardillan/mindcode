    63 instructions before optimizations.
     5 instructions eliminated by Temp Variables Elimination.
     5 instructions eliminated by Dead Code Elimination (3 iterations).
     2 instructions eliminated by Jump Optimization (4 iterations).
     4 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     4 instructions eliminated by Data Flow Optimization (6 iterations).
    58 instructions added by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
    13 instructions eliminated by Jump Straightening (4 iterations).
     1 instructions eliminated by Unreachable Code Elimination.
     4 instructions eliminated by Print Merging.
    83 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 951):
  * Unroll iteration loop at line 4:5                            cost    57, benefit       27.0, efficiency        0.5 (+54 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-5 instructions):
 
    40 op equal *tmp6 *tmp5 3
    41 jump *label12 equal *tmp6 false
    42 jump *label3 always
-    * set *tmp7 null
    43 jump *label13 always
    44 label *label12
-    * set *tmp7 null
    45 label *label13
    46 print :test.0:i
    47 print "|"
 
    51 op equal *tmp9 *tmp8 12
    52 jump *label14 equal *tmp9 false
    53 jump *label4 always
-    * set *tmp10 null
    54 jump *label15 always
    55 label *label14
-    * set *tmp10 null
    56 label *label15
    57 label *label3
    58 multijump *tmp1 0 0
    59 multilabel *label11
    60 label *label4
-    * set *tmp0 null
    61 label *label1
    62 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
    63 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-5 instructions):
 
     5 setaddr *tmp1 *label6
     6 set :d.0:n 2
     7 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp2 :d.0*retval
-    * set :test.0:i *tmp2
+    8 set :test.0:i :d.0*retval
     9 jump *label2 always
    10 multilabel *label6
    11 setaddr *tmp1 *label7
 
    15 setaddr *tmp1 *label8
    16 set :d.0:n 5
    17 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp3 :d.0*retval
-    * set :test.0:i *tmp3
+   18 set :test.0:i :d.0*retval
    19 jump *label2 always
    20 multilabel *label8
    21 setaddr *tmp1 *label9
 
    25 setaddr *tmp1 *label10
    26 set :d.0:n 12
    27 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp4 :d.0*retval
-    * set :test.0:i *tmp4
+   28 set :test.0:i :d.0*retval
    29 jump *label2 always
    30 multilabel *label10
    31 setaddr *tmp1 *label11
 
    33 label *label2
    34 set :d.0:n :test.0:i
    35 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp5 :d.0*retval
-    * op equal *tmp6 *tmp5 3
+   36 op equal *tmp6 :d.0*retval 3
    37 jump *label12 equal *tmp6 false
    38 jump *label3 always
    39 jump *label13 always
 
    43 print "|"
    44 set :d.0:n :test.0:i
    45 call *label0 :d.0*retaddr :d.0*retval
-    * set *tmp8 :d.0*retval
-    * op equal *tmp9 *tmp8 12
+   46 op equal *tmp9 :d.0*retval 12
    47 jump *label14 equal *tmp9 false
    48 jump *label4 always
    49 jump *label15 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    33 label *label2
    34 set :d.0:n :test.0:i
    35 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp6 :d.0*retval 3
-    * jump *label12 equal *tmp6 false
+   36 jump *label12 notEqual :d.0*retval 3
    37 jump *label3 always
    38 jump *label13 always
    39 label *label12
 
    42 print "|"
    43 set :d.0:n :test.0:i
    44 call *label0 :d.0*retaddr :d.0*retval
-    * op equal *tmp9 :d.0*retval 12
-    * jump *label14 equal *tmp9 false
+   45 jump *label14 notEqual :d.0*retval 12
    46 jump *label4 always
    47 jump *label15 always
    48 label *label14

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    35 call *label0 :d.0*retaddr :d.0*retval
    36 jump *label12 notEqual :d.0*retval 3
    37 jump *label3 always
-    * jump *label13 always
    38 label *label12
    39 label *label13
    40 print :test.0:i
 
    43 call *label0 :d.0*retaddr :d.0*retval
    44 jump *label14 notEqual :d.0*retval 12
    45 jump *label4 always
-    * jump *label15 always
    46 label *label14
    47 label *label15
    48 label *label3

Modifications by Unroll iteration loop at line 4:5 (+58 instructions):
     0 assertflush
-    * setaddr *tmp1 *label5
-    * set :test.0:i 1
-    * jump *label2 always
-    * multilabel *label5
-    * setaddr *tmp1 *label6
-    * set :d.0:n 2
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * jump *label2 always
-    * multilabel *label6
-    * setaddr *tmp1 *label7
-    * set :test.0:i 3
-    * jump *label2 always
-    * multilabel *label7
-    * setaddr *tmp1 *label8
-    * set :d.0:n 5
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * jump *label2 always
-    * multilabel *label8
-    * setaddr *tmp1 *label9
-    * set :test.0:i 8
-    * jump *label2 always
-    * multilabel *label9
-    * setaddr *tmp1 *label10
-    * set :d.0:n 12
-    * call *label0 :d.0*retaddr :d.0*retval
-    * set :test.0:i :d.0*retval
-    * jump *label2 always
-    * multilabel *label10
-    * setaddr *tmp1 *label11
-    * set :test.0:i 15
-    * label *label2
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label12 notEqual :d.0*retval 3
-    * jump *label3 always
-    * label *label12
-    * label *label13
-    * print :test.0:i
-    * print "|"
-    * set :d.0:n :test.0:i
-    * call *label0 :d.0*retaddr :d.0*retval
-    * jump *label14 notEqual :d.0*retval 12
-    * jump *label4 always
-    * label *label14
-    * label *label15
-    * label *label3
-    * multijump *tmp1 0 0
-    * multilabel *label11
-    * label *label4
+    1 set :test.0:i 1
+    2 label *label17
+    3 set :d.0:n :test.0:i
+    4 call *label0 :d.0*retaddr :d.0*retval
+    5 jump *label18 notEqual :d.0*retval 3
+    6 jump *label22 always
+    7 label *label18
+    8 label *label19
+    9 print :test.0:i
+   10 print "|"
+   11 set :d.0:n :test.0:i
+   12 call *label0 :d.0*retaddr :d.0*retval
+   13 jump *label20 notEqual :d.0*retval 12
+   14 jump *label4 always
+   15 label *label20
+   16 label *label21
+   17 label *label22
+   18 set :d.0:n 2
+   19 call *label0 :d.0*retaddr :d.0*retval
+   20 set :test.0:i :d.0*retval
+   21 label *label25
+   22 set :d.0:n :test.0:i
+   23 call *label0 :d.0*retaddr :d.0*retval
+   24 jump *label26 notEqual :d.0*retval 3
+   25 jump *label30 always
+   26 label *label26
+   27 label *label27
+   28 print :test.0:i
+   29 print "|"
+   30 set :d.0:n :test.0:i
+   31 call *label0 :d.0*retaddr :d.0*retval
+   32 jump *label28 notEqual :d.0*retval 12
+   33 jump *label4 always
+   34 label *label28
+   35 label *label29
+   36 label *label30
+   37 set :test.0:i 3
+   38 label *label33
+   39 set :d.0:n :test.0:i
+   40 call *label0 :d.0*retaddr :d.0*retval
+   41 jump *label34 notEqual :d.0*retval 3
+   42 jump *label38 always
+   43 label *label34
+   44 label *label35
+   45 print :test.0:i
+   46 print "|"
+   47 set :d.0:n :test.0:i
+   48 call *label0 :d.0*retaddr :d.0*retval
+   49 jump *label36 notEqual :d.0*retval 12
+   50 jump *label4 always
+   51 label *label36
+   52 label *label37
+   53 label *label38
+   54 set :d.0:n 5
+   55 call *label0 :d.0*retaddr :d.0*retval
+   56 set :test.0:i :d.0*retval
+   57 label *label41
+   58 set :d.0:n :test.0:i
+   59 call *label0 :d.0*retaddr :d.0*retval
+   60 jump *label42 notEqual :d.0*retval 3
+   61 jump *label46 always
+   62 label *label42
+   63 label *label43
+   64 print :test.0:i
+   65 print "|"
+   66 set :d.0:n :test.0:i
+   67 call *label0 :d.0*retaddr :d.0*retval
+   68 jump *label44 notEqual :d.0*retval 12
+   69 jump *label4 always
+   70 label *label44
+   71 label *label45
+   72 label *label46
+   73 set :test.0:i 8
+   74 label *label49
+   75 set :d.0:n :test.0:i
+   76 call *label0 :d.0*retaddr :d.0*retval
+   77 jump *label50 notEqual :d.0*retval 3
+   78 jump *label54 always
+   79 label *label50
+   80 label *label51
+   81 print :test.0:i
+   82 print "|"
+   83 set :d.0:n :test.0:i
+   84 call *label0 :d.0*retaddr :d.0*retval
+   85 jump *label52 notEqual :d.0*retval 12
+   86 jump *label4 always
+   87 label *label52
+   88 label *label53
+   89 label *label54
+   90 set :d.0:n 12
+   91 call *label0 :d.0*retaddr :d.0*retval
+   92 set :test.0:i :d.0*retval
+   93 label *label57
+   94 set :d.0:n :test.0:i
+   95 call *label0 :d.0*retaddr :d.0*retval
+   96 jump *label58 notEqual :d.0*retval 3
+   97 jump *label62 always
+   98 label *label58
+   99 label *label59
+  100 print :test.0:i
+  101 print "|"
+  102 set :d.0:n :test.0:i
+  103 call *label0 :d.0*retaddr :d.0*retval
+  104 jump *label60 notEqual :d.0*retval 12
+  105 jump *label4 always
+  106 label *label60
+  107 label *label61
+  108 label *label62
+  109 set :test.0:i 15
+  110 label *label65
+  111 set :d.0:n :test.0:i
+  112 call *label0 :d.0*retaddr :d.0*retval
+  113 jump *label66 notEqual :d.0*retval 3
+  114 jump *label70 always
+  115 label *label66
+  116 label *label67
+  117 print :test.0:i
+  118 print "|"
+  119 set :d.0:n :test.0:i
+  120 call *label0 :d.0*retaddr :d.0*retval
+  121 jump *label68 notEqual :d.0*retval 12
+  122 jump *label4 always
+  123 label *label68
+  124 label *label69
+  125 label *label70
+  126 label *label4
   127 label *label1
   128 assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
   129 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
     0 assertflush
     1 set :test.0:i 1
     2 label *label17
-    * set :d.0:n :test.0:i
+    3 set :d.0:n 1
     4 call *label0 :d.0*retaddr :d.0*retval
     5 jump *label18 notEqual :d.0*retval 3
     6 jump *label22 always
     7 label *label18
     8 label *label19
-    * print :test.0:i
+    9 print 1
    10 print "|"
-    * set :d.0:n :test.0:i
+   11 set :d.0:n 1
    12 call *label0 :d.0*retaddr :d.0*retval
    13 jump *label20 notEqual :d.0*retval 12
    14 jump *label4 always
 
    19 call *label0 :d.0*retaddr :d.0*retval
    20 set :test.0:i :d.0*retval
    21 label *label25
-    * set :d.0:n :test.0:i
+   22 set :d.0:n :d.0*retval
    23 call *label0 :d.0*retaddr :d.0*retval
    24 jump *label26 notEqual :d.0*retval 3
    25 jump *label30 always
 
    36 label *label30
    37 set :test.0:i 3
    38 label *label33
-    * set :d.0:n :test.0:i
+   39 set :d.0:n 3
    40 call *label0 :d.0*retaddr :d.0*retval
    41 jump *label34 notEqual :d.0*retval 3
    42 jump *label38 always
    43 label *label34
    44 label *label35
-    * print :test.0:i
+   45 print 3
    46 print "|"
-    * set :d.0:n :test.0:i
+   47 set :d.0:n 3
    48 call *label0 :d.0*retaddr :d.0*retval
    49 jump *label36 notEqual :d.0*retval 12
    50 jump *label4 always
 
    55 call *label0 :d.0*retaddr :d.0*retval
    56 set :test.0:i :d.0*retval
    57 label *label41
-    * set :d.0:n :test.0:i
+   58 set :d.0:n :d.0*retval
    59 call *label0 :d.0*retaddr :d.0*retval
    60 jump *label42 notEqual :d.0*retval 3
    61 jump *label46 always
 
    72 label *label46
    73 set :test.0:i 8
    74 label *label49
-    * set :d.0:n :test.0:i
+   75 set :d.0:n 8
    76 call *label0 :d.0*retaddr :d.0*retval
    77 jump *label50 notEqual :d.0*retval 3
    78 jump *label54 always
    79 label *label50
    80 label *label51
-    * print :test.0:i
+   81 print 8
    82 print "|"
-    * set :d.0:n :test.0:i
+   83 set :d.0:n 8
    84 call *label0 :d.0*retaddr :d.0*retval
    85 jump *label52 notEqual :d.0*retval 12
    86 jump *label4 always
 
    91 call *label0 :d.0*retaddr :d.0*retval
    92 set :test.0:i :d.0*retval
    93 label *label57
-    * set :d.0:n :test.0:i
+   94 set :d.0:n :d.0*retval
    95 call *label0 :d.0*retaddr :d.0*retval
    96 jump *label58 notEqual :d.0*retval 3
    97 jump *label62 always
 
   108 label *label62
   109 set :test.0:i 15
   110 label *label65
-    * set :d.0:n :test.0:i
+  111 set :d.0:n 15
   112 call *label0 :d.0*retaddr :d.0*retval
   113 jump *label66 notEqual :d.0*retval 3
   114 jump *label70 always
   115 label *label66
   116 label *label67
-    * print :test.0:i
+  117 print 15
   118 print "|"
-    * set :d.0:n :test.0:i
+  119 set :d.0:n 15
   120 call *label0 :d.0*retaddr :d.0*retval
   121 jump *label68 notEqual :d.0*retval 12
   122 jump *label4 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-4 instructions):
     0 assertflush
-    * set :test.0:i 1
     1 label *label17
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
 
    33 label *label28
    34 label *label29
    35 label *label30
-    * set :test.0:i 3
    36 label *label33
    37 set :d.0:n 3
    38 call *label0 :d.0*retaddr :d.0*retval
 
    68 label *label44
    69 label *label45
    70 label *label46
-    * set :test.0:i 8
    71 label *label49
    72 set :d.0:n 8
    73 call *label0 :d.0*retaddr :d.0*retval
 
   103 label *label60
   104 label *label61
   105 label *label62
-    * set :test.0:i 15
   106 label *label65
   107 set :d.0:n 15
   108 call *label0 :d.0*retaddr :d.0*retval

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
   115 set :d.0:n 15
   116 call *label0 :d.0*retaddr :d.0*retval
   117 jump *label68 notEqual :d.0*retval 12
-    * jump *label4 always
   118 label *label68
   119 label *label69
   120 label *label70

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 2 (-1 instructions):
 
   114 print "|"
   115 set :d.0:n 15
   116 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label68 notEqual :d.0*retval 12
   117 label *label68
   118 label *label69
   119 label *label70

Modifications by Final phase, Jump Straightening, iteration 1 (-13 instructions):
 
     1 label *label17
     2 set :d.0:n 1
     3 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label18 notEqual :d.0*retval 3
-    * jump *label22 always
+    4 jump *label22 equal :d.0*retval 3
     5 label *label18
     6 label *label19
     7 print 1
     8 print "|"
     9 set :d.0:n 1
    10 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label20 notEqual :d.0*retval 12
-    * jump *label4 always
+   11 jump *label4 equal :d.0*retval 12
    12 label *label20
    13 label *label21
    14 label *label22
 
    18 label *label25
    19 set :d.0:n :d.0*retval
    20 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label26 notEqual :d.0*retval 3
-    * jump *label30 always
+   21 jump *label30 equal :d.0*retval 3
    22 label *label26
    23 label *label27
    24 print :test.0:i
    25 print "|"
    26 set :d.0:n :test.0:i
    27 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label28 notEqual :d.0*retval 12
-    * jump *label4 always
+   28 jump *label4 equal :d.0*retval 12
    29 label *label28
    30 label *label29
    31 label *label30
    32 label *label33
    33 set :d.0:n 3
    34 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label34 notEqual :d.0*retval 3
-    * jump *label38 always
+   35 jump *label38 equal :d.0*retval 3
    36 label *label34
    37 label *label35
    38 print 3
    39 print "|"
    40 set :d.0:n 3
    41 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label36 notEqual :d.0*retval 12
-    * jump *label4 always
+   42 jump *label4 equal :d.0*retval 12
    43 label *label36
    44 label *label37
    45 label *label38
 
    49 label *label41
    50 set :d.0:n :d.0*retval
    51 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label42 notEqual :d.0*retval 3
-    * jump *label46 always
+   52 jump *label46 equal :d.0*retval 3
    53 label *label42
    54 label *label43
    55 print :test.0:i
    56 print "|"
    57 set :d.0:n :test.0:i
    58 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label44 notEqual :d.0*retval 12
-    * jump *label4 always
+   59 jump *label4 equal :d.0*retval 12
    60 label *label44
    61 label *label45
    62 label *label46
    63 label *label49
    64 set :d.0:n 8
    65 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label50 notEqual :d.0*retval 3
-    * jump *label54 always
+   66 jump *label54 equal :d.0*retval 3
    67 label *label50
    68 label *label51
    69 print 8
    70 print "|"
    71 set :d.0:n 8
    72 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label52 notEqual :d.0*retval 12
-    * jump *label4 always
+   73 jump *label4 equal :d.0*retval 12
    74 label *label52
    75 label *label53
    76 label *label54
 
    80 label *label57
    81 set :d.0:n :d.0*retval
    82 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label58 notEqual :d.0*retval 3
-    * jump *label62 always
+   83 jump *label62 equal :d.0*retval 3
    84 label *label58
    85 label *label59
    86 print :test.0:i
    87 print "|"
    88 set :d.0:n :test.0:i
    89 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label60 notEqual :d.0*retval 12
-    * jump *label4 always
+   90 jump *label4 equal :d.0*retval 12
    91 label *label60
    92 label *label61
    93 label *label62
    94 label *label65
    95 set :d.0:n 15
    96 call *label0 :d.0*retaddr :d.0*retval
-    * jump *label66 notEqual :d.0*retval 3
-    * jump *label70 always
+   97 jump *label70 equal :d.0*retval 3
    98 label *label66
    99 label *label67
   100 print 15

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-1 instructions):
 
   113 set :d.0*retval :d.0:n
   114 label *label16
   115 return :d.0*retaddr
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-4 instructions):
 
     4 jump *label22 equal :d.0*retval 3
     5 label *label18
     6 label *label19
-    * print 1
-    * print "|"
+    7 print "1|"
     8 set :d.0:n 1
     9 call *label0 :d.0*retaddr :d.0*retval
    10 jump *label4 equal :d.0*retval 12
 
    34 jump *label38 equal :d.0*retval 3
    35 label *label34
    36 label *label35
-    * print 3
-    * print "|"
+   37 print "3|"
    38 set :d.0:n 3
    39 call *label0 :d.0*retaddr :d.0*retval
    40 jump *label4 equal :d.0*retval 12
 
    64 jump *label54 equal :d.0*retval 3
    65 label *label50
    66 label *label51
-    * print 8
-    * print "|"
+   67 print "8|"
    68 set :d.0:n 8
    69 call *label0 :d.0*retaddr :d.0*retval
    70 jump *label4 equal :d.0*retval 12
 
    94 jump *label70 equal :d.0*retval 3
    95 label *label66
    96 label *label67
-    * print 15
-    * print "|"
+   97 print "15|"
    98 set :d.0:n 15
    99 call *label0 :d.0*retaddr :d.0*retval
   100 label *label68

Final code before resolving virtual instructions:

assertflush
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label22 equal :d.0*retval 3
print "1|"
set :d.0:n 1
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label22
set :d.0:n 2
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label30 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label30
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label38 equal :d.0*retval 3
print "3|"
set :d.0:n 3
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label38
set :d.0:n 5
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label46 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label46
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label54 equal :d.0*retval 3
print "8|"
set :d.0:n 8
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label54
set :d.0:n 12
call *label0 :d.0*retaddr :d.0*retval
set :test.0:i :d.0*retval
set :d.0:n :d.0*retval
call *label0 :d.0*retaddr :d.0*retval
jump *label62 equal :d.0*retval 3
print :test.0:i
print "|"
set :d.0:n :test.0:i
call *label0 :d.0*retaddr :d.0*retval
jump *label4 equal :d.0*retval 12
label *label62
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
jump *label70 equal :d.0*retval 3
print "15|"
set :d.0:n 15
call *label0 :d.0*retaddr :d.0*retval
label *label70
label *label4
assertprints "1|2|5|8|12|" "iterated-for-loop-break-continue"
stop
end
label *label0
set :d.0*retval :d.0:n
return :d.0*retaddr
