    55 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions eliminated by Data Flow Optimization (5 iterations).
     1 instructions eliminated by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     9 instructions added by Case Switching (3 iterations).
     1 case expressions converted to switched jumps Case Switching.
     1 instructions eliminated by Jump Straightening (4 iterations).
    53 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 55):
  ! Convert case at line 4:5 (segments: 1)                       cost   197, benefit      200.0, efficiency      1.015
  o Convert case at line 4:5 (segments: 3)                       cost    33, benefit      188.5, efficiency      5.713
  * Convert case at line 4:5 (segments: 5)                       cost     9, benefit      195.8, efficiency     21.759 (+9 instructions)
  o Convert case at line 4:5 (segments: 5)                       cost     0, benefit      179.2, efficiency   Infinity

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
+    7 jump *label6 strictEqual :isWall:block null
     8 jump *label5 always
     9 label *label6
    10 set *tmp2 2
    11 jump *label4 always
    12 label *label5
-    * jump *label8 equal *tmp3 @copper-wall
-    * jump *label8 equal *tmp3 @copper-wall-large
-    * jump *label8 equal *tmp3 @titanium-wall
-    * jump *label8 equal *tmp3 @titanium-wall-large
-    * jump *label8 equal *tmp3 @plastanium-wall
-    * jump *label8 equal *tmp3 @plastanium-wall-large
-    * jump *label8 equal *tmp3 @thorium-wall
-    * jump *label8 equal *tmp3 @thorium-wall-large
-    * jump *label8 equal *tmp3 @phase-wall
-    * jump *label8 equal *tmp3 @phase-wall-large
-    * jump *label8 equal *tmp3 @surge-wall
-    * jump *label8 equal *tmp3 @surge-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall
-    * jump *label8 equal *tmp3 @scrap-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall-huge
-    * jump *label8 equal *tmp3 @scrap-wall-gigantic
-    * jump *label8 equal *tmp3 @beryllium-wall
-    * jump *label8 equal *tmp3 @beryllium-wall-large
-    * jump *label8 equal *tmp3 @tungsten-wall
-    * jump *label8 equal *tmp3 @tungsten-wall-large
-    * jump *label8 equal *tmp3 @reinforced-surge-wall
-    * jump *label8 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label8 equal *tmp3 @carbide-wall
-    * jump *label8 equal *tmp3 @carbide-wall-large
+   13 jump *label8 equal :isWall:block @copper-wall
+   14 jump *label8 equal :isWall:block @copper-wall-large
+   15 jump *label8 equal :isWall:block @titanium-wall
+   16 jump *label8 equal :isWall:block @titanium-wall-large
+   17 jump *label8 equal :isWall:block @plastanium-wall
+   18 jump *label8 equal :isWall:block @plastanium-wall-large
+   19 jump *label8 equal :isWall:block @thorium-wall
+   20 jump *label8 equal :isWall:block @thorium-wall-large
+   21 jump *label8 equal :isWall:block @phase-wall
+   22 jump *label8 equal :isWall:block @phase-wall-large
+   23 jump *label8 equal :isWall:block @surge-wall
+   24 jump *label8 equal :isWall:block @surge-wall-large
+   25 jump *label8 equal :isWall:block @scrap-wall
+   26 jump *label8 equal :isWall:block @scrap-wall-large
+   27 jump *label8 equal :isWall:block @scrap-wall-huge
+   28 jump *label8 equal :isWall:block @scrap-wall-gigantic
+   29 jump *label8 equal :isWall:block @beryllium-wall
+   30 jump *label8 equal :isWall:block @beryllium-wall-large
+   31 jump *label8 equal :isWall:block @tungsten-wall
+   32 jump *label8 equal :isWall:block @tungsten-wall-large
+   33 jump *label8 equal :isWall:block @reinforced-surge-wall
+   34 jump *label8 equal :isWall:block @reinforced-surge-wall-large
+   35 jump *label8 equal :isWall:block @carbide-wall
+   36 jump *label8 equal :isWall:block @carbide-wall-large
    37 jump *label7 always
    38 label *label8
    39 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    50 op add *tmp6 *tmp5 :i
    51 op and *tmp7 *tmp6 0xFFFFFFFF
    52 set :hash *tmp7
-    * set *tmp4 :hash
    53 jump *label10 always
    54 label *label9
-    * set *tmp4 null
    55 label *label10
    56 label *label1
    57 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i 0
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 strictEqual :isWall:block null
     7 jump *label5 always
 
    47 print "\n"
    48 op mul *tmp5 :hash 31
    49 op add *tmp6 *tmp5 :i
-    * op and *tmp7 *tmp6 0xFFFFFFFF
-    * set :hash *tmp7
+   50 op and :hash *tmp6 0xFFFFFFFF
    51 jump *label10 always
    52 label *label9
    53 label *label10

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    32 jump *label8 equal :isWall:block @reinforced-surge-wall
    33 jump *label8 equal :isWall:block @reinforced-surge-wall-large
    34 jump *label8 equal :isWall:block @carbide-wall
-    * jump *label8 equal :isWall:block @carbide-wall-large
-    * jump *label7 always
+   35 jump *label7 notEqual :isWall:block @carbide-wall-large
    36 label *label8
    37 set *tmp2 true
    38 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    47 op mul *tmp5 :hash 31
    48 op add *tmp6 *tmp5 :i
    49 op and :hash *tmp6 0xFFFFFFFF
-    * jump *label10 always
    50 label *label9
    51 label *label10
    52 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
+    6 jump *label6 strictEqual :block null
     7 jump *label5 always
     8 label *label6
     9 set *tmp2 2
    10 jump *label4 always
    11 label *label5
-    * jump *label8 equal :isWall:block @copper-wall
-    * jump *label8 equal :isWall:block @copper-wall-large
-    * jump *label8 equal :isWall:block @titanium-wall
-    * jump *label8 equal :isWall:block @titanium-wall-large
-    * jump *label8 equal :isWall:block @plastanium-wall
-    * jump *label8 equal :isWall:block @plastanium-wall-large
-    * jump *label8 equal :isWall:block @thorium-wall
-    * jump *label8 equal :isWall:block @thorium-wall-large
-    * jump *label8 equal :isWall:block @phase-wall
-    * jump *label8 equal :isWall:block @phase-wall-large
-    * jump *label8 equal :isWall:block @surge-wall
-    * jump *label8 equal :isWall:block @surge-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall
-    * jump *label8 equal :isWall:block @scrap-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall-huge
-    * jump *label8 equal :isWall:block @scrap-wall-gigantic
-    * jump *label8 equal :isWall:block @beryllium-wall
-    * jump *label8 equal :isWall:block @beryllium-wall-large
-    * jump *label8 equal :isWall:block @tungsten-wall
-    * jump *label8 equal :isWall:block @tungsten-wall-large
-    * jump *label8 equal :isWall:block @reinforced-surge-wall
-    * jump *label8 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label8 equal :isWall:block @carbide-wall
-    * jump *label7 notEqual :isWall:block @carbide-wall-large
+   12 jump *label8 equal :block @copper-wall
+   13 jump *label8 equal :block @copper-wall-large
+   14 jump *label8 equal :block @titanium-wall
+   15 jump *label8 equal :block @titanium-wall-large
+   16 jump *label8 equal :block @plastanium-wall
+   17 jump *label8 equal :block @plastanium-wall-large
+   18 jump *label8 equal :block @thorium-wall
+   19 jump *label8 equal :block @thorium-wall-large
+   20 jump *label8 equal :block @phase-wall
+   21 jump *label8 equal :block @phase-wall-large
+   22 jump *label8 equal :block @surge-wall
+   23 jump *label8 equal :block @surge-wall-large
+   24 jump *label8 equal :block @scrap-wall
+   25 jump *label8 equal :block @scrap-wall-large
+   26 jump *label8 equal :block @scrap-wall-huge
+   27 jump *label8 equal :block @scrap-wall-gigantic
+   28 jump *label8 equal :block @beryllium-wall
+   29 jump *label8 equal :block @beryllium-wall-large
+   30 jump *label8 equal :block @tungsten-wall
+   31 jump *label8 equal :block @tungsten-wall-large
+   32 jump *label8 equal :block @reinforced-surge-wall
+   33 jump *label8 equal :block @reinforced-surge-wall-large
+   34 jump *label8 equal :block @carbide-wall
+   35 jump *label7 notEqual :block @carbide-wall-large
    36 label *label8
    37 set *tmp2 true
    38 jump *label4 always
 
    41 label *label4
    42 set *tmp1 *tmp2
    43 label *label3
-    * jump *label9 equal *tmp1 false
+   44 jump *label9 equal *tmp2 false
    45 print :block
    46 print "\n"
    47 op mul *tmp5 :hash 31

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 strictEqual :block null
     6 jump *label5 always
     7 label *label6
 
    38 label *label7
    39 set *tmp2 false
    40 label *label4
-    * set *tmp1 *tmp2
    41 label *label3
    42 jump *label9 equal *tmp2 false
    43 print :block

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i 0
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label11
     4 lookup block :block :i
     5 jump *label6 strictEqual :block null
     6 jump *label5 always
 
    49 label *label10
    50 label *label1
    51 op add :i :i 1
-    * jump *label0 always
+   52 jump *label11 lessThan :i 240
    53 label *label2
    54 print :hash
    55 assertequals 2376794836 :hash "Test selected blocks"

Modifications by Convert case at line 4:5 (segments: 5) (+9 instructions):
 
     2 label *label0
     3 label *label11
     4 lookup block :block :i
-    * jump *label6 strictEqual :block null
-    * jump *label5 always
+    5 sensor *tmp8 :block @id
+    6 jump *label14 greaterThanEq *tmp8 35
+    7 jump *label13 lessThan *tmp8 17
+    8 multijump *label15 *tmp8 17 (m:*label33)
+    9 multilabel *label15 (m:*label33)
+   10 jump *label8 always
+   11 multilabel *label16 (m:*label33)
+   12 jump *label8 always
+   13 multilabel *label17 (m:*label33)
+   14 jump *label8 always
+   15 multilabel *label18 (m:*label33)
+   16 jump *label8 always
+   17 multilabel *label19 (m:*label33)
+   18 jump *label8 always
+   19 multilabel *label20 (m:*label33)
+   20 jump *label8 always
+   21 multilabel *label21 (m:*label33)
+   22 jump *label8 always
+   23 multilabel *label22 (m:*label33)
+   24 jump *label8 always
+   25 multilabel *label23 (m:*label33)
+   26 jump *label8 always
+   27 multilabel *label24 (m:*label33)
+   28 jump *label8 always
+   29 multilabel *label25 (m:*label33)
+   30 jump *label8 always
+   31 multilabel *label26 (m:*label33)
+   32 jump *label8 always
+   33 multilabel *label27 (m:*label33)
+   34 jump *label12 always
+   35 multilabel *label28 (m:*label33)
+   36 jump *label12 always
+   37 multilabel *label29 (m:*label33)
+   38 jump *label8 always
+   39 multilabel *label30 (m:*label33)
+   40 jump *label8 always
+   41 multilabel *label31 (m:*label33)
+   42 jump *label8 always
+   43 multilabel *label32 (m:*label33)
+   44 jump *label8 always
+   45 label *label14
+   46 jump *label34 greaterThanEq *tmp8 206
+   47 jump *label8 equal *tmp8 203
+   48 jump *label8 equal *tmp8 204
+   49 jump *label12 always
+   50 label *label34
+   51 jump *label8 lessThan *tmp8 208
+   52 label *label35
+   53 jump *label36 greaterThanEq *tmp8 234
+   54 jump *label8 equal *tmp8 220
+   55 jump *label8 equal *tmp8 221
+   56 jump *label8 equal *tmp8 225
+   57 jump *label12 always
+   58 label *label36
+   59 jump *label8 lessThan *tmp8 235
+   60 jump *label12 always
    61 label *label6
    62 set *tmp2 2
    63 jump *label4 always
    64 label *label5
-    * jump *label8 equal :block @copper-wall
-    * jump *label8 equal :block @copper-wall-large
-    * jump *label8 equal :block @titanium-wall
-    * jump *label8 equal :block @titanium-wall-large
-    * jump *label8 equal :block @plastanium-wall
-    * jump *label8 equal :block @plastanium-wall-large
-    * jump *label8 equal :block @thorium-wall
-    * jump *label8 equal :block @thorium-wall-large
-    * jump *label8 equal :block @phase-wall
-    * jump *label8 equal :block @phase-wall-large
-    * jump *label8 equal :block @surge-wall
-    * jump *label8 equal :block @surge-wall-large
-    * jump *label8 equal :block @scrap-wall
-    * jump *label8 equal :block @scrap-wall-large
-    * jump *label8 equal :block @scrap-wall-huge
-    * jump *label8 equal :block @scrap-wall-gigantic
-    * jump *label8 equal :block @beryllium-wall
-    * jump *label8 equal :block @beryllium-wall-large
-    * jump *label8 equal :block @tungsten-wall
-    * jump *label8 equal :block @tungsten-wall-large
-    * jump *label8 equal :block @reinforced-surge-wall
-    * jump *label8 equal :block @reinforced-surge-wall-large
-    * jump *label8 equal :block @carbide-wall
-    * jump *label7 notEqual :block @carbide-wall-large
    65 label *label8
    66 set *tmp2 true
    67 jump *label4 always
    68 label *label7
+   69 label *label13
+   70 jump *label6 strictEqual *tmp8 null
+   71 label *label12
    72 set *tmp2 false
    73 label *label4
    74 label *label3

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set :hash 0
     1 set :i 0
-    * label *label0
     2 label *label11
     3 lookup block :block :i
     4 sensor *tmp8 :block @id
 
    48 jump *label12 always
    49 label *label34
    50 jump *label8 lessThan *tmp8 208
-    * label *label35
    51 jump *label36 greaterThanEq *tmp8 234
    52 jump *label8 equal *tmp8 220
    53 jump *label8 equal *tmp8 221
 
    59 label *label6
    60 set *tmp2 2
    61 jump *label4 always
-    * label *label5
    62 label *label8
    63 set *tmp2 true
    64 jump *label4 always
-    * label *label7
    65 label *label13
    66 jump *label6 strictEqual *tmp8 null
    67 label *label12
    68 set *tmp2 false
    69 label *label4
-    * label *label3
    70 jump *label9 equal *tmp2 false
    71 print :block
    72 print "\n"
 
    74 op add *tmp6 *tmp5 :i
    75 op and :hash *tmp6 0xFFFFFFFF
    76 label *label9
-    * label *label10
-    * label *label1
    77 op add :i :i 1
    78 jump *label11 lessThan :i 240
-    * label *label2
    79 print :hash
    80 assertequals 2376794836 :hash "Test selected blocks"
    81 end

Modifications by Jumps phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
    78 jump *label11 lessThan :i 240
    79 print :hash
    80 assertequals 2376794836 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i 0
label *label11
lookup block :block :i
sensor *tmp8 :block @id
jump *label14 greaterThanEq *tmp8 35
jump *label13 lessThan *tmp8 17
multijump *label15 *tmp8 17
multilabel *label15
jump *label8 always
multilabel *label16
jump *label8 always
multilabel *label17
jump *label8 always
multilabel *label18
jump *label8 always
multilabel *label19
jump *label8 always
multilabel *label20
jump *label8 always
multilabel *label21
jump *label8 always
multilabel *label22
jump *label8 always
multilabel *label23
jump *label8 always
multilabel *label24
jump *label8 always
multilabel *label25
jump *label8 always
multilabel *label26
jump *label8 always
multilabel *label27
jump *label12 always
multilabel *label28
jump *label12 always
multilabel *label29
jump *label8 always
multilabel *label30
jump *label8 always
multilabel *label31
jump *label8 always
multilabel *label32
jump *label8 always
label *label14
jump *label34 greaterThanEq *tmp8 206
jump *label8 equal *tmp8 203
jump *label8 equal *tmp8 204
jump *label12 always
label *label34
jump *label8 lessThan *tmp8 208
jump *label36 greaterThanEq *tmp8 234
jump *label8 equal *tmp8 220
jump *label8 equal *tmp8 221
jump *label8 equal *tmp8 225
jump *label12 always
label *label36
jump *label8 lessThan *tmp8 235
jump *label12 always
label *label6
set *tmp2 2
jump *label4 always
label *label8
set *tmp2 true
jump *label4 always
label *label13
jump *label6 strictEqual *tmp8 null
label *label12
set *tmp2 false
label *label4
jump *label9 equal *tmp2 false
print :block
print "\n"
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op and :hash *tmp6 0xFFFFFFFF
label *label9
op add :i :i 1
jump *label11 lessThan :i 240
print :hash
assertequals 2376794836 :hash "Test selected blocks"
