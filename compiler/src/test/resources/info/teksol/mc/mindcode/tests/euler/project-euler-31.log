    95 instructions before optimizations.
     5 instructions eliminated by Temp Variables Elimination (5 iterations).
     4 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Jump Optimization (4 iterations).
     2 instructions eliminated by Single Step Elimination (5 iterations).
    18 instructions eliminated by Data Flow Optimization (2 passes, 8 iterations).
     1 instructions modified by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     2 instructions eliminated by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
     2 instructions added by Return Optimization (4 iterations).
     1 return statements optimized by Return Optimization.
     1 instructions eliminated by Unreachable Code Elimination (2 iterations).
     4 instructions eliminated by Stack Optimization.
    59 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 919):
  * Unroll iteration loop at line 4:1                            size   -15, benefit       31.0, efficiency   Infinity (-19 instructions)
    Optimize return at line 14:9                                 size    +2, benefit       13.0, efficiency      6.500

Pass 1: speed optimization selection (cost limit 938):
  * Optimize return at line 14:9                                 size    +2, benefit       13.0, efficiency      6.500 (+2 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-4 instructions):
 
    50 jump *label14 equal *tmp4 false
    51 set :ways*retval 1
    52 jump *label13 always
-    * set *tmp5 null
    53 jump *label15 always
    54 label *label14
-    * set *tmp5 null
    55 label *label15
    56 set :ways:result 0
    57 set :ways:i :ways:index
 
    81 pop bank1 :ways:amount
    82 set *tmp11 :ways*retval
    83 op add :ways:result :ways:result *tmp11
-    * set *tmp9 :ways:result
    84 jump *label20 always
    85 label *label19
-    * set *tmp9 null
    86 label *label20
    87 label *label17
    88 op add :ways:i :ways:i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-5 instructions):
 
    30 set :value 1
    31 setaddr *tmp0 *label11
    32 label *label1
-    * set *tmp1 :index
-    * write :value bank1 *tmp1
+   33 write :value bank1 :index
    34 op add :index :index 1
    35 label *label2
    36 multijump *tmp0 0 0 (m:marker0)
 
    40 set :ways:index 1
    41 callrec bank1 *label0 *label12 :ways*retval
    42 label *label12
-    * set *tmp3 :ways*retval
-    * assertequals 41 *tmp3 "Project Euler 31"
+   43 assertequals 41 :ways*retval "Project Euler 31"
    44 stop
    45 end
    46 label *label0
 
    55 set :ways:i :ways:index
    56 label *label16
    57 jump *label18 greaterThanEq :ways:i 8
-    * set *tmp6 :ways:i
-    * read *tmp7 bank1 *tmp6
-    * set :ways:p *tmp7
+   58 read :ways:p bank1 :ways:i
    59 op lessThanEq *tmp8 :ways:p :ways:amount
    60 jump *label19 equal *tmp8 false
    61 op sub *tmp10 :ways:amount :ways:p
 
    75 pop bank1 :ways:result
    76 pop bank1 :ways:index
    77 pop bank1 :ways:amount
-    * set *tmp11 :ways*retval
-    * op add :ways:result :ways:result *tmp11
+   78 op add :ways:result :ways:result :ways*retval
    79 jump *label20 always
    80 label *label19
    81 label *label20

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    44 stop
    45 end
    46 label *label0
-    * op equal *tmp4 :ways:amount 0
-    * jump *label14 equal *tmp4 false
+   47 jump *label14 notEqual :ways:amount 0
    48 set :ways*retval 1
    49 jump *label13 always
    50 jump *label15 always
 
    55 label *label16
    56 jump *label18 greaterThanEq :ways:i 8
    57 read :ways:p bank1 :ways:i
-    * op lessThanEq *tmp8 :ways:p :ways:amount
-    * jump *label19 equal *tmp8 false
+   58 jump *label19 greaterThan :ways:p :ways:amount
    59 op sub *tmp10 :ways:amount :ways:p
    60 push bank1 :ways:amount
    61 push bank1 :ways:index

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    47 jump *label14 notEqual :ways:amount 0
    48 set :ways*retval 1
    49 jump *label13 always
-    * jump *label15 always
    50 label *label14
    51 label *label15
    52 set :ways:result 0
 
    73 pop bank1 :ways:index
    74 pop bank1 :ways:amount
    75 op add :ways:result :ways:result :ways*retval
-    * jump *label20 always
    76 label *label19
    77 label *label20
    78 label *label17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    62 push bank1 :ways:i
    63 push bank1 :ways:p
    64 push bank1 *tmp5
-    * set :ways:amount *tmp10
+   65 op sub :ways:amount :ways:amount :ways:p
    66 set :ways:index :ways:i
    67 callrec bank1 *label0 *label21 :ways*retval
    68 label *label21

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
    55 jump *label18 greaterThanEq :ways:i 8
    56 read :ways:p bank1 :ways:i
    57 jump *label19 greaterThan :ways:p :ways:amount
-    * op sub *tmp10 :ways:amount :ways:p
    58 push bank1 :ways:amount
    59 push bank1 :ways:index
    60 push bank1 :ways:result

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    53 set :ways:i :ways:index
    54 label *label16
    55 jump *label18 greaterThanEq :ways:i 8
+   56 label *label22
    57 read :ways:p bank1 :ways:i
    58 jump *label19 greaterThan :ways:p :ways:amount
    59 push bank1 :ways:amount
 
    77 label *label20
    78 label *label17
    79 op add :ways:i :ways:i 1
-    * jump *label16 always
+   80 jump *label22 lessThan :ways:i 8
    81 label *label18
    82 set :ways*retval :ways:result
    83 label *label13

Modifications by Unroll iteration loop at line 4:1 (-2 instructions):
     0 set *sp 16
     1 set :index 0
-    * set :value 200
-    * setaddr *tmp0 *label4
-    * jump *label1 always
-    * multilabel *label4 (m:marker0)
-    * set :value 100
-    * setaddr *tmp0 *label5
-    * jump *label1 always
-    * multilabel *label5 (m:marker0)
-    * set :value 50
-    * setaddr *tmp0 *label6
-    * jump *label1 always
-    * multilabel *label6 (m:marker0)
-    * set :value 20
-    * setaddr *tmp0 *label7
-    * jump *label1 always
-    * multilabel *label7 (m:marker0)
-    * set :value 10
-    * setaddr *tmp0 *label8
-    * jump *label1 always
-    * multilabel *label8 (m:marker0)
-    * set :value 5
-    * setaddr *tmp0 *label9
-    * jump *label1 always
-    * multilabel *label9 (m:marker0)
-    * set :value 2
-    * setaddr *tmp0 *label10
-    * jump *label1 always
-    * multilabel *label10 (m:marker0)
-    * set :value 1
-    * setaddr *tmp0 *label11
-    * label *label1
-    * write :value bank1 :index
-    * op add :index :index 1
-    * label *label2
-    * multijump *tmp0 0 0 (m:marker0)
-    * multilabel *label11 (m:marker0)
-    * label *label3
+    2 set :value 200
+    3 label *label23
+    4 write :value bank1 :index
+    5 op add :index :index 1
+    6 label *label24
+    7 set :value 100
+    8 label *label27
+    9 write :value bank1 :index
+   10 op add :index :index 1
+   11 label *label28
+   12 set :value 50
+   13 label *label31
+   14 write :value bank1 :index
+   15 op add :index :index 1
+   16 label *label32
+   17 set :value 20
+   18 label *label35
+   19 write :value bank1 :index
+   20 op add :index :index 1
+   21 label *label36
+   22 set :value 10
+   23 label *label39
+   24 write :value bank1 :index
+   25 op add :index :index 1
+   26 label *label40
+   27 set :value 5
+   28 label *label43
+   29 write :value bank1 :index
+   30 op add :index :index 1
+   31 label *label44
+   32 set :value 2
+   33 label *label47
+   34 write :value bank1 :index
+   35 op add :index :index 1
+   36 label *label48
+   37 set :value 1
+   38 label *label51
+   39 write :value bank1 :index
+   40 op add :index :index 1
+   41 label *label52
+   42 label *label3
    43 set :ways:amount 20
    44 set :ways:index 1
    45 callrec bank1 *label0 *label12 :ways*retval

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set :index 0
     2 set :value 200
     3 label *label23
-    * write :value bank1 :index
-    * op add :index :index 1
+    4 write 200 bank1 0
+    5 op add :index 0 1
     6 label *label24
     7 set :value 100
     8 label *label27
-    * write :value bank1 :index
-    * op add :index :index 1
+    9 write 100 bank1 1
+   10 op add :index 1 1
    11 label *label28
    12 set :value 50
    13 label *label31
-    * write :value bank1 :index
-    * op add :index :index 1
+   14 write 50 bank1 2
+   15 op add :index 2 1
    16 label *label32
    17 set :value 20
    18 label *label35
-    * write :value bank1 :index
-    * op add :index :index 1
+   19 write 20 bank1 3
+   20 op add :index 3 1
    21 label *label36
    22 set :value 10
    23 label *label39
-    * write :value bank1 :index
-    * op add :index :index 1
+   24 write 10 bank1 4
+   25 op add :index 4 1
    26 label *label40
    27 set :value 5
    28 label *label43
-    * write :value bank1 :index
-    * op add :index :index 1
+   29 write 5 bank1 5
+   30 op add :index 5 1
    31 label *label44
    32 set :value 2
    33 label *label47
-    * write :value bank1 :index
-    * op add :index :index 1
+   34 write 2 bank1 6
+   35 op add :index 6 1
    36 label *label48
    37 set :value 1
    38 label *label51
-    * write :value bank1 :index
-    * op add :index :index 1
+   39 write 1 bank1 7
+   40 op add :index 7 1
    41 label *label52
    42 label *label3
    43 set :ways:amount 20
 
    56 set :ways:result 0
    57 set :ways:i :ways:index
    58 label *label16
-    * jump *label18 greaterThanEq :ways:i 8
+   59 jump *label18 greaterThanEq :ways:index 8
    60 label *label22
    61 read :ways:p bank1 :ways:i
    62 jump *label19 greaterThan :ways:p :ways:amount

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-17 instructions):
     0 set *sp 16
-    * set :index 0
-    * set :value 200
     1 label *label23
     2 write 200 bank1 0
-    * op add :index 0 1
     3 label *label24
-    * set :value 100
     4 label *label27
     5 write 100 bank1 1
-    * op add :index 1 1
     6 label *label28
-    * set :value 50
     7 label *label31
     8 write 50 bank1 2
-    * op add :index 2 1
     9 label *label32
-    * set :value 20
    10 label *label35
    11 write 20 bank1 3
-    * op add :index 3 1
    12 label *label36
-    * set :value 10
    13 label *label39
    14 write 10 bank1 4
-    * op add :index 4 1
    15 label *label40
-    * set :value 5
    16 label *label43
    17 write 5 bank1 5
-    * op add :index 5 1
    18 label *label44
-    * set :value 2
    19 label *label47
    20 write 2 bank1 6
-    * op add :index 6 1
    21 label *label48
-    * set :value 1
    22 label *label51
    23 write 1 bank1 7
-    * op add :index 7 1
    24 label *label52
    25 label *label3
    26 set :ways:amount 20

Modifications by Optimize return at line 14:9 (+2 instructions):
 
    33 label *label0
    34 jump *label14 notEqual :ways:amount 0
    35 set :ways*retval 1
-    * jump *label13 always
+   36 returnrec bank1
    37 label *label14
    38 label *label15
    39 set :ways:result 0

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set *sp 16
-    * label *label23
     1 write 200 bank1 0
-    * label *label24
-    * label *label27
     2 write 100 bank1 1
-    * label *label28
-    * label *label31
     3 write 50 bank1 2
-    * label *label32
-    * label *label35
     4 write 20 bank1 3
-    * label *label36
-    * label *label39
     5 write 10 bank1 4
-    * label *label40
-    * label *label43
     6 write 5 bank1 5
-    * label *label44
-    * label *label47
     7 write 2 bank1 6
-    * label *label48
-    * label *label51
     8 write 1 bank1 7
-    * label *label52
-    * label *label3
     9 set :ways:amount 20
    10 set :ways:index 1
    11 callrec bank1 *label0 *label12 :ways*retval
 
    18 set :ways*retval 1
    19 returnrec bank1
    20 label *label14
-    * label *label15
    21 set :ways:result 0
    22 set :ways:i :ways:index
-    * label *label16
    23 jump *label18 greaterThanEq :ways:index 8
    24 label *label22
    25 read :ways:p bank1 :ways:i
 
    42 pop bank1 :ways:amount
    43 op add :ways:result :ways:result :ways*retval
    44 label *label19
-    * label *label20
-    * label *label17
    45 op add :ways:i :ways:i 1
    46 jump *label22 lessThan :ways:i 8
    47 label *label18
    48 set :ways*retval :ways:result
-    * label *label13
    49 returnrec bank1
    50 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 3, iteration 1 (-1 instructions):
 
    47 label *label18
    48 set :ways*retval :ways:result
    49 returnrec bank1
-    * end

Modifications by Final phase, Stack Optimization, iteration 1 (-4 instructions):
 
    29 push bank1 :ways:result
    30 push bank1 :ways:i
    31 push bank1 :ways:p
-    * push bank1 *tmp5
    32 op sub :ways:amount :ways:amount :ways:p
    33 set :ways:index :ways:i
    34 callrec bank1 *label0 *label21 :ways*retval
    35 label *label21
-    * pop bank1 *tmp5
    36 pop bank1 :ways:p
    37 pop bank1 :ways:i
    38 pop bank1 :ways:result

Final code before resolving virtual instructions:

set *sp 16
write 200 bank1 0
write 100 bank1 1
write 50 bank1 2
write 20 bank1 3
write 10 bank1 4
write 5 bank1 5
write 2 bank1 6
write 1 bank1 7
set :ways:amount 20
set :ways:index 1
callrec bank1 *label0 *label12 :ways*retval
label *label12
assertequals 41 :ways*retval "Project Euler 31"
stop
end
label *label0
jump *label14 notEqual :ways:amount 0
set :ways*retval 1
returnrec bank1
label *label14
set :ways:result 0
set :ways:i :ways:index
jump *label18 greaterThanEq :ways:index 8
label *label22
read :ways:p bank1 :ways:i
jump *label19 greaterThan :ways:p :ways:amount
push bank1 :ways:amount
push bank1 :ways:index
push bank1 :ways:result
push bank1 :ways:i
push bank1 :ways:p
op sub :ways:amount :ways:amount :ways:p
set :ways:index :ways:i
callrec bank1 *label0 *label21 :ways*retval
label *label21
pop bank1 :ways:p
pop bank1 :ways:i
pop bank1 :ways:result
pop bank1 :ways:index
pop bank1 :ways:amount
op add :ways:result :ways:result :ways*retval
label *label19
op add :ways:i :ways:i 1
jump *label22 lessThan :ways:i 8
label *label18
set :ways*retval :ways:result
returnrec bank1
