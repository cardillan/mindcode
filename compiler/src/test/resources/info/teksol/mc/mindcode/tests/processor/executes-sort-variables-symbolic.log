    29 instructions before optimizations.
     1 instructions eliminated by Dead Code Elimination (4 iterations).
     1 instructions eliminated by Single Step Elimination (6 iterations).
    14 instructions eliminated by Data Flow Optimization (3 passes, 13 iterations).
     2 instructions eliminated by Loop Unrolling (4 iterations).
     1 loops unrolled by Loop Unrolling.
    11 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 976):
  * Unroll iteration loop at line 6:5                            cost     0, benefit       19.0, efficiency   Infinity (-9 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    30 print :test:b
    31 print :test:c
    32 print :test:d
-    * set *tmp0 :test:d
    33 label *label0
    34 assertprints "1248" "sort variables"
    35 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-4 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 set :test:step p
-    * set :test:i :test:a
     4 op add *tmp1 @counter 1
     5 jump *label1 always
     6 multilabel *label4 (m:marker0)
     7 set :test:a :test:i
-    * set :test:i :test:b
     8 op add *tmp1 @counter 1
     9 jump *label1 always
    10 multilabel *label5 (m:marker0)
    11 set :test:b :test:i
-    * set :test:i :test:c
    12 op add *tmp1 @counter 1
    13 jump *label1 always
    14 multilabel *label6 (m:marker0)
    15 set :test:c :test:i
-    * set :test:i :test:d
    16 set *tmp1 null
    17 label *label1
    18 set :test:i :test:step

Modifications by Unroll iteration loop at line 6:5 (-2 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 set :test:step p
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label4 (m:marker0)
-    * set :test:a :test:i
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label5 (m:marker0)
-    * set :test:b :test:i
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label6 (m:marker0)
-    * set :test:c :test:i
-    * set *tmp1 null
-    * label *label1
-    * set :test:i :test:step
-    * op mul :test:step :test:step 2
-    * label *label2
-    * multijump *tmp1 0 0 (m:marker0)
-    * multilabel *label7 (m:marker0)
-    * set :test:d :test:i
-    * label *label3
+    4 label *label8
+    5 set :test:i :test:step
+    6 op mul :test:step :test:step 2
+    7 label *label9
+    8 set :test:a :test:i
+    9 label *label12
+   10 set :test:i :test:step
+   11 op mul :test:step :test:step 2
+   12 label *label13
+   13 set :test:b :test:i
+   14 label *label16
+   15 set :test:i :test:step
+   16 op mul :test:step :test:step 2
+   17 label *label17
+   18 set :test:c :test:i
+   19 label *label20
+   20 set :test:i :test:step
+   21 op mul :test:step :test:step 2
+   22 label *label21
+   23 set :test:d :test:i
+   24 label *label3
    25 print :test:a
    26 print :test:b
    27 print :test:c

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
     2 # "Function: def test()"
     3 set :test:step p
     4 label *label8
-    * set :test:i :test:step
-    * op mul :test:step :test:step 2
+    5 set :test:i p
+    6 op mul :test:step p 2
     7 label *label9
     8 set :test:a :test:i
     9 label *label12
 
    18 set :test:c :test:i
    19 label *label20
    20 set :test:i :test:step
-    * op mul :test:step :test:step 2
    21 label *label21
    22 set :test:d :test:i
    23 label *label3
    24 print :test:a
    25 print :test:b
    26 print :test:c
-    * print :test:d
+   27 print :test:i
    28 label *label0
    29 assertprints "1248" "sort variables"
    30 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
     0 set p 1
     1 assertflush
     2 # "Function: def test()"
-    * set :test:step p
     3 label *label8
     4 set :test:i p
     5 op mul :test:step p 2
     6 label *label9
-    * set :test:a :test:i
+    7 set :test:a p
     8 label *label12
     9 set :test:i :test:step
-    * op mul :test:step :test:step 2
+   10 op mul :test:step p 4
    11 label *label13
    12 set :test:b :test:i
    13 label *label16
 
    18 label *label20
    19 set :test:i :test:step
    20 label *label21
-    * set :test:d :test:i
+   21 set :test:d :test:step
    22 label *label3
    23 print :test:a
    24 print :test:b
    25 print :test:c
-    * print :test:i
+   26 print :test:step
    27 label *label0
    28 assertprints "1248" "sort variables"
    29 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 label *label8
-    * set :test:i p
     4 op mul :test:step p 2
     5 label *label9
     6 set :test:a p
 
    11 set :test:b :test:i
    12 label *label16
    13 set :test:i :test:step
-    * op mul :test:step :test:step 2
+   14 op mul :test:step p 8
    15 label *label17
    16 set :test:c :test:i
    17 label *label20
-    * set :test:i :test:step
    18 label *label21
-    * set :test:d :test:step
    19 label *label3
-    * print :test:a
+   20 print p
    21 print :test:b
    22 print :test:c
    23 print :test:step

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
     3 label *label8
     4 op mul :test:step p 2
     5 label *label9
-    * set :test:a p
     6 label *label12
     7 set :test:i :test:step
     8 op mul :test:step p 4
 
    18 label *label3
    19 print p
    20 print :test:b
-    * print :test:c
+   21 print :test:i
    22 print :test:step
    23 label *label0
    24 assertprints "1248" "sort variables"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
    12 set :test:i :test:step
    13 op mul :test:step p 8
    14 label *label17
-    * set :test:c :test:i
    15 label *label20
    16 label *label21
    17 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 label *label8
-    * op mul :test:step p 2
+    4 op mul :test:i p 2
     5 label *label9
     6 label *label12
-    * set :test:i :test:step
     7 op mul :test:step p 4
     8 label *label13
     9 set :test:b :test:i

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 label *label8
-    * op mul :test:i p 2
+    4 op mul :test:b p 2
     5 label *label9
     6 label *label12
     7 op mul :test:step p 4
     8 label *label13
-    * set :test:b :test:i
     9 label *label16
    10 set :test:i :test:step
    11 op mul :test:step p 8

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 3 (-1 instructions):
 
     4 op mul :test:b p 2
     5 label *label9
     6 label *label12
-    * op mul :test:step p 4
+    7 op mul :test:i p 4
     8 label *label13
     9 label *label16
-    * set :test:i :test:step
    10 op mul :test:step p 8
    11 label *label17
    12 label *label20

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 set p 1
     1 assertflush
     2 # "Function: def test()"
-    * label *label8
     3 op mul :test:b p 2
-    * label *label9
-    * label *label12
     4 op mul :test:i p 4
-    * label *label13
-    * label *label16
     5 op mul :test:step p 8
-    * label *label17
-    * label *label20
-    * label *label21
-    * label *label3
     6 print p
     7 print :test:b
     8 print :test:i
     9 print :test:step
-    * label *label0
    10 assertprints "1248" "sort variables"
    11 stop
    12 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
     9 print :test:step
    10 assertprints "1248" "sort variables"
    11 stop
-    * end

Final code before resolving virtual instructions:

set p 1
assertflush
# "Function: def test()"
op mul :test:b p 2
op mul :test:i p 4
op mul :test:step p 8
print p
print :test:b
print :test:i
print :test:step
assertprints "1248" "sort variables"
stop
