    31 instructions before optimizations.
     1 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Single Step Elimination (5 iterations).
    18 instructions eliminated by Data Flow Optimization (3 passes, 12 iterations).
     1 loops unrolled by Loop Unrolling.
    11 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 974):
  * Unroll iteration loop at line 6:5                            cost     0, benefit       19.0, efficiency   Infinity (-11 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    34 print :test.0:b
    35 print :test.0:c
    36 print :test.0:d
-    * set *tmp0 :test.0:d
    37 label *label0
    38 assertprints "1248" "sort variables"
    39 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-4 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 set :test.0:step p
-    * set :test.0:i :test.0:a
     4 op add *tmp1 @counter 1
     5 jump *label1 always
     6 multilabel *label4
     7 set :test.0:a :test.0:i
-    * set :test.0:i :test.0:b
     8 op add *tmp1 @counter 1
     9 jump *label1 always
    10 multilabel *label5
    11 set :test.0:b :test.0:i
-    * set :test.0:i :test.0:c
    12 op add *tmp1 @counter 1
    13 jump *label1 always
    14 multilabel *label6
    15 set :test.0:c :test.0:i
-    * set :test.0:i :test.0:d
    16 op add *tmp1 @counter 1
    17 jump *label1 always
    18 multilabel *label8

Modifications by Unroll iteration loop at line 6:5:
 
     1 assertflush
     2 # "Function: def test()"
     3 set :test.0:step p
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label4
-    * set :test.0:a :test.0:i
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label5
-    * set :test.0:b :test.0:i
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label6
-    * set :test.0:c :test.0:i
-    * op add *tmp1 @counter 1
-    * jump *label1 always
-    * multilabel *label8
-    * jump *label9 always
-    * label *label1
-    * set :test.0:i :test.0:step
-    * op mul :test.0:step :test.0:step 2
-    * label *label2
-    * multijump *tmp1 0 0
-    * multilabel *label7
-    * label *label9
-    * set :test.0:d :test.0:i
-    * label *label3
+    4 op add *tmp1 @counter 1
+    5 label *label10
+    6 set :test.0:i :test.0:step
+    7 op mul :test.0:step :test.0:step 2
+    8 label *label11
+    9 set :test.0:a :test.0:i
+   10 op add *tmp1 @counter 1
+   11 label *label14
+   12 set :test.0:i :test.0:step
+   13 op mul :test.0:step :test.0:step 2
+   14 label *label15
+   15 set :test.0:b :test.0:i
+   16 op add *tmp1 @counter 1
+   17 label *label18
+   18 set :test.0:i :test.0:step
+   19 op mul :test.0:step :test.0:step 2
+   20 label *label19
+   21 set :test.0:c :test.0:i
+   22 op add *tmp1 @counter 1
+   23 label *label22
+   24 set :test.0:i :test.0:step
+   25 op mul :test.0:step :test.0:step 2
+   26 label *label23
+   27 set :test.0:d :test.0:i
+   28 label *label9
+   29 label *label3
    30 print :test.0:a
    31 print :test.0:b
    32 print :test.0:c

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-5 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 set :test.0:step p
-    * op add *tmp1 @counter 1
     4 label *label10
-    * set :test.0:i :test.0:step
-    * op mul :test.0:step :test.0:step 2
+    5 set :test.0:i p
+    6 op mul :test.0:step p 2
     7 label *label11
     8 set :test.0:a :test.0:i
-    * op add *tmp1 @counter 1
     9 label *label14
    10 set :test.0:i :test.0:step
    11 op mul :test.0:step :test.0:step 2
    12 label *label15
    13 set :test.0:b :test.0:i
-    * op add *tmp1 @counter 1
    14 label *label18
    15 set :test.0:i :test.0:step
    16 op mul :test.0:step :test.0:step 2
    17 label *label19
    18 set :test.0:c :test.0:i
-    * op add *tmp1 @counter 1
    19 label *label22
    20 set :test.0:i :test.0:step
-    * op mul :test.0:step :test.0:step 2
    21 label *label23
    22 set :test.0:d :test.0:i
    23 label *label9
 
    25 print :test.0:a
    26 print :test.0:b
    27 print :test.0:c
-    * print :test.0:d
+   28 print :test.0:i
    29 label *label0
    30 assertprints "1248" "sort variables"
    31 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
     0 set p 1
     1 assertflush
     2 # "Function: def test()"
-    * set :test.0:step p
     3 label *label10
     4 set :test.0:i p
     5 op mul :test.0:step p 2
     6 label *label11
-    * set :test.0:a :test.0:i
+    7 set :test.0:a p
     8 label *label14
     9 set :test.0:i :test.0:step
-    * op mul :test.0:step :test.0:step 2
+   10 op mul :test.0:step p 4
    11 label *label15
    12 set :test.0:b :test.0:i
    13 label *label18
 
    18 label *label22
    19 set :test.0:i :test.0:step
    20 label *label23
-    * set :test.0:d :test.0:i
+   21 set :test.0:d :test.0:step
    22 label *label9
    23 label *label3
    24 print :test.0:a
    25 print :test.0:b
    26 print :test.0:c
-    * print :test.0:i
+   27 print :test.0:step
    28 label *label0
    29 assertprints "1248" "sort variables"
    30 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 label *label10
-    * set :test.0:i p
     4 op mul :test.0:step p 2
     5 label *label11
     6 set :test.0:a p
 
    11 set :test.0:b :test.0:i
    12 label *label18
    13 set :test.0:i :test.0:step
-    * op mul :test.0:step :test.0:step 2
+   14 op mul :test.0:step p 8
    15 label *label19
    16 set :test.0:c :test.0:i
    17 label *label22
-    * set :test.0:i :test.0:step
    18 label *label23
-    * set :test.0:d :test.0:step
    19 label *label9
    20 label *label3
-    * print :test.0:a
+   21 print p
    22 print :test.0:b
    23 print :test.0:c
    24 print :test.0:step

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
     3 label *label10
     4 op mul :test.0:step p 2
     5 label *label11
-    * set :test.0:a p
     6 label *label14
     7 set :test.0:i :test.0:step
     8 op mul :test.0:step p 4
 
    19 label *label3
    20 print p
    21 print :test.0:b
-    * print :test.0:c
+   22 print :test.0:i
    23 print :test.0:step
    24 label *label0
    25 assertprints "1248" "sort variables"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
    12 set :test.0:i :test.0:step
    13 op mul :test.0:step p 8
    14 label *label19
-    * set :test.0:c :test.0:i
    15 label *label22
    16 label *label23
    17 label *label9

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1 (-1 instructions):
 
     4 op mul :test.0:step p 2
     5 label *label11
     6 label *label14
-    * set :test.0:i :test.0:step
+    7 set :test.0:b :test.0:step
     8 op mul :test.0:step p 4
     9 label *label15
-    * set :test.0:b :test.0:i
    10 label *label18
    11 set :test.0:i :test.0:step
    12 op mul :test.0:step p 8

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-2 instructions):
 
     1 assertflush
     2 # "Function: def test()"
     3 label *label10
-    * op mul :test.0:step p 2
+    4 op mul :test.0:b p 2
     5 label *label11
     6 label *label14
-    * set :test.0:b :test.0:step
-    * op mul :test.0:step p 4
+    7 op mul :test.0:i p 4
     8 label *label15
     9 label *label18
-    * set :test.0:i :test.0:step
    10 op mul :test.0:step p 8
    11 label *label19
    12 label *label22

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
    20 label *label0
    21 assertprints "1248" "sort variables"
    22 stop
-    * end

Final code before resolving virtual instructions:

set p 1
assertflush
# "Function: def test()"
op mul :test.0:b p 2
op mul :test.0:i p 4
op mul :test.0:step p 8
print p
print :test.0:b
print :test.0:i
print :test.0:step
assertprints "1248" "sort variables"
stop
