    51 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     2 instructions eliminated by Data Flow Optimization (6 iterations).
     1 instructions eliminated by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
    26 instructions added by Case Switching (4 iterations).
     1 case expressions converted to switched jumps Case Switching.
     2 instructions eliminated by Jump Straightening (2 passes, 5 iterations).
    65 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 59):
  o Convert case at line 4:5 (segments: 5)                       cost     0, benefit      166.7, efficiency   Infinity
  o Convert case at line 4:5 (segments: 5)                       cost    10, benefit      183.3, efficiency     18.333
  * Convert case at line 4:5 (segments: 5, zero extension)       cost    26, benefit      200.0, efficiency      7.692 (+26 instructions)
  ! Convert case at line 4:5 (segments: 1, zero extension)       cost   214, benefit      212.5, efficiency      0.993

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    7 jump *label6 equal :isWall:block @copper-wall
+    8 jump *label6 equal :isWall:block @copper-wall-large
+    9 jump *label6 equal :isWall:block @titanium-wall
+   10 jump *label6 equal :isWall:block @titanium-wall-large
+   11 jump *label6 equal :isWall:block @plastanium-wall
+   12 jump *label6 equal :isWall:block @plastanium-wall-large
+   13 jump *label6 equal :isWall:block @thorium-wall
+   14 jump *label6 equal :isWall:block @thorium-wall-large
+   15 jump *label6 equal :isWall:block @phase-wall
+   16 jump *label6 equal :isWall:block @phase-wall-large
+   17 jump *label6 equal :isWall:block @surge-wall
+   18 jump *label6 equal :isWall:block @surge-wall-large
+   19 jump *label6 equal :isWall:block @scrap-wall
+   20 jump *label6 equal :isWall:block @scrap-wall-large
+   21 jump *label6 equal :isWall:block @scrap-wall-huge
+   22 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   23 jump *label6 equal :isWall:block @beryllium-wall
+   24 jump *label6 equal :isWall:block @beryllium-wall-large
+   25 jump *label6 equal :isWall:block @tungsten-wall
+   26 jump *label6 equal :isWall:block @tungsten-wall-large
+   27 jump *label6 equal :isWall:block @reinforced-surge-wall
+   28 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   29 jump *label6 equal :isWall:block @carbide-wall
+   30 jump *label6 equal :isWall:block @carbide-wall-large
    31 jump *label5 always
    32 label *label6
    33 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    44 op add *tmp6 *tmp5 :i
    45 op and *tmp7 *tmp6 0xFFFFFFFF
    46 set :hash *tmp7
-    * set *tmp4 :hash
    47 jump *label8 always
    48 label *label7
-    * set *tmp4 null
    49 label *label8
    50 label *label1
    51 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i 0
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 equal :isWall:block @copper-wall
     7 jump *label6 equal :isWall:block @copper-wall-large
 
    41 print "\n"
    42 op mul *tmp5 :hash 31
    43 op add *tmp6 *tmp5 :i
-    * op and *tmp7 *tmp6 0xFFFFFFFF
-    * set :hash *tmp7
+   44 op and :hash *tmp6 0xFFFFFFFF
    45 jump *label8 always
    46 label *label7
    47 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    26 jump *label6 equal :isWall:block @reinforced-surge-wall
    27 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    28 jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 always
+   29 jump *label5 notEqual :isWall:block @carbide-wall-large
    30 label *label6
    31 set *tmp2 true
    32 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op and :hash *tmp6 0xFFFFFFFF
-    * jump *label8 always
    44 label *label7
    45 label *label8
    46 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label5 notEqual :isWall:block @carbide-wall-large
+    6 jump *label6 equal :block @copper-wall
+    7 jump *label6 equal :block @copper-wall-large
+    8 jump *label6 equal :block @titanium-wall
+    9 jump *label6 equal :block @titanium-wall-large
+   10 jump *label6 equal :block @plastanium-wall
+   11 jump *label6 equal :block @plastanium-wall-large
+   12 jump *label6 equal :block @thorium-wall
+   13 jump *label6 equal :block @thorium-wall-large
+   14 jump *label6 equal :block @phase-wall
+   15 jump *label6 equal :block @phase-wall-large
+   16 jump *label6 equal :block @surge-wall
+   17 jump *label6 equal :block @surge-wall-large
+   18 jump *label6 equal :block @scrap-wall
+   19 jump *label6 equal :block @scrap-wall-large
+   20 jump *label6 equal :block @scrap-wall-huge
+   21 jump *label6 equal :block @scrap-wall-gigantic
+   22 jump *label6 equal :block @beryllium-wall
+   23 jump *label6 equal :block @beryllium-wall-large
+   24 jump *label6 equal :block @tungsten-wall
+   25 jump *label6 equal :block @tungsten-wall-large
+   26 jump *label6 equal :block @reinforced-surge-wall
+   27 jump *label6 equal :block @reinforced-surge-wall-large
+   28 jump *label6 equal :block @carbide-wall
+   29 jump *label5 notEqual :block @carbide-wall-large
    30 label *label6
    31 set *tmp2 true
    32 jump *label4 always
 
    35 label *label4
    36 set *tmp1 *tmp2
    37 label *label3
-    * jump *label7 equal *tmp1 false
+   38 jump *label7 equal *tmp2 false
    39 print :block
    40 print "\n"
    41 op mul *tmp5 :hash 31

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 equal :block @copper-wall
     6 jump *label6 equal :block @copper-wall-large
     7 jump *label6 equal :block @titanium-wall
 
    32 label *label5
    33 set *tmp2 false
    34 label *label4
-    * set *tmp1 *tmp2
    35 label *label3
    36 jump *label7 equal *tmp2 false
    37 print :block

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i 0
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label9
     4 lookup block :block :i
     5 jump *label6 equal :block @copper-wall
     6 jump *label6 equal :block @copper-wall-large
 
    43 label *label8
    44 label *label1
    45 op add :i :i 1
-    * jump *label0 always
+   46 jump *label9 lessThan :i 240
    47 label *label2
    48 print :hash
    49 assertequals 2376794836 :hash "Test selected blocks"

Modifications by Convert case at line 4:5 (segments: 5, zero extension) (+26 instructions):
 
     2 label *label0
     3 label *label9
     4 lookup block :block :i
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label5 notEqual :block @carbide-wall-large
+    5 sensor *tmp8 :block @id
+    6 jump *label11 greaterThanEq *tmp8 35
+    7 multijump *label12 *tmp8 0 (m:*label47)
+    8 multilabel *label12 (m:*label47)
+    9 jump *label10 always
+   10 multilabel *label13 (m:*label47)
+   11 jump *label10 always
+   12 multilabel *label14 (m:*label47)
+   13 jump *label10 always
+   14 multilabel *label15 (m:*label47)
+   15 jump *label10 always
+   16 multilabel *label16 (m:*label47)
+   17 jump *label10 always
+   18 multilabel *label17 (m:*label47)
+   19 jump *label10 always
+   20 multilabel *label18 (m:*label47)
+   21 jump *label10 always
+   22 multilabel *label19 (m:*label47)
+   23 jump *label10 always
+   24 multilabel *label20 (m:*label47)
+   25 jump *label10 always
+   26 multilabel *label21 (m:*label47)
+   27 jump *label10 always
+   28 multilabel *label22 (m:*label47)
+   29 jump *label10 always
+   30 multilabel *label23 (m:*label47)
+   31 jump *label10 always
+   32 multilabel *label24 (m:*label47)
+   33 jump *label10 always
+   34 multilabel *label25 (m:*label47)
+   35 jump *label10 always
+   36 multilabel *label26 (m:*label47)
+   37 jump *label10 always
+   38 multilabel *label27 (m:*label47)
+   39 jump *label10 always
+   40 multilabel *label28 (m:*label47)
+   41 jump *label10 always
+   42 multilabel *label29 (m:*label47)
+   43 jump *label6 always
+   44 multilabel *label30 (m:*label47)
+   45 jump *label6 always
+   46 multilabel *label31 (m:*label47)
+   47 jump *label6 always
+   48 multilabel *label32 (m:*label47)
+   49 jump *label6 always
+   50 multilabel *label33 (m:*label47)
+   51 jump *label6 always
+   52 multilabel *label34 (m:*label47)
+   53 jump *label6 always
+   54 multilabel *label35 (m:*label47)
+   55 jump *label6 always
+   56 multilabel *label36 (m:*label47)
+   57 jump *label6 always
+   58 multilabel *label37 (m:*label47)
+   59 jump *label6 always
+   60 multilabel *label38 (m:*label47)
+   61 jump *label6 always
+   62 multilabel *label39 (m:*label47)
+   63 jump *label6 always
+   64 multilabel *label40 (m:*label47)
+   65 jump *label6 always
+   66 multilabel *label41 (m:*label47)
+   67 jump *label10 always
+   68 multilabel *label42 (m:*label47)
+   69 jump *label10 always
+   70 multilabel *label43 (m:*label47)
+   71 jump *label6 always
+   72 multilabel *label44 (m:*label47)
+   73 jump *label6 always
+   74 multilabel *label45 (m:*label47)
+   75 jump *label6 always
+   76 multilabel *label46 (m:*label47)
+   77 jump *label6 always
+   78 label *label11
+   79 jump *label48 greaterThanEq *tmp8 206
+   80 jump *label6 equal *tmp8 203
+   81 jump *label6 equal *tmp8 204
+   82 jump *label10 always
+   83 label *label48
+   84 jump *label6 lessThan *tmp8 208
+   85 label *label49
+   86 jump *label50 greaterThanEq *tmp8 234
+   87 jump *label6 equal *tmp8 220
+   88 jump *label6 equal *tmp8 221
+   89 jump *label6 equal *tmp8 225
+   90 jump *label10 always
+   91 label *label50
+   92 jump *label6 lessThan *tmp8 235
+   93 jump *label10 always
    94 label *label6
    95 set *tmp2 true
    96 jump *label4 always
    97 label *label5
+   98 label *label10
    99 set *tmp2 false
   100 label *label4
   101 label *label3

Modifications by Iterated phase, Jump Straightening, pass 2, iteration 1 (-1 instructions):
 
    89 jump *label6 equal *tmp8 225
    90 jump *label10 always
    91 label *label50
-    * jump *label6 lessThan *tmp8 235
-    * jump *label10 always
+   92 jump *label10 greaterThanEq *tmp8 235
    93 label *label6
    94 set *tmp2 true
    95 jump *label4 always

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 set :hash 0
     1 set :i 0
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 sensor *tmp8 :block @id
 
    81 jump *label10 always
    82 label *label48
    83 jump *label6 lessThan *tmp8 208
-    * label *label49
    84 jump *label50 greaterThanEq *tmp8 234
    85 jump *label6 equal *tmp8 220
    86 jump *label6 equal *tmp8 221
 
    91 label *label6
    92 set *tmp2 true
    93 jump *label4 always
-    * label *label5
    94 label *label10
    95 set *tmp2 false
    96 label *label4
-    * label *label3
    97 jump *label7 equal *tmp2 false
    98 print :block
    99 print "\n"
 
   101 op add *tmp6 *tmp5 :i
   102 op and :hash *tmp6 0xFFFFFFFF
   103 label *label7
-    * label *label8
-    * label *label1
   104 op add :i :i 1
   105 jump *label9 lessThan :i 240
-    * label *label2
   106 print :hash
   107 assertequals 2376794836 :hash "Test selected blocks"
   108 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   105 jump *label9 lessThan :i 240
   106 print :hash
   107 assertequals 2376794836 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i 0
label *label9
lookup block :block :i
sensor *tmp8 :block @id
jump *label11 greaterThanEq *tmp8 35
multijump *label12 *tmp8 0
multilabel *label12
jump *label10 always
multilabel *label13
jump *label10 always
multilabel *label14
jump *label10 always
multilabel *label15
jump *label10 always
multilabel *label16
jump *label10 always
multilabel *label17
jump *label10 always
multilabel *label18
jump *label10 always
multilabel *label19
jump *label10 always
multilabel *label20
jump *label10 always
multilabel *label21
jump *label10 always
multilabel *label22
jump *label10 always
multilabel *label23
jump *label10 always
multilabel *label24
jump *label10 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label10 always
multilabel *label28
jump *label10 always
multilabel *label29
jump *label6 always
multilabel *label30
jump *label6 always
multilabel *label31
jump *label6 always
multilabel *label32
jump *label6 always
multilabel *label33
jump *label6 always
multilabel *label34
jump *label6 always
multilabel *label35
jump *label6 always
multilabel *label36
jump *label6 always
multilabel *label37
jump *label6 always
multilabel *label38
jump *label6 always
multilabel *label39
jump *label6 always
multilabel *label40
jump *label6 always
multilabel *label41
jump *label10 always
multilabel *label42
jump *label10 always
multilabel *label43
jump *label6 always
multilabel *label44
jump *label6 always
multilabel *label45
jump *label6 always
multilabel *label46
jump *label6 always
label *label11
jump *label48 greaterThanEq *tmp8 206
jump *label6 equal *tmp8 203
jump *label6 equal *tmp8 204
jump *label10 always
label *label48
jump *label6 lessThan *tmp8 208
jump *label50 greaterThanEq *tmp8 234
jump *label6 equal *tmp8 220
jump *label6 equal *tmp8 221
jump *label6 equal *tmp8 225
jump *label10 always
label *label50
jump *label10 greaterThanEq *tmp8 235
label *label6
set *tmp2 true
jump *label4 always
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
print :block
print "\n"
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op and :hash *tmp6 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i 240
print :hash
assertequals 2376794836 :hash "Test selected blocks"
