    55 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (5 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     2 instructions eliminated by Data Flow Optimization (5 iterations).
     1 instructions eliminated by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
    25 instructions added by Case Switching (3 iterations).
     1 case expressions converted to switched jumps Case Switching.
     2 instructions eliminated by Jump Straightening (2 passes, 5 iterations).
     3 instructions eliminated by Unreachable Code Elimination (3 iterations).
    65 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 55):
  o Convert case at line 4:5 (segments: 5)                       cost     0, benefit      179.2, efficiency   Infinity
  * Convert case at line 4:5 (segments: 5, zero extension)       cost    25, benefit      212.5, efficiency      8.500 (+25 instructions)
  ! Convert case at line 4:5 (segments: 1, zero extension)       cost   213, benefit      225.0, efficiency      1.056

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     5 set :block *tmp0
     6 # "Function: def isWall(in block)"
     7 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
+    8 jump *label6 strictEqual :isWall:block null
     9 jump *label5 always
    10 label *label6
    11 set *tmp2 2
    12 jump *label4 always
    13 label *label5
-    * jump *label8 equal *tmp3 @copper-wall
-    * jump *label8 equal *tmp3 @copper-wall-large
-    * jump *label8 equal *tmp3 @titanium-wall
-    * jump *label8 equal *tmp3 @titanium-wall-large
-    * jump *label8 equal *tmp3 @plastanium-wall
-    * jump *label8 equal *tmp3 @plastanium-wall-large
-    * jump *label8 equal *tmp3 @thorium-wall
-    * jump *label8 equal *tmp3 @thorium-wall-large
-    * jump *label8 equal *tmp3 @phase-wall
-    * jump *label8 equal *tmp3 @phase-wall-large
-    * jump *label8 equal *tmp3 @surge-wall
-    * jump *label8 equal *tmp3 @surge-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall
-    * jump *label8 equal *tmp3 @scrap-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall-huge
-    * jump *label8 equal *tmp3 @scrap-wall-gigantic
-    * jump *label8 equal *tmp3 @beryllium-wall
-    * jump *label8 equal *tmp3 @beryllium-wall-large
-    * jump *label8 equal *tmp3 @tungsten-wall
-    * jump *label8 equal *tmp3 @tungsten-wall-large
-    * jump *label8 equal *tmp3 @reinforced-surge-wall
-    * jump *label8 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label8 equal *tmp3 @carbide-wall
-    * jump *label8 equal *tmp3 @carbide-wall-large
+   14 jump *label8 equal :isWall:block @copper-wall
+   15 jump *label8 equal :isWall:block @copper-wall-large
+   16 jump *label8 equal :isWall:block @titanium-wall
+   17 jump *label8 equal :isWall:block @titanium-wall-large
+   18 jump *label8 equal :isWall:block @plastanium-wall
+   19 jump *label8 equal :isWall:block @plastanium-wall-large
+   20 jump *label8 equal :isWall:block @thorium-wall
+   21 jump *label8 equal :isWall:block @thorium-wall-large
+   22 jump *label8 equal :isWall:block @phase-wall
+   23 jump *label8 equal :isWall:block @phase-wall-large
+   24 jump *label8 equal :isWall:block @surge-wall
+   25 jump *label8 equal :isWall:block @surge-wall-large
+   26 jump *label8 equal :isWall:block @scrap-wall
+   27 jump *label8 equal :isWall:block @scrap-wall-large
+   28 jump *label8 equal :isWall:block @scrap-wall-huge
+   29 jump *label8 equal :isWall:block @scrap-wall-gigantic
+   30 jump *label8 equal :isWall:block @beryllium-wall
+   31 jump *label8 equal :isWall:block @beryllium-wall-large
+   32 jump *label8 equal :isWall:block @tungsten-wall
+   33 jump *label8 equal :isWall:block @tungsten-wall-large
+   34 jump *label8 equal :isWall:block @reinforced-surge-wall
+   35 jump *label8 equal :isWall:block @reinforced-surge-wall-large
+   36 jump *label8 equal :isWall:block @carbide-wall
+   37 jump *label8 equal :isWall:block @carbide-wall-large
    38 jump *label7 always
    39 label *label8
    40 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    51 op add *tmp6 *tmp5 :i
    52 op and *tmp7 *tmp6 0xFFFFFFFF
    53 set :hash *tmp7
-    * set *tmp4 :hash
    54 jump *label10 always
    55 label *label9
-    * set *tmp4 null
    56 label *label10
    57 label *label1
    58 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i 0
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
     7 jump *label6 strictEqual :isWall:block null
 
    48 print "\n"
    49 op mul *tmp5 :hash 31
    50 op add *tmp6 *tmp5 :i
-    * op and *tmp7 *tmp6 0xFFFFFFFF
-    * set :hash *tmp7
+   51 op and :hash *tmp6 0xFFFFFFFF
    52 jump *label10 always
    53 label *label9
    54 label *label10

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    33 jump *label8 equal :isWall:block @reinforced-surge-wall
    34 jump *label8 equal :isWall:block @reinforced-surge-wall-large
    35 jump *label8 equal :isWall:block @carbide-wall
-    * jump *label8 equal :isWall:block @carbide-wall-large
-    * jump *label7 always
+   36 jump *label7 notEqual :isWall:block @carbide-wall-large
    37 label *label8
    38 set *tmp2 true
    39 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    48 op mul *tmp5 :hash 31
    49 op add *tmp6 *tmp5 :i
    50 op and :hash *tmp6 0xFFFFFFFF
-    * jump *label10 always
    51 label *label9
    52 label *label10
    53 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
+    7 jump *label6 strictEqual :block null
     8 jump *label5 always
     9 label *label6
    10 set *tmp2 2
    11 jump *label4 always
    12 label *label5
-    * jump *label8 equal :isWall:block @copper-wall
-    * jump *label8 equal :isWall:block @copper-wall-large
-    * jump *label8 equal :isWall:block @titanium-wall
-    * jump *label8 equal :isWall:block @titanium-wall-large
-    * jump *label8 equal :isWall:block @plastanium-wall
-    * jump *label8 equal :isWall:block @plastanium-wall-large
-    * jump *label8 equal :isWall:block @thorium-wall
-    * jump *label8 equal :isWall:block @thorium-wall-large
-    * jump *label8 equal :isWall:block @phase-wall
-    * jump *label8 equal :isWall:block @phase-wall-large
-    * jump *label8 equal :isWall:block @surge-wall
-    * jump *label8 equal :isWall:block @surge-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall
-    * jump *label8 equal :isWall:block @scrap-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall-huge
-    * jump *label8 equal :isWall:block @scrap-wall-gigantic
-    * jump *label8 equal :isWall:block @beryllium-wall
-    * jump *label8 equal :isWall:block @beryllium-wall-large
-    * jump *label8 equal :isWall:block @tungsten-wall
-    * jump *label8 equal :isWall:block @tungsten-wall-large
-    * jump *label8 equal :isWall:block @reinforced-surge-wall
-    * jump *label8 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label8 equal :isWall:block @carbide-wall
-    * jump *label7 notEqual :isWall:block @carbide-wall-large
+   13 jump *label8 equal :block @copper-wall
+   14 jump *label8 equal :block @copper-wall-large
+   15 jump *label8 equal :block @titanium-wall
+   16 jump *label8 equal :block @titanium-wall-large
+   17 jump *label8 equal :block @plastanium-wall
+   18 jump *label8 equal :block @plastanium-wall-large
+   19 jump *label8 equal :block @thorium-wall
+   20 jump *label8 equal :block @thorium-wall-large
+   21 jump *label8 equal :block @phase-wall
+   22 jump *label8 equal :block @phase-wall-large
+   23 jump *label8 equal :block @surge-wall
+   24 jump *label8 equal :block @surge-wall-large
+   25 jump *label8 equal :block @scrap-wall
+   26 jump *label8 equal :block @scrap-wall-large
+   27 jump *label8 equal :block @scrap-wall-huge
+   28 jump *label8 equal :block @scrap-wall-gigantic
+   29 jump *label8 equal :block @beryllium-wall
+   30 jump *label8 equal :block @beryllium-wall-large
+   31 jump *label8 equal :block @tungsten-wall
+   32 jump *label8 equal :block @tungsten-wall-large
+   33 jump *label8 equal :block @reinforced-surge-wall
+   34 jump *label8 equal :block @reinforced-surge-wall-large
+   35 jump *label8 equal :block @carbide-wall
+   36 jump *label7 notEqual :block @carbide-wall-large
    37 label *label8
    38 set *tmp2 true
    39 jump *label4 always
 
    42 label *label4
    43 set *tmp1 *tmp2
    44 label *label3
-    * jump *label9 equal *tmp1 false
+   45 jump *label9 equal *tmp2 false
    46 print :block
    47 print "\n"
    48 op mul *tmp5 :hash 31

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * set :isWall:block :block
     6 jump *label6 strictEqual :block null
     7 jump *label5 always
     8 label *label6
 
    39 label *label7
    40 set *tmp2 false
    41 label *label4
-    * set *tmp1 *tmp2
    42 label *label3
    43 jump *label9 equal *tmp2 false
    44 print :block

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i 0
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label11
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 jump *label6 strictEqual :block null
 
    50 label *label10
    51 label *label1
    52 op add :i :i 1
-    * jump *label0 always
+   53 jump *label11 lessThan :i 240
    54 label *label2
    55 print :hash
    56 assertequals 2376794836 :hash "Test selected blocks"

Modifications by Convert case at line 4:5 (segments: 5, zero extension) (+25 instructions):
 
     3 label *label11
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * jump *label6 strictEqual :block null
-    * jump *label5 always
+    6 sensor *tmp8 :block @id
+    7 jump *label14 greaterThanEq *tmp8 35
+    8 multijump *label15 *tmp8 0 (m:*label50)
+    9 multilabel *label15 (m:*label50)
+   10 jump *label12 always
+   11 multilabel *label16 (m:*label50)
+   12 jump *label12 always
+   13 multilabel *label17 (m:*label50)
+   14 jump *label12 always
+   15 multilabel *label18 (m:*label50)
+   16 jump *label12 always
+   17 multilabel *label19 (m:*label50)
+   18 jump *label12 always
+   19 multilabel *label20 (m:*label50)
+   20 jump *label12 always
+   21 multilabel *label21 (m:*label50)
+   22 jump *label12 always
+   23 multilabel *label22 (m:*label50)
+   24 jump *label12 always
+   25 multilabel *label23 (m:*label50)
+   26 jump *label12 always
+   27 multilabel *label24 (m:*label50)
+   28 jump *label12 always
+   29 multilabel *label25 (m:*label50)
+   30 jump *label12 always
+   31 multilabel *label26 (m:*label50)
+   32 jump *label12 always
+   33 multilabel *label27 (m:*label50)
+   34 jump *label12 always
+   35 multilabel *label28 (m:*label50)
+   36 jump *label12 always
+   37 multilabel *label29 (m:*label50)
+   38 jump *label12 always
+   39 multilabel *label30 (m:*label50)
+   40 jump *label12 always
+   41 multilabel *label31 (m:*label50)
+   42 jump *label12 always
+   43 multilabel *label32 (m:*label50)
+   44 jump *label8 always
+   45 multilabel *label33 (m:*label50)
+   46 jump *label8 always
+   47 multilabel *label34 (m:*label50)
+   48 jump *label8 always
+   49 multilabel *label35 (m:*label50)
+   50 jump *label8 always
+   51 multilabel *label36 (m:*label50)
+   52 jump *label8 always
+   53 multilabel *label37 (m:*label50)
+   54 jump *label8 always
+   55 multilabel *label38 (m:*label50)
+   56 jump *label8 always
+   57 multilabel *label39 (m:*label50)
+   58 jump *label8 always
+   59 multilabel *label40 (m:*label50)
+   60 jump *label8 always
+   61 multilabel *label41 (m:*label50)
+   62 jump *label8 always
+   63 multilabel *label42 (m:*label50)
+   64 jump *label8 always
+   65 multilabel *label43 (m:*label50)
+   66 jump *label8 always
+   67 multilabel *label44 (m:*label50)
+   68 jump *label12 always
+   69 multilabel *label45 (m:*label50)
+   70 jump *label12 always
+   71 multilabel *label46 (m:*label50)
+   72 jump *label8 always
+   73 multilabel *label47 (m:*label50)
+   74 jump *label8 always
+   75 multilabel *label48 (m:*label50)
+   76 jump *label8 always
+   77 multilabel *label49 (m:*label50)
+   78 jump *label8 always
+   79 label *label14
+   80 jump *label51 greaterThanEq *tmp8 206
+   81 jump *label8 equal *tmp8 203
+   82 jump *label8 equal *tmp8 204
+   83 jump *label12 always
+   84 label *label51
+   85 jump *label8 lessThan *tmp8 208
+   86 label *label52
+   87 jump *label53 greaterThanEq *tmp8 234
+   88 jump *label8 equal *tmp8 220
+   89 jump *label8 equal *tmp8 221
+   90 jump *label8 equal *tmp8 225
+   91 jump *label12 always
+   92 label *label53
+   93 jump *label8 lessThan *tmp8 235
+   94 jump *label12 always
    95 label *label6
    96 set *tmp2 2
    97 jump *label4 always
    98 label *label5
-    * jump *label8 equal :block @copper-wall
-    * jump *label8 equal :block @copper-wall-large
-    * jump *label8 equal :block @titanium-wall
-    * jump *label8 equal :block @titanium-wall-large
-    * jump *label8 equal :block @plastanium-wall
-    * jump *label8 equal :block @plastanium-wall-large
-    * jump *label8 equal :block @thorium-wall
-    * jump *label8 equal :block @thorium-wall-large
-    * jump *label8 equal :block @phase-wall
-    * jump *label8 equal :block @phase-wall-large
-    * jump *label8 equal :block @surge-wall
-    * jump *label8 equal :block @surge-wall-large
-    * jump *label8 equal :block @scrap-wall
-    * jump *label8 equal :block @scrap-wall-large
-    * jump *label8 equal :block @scrap-wall-huge
-    * jump *label8 equal :block @scrap-wall-gigantic
-    * jump *label8 equal :block @beryllium-wall
-    * jump *label8 equal :block @beryllium-wall-large
-    * jump *label8 equal :block @tungsten-wall
-    * jump *label8 equal :block @tungsten-wall-large
-    * jump *label8 equal :block @reinforced-surge-wall
-    * jump *label8 equal :block @reinforced-surge-wall-large
-    * jump *label8 equal :block @carbide-wall
-    * jump *label7 notEqual :block @carbide-wall-large
    99 label *label8
   100 set *tmp2 true
   101 jump *label4 always
   102 label *label7
+  103 label *label13
+  104 jump *label6 strictEqual *tmp8 null
+  105 label *label12
   106 set *tmp2 false
   107 label *label4
   108 label *label3

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set :hash 0
     1 set :i 0
-    * label *label0
     2 label *label11
     3 lookup block :block :i
     4 # "Function: def isWall(in block)"
 
    82 jump *label12 always
    83 label *label51
    84 jump *label8 lessThan *tmp8 208
-    * label *label52
    85 jump *label53 greaterThanEq *tmp8 234
    86 jump *label8 equal *tmp8 220
    87 jump *label8 equal *tmp8 221
 
    93 label *label6
    94 set *tmp2 2
    95 jump *label4 always
-    * label *label5
    96 label *label8
    97 set *tmp2 true
    98 jump *label4 always
-    * label *label7
-    * label *label13
    99 jump *label6 strictEqual *tmp8 null
   100 label *label12
   101 set *tmp2 false
   102 label *label4
-    * label *label3
   103 jump *label9 equal *tmp2 false
   104 print :block
   105 print "\n"
 
   107 op add *tmp6 *tmp5 :i
   108 op and :hash *tmp6 0xFFFFFFFF
   109 label *label9
-    * label *label10
-    * label *label1
   110 op add :i :i 1
   111 jump *label11 lessThan :i 240
-    * label *label2
   112 print :hash
   113 assertequals 2376794836 :hash "Test selected blocks"
   114 end

Modifications by Jumps phase, Unreachable Code Elimination, pass 3, iteration 1 (-3 instructions):
 
    90 label *label53
    91 jump *label8 lessThan *tmp8 235
    92 jump *label12 always
-    * label *label6
-    * set *tmp2 2
-    * jump *label4 always
    93 label *label8
    94 set *tmp2 true
    95 jump *label4 always
-    * jump *label6 strictEqual *tmp8 null
    96 label *label12
    97 set *tmp2 false
    98 label *label4

Modifications by Jumps phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   107 jump *label11 lessThan :i 240
   108 print :hash
   109 assertequals 2376794836 :hash "Test selected blocks"
-    * end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-1 instructions):
 
    88 jump *label8 equal *tmp8 225
    89 jump *label12 always
    90 label *label53
-    * jump *label8 lessThan *tmp8 235
-    * jump *label12 always
+   91 jump *label12 greaterThanEq *tmp8 235
    92 label *label8
    93 set *tmp2 true
    94 jump *label4 always

Final code before resolving virtual instructions:

set :hash 0
set :i 0
label *label11
lookup block :block :i
# "Function: def isWall(in block)"
sensor *tmp8 :block @id
jump *label14 greaterThanEq *tmp8 35
multijump *label15 *tmp8 0
multilabel *label15
jump *label12 always
multilabel *label16
jump *label12 always
multilabel *label17
jump *label12 always
multilabel *label18
jump *label12 always
multilabel *label19
jump *label12 always
multilabel *label20
jump *label12 always
multilabel *label21
jump *label12 always
multilabel *label22
jump *label12 always
multilabel *label23
jump *label12 always
multilabel *label24
jump *label12 always
multilabel *label25
jump *label12 always
multilabel *label26
jump *label12 always
multilabel *label27
jump *label12 always
multilabel *label28
jump *label12 always
multilabel *label29
jump *label12 always
multilabel *label30
jump *label12 always
multilabel *label31
jump *label12 always
multilabel *label32
jump *label8 always
multilabel *label33
jump *label8 always
multilabel *label34
jump *label8 always
multilabel *label35
jump *label8 always
multilabel *label36
jump *label8 always
multilabel *label37
jump *label8 always
multilabel *label38
jump *label8 always
multilabel *label39
jump *label8 always
multilabel *label40
jump *label8 always
multilabel *label41
jump *label8 always
multilabel *label42
jump *label8 always
multilabel *label43
jump *label8 always
multilabel *label44
jump *label12 always
multilabel *label45
jump *label12 always
multilabel *label46
jump *label8 always
multilabel *label47
jump *label8 always
multilabel *label48
jump *label8 always
multilabel *label49
jump *label8 always
label *label14
jump *label51 greaterThanEq *tmp8 206
jump *label8 equal *tmp8 203
jump *label8 equal *tmp8 204
jump *label12 always
label *label51
jump *label8 lessThan *tmp8 208
jump *label53 greaterThanEq *tmp8 234
jump *label8 equal *tmp8 220
jump *label8 equal *tmp8 221
jump *label8 equal *tmp8 225
jump *label12 always
label *label53
jump *label12 greaterThanEq *tmp8 235
label *label8
set *tmp2 true
jump *label4 always
label *label12
set *tmp2 false
label *label4
jump *label9 equal *tmp2 false
print :block
print "\n"
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op and :hash *tmp6 0xFFFFFFFF
label *label9
op add :i :i 1
jump *label11 lessThan :i 240
print :hash
assertequals 2376794836 :hash "Test selected blocks"
