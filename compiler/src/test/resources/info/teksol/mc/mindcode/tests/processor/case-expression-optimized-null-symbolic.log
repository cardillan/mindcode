    55 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions eliminated by Data Flow Optimization (5 iterations).
     1 instructions eliminated by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     7 instructions eliminated by Case Switching (3 iterations).
     1 case expressions converted to switched jumps Case Switching.
     1 instructions eliminated by Jump Straightening (4 iterations).
    37 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 55):
  ! Convert case at line 4:5 (segments: 1)                       cost   198, benefit      175.0, efficiency      0.884
  o Convert case at line 4:5 (segments: 3)                       cost    35, benefit      165.6, efficiency      4.732
  o Convert case at line 4:5 (segments: 5)                       cost    10, benefit      179.2, efficiency     17.917
  * Convert case at line 4:5 (segments: 5)                       cost     0, benefit      179.2, efficiency   Infinity (-7 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     5 set :block *tmp0
     6 # "Function: def isWall(in block)"
     7 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 strictEqual *tmp3 null
+    8 jump *label6 strictEqual :isWall:block null
     9 jump *label5 always
    10 label *label6
    11 set *tmp2 2
    12 jump *label4 always
    13 label *label5
-    * jump *label8 equal *tmp3 @copper-wall
-    * jump *label8 equal *tmp3 @copper-wall-large
-    * jump *label8 equal *tmp3 @titanium-wall
-    * jump *label8 equal *tmp3 @titanium-wall-large
-    * jump *label8 equal *tmp3 @plastanium-wall
-    * jump *label8 equal *tmp3 @plastanium-wall-large
-    * jump *label8 equal *tmp3 @thorium-wall
-    * jump *label8 equal *tmp3 @thorium-wall-large
-    * jump *label8 equal *tmp3 @phase-wall
-    * jump *label8 equal *tmp3 @phase-wall-large
-    * jump *label8 equal *tmp3 @surge-wall
-    * jump *label8 equal *tmp3 @surge-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall
-    * jump *label8 equal *tmp3 @scrap-wall-large
-    * jump *label8 equal *tmp3 @scrap-wall-huge
-    * jump *label8 equal *tmp3 @scrap-wall-gigantic
-    * jump *label8 equal *tmp3 @beryllium-wall
-    * jump *label8 equal *tmp3 @beryllium-wall-large
-    * jump *label8 equal *tmp3 @tungsten-wall
-    * jump *label8 equal *tmp3 @tungsten-wall-large
-    * jump *label8 equal *tmp3 @reinforced-surge-wall
-    * jump *label8 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label8 equal *tmp3 @carbide-wall
-    * jump *label8 equal *tmp3 @carbide-wall-large
+   14 jump *label8 equal :isWall:block @copper-wall
+   15 jump *label8 equal :isWall:block @copper-wall-large
+   16 jump *label8 equal :isWall:block @titanium-wall
+   17 jump *label8 equal :isWall:block @titanium-wall-large
+   18 jump *label8 equal :isWall:block @plastanium-wall
+   19 jump *label8 equal :isWall:block @plastanium-wall-large
+   20 jump *label8 equal :isWall:block @thorium-wall
+   21 jump *label8 equal :isWall:block @thorium-wall-large
+   22 jump *label8 equal :isWall:block @phase-wall
+   23 jump *label8 equal :isWall:block @phase-wall-large
+   24 jump *label8 equal :isWall:block @surge-wall
+   25 jump *label8 equal :isWall:block @surge-wall-large
+   26 jump *label8 equal :isWall:block @scrap-wall
+   27 jump *label8 equal :isWall:block @scrap-wall-large
+   28 jump *label8 equal :isWall:block @scrap-wall-huge
+   29 jump *label8 equal :isWall:block @scrap-wall-gigantic
+   30 jump *label8 equal :isWall:block @beryllium-wall
+   31 jump *label8 equal :isWall:block @beryllium-wall-large
+   32 jump *label8 equal :isWall:block @tungsten-wall
+   33 jump *label8 equal :isWall:block @tungsten-wall-large
+   34 jump *label8 equal :isWall:block @reinforced-surge-wall
+   35 jump *label8 equal :isWall:block @reinforced-surge-wall-large
+   36 jump *label8 equal :isWall:block @carbide-wall
+   37 jump *label8 equal :isWall:block @carbide-wall-large
    38 jump *label7 always
    39 label *label8
    40 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    51 op add *tmp6 *tmp5 :i
    52 op and *tmp7 *tmp6 0xFFFFFFFF
    53 set :hash *tmp7
-    * set *tmp4 :hash
    54 jump *label10 always
    55 label *label9
-    * set *tmp4 null
    56 label *label10
    57 label *label1
    58 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i 0
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
     7 jump *label6 strictEqual :isWall:block null
 
    48 print "\n"
    49 op mul *tmp5 :hash 31
    50 op add *tmp6 *tmp5 :i
-    * op and *tmp7 *tmp6 0xFFFFFFFF
-    * set :hash *tmp7
+   51 op and :hash *tmp6 0xFFFFFFFF
    52 jump *label10 always
    53 label *label9
    54 label *label10

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    33 jump *label8 equal :isWall:block @reinforced-surge-wall
    34 jump *label8 equal :isWall:block @reinforced-surge-wall-large
    35 jump *label8 equal :isWall:block @carbide-wall
-    * jump *label8 equal :isWall:block @carbide-wall-large
-    * jump *label7 always
+   36 jump *label7 notEqual :isWall:block @carbide-wall-large
    37 label *label8
    38 set *tmp2 true
    39 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    48 op mul *tmp5 :hash 31
    49 op add *tmp6 *tmp5 :i
    50 op and :hash *tmp6 0xFFFFFFFF
-    * jump *label10 always
    51 label *label9
    52 label *label10
    53 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
-    * jump *label6 strictEqual :isWall:block null
+    7 jump *label6 strictEqual :block null
     8 jump *label5 always
     9 label *label6
    10 set *tmp2 2
    11 jump *label4 always
    12 label *label5
-    * jump *label8 equal :isWall:block @copper-wall
-    * jump *label8 equal :isWall:block @copper-wall-large
-    * jump *label8 equal :isWall:block @titanium-wall
-    * jump *label8 equal :isWall:block @titanium-wall-large
-    * jump *label8 equal :isWall:block @plastanium-wall
-    * jump *label8 equal :isWall:block @plastanium-wall-large
-    * jump *label8 equal :isWall:block @thorium-wall
-    * jump *label8 equal :isWall:block @thorium-wall-large
-    * jump *label8 equal :isWall:block @phase-wall
-    * jump *label8 equal :isWall:block @phase-wall-large
-    * jump *label8 equal :isWall:block @surge-wall
-    * jump *label8 equal :isWall:block @surge-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall
-    * jump *label8 equal :isWall:block @scrap-wall-large
-    * jump *label8 equal :isWall:block @scrap-wall-huge
-    * jump *label8 equal :isWall:block @scrap-wall-gigantic
-    * jump *label8 equal :isWall:block @beryllium-wall
-    * jump *label8 equal :isWall:block @beryllium-wall-large
-    * jump *label8 equal :isWall:block @tungsten-wall
-    * jump *label8 equal :isWall:block @tungsten-wall-large
-    * jump *label8 equal :isWall:block @reinforced-surge-wall
-    * jump *label8 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label8 equal :isWall:block @carbide-wall
-    * jump *label7 notEqual :isWall:block @carbide-wall-large
+   13 jump *label8 equal :block @copper-wall
+   14 jump *label8 equal :block @copper-wall-large
+   15 jump *label8 equal :block @titanium-wall
+   16 jump *label8 equal :block @titanium-wall-large
+   17 jump *label8 equal :block @plastanium-wall
+   18 jump *label8 equal :block @plastanium-wall-large
+   19 jump *label8 equal :block @thorium-wall
+   20 jump *label8 equal :block @thorium-wall-large
+   21 jump *label8 equal :block @phase-wall
+   22 jump *label8 equal :block @phase-wall-large
+   23 jump *label8 equal :block @surge-wall
+   24 jump *label8 equal :block @surge-wall-large
+   25 jump *label8 equal :block @scrap-wall
+   26 jump *label8 equal :block @scrap-wall-large
+   27 jump *label8 equal :block @scrap-wall-huge
+   28 jump *label8 equal :block @scrap-wall-gigantic
+   29 jump *label8 equal :block @beryllium-wall
+   30 jump *label8 equal :block @beryllium-wall-large
+   31 jump *label8 equal :block @tungsten-wall
+   32 jump *label8 equal :block @tungsten-wall-large
+   33 jump *label8 equal :block @reinforced-surge-wall
+   34 jump *label8 equal :block @reinforced-surge-wall-large
+   35 jump *label8 equal :block @carbide-wall
+   36 jump *label7 notEqual :block @carbide-wall-large
    37 label *label8
    38 set *tmp2 true
    39 jump *label4 always
 
    42 label *label4
    43 set *tmp1 *tmp2
    44 label *label3
-    * jump *label9 equal *tmp1 false
+   45 jump *label9 equal *tmp2 false
    46 print :block
    47 print "\n"
    48 op mul *tmp5 :hash 31

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * set :isWall:block :block
     6 jump *label6 strictEqual :block null
     7 jump *label5 always
     8 label *label6
 
    39 label *label7
    40 set *tmp2 false
    41 label *label4
-    * set *tmp1 *tmp2
    42 label *label3
    43 jump *label9 equal *tmp2 false
    44 print :block

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i 0
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label11
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 jump *label6 strictEqual :block null
 
    50 label *label10
    51 label *label1
    52 op add :i :i 1
-    * jump *label0 always
+   53 jump *label11 lessThan :i 240
    54 label *label2
    55 print :hash
    56 assertequals 2376794836 :hash "Test selected blocks"

Modifications by Convert case at line 4:5 (segments: 5) (-7 instructions):
 
     3 label *label11
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * jump *label6 strictEqual :block null
-    * jump *label5 always
+    6 sensor *tmp8 :block @id
+    7 jump *label14 greaterThanEq *tmp8 35
+    8 jump *label12 equal *tmp8 29
+    9 jump *label12 equal *tmp8 30
+   10 jump *label13 lessThan *tmp8 17
+   11 jump *label8 always
+   12 label *label14
+   13 jump *label15 greaterThanEq *tmp8 206
+   14 jump *label8 equal *tmp8 203
+   15 jump *label8 equal *tmp8 204
+   16 jump *label12 always
+   17 label *label15
+   18 jump *label8 lessThan *tmp8 208
+   19 label *label16
+   20 jump *label17 greaterThanEq *tmp8 234
+   21 jump *label8 equal *tmp8 220
+   22 jump *label8 equal *tmp8 221
+   23 jump *label8 equal *tmp8 225
+   24 jump *label12 always
+   25 label *label17
+   26 jump *label8 lessThan *tmp8 235
+   27 jump *label12 always
    28 label *label6
    29 set *tmp2 2
    30 jump *label4 always
    31 label *label5
-    * jump *label8 equal :block @copper-wall
-    * jump *label8 equal :block @copper-wall-large
-    * jump *label8 equal :block @titanium-wall
-    * jump *label8 equal :block @titanium-wall-large
-    * jump *label8 equal :block @plastanium-wall
-    * jump *label8 equal :block @plastanium-wall-large
-    * jump *label8 equal :block @thorium-wall
-    * jump *label8 equal :block @thorium-wall-large
-    * jump *label8 equal :block @phase-wall
-    * jump *label8 equal :block @phase-wall-large
-    * jump *label8 equal :block @surge-wall
-    * jump *label8 equal :block @surge-wall-large
-    * jump *label8 equal :block @scrap-wall
-    * jump *label8 equal :block @scrap-wall-large
-    * jump *label8 equal :block @scrap-wall-huge
-    * jump *label8 equal :block @scrap-wall-gigantic
-    * jump *label8 equal :block @beryllium-wall
-    * jump *label8 equal :block @beryllium-wall-large
-    * jump *label8 equal :block @tungsten-wall
-    * jump *label8 equal :block @tungsten-wall-large
-    * jump *label8 equal :block @reinforced-surge-wall
-    * jump *label8 equal :block @reinforced-surge-wall-large
-    * jump *label8 equal :block @carbide-wall
-    * jump *label7 notEqual :block @carbide-wall-large
    32 label *label8
    33 set *tmp2 true
    34 jump *label4 always
    35 label *label7
+   36 label *label13
+   37 jump *label6 strictEqual *tmp8 null
+   38 label *label12
    39 set *tmp2 false
    40 label *label4
    41 label *label3

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set :hash 0
     1 set :i 0
-    * label *label0
     2 label *label11
     3 lookup block :block :i
     4 # "Function: def isWall(in block)"
 
    15 jump *label12 always
    16 label *label15
    17 jump *label8 lessThan *tmp8 208
-    * label *label16
    18 jump *label17 greaterThanEq *tmp8 234
    19 jump *label8 equal *tmp8 220
    20 jump *label8 equal *tmp8 221
 
    26 label *label6
    27 set *tmp2 2
    28 jump *label4 always
-    * label *label5
    29 label *label8
    30 set *tmp2 true
    31 jump *label4 always
-    * label *label7
    32 label *label13
    33 jump *label6 strictEqual *tmp8 null
    34 label *label12
    35 set *tmp2 false
    36 label *label4
-    * label *label3
    37 jump *label9 equal *tmp2 false
    38 print :block
    39 print "\n"
 
    41 op add *tmp6 *tmp5 :i
    42 op and :hash *tmp6 0xFFFFFFFF
    43 label *label9
-    * label *label10
-    * label *label1
    44 op add :i :i 1
    45 jump *label11 lessThan :i 240
-    * label *label2
    46 print :hash
    47 assertequals 2376794836 :hash "Test selected blocks"
    48 end

Modifications by Jumps phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
    45 jump *label11 lessThan :i 240
    46 print :hash
    47 assertequals 2376794836 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i 0
label *label11
lookup block :block :i
# "Function: def isWall(in block)"
sensor *tmp8 :block @id
jump *label14 greaterThanEq *tmp8 35
jump *label12 equal *tmp8 29
jump *label12 equal *tmp8 30
jump *label13 lessThan *tmp8 17
jump *label8 always
label *label14
jump *label15 greaterThanEq *tmp8 206
jump *label8 equal *tmp8 203
jump *label8 equal *tmp8 204
jump *label12 always
label *label15
jump *label8 lessThan *tmp8 208
jump *label17 greaterThanEq *tmp8 234
jump *label8 equal *tmp8 220
jump *label8 equal *tmp8 221
jump *label8 equal *tmp8 225
jump *label12 always
label *label17
jump *label8 lessThan *tmp8 235
jump *label12 always
label *label6
set *tmp2 2
jump *label4 always
label *label8
set *tmp2 true
jump *label4 always
label *label13
jump *label6 strictEqual *tmp8 null
label *label12
set *tmp2 false
label *label4
jump *label9 equal *tmp2 false
print :block
print "\n"
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op and :hash *tmp6 0xFFFFFFFF
label *label9
op add :i :i 1
jump *label11 lessThan :i 240
print :hash
assertequals 2376794836 :hash "Test selected blocks"
