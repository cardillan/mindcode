   100 instructions before optimizations.
    10 instructions eliminated by Temp Variables Elimination.
    10 instructions eliminated by Dead Code Elimination (4 iterations).
     7 instructions eliminated by Jump Optimization (4 iterations).
     5 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions modified by Expression Optimization (3 iterations).
    14 instructions eliminated by Data Flow Optimization (2 passes, 7 iterations).
     2 instructions added by Loop Optimization (3 iterations).
     5 loops improved by Loop Optimization.
     2 instructions updated by JumpThreading.
     2 instructions eliminated by Unreachable Code Elimination.
    54 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 943):
  * Replicate loop condition at line 31:5                        cost     2, benefit      625.0, efficiency      312.5 (+2 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-8 instructions):
 
    25 set *tmp12 :up.0:parent
    26 write :up.0:iv ARRAY *tmp12
    27 set :up.0:index :up.0:parent
-    * set *tmp9 :up.0:index
    28 jump *label9 always
    29 label *label8
    30 jump *label7 always
-    * set *tmp9 null
    31 label *label9
    32 label *label6
    33 jump *label5 always
    34 label *label7
-    * set *tmp0 null
    35 label *label4
    36 label *label2
    37 op add :i :i 1
 
    77 label *label19
    78 set *tmp34 null
    79 label *label20
-    * set *tmp29 *tmp34
    80 jump *label18 always
    81 label *label17
-    * set *tmp29 null
    82 label *label18
    83 set *tmp37 :down.0:parent
    84 read *tmp38 ARRAY *tmp37
 
    90 set *tmp43 :down.0:child
    91 write :down.0:pv ARRAY *tmp43
    92 set :down.0:parent :down.0:child
-    * set *tmp40 :down.0:parent
    93 jump *label22 always
    94 label *label21
    95 jump *label16 always
-    * set *tmp40 null
    96 label *label22
    97 label *label15
    98 jump *label14 always
    99 label *label16
-    * set *tmp22 null
   100 label *label13
   101 label *label11
   102 jump *label10 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-2 instructions):
 
    72 set *tmp35 :down.0:child
    73 read *tmp36 ARRAY *tmp35
    74 set :down.0:cv *tmp36
-    * set *tmp34 :down.0:cv
    75 jump *label20 always
    76 label *label19
-    * set *tmp34 null
    77 label *label20
    78 jump *label18 always
    79 label *label17

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-10 instructions):
 
    10 op greaterThan *tmp1 :up.0:index 0
    11 jump *label7 equal *tmp1 false
    12 op sub *tmp2 :up.0:index 1
-    * op idiv *tmp3 *tmp2 2
-    * set :up.0:parent *tmp3
+   13 op idiv :up.0:parent *tmp2 2
    14 set *tmp4 :up.0:index
-    * read *tmp5 ARRAY *tmp4
-    * set :up.0:iv *tmp5
+   15 read :up.0:iv ARRAY *tmp4
    16 set *tmp6 :up.0:parent
-    * read *tmp7 ARRAY *tmp6
-    * set :up.0:pv *tmp7
+   17 read :up.0:pv ARRAY *tmp6
    18 op lessThan *tmp8 :up.0:pv :up.0:iv
    19 jump *label8 equal *tmp8 false
    20 set *tmp10 :up.0:index
 
    34 op add :i :i 1
    35 jump *label1 always
    36 label *label3
-    * op sub *tmp14 SIZE 1
-    * set :index *tmp14
+   37 op sub :index SIZE 1
    38 label *label10
    39 op greaterThan *tmp15 :index 0
    40 jump *label12 equal *tmp15 false
-    * read *tmp16 ARRAY 0
-    * set :x *tmp16
+   41 read :x ARRAY 0
    42 set *tmp18 :index
    43 read *tmp19 ARRAY *tmp18
    44 write *tmp19 ARRAY 0
 
    49 set :down.0:parent 0
    50 label *label14
    51 op mul *tmp23 :down.0:parent 2
-    * op add *tmp24 *tmp23 1
-    * set :down.0:child *tmp24
+   52 op add :down.0:child *tmp23 1
    53 op lessThanEq *tmp25 :down.0:child :down.0:index
    54 jump *label16 equal *tmp25 false
    55 set *tmp26 :down.0:child
-    * read *tmp27 ARRAY *tmp26
-    * set :down.0:cv *tmp27
+   56 read :down.0:cv ARRAY *tmp26
    57 op lessThan *tmp28 :down.0:child :down.0:index
    58 jump *label17 equal *tmp28 false
-    * op add *tmp30 :down.0:child 1
-    * set *tmp31 *tmp30
+   59 op add *tmp31 :down.0:child 1
    60 read *tmp32 ARRAY *tmp31
    61 op lessThan *tmp33 :down.0:cv *tmp32
    62 jump *label19 equal *tmp33 false
    63 op add :down.0:child :down.0:child 1
    64 set *tmp35 :down.0:child
-    * read *tmp36 ARRAY *tmp35
-    * set :down.0:cv *tmp36
+   65 read :down.0:cv ARRAY *tmp35
    66 jump *label20 always
    67 label *label19
    68 label *label20
 
    70 label *label17
    71 label *label18
    72 set *tmp37 :down.0:parent
-    * read *tmp38 ARRAY *tmp37
-    * set :down.0:pv *tmp38
+   73 read :down.0:pv ARRAY *tmp37
    74 op lessThan *tmp39 :down.0:pv :down.0:cv
    75 jump *label21 equal *tmp39 false
    76 set *tmp41 :down.0:parent

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-7 instructions):
 
     7 jump *label3 greaterThanEq :i SIZE
     8 set :up.0:index :i
     9 label *label5
-    * op greaterThan *tmp1 :up.0:index 0
-    * jump *label7 equal *tmp1 false
+   10 jump *label7 lessThanEq :up.0:index 0
    11 op sub *tmp2 :up.0:index 1
    12 op idiv :up.0:parent *tmp2 2
    13 set *tmp4 :up.0:index
    14 read :up.0:iv ARRAY *tmp4
    15 set *tmp6 :up.0:parent
    16 read :up.0:pv ARRAY *tmp6
-    * op lessThan *tmp8 :up.0:pv :up.0:iv
-    * jump *label8 equal *tmp8 false
+   17 jump *label8 greaterThanEq :up.0:pv :up.0:iv
    18 set *tmp10 :up.0:index
    19 write :up.0:pv ARRAY *tmp10
    20 set *tmp12 :up.0:parent
 
    34 label *label3
    35 op sub :index SIZE 1
    36 label *label10
-    * op greaterThan *tmp15 :index 0
-    * jump *label12 equal *tmp15 false
+   37 jump *label12 lessThanEq :index 0
    38 read :x ARRAY 0
    39 set *tmp18 :index
    40 read *tmp19 ARRAY *tmp18
 
    47 label *label14
    48 op mul *tmp23 :down.0:parent 2
    49 op add :down.0:child *tmp23 1
-    * op lessThanEq *tmp25 :down.0:child :down.0:index
-    * jump *label16 equal *tmp25 false
+   50 jump *label16 greaterThan :down.0:child :down.0:index
    51 set *tmp26 :down.0:child
    52 read :down.0:cv ARRAY *tmp26
-    * op lessThan *tmp28 :down.0:child :down.0:index
-    * jump *label17 equal *tmp28 false
+   53 jump *label17 greaterThanEq :down.0:child :down.0:index
    54 op add *tmp31 :down.0:child 1
    55 read *tmp32 ARRAY *tmp31
-    * op lessThan *tmp33 :down.0:cv *tmp32
-    * jump *label19 equal *tmp33 false
+   56 jump *label19 greaterThanEq :down.0:cv *tmp32
    57 op add :down.0:child :down.0:child 1
    58 set *tmp35 :down.0:child
    59 read :down.0:cv ARRAY *tmp35
 
    65 label *label18
    66 set *tmp37 :down.0:parent
    67 read :down.0:pv ARRAY *tmp37
-    * op lessThan *tmp39 :down.0:pv :down.0:cv
-    * jump *label21 equal *tmp39 false
+   68 jump *label21 greaterThanEq :down.0:pv :down.0:cv
    69 set *tmp41 :down.0:parent
    70 write :down.0:cv ARRAY *tmp41
    71 set *tmp43 :down.0:child

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    57 op add :down.0:child :down.0:child 1
    58 set *tmp35 :down.0:child
    59 read :down.0:cv ARRAY *tmp35
-    * jump *label20 always
    60 label *label19
    61 label *label20
-    * jump *label18 always
    62 label *label17
    63 label *label18
    64 set *tmp37 :down.0:parent

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    11 op sub *tmp2 :up.0:index 1
    12 op idiv :up.0:parent *tmp2 2
    13 set *tmp4 :up.0:index
-    * read :up.0:iv ARRAY *tmp4
+   14 read :up.0:iv ARRAY :up.0:index
    15 set *tmp6 :up.0:parent
-    * read :up.0:pv ARRAY *tmp6
+   16 read :up.0:pv ARRAY :up.0:parent
    17 jump *label8 greaterThanEq :up.0:pv :up.0:iv
    18 set *tmp10 :up.0:index
-    * write :up.0:pv ARRAY *tmp10
+   19 write :up.0:pv ARRAY :up.0:index
    20 set *tmp12 :up.0:parent
-    * write :up.0:iv ARRAY *tmp12
+   21 write :up.0:iv ARRAY :up.0:parent
    22 set :up.0:index :up.0:parent
    23 jump *label9 always
    24 label *label8
 
    37 jump *label12 lessThanEq :index 0
    38 read :x ARRAY 0
    39 set *tmp18 :index
-    * read *tmp19 ARRAY *tmp18
+   40 read *tmp19 ARRAY :index
    41 write *tmp19 ARRAY 0
    42 set *tmp20 :index
-    * write :x ARRAY *tmp20
+   43 write :x ARRAY :index
    44 op sub :index :index 1
    45 set :down.0:index :index
    46 set :down.0:parent 0
    47 label *label14
    48 op mul *tmp23 :down.0:parent 2
    49 op add :down.0:child *tmp23 1
-    * jump *label16 greaterThan :down.0:child :down.0:index
+   50 jump *label16 greaterThan :down.0:child :index
    51 set *tmp26 :down.0:child
-    * read :down.0:cv ARRAY *tmp26
-    * jump *label17 greaterThanEq :down.0:child :down.0:index
+   52 read :down.0:cv ARRAY :down.0:child
+   53 jump *label17 greaterThanEq :down.0:child :index
    54 op add *tmp31 :down.0:child 1
    55 read *tmp32 ARRAY *tmp31
    56 jump *label19 greaterThanEq :down.0:cv *tmp32
-    * op add :down.0:child :down.0:child 1
+   57 op add :down.0:child *tmp23 2
    58 set *tmp35 :down.0:child
-    * read :down.0:cv ARRAY *tmp35
+   59 read :down.0:cv ARRAY :down.0:child
    60 label *label19
    61 label *label20
    62 label *label17
    63 label *label18
    64 set *tmp37 :down.0:parent
-    * read :down.0:pv ARRAY *tmp37
+   65 read :down.0:pv ARRAY :down.0:parent
    66 jump *label21 greaterThanEq :down.0:pv :down.0:cv
    67 set *tmp41 :down.0:parent
-    * write :down.0:cv ARRAY *tmp41
+   68 write :down.0:cv ARRAY :down.0:parent
    69 set *tmp43 :down.0:child
-    * write :down.0:pv ARRAY *tmp43
+   70 write :down.0:pv ARRAY :down.0:child
    71 set :down.0:parent :down.0:child
    72 jump *label22 always
    73 label *label21
 
    85 jump *label25 greaterThanEq :i SIZE
    86 set *tmp45 :i
    87 set *tmp47 :i
-    * read *tmp46 FINAL *tmp45
-    * read *tmp48 ARRAY *tmp47
+   88 read *tmp46 FINAL :i
+   89 read *tmp48 ARRAY :i
    90 assertequals *tmp46 *tmp48 "unexpected value"
    91 label *label24
    92 op add :i :i 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-14 instructions):
 
    10 jump *label7 lessThanEq :up.0:index 0
    11 op sub *tmp2 :up.0:index 1
    12 op idiv :up.0:parent *tmp2 2
-    * set *tmp4 :up.0:index
    13 read :up.0:iv ARRAY :up.0:index
-    * set *tmp6 :up.0:parent
    14 read :up.0:pv ARRAY :up.0:parent
    15 jump *label8 greaterThanEq :up.0:pv :up.0:iv
-    * set *tmp10 :up.0:index
    16 write :up.0:pv ARRAY :up.0:index
-    * set *tmp12 :up.0:parent
    17 write :up.0:iv ARRAY :up.0:parent
    18 set :up.0:index :up.0:parent
    19 jump *label9 always
 
    32 label *label10
    33 jump *label12 lessThanEq :index 0
    34 read :x ARRAY 0
-    * set *tmp18 :index
    35 read *tmp19 ARRAY :index
    36 write *tmp19 ARRAY 0
-    * set *tmp20 :index
    37 write :x ARRAY :index
    38 op sub :index :index 1
-    * set :down.0:index :index
    39 set :down.0:parent 0
    40 label *label14
    41 op mul *tmp23 :down.0:parent 2
    42 op add :down.0:child *tmp23 1
    43 jump *label16 greaterThan :down.0:child :index
-    * set *tmp26 :down.0:child
    44 read :down.0:cv ARRAY :down.0:child
    45 jump *label17 greaterThanEq :down.0:child :index
    46 op add *tmp31 :down.0:child 1
    47 read *tmp32 ARRAY *tmp31
    48 jump *label19 greaterThanEq :down.0:cv *tmp32
    49 op add :down.0:child *tmp23 2
-    * set *tmp35 :down.0:child
    50 read :down.0:cv ARRAY :down.0:child
    51 label *label19
    52 label *label20
    53 label *label17
    54 label *label18
-    * set *tmp37 :down.0:parent
    55 read :down.0:pv ARRAY :down.0:parent
    56 jump *label21 greaterThanEq :down.0:pv :down.0:cv
-    * set *tmp41 :down.0:parent
    57 write :down.0:cv ARRAY :down.0:parent
-    * set *tmp43 :down.0:child
    58 write :down.0:pv ARRAY :down.0:child
    59 set :down.0:parent :down.0:child
    60 jump *label22 always
 
    71 set :i 0
    72 label *label23
    73 jump *label25 greaterThanEq :i SIZE
-    * set *tmp45 :i
-    * set *tmp47 :i
    74 read *tmp46 FINAL :i
    75 read *tmp48 ARRAY :i
    76 assertequals *tmp46 *tmp48 "unexpected value"

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     5 set :i 1
     6 label *label1
     7 jump *label3 greaterThanEq :i SIZE
+    8 label *label30
     9 set :up.0:index :i
    10 label *label5
    11 jump *label7 lessThanEq :up.0:index 0
+   12 label *label31
    13 op sub *tmp2 :up.0:index 1
    14 op idiv :up.0:parent *tmp2 2
    15 read :up.0:iv ARRAY :up.0:index
 
    23 jump *label7 always
    24 label *label9
    25 label *label6
-    * jump *label5 always
+   26 jump *label31 greaterThan :up.0:index 0
    27 label *label7
    28 label *label4
    29 label *label2
    30 op add :i :i 1
-    * jump *label1 always
+   31 jump *label30 lessThan :i SIZE
    32 label *label3
    33 op sub :index SIZE 1
    34 label *label10
    35 jump *label12 lessThanEq :index 0
+   36 label *label32
    37 read :x ARRAY 0
    38 read *tmp19 ARRAY :index
    39 write *tmp19 ARRAY 0
 
    69 label *label16
    70 label *label13
    71 label *label11
-    * jump *label10 always
+   72 jump *label32 greaterThan :index 0
    73 label *label12
    74 set :i 0
    75 label *label23
    76 jump *label25 greaterThanEq :i SIZE
+   77 label *label33
    78 read *tmp46 FINAL :i
    79 read *tmp48 ARRAY :i
    80 assertequals *tmp46 *tmp48 "unexpected value"
    81 label *label24
    82 op add :i :i 1
-    * jump *label23 always
+   83 jump *label33 lessThan :i SIZE
    84 label *label25
    85 stop
    86 end

Modifications by Replicate loop condition at line 31:5 (+2 instructions):
 
    44 op mul *tmp23 :down.0:parent 2
    45 op add :down.0:child *tmp23 1
    46 jump *label16 greaterThan :down.0:child :index
+   47 label *label34
    48 read :down.0:cv ARRAY :down.0:child
    49 jump *label17 greaterThanEq :down.0:child :index
    50 op add *tmp31 :down.0:child 1
 
    66 jump *label16 always
    67 label *label22
    68 label *label15
-    * jump *label14 always
+   69 op mul *tmp23 :down.0:parent 2
+   70 op add :down.0:child *tmp23 1
+   71 jump *label34 lessThanEq :down.0:child :index
    72 label *label16
    73 label *label13
    74 label *label11

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 set FINAL bank3
     5 set :i 1
     6 label *label1
-    * jump *label3 greaterThanEq :i SIZE
+    7 jump *label3 greaterThanEq 1 SIZE
     8 label *label30
     9 set :up.0:index :i
    10 label *label5
-    * jump *label7 lessThanEq :up.0:index 0
+   11 jump *label7 lessThanEq :i 0
    12 label *label31
    13 op sub *tmp2 :up.0:index 1
    14 op idiv :up.0:parent *tmp2 2
 
    23 jump *label7 always
    24 label *label9
    25 label *label6
-    * jump *label31 greaterThan :up.0:index 0
+   26 jump *label31 greaterThan :up.0:parent 0
    27 label *label7
    28 label *label4
    29 label *label2
 
    41 op sub :index :index 1
    42 set :down.0:parent 0
    43 label *label14
-    * op mul *tmp23 :down.0:parent 2
-    * op add :down.0:child *tmp23 1
-    * jump *label16 greaterThan :down.0:child :index
+   44 op mul *tmp23 0 2
+   45 op add :down.0:child 0 1
+   46 jump *label16 greaterThan 1 :index
    47 label *label34
    48 read :down.0:cv ARRAY :down.0:child
    49 jump *label17 greaterThanEq :down.0:child :index
 
    66 jump *label16 always
    67 label *label22
    68 label *label15
-    * op mul *tmp23 :down.0:parent 2
+   69 op mul *tmp23 :down.0:child 2
    70 op add :down.0:child *tmp23 1
    71 jump *label34 lessThanEq :down.0:child :index
    72 label *label16
 
    76 label *label12
    77 set :i 0
    78 label *label23
-    * jump *label25 greaterThanEq :i SIZE
+   79 jump *label25 greaterThanEq 0 SIZE
    80 label *label33
    81 read *tmp46 FINAL :i
    82 read *tmp48 ARRAY :i

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    41 op sub :index :index 1
    42 set :down.0:parent 0
    43 label *label14
-    * op mul *tmp23 0 2
-    * op add :down.0:child 0 1
+   44 set *tmp23 0
+   45 set :down.0:child 1
    46 jump *label16 greaterThan 1 :index
    47 label *label34
    48 read :down.0:cv ARRAY :down.0:child

Modifications by Final phase, Jump Threading, iteration 1:
 
    14 op idiv :up.0:parent *tmp2 2
    15 read :up.0:iv ARRAY :up.0:index
    16 read :up.0:pv ARRAY :up.0:parent
-    * jump *label8 greaterThanEq :up.0:pv :up.0:iv
+   17 jump *label7 greaterThanEq :up.0:pv :up.0:iv
    18 write :up.0:pv ARRAY :up.0:index
    19 write :up.0:iv ARRAY :up.0:parent
    20 set :up.0:index :up.0:parent
 
    57 label *label17
    58 label *label18
    59 read :down.0:pv ARRAY :down.0:parent
-    * jump *label21 greaterThanEq :down.0:pv :down.0:cv
+   60 jump *label16 greaterThanEq :down.0:pv :down.0:cv
    61 write :down.0:cv ARRAY :down.0:parent
    62 write :down.0:pv ARRAY :down.0:child
    63 set :down.0:parent :down.0:child

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-2 instructions):
 
    19 write :up.0:iv ARRAY :up.0:parent
    20 set :up.0:index :up.0:parent
    21 jump *label9 always
-    * label *label8
-    * jump *label7 always
    22 label *label9
    23 label *label6
    24 jump *label31 greaterThan :up.0:parent 0
 
    60 write :down.0:pv ARRAY :down.0:child
    61 set :down.0:parent :down.0:child
    62 jump *label22 always
-    * label *label21
-    * jump *label16 always
    63 label *label22
    64 label *label15
    65 op mul *tmp23 :down.0:child 2

Modifications by Final phase, Single Step Elimination, iteration 1 (-3 instructions):
 
    18 write :up.0:pv ARRAY :up.0:index
    19 write :up.0:iv ARRAY :up.0:parent
    20 set :up.0:index :up.0:parent
-    * jump *label9 always
    21 label *label9
    22 label *label6
    23 jump *label31 greaterThan :up.0:parent 0
 
    58 write :down.0:cv ARRAY :down.0:parent
    59 write :down.0:pv ARRAY :down.0:child
    60 set :down.0:parent :down.0:child
-    * jump *label22 always
    61 label *label22
    62 label *label15
    63 op mul *tmp23 :down.0:child 2
 
    80 jump *label33 lessThan :i SIZE
    81 label *label25
    82 stop
-    * end

Final code before resolving virtual instructions:

set SIZE 512
label *label0
jump *label0 equal bank1 null
set ARRAY bank2
set FINAL bank3
set :i 1
jump *label3 greaterThanEq 1 SIZE
label *label30
set :up.0:index :i
jump *label7 lessThanEq :i 0
label *label31
op sub *tmp2 :up.0:index 1
op idiv :up.0:parent *tmp2 2
read :up.0:iv ARRAY :up.0:index
read :up.0:pv ARRAY :up.0:parent
jump *label7 greaterThanEq :up.0:pv :up.0:iv
write :up.0:pv ARRAY :up.0:index
write :up.0:iv ARRAY :up.0:parent
set :up.0:index :up.0:parent
jump *label31 greaterThan :up.0:parent 0
label *label7
op add :i :i 1
jump *label30 lessThan :i SIZE
label *label3
op sub :index SIZE 1
jump *label12 lessThanEq :index 0
label *label32
read :x ARRAY 0
read *tmp19 ARRAY :index
write *tmp19 ARRAY 0
write :x ARRAY :index
op sub :index :index 1
set :down.0:parent 0
set *tmp23 0
set :down.0:child 1
jump *label16 greaterThan 1 :index
label *label34
read :down.0:cv ARRAY :down.0:child
jump *label17 greaterThanEq :down.0:child :index
op add *tmp31 :down.0:child 1
read *tmp32 ARRAY *tmp31
jump *label19 greaterThanEq :down.0:cv *tmp32
op add :down.0:child *tmp23 2
read :down.0:cv ARRAY :down.0:child
label *label19
label *label17
read :down.0:pv ARRAY :down.0:parent
jump *label16 greaterThanEq :down.0:pv :down.0:cv
write :down.0:cv ARRAY :down.0:parent
write :down.0:pv ARRAY :down.0:child
set :down.0:parent :down.0:child
op mul *tmp23 :down.0:child 2
op add :down.0:child *tmp23 1
jump *label34 lessThanEq :down.0:child :index
label *label16
jump *label32 greaterThan :index 0
label *label12
set :i 0
jump *label25 greaterThanEq 0 SIZE
label *label33
read *tmp46 FINAL :i
read *tmp48 ARRAY :i
assertequals *tmp46 *tmp48 "unexpected value"
op add :i :i 1
jump *label33 lessThan :i SIZE
label *label25
stop
