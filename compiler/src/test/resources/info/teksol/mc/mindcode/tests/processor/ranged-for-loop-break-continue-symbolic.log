    39 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     5 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Jump Optimization (5 iterations).
     2 instructions eliminated by Single Step Elimination (6 iterations).
     1 instructions modified by Data Flow Optimization (4 iterations).
     1 instructions modified by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
     2 instructions eliminated by Jump Straightening (5 iterations).
     1 instructions eliminated by Unreachable Code Elimination (2 iterations).
    25 instructions after optimizations.

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-5 instructions):
 
    12 op equal *tmp4 :test:i 3
    13 jump *label5 equal *tmp4 false
    14 jump *label3 always
-    * set *tmp5 null
    15 jump *label6 always
    16 label *label5
-    * set *tmp5 null
    17 label *label6
    18 print :test:i
    19 print "|"
 
    23 op equal *tmp7 :test:i *tmp6
    24 jump *label7 equal *tmp7 false
    25 jump *label4 always
-    * set *tmp8 null
    26 jump *label8 always
    27 label *label7
-    * set *tmp8 null
    28 label *label8
    29 label *label3
    30 op add :test:i :test:i 1
    31 jump *label2 always
    32 label *label4
-    * set *tmp0 null
    33 label *label1
    34 assertprints "1|2|4|5|" "iterated-for-loop-break-continue"
    35 stop

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     4 set *tmp1 :d*retval
     5 set :d:n 10
     6 call *label0 :d*retaddr :d*retval
-    * set *tmp2 :d*retval
-    * set *tmp3 *tmp2
+    7 set *tmp3 :d*retval
     8 set :test:i *tmp1
     9 label *label2
    10 jump *label4 greaterThanEq :test:i *tmp3
 
    18 print "|"
    19 set :d:n 5
    20 call *label0 :d*retaddr :d*retval
-    * set *tmp6 :d*retval
-    * op equal *tmp7 :test:i *tmp6
+   21 op equal *tmp7 :test:i :d*retval
    22 jump *label7 equal *tmp7 false
    23 jump *label4 always
    24 jump *label8 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
     8 set :test:i *tmp1
     9 label *label2
    10 jump *label4 greaterThanEq :test:i *tmp3
-    * op equal *tmp4 :test:i 3
-    * jump *label5 equal *tmp4 false
+   11 jump *label5 notEqual :test:i 3
    12 jump *label3 always
    13 jump *label6 always
    14 label *label5
 
    17 print "|"
    18 set :d:n 5
    19 call *label0 :d*retaddr :d*retval
-    * op equal *tmp7 :test:i :d*retval
-    * jump *label7 equal *tmp7 false
+   20 jump *label7 notEqual :test:i :d*retval
    21 jump *label4 always
    22 jump *label8 always
    23 label *label7

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    10 jump *label4 greaterThanEq :test:i *tmp3
    11 jump *label5 notEqual :test:i 3
    12 jump *label3 always
-    * jump *label6 always
    13 label *label5
    14 label *label6
    15 print :test:i
 
    18 call *label0 :d*retaddr :d*retval
    19 jump *label7 notEqual :test:i :d*retval
    20 jump *label4 always
-    * jump *label8 always
    21 label *label7
    22 label *label8
    23 label *label3

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     8 set :test:i *tmp1
     9 label *label2
    10 jump *label4 greaterThanEq :test:i *tmp3
+   11 label *label10
    12 jump *label5 notEqual :test:i 3
    13 jump *label3 always
    14 label *label5
 
    23 label *label8
    24 label *label3
    25 op add :test:i :test:i 1
-    * jump *label2 always
+   26 jump *label10 lessThan :test:i *tmp3
    27 label *label4
    28 label *label1
    29 assertprints "1|2|4|5|" "iterated-for-loop-break-continue"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     7 set *tmp3 :d*retval
     8 set :test:i *tmp1
     9 label *label2
-    * jump *label4 greaterThanEq :test:i *tmp3
+   10 jump *label4 greaterThanEq *tmp1 :d*retval
    11 label *label10
    12 jump *label5 notEqual :test:i 3
    13 jump *label3 always

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
     6 call *label0 :d*retaddr :d*retval
     7 set *tmp3 :d*retval
     8 set :test:i *tmp1
-    * label *label2
     9 jump *label4 greaterThanEq *tmp1 :d*retval
    10 label *label10
    11 jump *label5 notEqual :test:i 3
    12 jump *label3 always
    13 label *label5
-    * label *label6
    14 print :test:i
    15 print "|"
    16 set :d:n 5
 
    18 jump *label7 notEqual :test:i :d*retval
    19 jump *label4 always
    20 label *label7
-    * label *label8
    21 label *label3
    22 op add :test:i :test:i 1
    23 jump *label10 lessThan :test:i *tmp3
    24 label *label4
-    * label *label1
    25 assertprints "1|2|4|5|" "iterated-for-loop-break-continue"
    26 stop
    27 end
    28 label *label0
    29 # "Function: noinline def d(in n)"
    30 set :d*retval :d:n
-    * label *label9
    31 return :d*retaddr
    32 end

Modifications by Jumps phase, Jump Straightening, pass 4, iteration 1 (-2 instructions):
 
     8 set :test:i *tmp1
     9 jump *label4 greaterThanEq *tmp1 :d*retval
    10 label *label10
-    * jump *label5 notEqual :test:i 3
-    * jump *label3 always
+   11 jump *label3 equal :test:i 3
    12 label *label5
    13 print :test:i
    14 print "|"
    15 set :d:n 5
    16 call *label0 :d*retaddr :d*retval
-    * jump *label7 notEqual :test:i :d*retval
-    * jump *label4 always
+   17 jump *label4 equal :test:i :d*retval
    18 label *label7
    19 label *label3
    20 op add :test:i :test:i 1

Modifications by Jumps phase, Jump Optimization, pass 4, iteration 1:
 
     9 jump *label4 greaterThanEq *tmp1 :d*retval
    10 label *label10
    11 jump *label3 equal :test:i 3
-    * label *label5
    12 print :test:i
    13 print "|"
    14 set :d:n 5
    15 call *label0 :d*retaddr :d*retval
    16 jump *label4 equal :test:i :d*retval
-    * label *label7
    17 label *label3
    18 op add :test:i :test:i 1
    19 jump *label10 lessThan :test:i *tmp3

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1 (-1 instructions):
 
    25 # "Function: noinline def d(in n)"
    26 set :d*retval :d:n
    27 return :d*retaddr
-    * end

Final code before resolving virtual instructions:

assertflush
# "Function: def test()"
set :d:n 1
call *label0 :d*retaddr :d*retval
set *tmp1 :d*retval
set :d:n 10
call *label0 :d*retaddr :d*retval
set *tmp3 :d*retval
set :test:i *tmp1
jump *label4 greaterThanEq *tmp1 :d*retval
label *label10
jump *label3 equal :test:i 3
print :test:i
print "|"
set :d:n 5
call *label0 :d*retaddr :d*retval
jump *label4 equal :test:i :d*retval
label *label3
op add :test:i :test:i 1
jump *label10 lessThan :test:i *tmp3
label *label4
assertprints "1|2|4|5|" "iterated-for-loop-break-continue"
stop
end
label *label0
# "Function: noinline def d(in n)"
set :d*retval :d:n
return :d*retaddr
