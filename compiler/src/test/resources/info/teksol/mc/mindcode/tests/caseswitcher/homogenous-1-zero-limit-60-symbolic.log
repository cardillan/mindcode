    51 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     2 instructions eliminated by Data Flow Optimization (5 iterations).
     1 instructions eliminated by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
    18 instructions added by Case Switching (3 iterations).
     1 case expressions converted to switched jumps Case Switching.
     1 instructions eliminated by Jump Straightening (4 iterations).
    58 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 19):
  o Convert case at line 6:5 (#480, segments: 7)                 size    -5, benefit      495.2, efficiency   Infinity
  o Convert case at line 6:5 (#692, segments: 7)                 size    -4, benefit      498.1, efficiency   Infinity
  * Convert case at line 6:5 (#739, segments: 6)                 size   +18, benefit      499.3, efficiency     27.740 (+18 instructions)
  ! Convert case at line 6:5 (#4691, segments: 5)                size   +26, benefit      501.3, efficiency     19.283
  ! Convert case at line 6:5 (#9367, segments: 4)                size   +48, benefit      502.6, efficiency     10.471
  ! Convert case at line 6:5 (#2, segments: 1, padded high)      size  +238, benefit      521.1, efficiency      2.189

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     5 set :block *tmp0
     6 # "Function: def isWall(in block)"
     7 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 equal *tmp3 @graphite-press
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    8 jump *label6 equal :isWall:block @graphite-press
+    9 jump *label6 equal :isWall:block @copper-wall
+   10 jump *label6 equal :isWall:block @copper-wall-large
+   11 jump *label6 equal :isWall:block @titanium-wall
+   12 jump *label6 equal :isWall:block @titanium-wall-large
+   13 jump *label6 equal :isWall:block @plastanium-wall
+   14 jump *label6 equal :isWall:block @plastanium-wall-large
+   15 jump *label6 equal :isWall:block @thorium-wall
+   16 jump *label6 equal :isWall:block @thorium-wall-large
+   17 jump *label6 equal :isWall:block @phase-wall
+   18 jump *label6 equal :isWall:block @phase-wall-large
+   19 jump *label6 equal :isWall:block @surge-wall
+   20 jump *label6 equal :isWall:block @surge-wall-large
+   21 jump *label6 equal :isWall:block @scrap-wall
+   22 jump *label6 equal :isWall:block @scrap-wall-large
+   23 jump *label6 equal :isWall:block @scrap-wall-huge
+   24 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   25 jump *label6 equal :isWall:block @beryllium-wall
+   26 jump *label6 equal :isWall:block @beryllium-wall-large
+   27 jump *label6 equal :isWall:block @tungsten-wall
+   28 jump *label6 equal :isWall:block @tungsten-wall-large
+   29 jump *label6 equal :isWall:block @reinforced-surge-wall
+   30 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   31 jump *label6 equal :isWall:block @carbide-wall
+   32 jump *label6 equal :isWall:block @carbide-wall-large
    33 jump *label5 always
    34 label *label6
    35 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    45 op add *tmp7 *tmp6 251
    46 op and *tmp8 *tmp7 0xFFFFFFFF
    47 set :hash *tmp8
-    * set *tmp4 :hash
    48 jump *label8 always
    49 label *label7
-    * set *tmp4 null
    50 label *label8
    51 label *label1
    52 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i -1
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
     7 jump *label6 equal :isWall:block @graphite-press
 
    42 op mul *tmp5 :hash 31
    43 op add *tmp6 *tmp5 :i
    44 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   45 op and :hash *tmp7 0xFFFFFFFF
    46 jump *label8 always
    47 label *label7
    48 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    28 jump *label6 equal :isWall:block @reinforced-surge-wall
    29 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    30 jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 always
+   31 jump *label5 notEqual :isWall:block @carbide-wall-large
    32 label *label6
    33 set *tmp2 true
    34 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251
    44 op and :hash *tmp7 0xFFFFFFFF
-    * jump *label8 always
    45 label *label7
    46 label *label8
    47 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 set :isWall:block :block
-    * jump *label6 equal :isWall:block @graphite-press
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label5 notEqual :isWall:block @carbide-wall-large
+    7 jump *label6 equal :block @graphite-press
+    8 jump *label6 equal :block @copper-wall
+    9 jump *label6 equal :block @copper-wall-large
+   10 jump *label6 equal :block @titanium-wall
+   11 jump *label6 equal :block @titanium-wall-large
+   12 jump *label6 equal :block @plastanium-wall
+   13 jump *label6 equal :block @plastanium-wall-large
+   14 jump *label6 equal :block @thorium-wall
+   15 jump *label6 equal :block @thorium-wall-large
+   16 jump *label6 equal :block @phase-wall
+   17 jump *label6 equal :block @phase-wall-large
+   18 jump *label6 equal :block @surge-wall
+   19 jump *label6 equal :block @surge-wall-large
+   20 jump *label6 equal :block @scrap-wall
+   21 jump *label6 equal :block @scrap-wall-large
+   22 jump *label6 equal :block @scrap-wall-huge
+   23 jump *label6 equal :block @scrap-wall-gigantic
+   24 jump *label6 equal :block @beryllium-wall
+   25 jump *label6 equal :block @beryllium-wall-large
+   26 jump *label6 equal :block @tungsten-wall
+   27 jump *label6 equal :block @tungsten-wall-large
+   28 jump *label6 equal :block @reinforced-surge-wall
+   29 jump *label6 equal :block @reinforced-surge-wall-large
+   30 jump *label6 equal :block @carbide-wall
+   31 jump *label5 notEqual :block @carbide-wall-large
    32 label *label6
    33 set *tmp2 true
    34 jump *label4 always
 
    37 label *label4
    38 set *tmp1 *tmp2
    39 label *label3
-    * jump *label7 equal *tmp1 false
+   40 jump *label7 equal *tmp2 false
    41 op mul *tmp5 :hash 31
    42 op add *tmp6 *tmp5 :i
    43 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * set :isWall:block :block
     6 jump *label6 equal :block @graphite-press
     7 jump *label6 equal :block @copper-wall
     8 jump *label6 equal :block @copper-wall-large
 
    34 label *label5
    35 set *tmp2 false
    36 label *label4
-    * set *tmp1 *tmp2
    37 label *label3
    38 jump *label7 equal *tmp2 false
    39 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i -1
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label9
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
     6 jump *label6 equal :block @graphite-press
 
    44 label *label8
    45 label *label1
    46 op add :i :i 1
-    * jump *label0 always
+   47 jump *label9 lessThan :i 240
    48 label *label2
    49 print :hash
    50 assertequals 1061505871 :hash "Test selected blocks"

Modifications by Convert case at line 6:5 (#739, segments: 6) (+18 instructions):
 
     3 label *label9
     4 lookup block :block :i
     5 # "Function: def isWall(in block)"
-    * jump *label6 equal :block @graphite-press
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label5 notEqual :block @carbide-wall-large
+    6 sensor *tmp9 :block @id
+    7 jump *label12 greaterThanEq *tmp9 203
+    8 jump *label10 greaterThanEq *tmp9 35
+    9 jump *label13 greaterThanEq *tmp9 17
+   10 jump *label10 greaterThanEq *tmp9 1
+   11 jump *label11 always
+   12 label *label13
+   13 jump *label10 equal *tmp9 29
+   14 jump *label10 equal *tmp9 30
+   15 jump *label6 always
+   16 label *label12
+   17 jump *label10 greaterThanEq *tmp9 235
+   18 jump *label14 greaterThanEq *tmp9 208
+   19 jump *label10 equal *tmp9 205
+   20 jump *label6 always
+   21 label *label14
+   22 multijump *label15 *tmp9 208 (m:*label42)
+   23 multilabel *label15 (m:*label42)
+   24 jump *label10 always
+   25 multilabel *label16 (m:*label42)
+   26 jump *label10 always
+   27 multilabel *label17 (m:*label42)
+   28 jump *label10 always
+   29 multilabel *label18 (m:*label42)
+   30 jump *label10 always
+   31 multilabel *label19 (m:*label42)
+   32 jump *label10 always
+   33 multilabel *label20 (m:*label42)
+   34 jump *label10 always
+   35 multilabel *label21 (m:*label42)
+   36 jump *label10 always
+   37 multilabel *label22 (m:*label42)
+   38 jump *label10 always
+   39 multilabel *label23 (m:*label42)
+   40 jump *label10 always
+   41 multilabel *label24 (m:*label42)
+   42 jump *label10 always
+   43 multilabel *label25 (m:*label42)
+   44 jump *label10 always
+   45 multilabel *label26 (m:*label42)
+   46 jump *label10 always
+   47 multilabel *label27 (m:*label42)
+   48 jump *label6 always
+   49 multilabel *label28 (m:*label42)
+   50 jump *label6 always
+   51 multilabel *label29 (m:*label42)
+   52 jump *label10 always
+   53 multilabel *label30 (m:*label42)
+   54 jump *label10 always
+   55 multilabel *label31 (m:*label42)
+   56 jump *label10 always
+   57 multilabel *label32 (m:*label42)
+   58 jump *label6 always
+   59 multilabel *label33 (m:*label42)
+   60 jump *label10 always
+   61 multilabel *label34 (m:*label42)
+   62 jump *label10 always
+   63 multilabel *label35 (m:*label42)
+   64 jump *label10 always
+   65 multilabel *label36 (m:*label42)
+   66 jump *label10 always
+   67 multilabel *label37 (m:*label42)
+   68 jump *label10 always
+   69 multilabel *label38 (m:*label42)
+   70 jump *label10 always
+   71 multilabel *label39 (m:*label42)
+   72 jump *label10 always
+   73 multilabel *label40 (m:*label42)
+   74 jump *label10 always
+   75 multilabel *label41 (m:*label42)
+   76 jump *label6 always
+   77 label *label11
+   78 jump *label10 strictEqual *tmp9 null
    79 label *label6
    80 set *tmp2 true
    81 jump *label4 always
    82 label *label5
+   83 label *label10
    84 set *tmp2 false
    85 label *label4
    86 label *label3

Modifications by Jumps phase, Jump Normalization, pass 3, iteration 1:
     0 set :hash 0
     1 set :i -1
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 # "Function: def isWall(in block)"
 
    78 label *label6
    79 set *tmp2 true
    80 jump *label4 always
-    * label *label5
    81 label *label10
    82 set *tmp2 false
    83 label *label4
-    * label *label3
    84 jump *label7 equal *tmp2 false
    85 op mul *tmp5 :hash 31
    86 op add *tmp6 *tmp5 :i
    87 op add *tmp7 *tmp6 251
    88 op and :hash *tmp7 0xFFFFFFFF
    89 label *label7
-    * label *label8
-    * label *label1
    90 op add :i :i 1
    91 jump *label9 lessThan :i 240
-    * label *label2
    92 print :hash
    93 assertequals 1061505871 :hash "Test selected blocks"
    94 end

Modifications by Jumps phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
    91 jump *label9 lessThan :i 240
    92 print :hash
    93 assertequals 1061505871 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i -1
label *label9
lookup block :block :i
# "Function: def isWall(in block)"
sensor *tmp9 :block @id
jump *label12 greaterThanEq *tmp9 203
jump *label10 greaterThanEq *tmp9 35
jump *label13 greaterThanEq *tmp9 17
jump *label10 greaterThanEq *tmp9 1
jump *label11 always
label *label13
jump *label10 equal *tmp9 29
jump *label10 equal *tmp9 30
jump *label6 always
label *label12
jump *label10 greaterThanEq *tmp9 235
jump *label14 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label6 always
label *label14
multijump *label15 *tmp9 208
multilabel *label15
jump *label10 always
multilabel *label16
jump *label10 always
multilabel *label17
jump *label10 always
multilabel *label18
jump *label10 always
multilabel *label19
jump *label10 always
multilabel *label20
jump *label10 always
multilabel *label21
jump *label10 always
multilabel *label22
jump *label10 always
multilabel *label23
jump *label10 always
multilabel *label24
jump *label10 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label6 always
multilabel *label28
jump *label6 always
multilabel *label29
jump *label10 always
multilabel *label30
jump *label10 always
multilabel *label31
jump *label10 always
multilabel *label32
jump *label6 always
multilabel *label33
jump *label10 always
multilabel *label34
jump *label10 always
multilabel *label35
jump *label10 always
multilabel *label36
jump *label10 always
multilabel *label37
jump *label10 always
multilabel *label38
jump *label10 always
multilabel *label39
jump *label10 always
multilabel *label40
jump *label10 always
multilabel *label41
jump *label6 always
label *label11
jump *label10 strictEqual *tmp9 null
label *label6
set *tmp2 true
jump *label4 always
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i 240
print :hash
assertequals 1061505871 :hash "Test selected blocks"
