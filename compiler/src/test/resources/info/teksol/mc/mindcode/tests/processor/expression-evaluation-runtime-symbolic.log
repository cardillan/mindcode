   409 instructions before optimizations.
    68 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
     2 instructions modified by Expression Optimization (4 iterations).
     1 instructions eliminated by If Expression Optimization (2 passes, 4 iterations).
   192 instructions eliminated by Data Flow Optimization (3 passes, 14 iterations).
    11 instructions added by Function Inlining (5 iterations).
     6 function calls inlined by Function Inlining.
   157 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 809):
  * Inline function 'assertEqualsRound' defined at line 3:1      cost    19, benefit       27.0, efficiency      1.421 (-31 instructions)
    Inline function call at line 83:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 84:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 85:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 87:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 88:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 89:1                            cost     4, benefit        4.5, efficiency      1.125

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-68 instructions):
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp1 zero :d:n
-    * set *tmp0 *tmp1
+    4 op add *tmp0 zero :d:n
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp4 zero :d.1:n
-    * set *tmp3 *tmp4
+   10 op add *tmp3 zero :d.1:n
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp7 zero :d.2:n
-    * set *tmp6 *tmp7
+   16 op add *tmp6 zero :d.2:n
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp10 zero :d.3:n
-    * set *tmp9 *tmp10
+   22 op add *tmp9 zero :d.3:n
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp13 zero :d.4:n
-    * set *tmp12 *tmp13
+   28 op add *tmp12 zero :d.4:n
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp16 zero :d.5:n
-    * set *tmp15 *tmp16
+   34 op add *tmp15 zero :d.5:n
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp19 zero :d.6:n
-    * set *tmp18 *tmp19
+   40 op add *tmp18 zero :d.6:n
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 4
-    * op add *tmp22 zero :d.7:n
-    * set *tmp21 *tmp22
+   46 op add *tmp21 zero :d.7:n
    47 label *label11
    48 op pow *tmp23 2 *tmp21
    49 assertequals 16 *tmp23 "pow"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 5
-    * op add *tmp25 zero :d.8:n
-    * set *tmp24 *tmp25
+   52 op add *tmp24 zero :d.8:n
    53 label *label12
    54 op equal *tmp26 5 *tmp24
    55 assertequals true *tmp26 "equal 1"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 6
-    * op add *tmp28 zero :d.9:n
-    * set *tmp27 *tmp28
+   58 op add *tmp27 zero :d.9:n
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals false *tmp29 "equal 2"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n null
-    * op add *tmp31 zero :d.10:n
-    * set *tmp30 *tmp31
+   64 op add *tmp30 zero :d.10:n
    65 label *label14
    66 op equal *tmp32 0 *tmp30
    67 assertequals true *tmp32 "equal null"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n 5
-    * op add *tmp34 zero :d.11:n
-    * set *tmp33 *tmp34
+   70 op add *tmp33 zero :d.11:n
    71 label *label15
    72 op notEqual *tmp35 5 *tmp33
    73 assertequals false *tmp35 "notEqual 1"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 6
-    * op add *tmp37 zero :d.12:n
-    * set *tmp36 *tmp37
+   76 op add *tmp36 zero :d.12:n
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals true *tmp38 "notEqual 2"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n null
-    * op add *tmp40 zero :d.13:n
-    * set *tmp39 *tmp40
+   82 op add *tmp39 zero :d.13:n
    83 label *label17
    84 op notEqual *tmp41 0 *tmp39
    85 assertequals false *tmp41 "notEqual null"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n 0
-    * op add *tmp43 zero :d.14:n
-    * set *tmp42 *tmp43
+   88 op add *tmp42 zero :d.14:n
    89 label *label18
    90 op land *tmp44 1 *tmp42
    91 assertequals false *tmp44 "land 1"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 2
-    * op add *tmp46 zero :d.15:n
-    * set *tmp45 *tmp46
+   94 op add *tmp45 zero :d.15:n
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals true *tmp47 "land 2"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 1
-    * op add *tmp49 zero :d.16:n
-    * set *tmp48 *tmp49
+  100 op add *tmp48 zero :d.16:n
   101 label *label20
   102 op lessThan *tmp50 0 *tmp48
   103 assertequals true *tmp50 "lessThan 1"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 0
-    * op add *tmp52 zero :d.17:n
-    * set *tmp51 *tmp52
+  106 op add *tmp51 zero :d.17:n
   107 label *label21
   108 op lessThan *tmp53 1 *tmp51
   109 assertequals false *tmp53 "lessThan 2"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 1
-    * op add *tmp55 zero :d.18:n
-    * set *tmp54 *tmp55
+  112 op add *tmp54 zero :d.18:n
   113 label *label22
   114 op lessThanEq *tmp56 1 *tmp54
   115 assertequals true *tmp56 "lessThanEq 1"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 0
-    * op add *tmp58 zero :d.19:n
-    * set *tmp57 *tmp58
+  118 op add *tmp57 zero :d.19:n
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals false *tmp59 "lessThanEq 2"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 1
-    * op add *tmp61 zero :d.20:n
-    * set *tmp60 *tmp61
+  124 op add *tmp60 zero :d.20:n
   125 label *label24
   126 op greaterThan *tmp62 2 *tmp60
   127 assertequals true *tmp62 "greaterThan 1"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 2
-    * op add *tmp64 zero :d.21:n
-    * set *tmp63 *tmp64
+  130 op add *tmp63 zero :d.21:n
   131 label *label25
   132 op greaterThan *tmp65 1 *tmp63
   133 assertequals false *tmp65 "greaterThan 2"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 1
-    * op add *tmp67 zero :d.22:n
-    * set *tmp66 *tmp67
+  136 op add *tmp66 zero :d.22:n
   137 label *label26
   138 op greaterThanEq *tmp68 1 *tmp66
   139 assertequals true *tmp68 "greaterThanEq 1"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 2
-    * op add *tmp70 zero :d.23:n
-    * set *tmp69 *tmp70
+  142 op add *tmp69 zero :d.23:n
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals false *tmp71 "greaterThanEq 2"
 
   149 assertequals true *tmp73 "strictEqual 2"
   150 # "Function: inline def d(in n)"
   151 set :d.24:n 2
-    * op add *tmp75 zero :d.24:n
-    * set *tmp74 *tmp75
+  152 op add *tmp74 zero :d.24:n
   153 label *label28
   154 op shl *tmp76 1 *tmp74
   155 assertequals 4 *tmp76 "shl"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp78 zero :d.25:n
-    * set *tmp77 *tmp78
+  158 op add *tmp77 zero :d.25:n
   159 label *label29
   160 op shr *tmp79 9 *tmp77
   161 assertequals 2 *tmp79 "shr"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp81 zero :d.26:n
-    * set *tmp80 *tmp81
+  164 op add *tmp80 zero :d.26:n
   165 label *label30
   166 op or *tmp82 1 *tmp80
   167 assertequals 3 *tmp82 "or"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 2
-    * op add *tmp84 zero :d.27:n
-    * set *tmp83 *tmp84
+  170 op add *tmp83 zero :d.27:n
   171 label *label31
   172 op and *tmp85 3 *tmp83
   173 assertequals 2 *tmp85 "and"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp87 zero :d.28:n
-    * set *tmp86 *tmp87
+  176 op add *tmp86 zero :d.28:n
   177 label *label32
   178 op xor *tmp88 3 *tmp86
   179 assertequals 1 *tmp88 "xor"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 0
-    * op add *tmp90 zero :d.29:n
-    * set *tmp89 *tmp90
+  182 op add *tmp89 zero :d.29:n
   183 label *label33
   184 op not *tmp91 *tmp89
   185 assertequals -1 *tmp91 "not 1"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 65535
-    * op add *tmp93 zero :d.30:n
-    * set *tmp92 *tmp93
+  188 op add *tmp92 zero :d.30:n
   189 label *label34
   190 op not *tmp94 *tmp92
   191 assertequals -65536 *tmp94 "not 2"
 
   194 op sub *tmp96 0 *tmp95
   195 # "Function: inline def d(in n)"
   196 set :d.31:n :a
-    * op add *tmp98 zero :d.31:n
-    * set *tmp97 *tmp98
+  197 op add *tmp97 zero :d.31:n
   198 label *label35
   199 op not *tmp99 *tmp97
   200 assertequals *tmp96 *tmp99 "not 3"
   201 # "Function: inline def d(in n)"
   202 set :d.32:n 4
-    * op add *tmp101 zero :d.32:n
-    * set *tmp100 *tmp101
+  203 op add *tmp100 zero :d.32:n
   204 label *label36
   205 op max *tmp102 2 *tmp100
   206 assertequals 4 *tmp102 "max"
   207 # "Function: inline def d(in n)"
   208 set :d.33:n 4
-    * op add *tmp104 zero :d.33:n
-    * set *tmp103 *tmp104
+  209 op add *tmp103 zero :d.33:n
   210 label *label37
   211 op min *tmp105 2 *tmp103
   212 assertequals 2 *tmp105 "min"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n -2
-    * op add *tmp107 zero :d.34:n
-    * set *tmp106 *tmp107
+  215 op add *tmp106 zero :d.34:n
   216 label *label38
   217 op abs *tmp108 *tmp106
   218 assertequals 2 *tmp108 "abs"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n -2
-    * op add *tmp110 zero :d.35:n
-    * set *tmp109 *tmp110
+  221 op add *tmp109 zero :d.35:n
   222 label *label39
   223 # "Function: inline def sign(in x)"
   224 set :sign:x *tmp109
   225 op greaterThan *tmp112 :sign:x 0
   226 op lessThan *tmp113 :sign:x 0
-    * op sub *tmp114 *tmp112 *tmp113
-    * set *tmp111 *tmp114
+  227 op sub *tmp111 *tmp112 *tmp113
   228 label *label40
   229 assertequals -1 *tmp111 "sign(-2)"
   230 # "Function: inline def d(in n)"
   231 set :d.36:n 2
-    * op add *tmp116 zero :d.36:n
-    * set *tmp115 *tmp116
+  232 op add *tmp115 zero :d.36:n
   233 label *label41
   234 # "Function: inline def sign(in x)"
   235 set :sign.1:x *tmp115
   236 op greaterThan *tmp118 :sign.1:x 0
   237 op lessThan *tmp119 :sign.1:x 0
-    * op sub *tmp120 *tmp118 *tmp119
-    * set *tmp117 *tmp120
+  238 op sub *tmp117 *tmp118 *tmp119
   239 label *label42
   240 assertequals 1 *tmp117 "sign(2)"
   241 # "Function: inline def d(in n)"
   242 set :d.37:n 0
-    * op add *tmp122 zero :d.37:n
-    * set *tmp121 *tmp122
+  243 op add *tmp121 zero :d.37:n
   244 label *label43
   245 # "Function: inline def sign(in x)"
   246 set :sign.2:x *tmp121
   247 op greaterThan *tmp124 :sign.2:x 0
   248 op lessThan *tmp125 :sign.2:x 0
-    * op sub *tmp126 *tmp124 *tmp125
-    * set *tmp123 *tmp126
+  249 op sub *tmp123 *tmp124 *tmp125
   250 label *label44
   251 assertequals 0 *tmp123 "sign(0)"
   252 # "Function: inline def d(in n)"
   253 set :d.38:n 2.718281828459045
-    * op add *tmp128 zero :d.38:n
-    * set *tmp127 *tmp128
+  254 op add *tmp127 zero :d.38:n
   255 label *label45
   256 op log *tmp129 *tmp127
   257 assertequals 1 *tmp129 "log"
   258 # "Function: inline def d(in n)"
   259 set :d.39:n 10
-    * op add *tmp131 zero :d.39:n
-    * set *tmp130 *tmp131
+  260 op add *tmp130 zero :d.39:n
   261 label *label46
   262 op log10 *tmp132 *tmp130
   263 assertequals 1 *tmp132 "log10"
   264 # "Function: inline def d(in n)"
   265 set :d.40:n 2.5
-    * op add *tmp134 zero :d.40:n
-    * set *tmp133 *tmp134
+  266 op add *tmp133 zero :d.40:n
   267 label *label47
   268 op floor *tmp135 *tmp133
   269 assertequals 2 *tmp135 "floor"
   270 # "Function: inline def d(in n)"
   271 set :d.41:n 2.5
-    * op add *tmp137 zero :d.41:n
-    * set *tmp136 *tmp137
+  272 op add *tmp136 zero :d.41:n
   273 label *label48
   274 op ceil *tmp138 *tmp136
   275 assertequals 3 *tmp138 "ceil"
   276 # "Function: inline def d(in n)"
   277 set :d.42:n 16
-    * op add *tmp140 zero :d.42:n
-    * set *tmp139 *tmp140
+  278 op add *tmp139 zero :d.42:n
   279 label *label49
   280 op sqrt *tmp141 *tmp139
   281 assertequals 4 *tmp141 "sqrt"
   282 # "Function: inline def d(in n)"
   283 set :d.43:n 1
-    * op add *tmp143 zero :d.43:n
-    * set *tmp142 *tmp143
+  284 op add *tmp142 zero :d.43:n
   285 label *label50
   286 op angle *tmp144 1 *tmp142
   287 assertequals 45 *tmp144 "angle"
   288 # "Function: inline def d(in n)"
   289 set :d.44:n 135
-    * op add *tmp146 zero :d.44:n
-    * set *tmp145 *tmp146
+  290 op add *tmp145 zero :d.44:n
   291 label *label51
   292 op angleDiff *tmp147 45 *tmp145
   293 assertequals 90 *tmp147 "angleDiff"
 
   318 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   319 # "Function: inline def d(in n)"
   320 set :d.45:n 8
-    * op add *tmp149 zero :d.45:n
-    * set *tmp148 *tmp149
+  321 op add *tmp148 zero :d.45:n
   322 label *label52
   323 op sub *tmp150 0 *tmp148
   324 assertequals -8 *tmp150 "unary minus"
   325 # "Function: inline def d(in n)"
   326 set :d.46:n 0
-    * op add *tmp152 zero :d.46:n
-    * set *tmp151 *tmp152
+  327 op add *tmp151 zero :d.46:n
   328 label *label53
   329 op equal *tmp153 *tmp151 false
   330 assertequals 1 *tmp153 "boolean negation 1"
   331 # "Function: inline def d(in n)"
   332 set :d.47:n 1
-    * op add *tmp155 zero :d.47:n
-    * set *tmp154 *tmp155
+  333 op add *tmp154 zero :d.47:n
   334 label *label54
   335 op equal *tmp156 *tmp154 false
   336 assertequals 0 *tmp156 "boolean negation 2"
   337 # "Function: inline def d(in n)"
   338 set :d.48:n 2
-    * op add *tmp158 zero :d.48:n
-    * set *tmp157 *tmp158
+  339 op add *tmp157 zero :d.48:n
   340 label *label55
   341 op equal *tmp159 *tmp157 false
   342 assertequals 0 *tmp159 "boolean negation 3"
   343 set :a 2
   344 # "Function: inline def d(in n)"
   345 set :d.49:n 4
-    * op add *tmp161 zero :d.49:n
-    * set *tmp160 *tmp161
+  346 op add *tmp160 zero :d.49:n
   347 label *label56
   348 op pow :a :a *tmp160
   349 assertequals 16 :a "**="
   350 set :a 2
   351 # "Function: inline def d(in n)"
   352 set :d.50:n 4
-    * op add *tmp163 zero :d.50:n
-    * set *tmp162 *tmp163
+  353 op add *tmp162 zero :d.50:n
   354 label *label57
   355 op mul :a :a *tmp162
   356 assertequals 8 :a "*="
   357 set :a 6
   358 # "Function: inline def d(in n)"
   359 set :d.51:n 4
-    * op add *tmp165 zero :d.51:n
-    * set *tmp164 *tmp165
+  360 op add *tmp164 zero :d.51:n
   361 label *label58
   362 op div :a :a *tmp164
   363 assertequals 1.5 :a "/="
   364 set :a 6
   365 # "Function: inline def d(in n)"
   366 set :d.52:n 4
-    * op add *tmp167 zero :d.52:n
-    * set *tmp166 *tmp167
+  367 op add *tmp166 zero :d.52:n
   368 label *label59
   369 op idiv :a :a *tmp166
   370 assertequals 1 :a "\="
   371 set :a 6
   372 # "Function: inline def d(in n)"
   373 set :d.53:n 4
-    * op add *tmp169 zero :d.53:n
-    * set *tmp168 *tmp169
+  374 op add *tmp168 zero :d.53:n
   375 label *label60
   376 op mod :a :a *tmp168
   377 assertequals 2 :a "%="
   378 set :a 4
   379 # "Function: inline def d(in n)"
   380 set :d.54:n 2
-    * op add *tmp171 zero :d.54:n
-    * set *tmp170 *tmp171
+  381 op add *tmp170 zero :d.54:n
   382 label *label61
   383 op add :a :a *tmp170
   384 assertequals 6 :a "+="
   385 set :a 4
   386 # "Function: inline def d(in n)"
   387 set :d.55:n 2
-    * op add *tmp173 zero :d.55:n
-    * set *tmp172 *tmp173
+  388 op add *tmp172 zero :d.55:n
   389 label *label62
   390 op sub :a :a *tmp172
   391 assertequals 2 :a "-="
   392 set :a 1
   393 # "Function: inline def d(in n)"
   394 set :d.56:n 2
-    * op add *tmp175 zero :d.56:n
-    * set *tmp174 *tmp175
+  395 op add *tmp174 zero :d.56:n
   396 label *label63
   397 op shl :a :a *tmp174
   398 assertequals 4 :a "<<="
   399 set :a 9
   400 # "Function: inline def d(in n)"
   401 set :d.57:n 2
-    * op add *tmp177 zero :d.57:n
-    * set *tmp176 *tmp177
+  402 op add *tmp176 zero :d.57:n
   403 label *label64
   404 op shr :a :a *tmp176
   405 assertequals 2 :a ">>="
   406 set :a 1
   407 # "Function: inline def d(in n)"
   408 set :d.58:n 2
-    * op add *tmp179 zero :d.58:n
-    * set *tmp178 *tmp179
+  409 op add *tmp178 zero :d.58:n
   410 label *label65
   411 op or :a :a *tmp178
   412 assertequals 3 :a "|="
   413 set :a 3
   414 # "Function: inline def d(in n)"
   415 set :d.59:n 2
-    * op add *tmp181 zero :d.59:n
-    * set *tmp180 *tmp181
+  416 op add *tmp180 zero :d.59:n
   417 label *label66
   418 op and :a :a *tmp180
   419 assertequals 2 :a "&="
   420 set :a 3
   421 # "Function: inline def d(in n)"
   422 set :d.60:n 2
-    * op add *tmp183 zero :d.60:n
-    * set *tmp182 *tmp183
+  423 op add *tmp182 zero :d.60:n
   424 label *label67
   425 op xor :a :a *tmp182
   426 assertequals 1 :a "^="
   427 set :a 1
   428 # "Function: inline def d(in n)"
   429 set :d.61:n 0
-    * op add *tmp185 zero :d.61:n
-    * set *tmp184 *tmp185
+  430 op add *tmp184 zero :d.61:n
   431 label *label68
   432 op land :a :a *tmp184
   433 assertequals false :a "&&="
   434 set :a 1
   435 # "Function: inline def d(in n)"
   436 set :d.62:n 2
-    * op add *tmp187 zero :d.62:n
-    * set *tmp186 *tmp187
+  437 op add *tmp186 zero :d.62:n
   438 label *label69
   439 op land :a :a *tmp186
   440 assertequals true :a "&&="
   441 set :a 0
   442 # "Function: inline def d(in n)"
   443 set :d.63:n 2
-    * op add *tmp189 zero :d.63:n
-    * set *tmp188 *tmp189
+  444 op add *tmp188 zero :d.63:n
   445 label *label70
   446 op or *tmp190 :a *tmp188
   447 op notEqual :a *tmp190 false
 
   468 # "Function: inline def round(in x)"
   469 set :round:x *tmp194
   470 op add *tmp196 :round:x 0.5
-    * op floor *tmp197 *tmp196
-    * set *tmp195 *tmp197
+  471 op floor *tmp195 *tmp196
   472 label *label75
   473 op div *tmp198 *tmp195 100000000
   474 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp0 zero :d:n
+    4 op add *tmp0 zero 3
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp3 zero :d.1:n
+   10 op add *tmp3 zero 6
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp6 zero :d.2:n
+   16 op add *tmp6 zero 2
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp9 zero :d.3:n
+   22 op add *tmp9 zero 4
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp12 zero :d.4:n
+   28 op add *tmp12 zero 100000
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp15 zero :d.5:n
+   34 op add *tmp15 zero 4
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp18 zero :d.6:n
+   40 op add *tmp18 zero 4
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 4
-    * op add *tmp21 zero :d.7:n
+   46 op add *tmp21 zero 4
    47 label *label11
    48 op pow *tmp23 2 *tmp21
    49 assertequals 16 *tmp23 "pow"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 5
-    * op add *tmp24 zero :d.8:n
+   52 op add *tmp24 zero 5
    53 label *label12
    54 op equal *tmp26 5 *tmp24
    55 assertequals true *tmp26 "equal 1"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 6
-    * op add *tmp27 zero :d.9:n
+   58 op add *tmp27 zero 6
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals false *tmp29 "equal 2"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n null
-    * op add *tmp30 zero :d.10:n
+   64 op add *tmp30 zero null
    65 label *label14
    66 op equal *tmp32 0 *tmp30
    67 assertequals true *tmp32 "equal null"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n 5
-    * op add *tmp33 zero :d.11:n
+   70 op add *tmp33 zero 5
    71 label *label15
    72 op notEqual *tmp35 5 *tmp33
    73 assertequals false *tmp35 "notEqual 1"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 6
-    * op add *tmp36 zero :d.12:n
+   76 op add *tmp36 zero 6
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals true *tmp38 "notEqual 2"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n null
-    * op add *tmp39 zero :d.13:n
+   82 op add *tmp39 zero null
    83 label *label17
    84 op notEqual *tmp41 0 *tmp39
    85 assertequals false *tmp41 "notEqual null"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n 0
-    * op add *tmp42 zero :d.14:n
+   88 op add *tmp42 zero 0
    89 label *label18
    90 op land *tmp44 1 *tmp42
    91 assertequals false *tmp44 "land 1"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 2
-    * op add *tmp45 zero :d.15:n
+   94 op add *tmp45 zero 2
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals true *tmp47 "land 2"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 1
-    * op add *tmp48 zero :d.16:n
+  100 op add *tmp48 zero 1
   101 label *label20
   102 op lessThan *tmp50 0 *tmp48
   103 assertequals true *tmp50 "lessThan 1"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 0
-    * op add *tmp51 zero :d.17:n
+  106 op add *tmp51 zero 0
   107 label *label21
   108 op lessThan *tmp53 1 *tmp51
   109 assertequals false *tmp53 "lessThan 2"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 1
-    * op add *tmp54 zero :d.18:n
+  112 op add *tmp54 zero 1
   113 label *label22
   114 op lessThanEq *tmp56 1 *tmp54
   115 assertequals true *tmp56 "lessThanEq 1"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 0
-    * op add *tmp57 zero :d.19:n
+  118 op add *tmp57 zero 0
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals false *tmp59 "lessThanEq 2"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 1
-    * op add *tmp60 zero :d.20:n
+  124 op add *tmp60 zero 1
   125 label *label24
   126 op greaterThan *tmp62 2 *tmp60
   127 assertequals true *tmp62 "greaterThan 1"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 2
-    * op add *tmp63 zero :d.21:n
+  130 op add *tmp63 zero 2
   131 label *label25
   132 op greaterThan *tmp65 1 *tmp63
   133 assertequals false *tmp65 "greaterThan 2"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 1
-    * op add *tmp66 zero :d.22:n
+  136 op add *tmp66 zero 1
   137 label *label26
   138 op greaterThanEq *tmp68 1 *tmp66
   139 assertequals true *tmp68 "greaterThanEq 1"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 2
-    * op add *tmp69 zero :d.23:n
+  142 op add *tmp69 zero 2
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals false *tmp71 "greaterThanEq 2"
 
   149 assertequals true *tmp73 "strictEqual 2"
   150 # "Function: inline def d(in n)"
   151 set :d.24:n 2
-    * op add *tmp74 zero :d.24:n
+  152 op add *tmp74 zero 2
   153 label *label28
   154 op shl *tmp76 1 *tmp74
   155 assertequals 4 *tmp76 "shl"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp77 zero :d.25:n
+  158 op add *tmp77 zero 2
   159 label *label29
   160 op shr *tmp79 9 *tmp77
   161 assertequals 2 *tmp79 "shr"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp80 zero :d.26:n
+  164 op add *tmp80 zero 2
   165 label *label30
   166 op or *tmp82 1 *tmp80
   167 assertequals 3 *tmp82 "or"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 2
-    * op add *tmp83 zero :d.27:n
+  170 op add *tmp83 zero 2
   171 label *label31
   172 op and *tmp85 3 *tmp83
   173 assertequals 2 *tmp85 "and"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp86 zero :d.28:n
+  176 op add *tmp86 zero 2
   177 label *label32
   178 op xor *tmp88 3 *tmp86
   179 assertequals 1 *tmp88 "xor"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 0
-    * op add *tmp89 zero :d.29:n
+  182 op add *tmp89 zero 0
   183 label *label33
   184 op not *tmp91 *tmp89
   185 assertequals -1 *tmp91 "not 1"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 65535
-    * op add *tmp92 zero :d.30:n
+  188 op add *tmp92 zero 65535
   189 label *label34
   190 op not *tmp94 *tmp92
   191 assertequals -65536 *tmp94 "not 2"
   192 set :a 0xabcdefabcdef
-    * op add *tmp95 :a 1
-    * op sub *tmp96 0 *tmp95
+  193 op add *tmp95 0xabcdefabcdef 1
+  194 op sub *tmp96 0 188900977659376
   195 # "Function: inline def d(in n)"
-    * set :d.31:n :a
-    * op add *tmp97 zero :d.31:n
+  196 set :d.31:n 0xabcdefabcdef
+  197 op add *tmp97 zero :a
   198 label *label35
   199 op not *tmp99 *tmp97
-    * assertequals *tmp96 *tmp99 "not 3"
+  200 assertequals -188900977659376 *tmp99 "not 3"
   201 # "Function: inline def d(in n)"
   202 set :d.32:n 4
-    * op add *tmp100 zero :d.32:n
+  203 op add *tmp100 zero 4
   204 label *label36
   205 op max *tmp102 2 *tmp100
   206 assertequals 4 *tmp102 "max"
   207 # "Function: inline def d(in n)"
   208 set :d.33:n 4
-    * op add *tmp103 zero :d.33:n
+  209 op add *tmp103 zero 4
   210 label *label37
   211 op min *tmp105 2 *tmp103
   212 assertequals 2 *tmp105 "min"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n -2
-    * op add *tmp106 zero :d.34:n
+  215 op add *tmp106 zero -2
   216 label *label38
   217 op abs *tmp108 *tmp106
   218 assertequals 2 *tmp108 "abs"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n -2
-    * op add *tmp109 zero :d.35:n
+  221 op add *tmp109 zero -2
   222 label *label39
   223 # "Function: inline def sign(in x)"
   224 set :sign:x *tmp109
-    * op greaterThan *tmp112 :sign:x 0
-    * op lessThan *tmp113 :sign:x 0
+  225 op greaterThan *tmp112 *tmp109 0
+  226 op lessThan *tmp113 *tmp109 0
   227 op sub *tmp111 *tmp112 *tmp113
   228 label *label40
   229 assertequals -1 *tmp111 "sign(-2)"
   230 # "Function: inline def d(in n)"
   231 set :d.36:n 2
-    * op add *tmp115 zero :d.36:n
+  232 op add *tmp115 zero 2
   233 label *label41
   234 # "Function: inline def sign(in x)"
   235 set :sign.1:x *tmp115
-    * op greaterThan *tmp118 :sign.1:x 0
-    * op lessThan *tmp119 :sign.1:x 0
+  236 op greaterThan *tmp118 *tmp115 0
+  237 op lessThan *tmp119 *tmp115 0
   238 op sub *tmp117 *tmp118 *tmp119
   239 label *label42
   240 assertequals 1 *tmp117 "sign(2)"
   241 # "Function: inline def d(in n)"
   242 set :d.37:n 0
-    * op add *tmp121 zero :d.37:n
+  243 op add *tmp121 zero 0
   244 label *label43
   245 # "Function: inline def sign(in x)"
   246 set :sign.2:x *tmp121
-    * op greaterThan *tmp124 :sign.2:x 0
-    * op lessThan *tmp125 :sign.2:x 0
+  247 op greaterThan *tmp124 *tmp121 0
+  248 op lessThan *tmp125 *tmp121 0
   249 op sub *tmp123 *tmp124 *tmp125
   250 label *label44
   251 assertequals 0 *tmp123 "sign(0)"
   252 # "Function: inline def d(in n)"
   253 set :d.38:n 2.718281828459045
-    * op add *tmp127 zero :d.38:n
+  254 op add *tmp127 zero 2.718281828459045
   255 label *label45
   256 op log *tmp129 *tmp127
   257 assertequals 1 *tmp129 "log"
   258 # "Function: inline def d(in n)"
   259 set :d.39:n 10
-    * op add *tmp130 zero :d.39:n
+  260 op add *tmp130 zero 10
   261 label *label46
   262 op log10 *tmp132 *tmp130
   263 assertequals 1 *tmp132 "log10"
   264 # "Function: inline def d(in n)"
   265 set :d.40:n 2.5
-    * op add *tmp133 zero :d.40:n
+  266 op add *tmp133 zero 2.5
   267 label *label47
   268 op floor *tmp135 *tmp133
   269 assertequals 2 *tmp135 "floor"
   270 # "Function: inline def d(in n)"
   271 set :d.41:n 2.5
-    * op add *tmp136 zero :d.41:n
+  272 op add *tmp136 zero 2.5
   273 label *label48
   274 op ceil *tmp138 *tmp136
   275 assertequals 3 *tmp138 "ceil"
   276 # "Function: inline def d(in n)"
   277 set :d.42:n 16
-    * op add *tmp139 zero :d.42:n
+  278 op add *tmp139 zero 16
   279 label *label49
   280 op sqrt *tmp141 *tmp139
   281 assertequals 4 *tmp141 "sqrt"
   282 # "Function: inline def d(in n)"
   283 set :d.43:n 1
-    * op add *tmp142 zero :d.43:n
+  284 op add *tmp142 zero 1
   285 label *label50
   286 op angle *tmp144 1 *tmp142
   287 assertequals 45 *tmp144 "angle"
   288 # "Function: inline def d(in n)"
   289 set :d.44:n 135
-    * op add *tmp145 zero :d.44:n
+  290 op add *tmp145 zero 135
   291 label *label51
   292 op angleDiff *tmp147 45 *tmp145
   293 assertequals 90 *tmp147 "angleDiff"
 
   318 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   319 # "Function: inline def d(in n)"
   320 set :d.45:n 8
-    * op add *tmp148 zero :d.45:n
+  321 op add *tmp148 zero 8
   322 label *label52
   323 op sub *tmp150 0 *tmp148
   324 assertequals -8 *tmp150 "unary minus"
   325 # "Function: inline def d(in n)"
   326 set :d.46:n 0
-    * op add *tmp151 zero :d.46:n
+  327 op add *tmp151 zero 0
   328 label *label53
   329 op equal *tmp153 *tmp151 false
   330 assertequals 1 *tmp153 "boolean negation 1"
   331 # "Function: inline def d(in n)"
   332 set :d.47:n 1
-    * op add *tmp154 zero :d.47:n
+  333 op add *tmp154 zero 1
   334 label *label54
   335 op equal *tmp156 *tmp154 false
   336 assertequals 0 *tmp156 "boolean negation 2"
   337 # "Function: inline def d(in n)"
   338 set :d.48:n 2
-    * op add *tmp157 zero :d.48:n
+  339 op add *tmp157 zero 2
   340 label *label55
   341 op equal *tmp159 *tmp157 false
   342 assertequals 0 *tmp159 "boolean negation 3"
   343 set :a 2
   344 # "Function: inline def d(in n)"
   345 set :d.49:n 4
-    * op add *tmp160 zero :d.49:n
+  346 op add *tmp160 zero 4
   347 label *label56
-    * op pow :a :a *tmp160
+  348 op pow :a 2 *tmp160
   349 assertequals 16 :a "**="
   350 set :a 2
   351 # "Function: inline def d(in n)"
   352 set :d.50:n 4
-    * op add *tmp162 zero :d.50:n
+  353 op add *tmp162 zero 4
   354 label *label57
-    * op mul :a :a *tmp162
+  355 op mul :a 2 *tmp162
   356 assertequals 8 :a "*="
   357 set :a 6
   358 # "Function: inline def d(in n)"
   359 set :d.51:n 4
-    * op add *tmp164 zero :d.51:n
+  360 op add *tmp164 zero 4
   361 label *label58
-    * op div :a :a *tmp164
+  362 op div :a 6 *tmp164
   363 assertequals 1.5 :a "/="
   364 set :a 6
   365 # "Function: inline def d(in n)"
   366 set :d.52:n 4
-    * op add *tmp166 zero :d.52:n
+  367 op add *tmp166 zero 4
   368 label *label59
-    * op idiv :a :a *tmp166
+  369 op idiv :a 6 *tmp166
   370 assertequals 1 :a "\="
   371 set :a 6
   372 # "Function: inline def d(in n)"
   373 set :d.53:n 4
-    * op add *tmp168 zero :d.53:n
+  374 op add *tmp168 zero 4
   375 label *label60
-    * op mod :a :a *tmp168
+  376 op mod :a 6 *tmp168
   377 assertequals 2 :a "%="
   378 set :a 4
   379 # "Function: inline def d(in n)"
   380 set :d.54:n 2
-    * op add *tmp170 zero :d.54:n
+  381 op add *tmp170 zero 2
   382 label *label61
-    * op add :a :a *tmp170
+  383 op add :a 4 *tmp170
   384 assertequals 6 :a "+="
   385 set :a 4
   386 # "Function: inline def d(in n)"
   387 set :d.55:n 2
-    * op add *tmp172 zero :d.55:n
+  388 op add *tmp172 zero 2
   389 label *label62
-    * op sub :a :a *tmp172
+  390 op sub :a 4 *tmp172
   391 assertequals 2 :a "-="
   392 set :a 1
   393 # "Function: inline def d(in n)"
   394 set :d.56:n 2
-    * op add *tmp174 zero :d.56:n
+  395 op add *tmp174 zero 2
   396 label *label63
-    * op shl :a :a *tmp174
+  397 op shl :a 1 *tmp174
   398 assertequals 4 :a "<<="
   399 set :a 9
   400 # "Function: inline def d(in n)"
   401 set :d.57:n 2
-    * op add *tmp176 zero :d.57:n
+  402 op add *tmp176 zero 2
   403 label *label64
-    * op shr :a :a *tmp176
+  404 op shr :a 9 *tmp176
   405 assertequals 2 :a ">>="
   406 set :a 1
   407 # "Function: inline def d(in n)"
   408 set :d.58:n 2
-    * op add *tmp178 zero :d.58:n
+  409 op add *tmp178 zero 2
   410 label *label65
-    * op or :a :a *tmp178
+  411 op or :a 1 *tmp178
   412 assertequals 3 :a "|="
   413 set :a 3
   414 # "Function: inline def d(in n)"
   415 set :d.59:n 2
-    * op add *tmp180 zero :d.59:n
+  416 op add *tmp180 zero 2
   417 label *label66
-    * op and :a :a *tmp180
+  418 op and :a 3 *tmp180
   419 assertequals 2 :a "&="
   420 set :a 3
   421 # "Function: inline def d(in n)"
   422 set :d.60:n 2
-    * op add *tmp182 zero :d.60:n
+  423 op add *tmp182 zero 2
   424 label *label67
-    * op xor :a :a *tmp182
+  425 op xor :a 3 *tmp182
   426 assertequals 1 :a "^="
   427 set :a 1
   428 # "Function: inline def d(in n)"
   429 set :d.61:n 0
-    * op add *tmp184 zero :d.61:n
+  430 op add *tmp184 zero 0
   431 label *label68
-    * op land :a :a *tmp184
+  432 op land :a 1 *tmp184
   433 assertequals false :a "&&="
   434 set :a 1
   435 # "Function: inline def d(in n)"
   436 set :d.62:n 2
-    * op add *tmp186 zero :d.62:n
+  437 op add *tmp186 zero 2
   438 label *label69
-    * op land :a :a *tmp186
+  439 op land :a 1 *tmp186
   440 assertequals true :a "&&="
   441 set :a 0
   442 # "Function: inline def d(in n)"
   443 set :d.63:n 2
-    * op add *tmp188 zero :d.63:n
+  444 op add *tmp188 zero 2
   445 label *label70
-    * op or *tmp190 :a *tmp188
+  446 op or *tmp190 0 *tmp188
   447 op notEqual :a *tmp190 false
   448 assertequals true :a "||="
   449 assertequals %ff0000ff %ff0000 "short color literals"
 
   454 set *tmp192 null
   455 jump *label73 always
   456 label *label72
-    * set *tmp192 :o:n
+  457 set *tmp192 @copper-wall
   458 label *label73
   459 set *tmp191 *tmp192
   460 label *label71
-    * sensor *tmp193 *tmp191 @id
+  461 sensor *tmp193 *tmp192 @id
   462 assertequals 17 *tmp193 "Logic ID"
   463 stop
   464 end
 
   467 op mul *tmp194 :assertEqualsRound:actual 100000000
   468 # "Function: inline def round(in x)"
   469 set :round:x *tmp194
-    * op add *tmp196 :round:x 0.5
+  470 op add *tmp196 *tmp194 0.5
   471 op floor *tmp195 *tmp196
   472 label *label75
   473 op div *tmp198 *tmp195 100000000

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-84 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * set :d:n 3
     3 op add *tmp0 zero 3
     4 label *label4
-    * op add *tmp2 2 *tmp0
+    5 op add *tmp2 zero 5
     6 assertequals 5 *tmp2 "add"
     7 # "Function: inline def d(in n)"
-    * set :d.1:n 6
     8 op add *tmp3 zero 6
     9 label *label5
-    * op sub *tmp5 7 *tmp3
+   10 op sub *tmp5 1 zero
    11 assertequals 1 *tmp5 "sub"
    12 # "Function: inline def d(in n)"
-    * set :d.2:n 2
    13 op add *tmp6 zero 2
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 # "Function: inline def d(in n)"
-    * set :d.3:n 4
    18 op add *tmp9 zero 4
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 # "Function: inline def d(in n)"
-    * set :d.4:n 100000
    23 op add *tmp12 zero 100000
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 # "Function: inline def d(in n)"
-    * set :d.5:n 4
    28 op add *tmp15 zero 4
    29 label *label9
-    * op idiv *tmp17 6 *tmp15
+   30 op idiv *tmp17 6 *tmp9
    31 assertequals 1 *tmp17 "idiv"
    32 # "Function: inline def d(in n)"
-    * set :d.6:n 4
    33 op add *tmp18 zero 4
    34 label *label10
-    * op mod *tmp20 6 *tmp18
+   35 op mod *tmp20 6 *tmp9
    36 assertequals 2 *tmp20 "mod"
    37 # "Function: inline def d(in n)"
-    * set :d.7:n 4
    38 op add *tmp21 zero 4
    39 label *label11
-    * op pow *tmp23 2 *tmp21
+   40 op pow *tmp23 2 *tmp9
    41 assertequals 16 *tmp23 "pow"
    42 # "Function: inline def d(in n)"
-    * set :d.8:n 5
    43 op add *tmp24 zero 5
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 # "Function: inline def d(in n)"
-    * set :d.9:n 6
    48 op add *tmp27 zero 6
    49 label *label13
-    * op equal *tmp29 5 *tmp27
+   50 op equal *tmp29 5 *tmp3
    51 assertequals false *tmp29 "equal 2"
    52 # "Function: inline def d(in n)"
-    * set :d.10:n null
    53 op add *tmp30 zero null
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 # "Function: inline def d(in n)"
-    * set :d.11:n 5
    58 op add *tmp33 zero 5
    59 label *label15
-    * op notEqual *tmp35 5 *tmp33
+   60 op notEqual *tmp35 5 *tmp24
    61 assertequals false *tmp35 "notEqual 1"
    62 # "Function: inline def d(in n)"
-    * set :d.12:n 6
    63 op add *tmp36 zero 6
    64 label *label16
-    * op notEqual *tmp38 5 *tmp36
+   65 op notEqual *tmp38 5 *tmp3
    66 assertequals true *tmp38 "notEqual 2"
    67 # "Function: inline def d(in n)"
-    * set :d.13:n null
    68 op add *tmp39 zero null
    69 label *label17
-    * op notEqual *tmp41 0 *tmp39
+   70 op notEqual *tmp41 0 *tmp30
    71 assertequals false *tmp41 "notEqual null"
    72 # "Function: inline def d(in n)"
-    * set :d.14:n 0
    73 op add *tmp42 zero 0
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 # "Function: inline def d(in n)"
-    * set :d.15:n 2
    78 op add *tmp45 zero 2
    79 label *label19
-    * op land *tmp47 1 *tmp45
+   80 op land *tmp47 1 *tmp6
    81 assertequals true *tmp47 "land 2"
    82 # "Function: inline def d(in n)"
-    * set :d.16:n 1
    83 op add *tmp48 zero 1
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 # "Function: inline def d(in n)"
-    * set :d.17:n 0
    88 op add *tmp51 zero 0
    89 label *label21
-    * op lessThan *tmp53 1 *tmp51
+   90 op lessThan *tmp53 1 *tmp42
    91 assertequals false *tmp53 "lessThan 2"
    92 # "Function: inline def d(in n)"
-    * set :d.18:n 1
    93 op add *tmp54 zero 1
    94 label *label22
-    * op lessThanEq *tmp56 1 *tmp54
+   95 op lessThanEq *tmp56 1 *tmp48
    96 assertequals true *tmp56 "lessThanEq 1"
    97 # "Function: inline def d(in n)"
-    * set :d.19:n 0
    98 op add *tmp57 zero 0
    99 label *label23
-    * op lessThanEq *tmp59 1 *tmp57
+  100 op lessThanEq *tmp59 1 *tmp42
   101 assertequals false *tmp59 "lessThanEq 2"
   102 # "Function: inline def d(in n)"
-    * set :d.20:n 1
   103 op add *tmp60 zero 1
   104 label *label24
-    * op greaterThan *tmp62 2 *tmp60
+  105 op greaterThan *tmp62 2 *tmp48
   106 assertequals true *tmp62 "greaterThan 1"
   107 # "Function: inline def d(in n)"
-    * set :d.21:n 2
   108 op add *tmp63 zero 2
   109 label *label25
-    * op greaterThan *tmp65 1 *tmp63
+  110 op greaterThan *tmp65 1 *tmp6
   111 assertequals false *tmp65 "greaterThan 2"
   112 # "Function: inline def d(in n)"
-    * set :d.22:n 1
   113 op add *tmp66 zero 1
   114 label *label26
-    * op greaterThanEq *tmp68 1 *tmp66
+  115 op greaterThanEq *tmp68 1 *tmp48
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 # "Function: inline def d(in n)"
-    * set :d.23:n 2
   118 op add *tmp69 zero 2
   119 label *label27
-    * op greaterThanEq *tmp71 1 *tmp69
+  120 op greaterThanEq *tmp71 1 *tmp6
   121 assertequals false *tmp71 "greaterThanEq 2"
   122 op strictEqual *tmp72 0 NULL
   123 assertequals false *tmp72 "strictEqual 1"
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 # "Function: inline def d(in n)"
-    * set :d.24:n 2
   127 op add *tmp74 zero 2
   128 label *label28
-    * op shl *tmp76 1 *tmp74
+  129 op shl *tmp76 1 *tmp6
   130 assertequals 4 *tmp76 "shl"
   131 # "Function: inline def d(in n)"
-    * set :d.25:n 2
   132 op add *tmp77 zero 2
   133 label *label29
-    * op shr *tmp79 9 *tmp77
+  134 op shr *tmp79 9 *tmp6
   135 assertequals 2 *tmp79 "shr"
   136 # "Function: inline def d(in n)"
-    * set :d.26:n 2
   137 op add *tmp80 zero 2
   138 label *label30
-    * op or *tmp82 1 *tmp80
+  139 op or *tmp82 1 *tmp6
   140 assertequals 3 *tmp82 "or"
   141 # "Function: inline def d(in n)"
-    * set :d.27:n 2
   142 op add *tmp83 zero 2
   143 label *label31
-    * op and *tmp85 3 *tmp83
+  144 op and *tmp85 3 *tmp6
   145 assertequals 2 *tmp85 "and"
   146 # "Function: inline def d(in n)"
-    * set :d.28:n 2
   147 op add *tmp86 zero 2
   148 label *label32
-    * op xor *tmp88 3 *tmp86
+  149 op xor *tmp88 3 *tmp6
   150 assertequals 1 *tmp88 "xor"
   151 # "Function: inline def d(in n)"
-    * set :d.29:n 0
   152 op add *tmp89 zero 0
   153 label *label33
-    * op not *tmp91 *tmp89
+  154 op not *tmp91 *tmp42
   155 assertequals -1 *tmp91 "not 1"
   156 # "Function: inline def d(in n)"
-    * set :d.30:n 65535
   157 op add *tmp92 zero 65535
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
   161 set :a 0xabcdefabcdef
-    * op add *tmp95 0xabcdefabcdef 1
-    * op sub *tmp96 0 188900977659376
   162 # "Function: inline def d(in n)"
-    * set :d.31:n 0xabcdefabcdef
-    * op add *tmp97 zero :a
+  163 op add *tmp97 zero 0xabcdefabcdef
   164 label *label35
   165 op not *tmp99 *tmp97
   166 assertequals -188900977659376 *tmp99 "not 3"
   167 # "Function: inline def d(in n)"
-    * set :d.32:n 4
   168 op add *tmp100 zero 4
   169 label *label36
-    * op max *tmp102 2 *tmp100
+  170 op max *tmp102 2 *tmp9
   171 assertequals 4 *tmp102 "max"
   172 # "Function: inline def d(in n)"
-    * set :d.33:n 4
   173 op add *tmp103 zero 4
   174 label *label37
-    * op min *tmp105 2 *tmp103
+  175 op min *tmp105 2 *tmp9
   176 assertequals 2 *tmp105 "min"
   177 # "Function: inline def d(in n)"
-    * set :d.34:n -2
   178 op add *tmp106 zero -2
   179 label *label38
   180 op abs *tmp108 *tmp106
   181 assertequals 2 *tmp108 "abs"
   182 # "Function: inline def d(in n)"
-    * set :d.35:n -2
   183 op add *tmp109 zero -2
   184 label *label39
   185 # "Function: inline def sign(in x)"
-    * set :sign:x *tmp109
-    * op greaterThan *tmp112 *tmp109 0
-    * op lessThan *tmp113 *tmp109 0
+  186 set :sign:x *tmp106
+  187 op greaterThan *tmp112 *tmp106 0
+  188 op lessThan *tmp113 *tmp106 0
   189 op sub *tmp111 *tmp112 *tmp113
   190 label *label40
   191 assertequals -1 *tmp111 "sign(-2)"
   192 # "Function: inline def d(in n)"
-    * set :d.36:n 2
   193 op add *tmp115 zero 2
   194 label *label41
   195 # "Function: inline def sign(in x)"
-    * set :sign.1:x *tmp115
-    * op greaterThan *tmp118 *tmp115 0
-    * op lessThan *tmp119 *tmp115 0
+  196 set :sign.1:x *tmp6
+  197 op greaterThan *tmp118 *tmp6 0
+  198 op lessThan *tmp119 *tmp6 0
   199 op sub *tmp117 *tmp118 *tmp119
   200 label *label42
   201 assertequals 1 *tmp117 "sign(2)"
   202 # "Function: inline def d(in n)"
-    * set :d.37:n 0
   203 op add *tmp121 zero 0
   204 label *label43
   205 # "Function: inline def sign(in x)"
-    * set :sign.2:x *tmp121
-    * op greaterThan *tmp124 *tmp121 0
-    * op lessThan *tmp125 *tmp121 0
+  206 set :sign.2:x *tmp42
+  207 op greaterThan *tmp124 *tmp42 0
+  208 op lessThan *tmp125 *tmp42 0
   209 op sub *tmp123 *tmp124 *tmp125
   210 label *label44
   211 assertequals 0 *tmp123 "sign(0)"
   212 # "Function: inline def d(in n)"
-    * set :d.38:n 2.718281828459045
   213 op add *tmp127 zero 2.718281828459045
   214 label *label45
   215 op log *tmp129 *tmp127
   216 assertequals 1 *tmp129 "log"
   217 # "Function: inline def d(in n)"
-    * set :d.39:n 10
   218 op add *tmp130 zero 10
   219 label *label46
   220 op log10 *tmp132 *tmp130
   221 assertequals 1 *tmp132 "log10"
   222 # "Function: inline def d(in n)"
-    * set :d.40:n 2.5
   223 op add *tmp133 zero 2.5
   224 label *label47
   225 op floor *tmp135 *tmp133
   226 assertequals 2 *tmp135 "floor"
   227 # "Function: inline def d(in n)"
-    * set :d.41:n 2.5
   228 op add *tmp136 zero 2.5
   229 label *label48
-    * op ceil *tmp138 *tmp136
+  230 op ceil *tmp138 *tmp133
   231 assertequals 3 *tmp138 "ceil"
   232 # "Function: inline def d(in n)"
-    * set :d.42:n 16
   233 op add *tmp139 zero 16
   234 label *label49
   235 op sqrt *tmp141 *tmp139
   236 assertequals 4 *tmp141 "sqrt"
   237 # "Function: inline def d(in n)"
-    * set :d.43:n 1
   238 op add *tmp142 zero 1
   239 label *label50
-    * op angle *tmp144 1 *tmp142
+  240 op angle *tmp144 1 *tmp48
   241 assertequals 45 *tmp144 "angle"
   242 # "Function: inline def d(in n)"
-    * set :d.44:n 135
   243 op add *tmp145 zero 135
   244 label *label51
   245 op angleDiff *tmp147 45 *tmp145
 
   270 set :assertEqualsRound:title "atan"
   271 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   272 # "Function: inline def d(in n)"
-    * set :d.45:n 8
   273 op add *tmp148 zero 8
   274 label *label52
-    * op sub *tmp150 0 *tmp148
+  275 op sub *tmp150 -8 zero
   276 assertequals -8 *tmp150 "unary minus"
   277 # "Function: inline def d(in n)"
-    * set :d.46:n 0
   278 op add *tmp151 zero 0
   279 label *label53
-    * op equal *tmp153 *tmp151 false
+  280 op equal *tmp153 *tmp42 false
   281 assertequals 1 *tmp153 "boolean negation 1"
   282 # "Function: inline def d(in n)"
-    * set :d.47:n 1
   283 op add *tmp154 zero 1
   284 label *label54
-    * op equal *tmp156 *tmp154 false
+  285 op equal *tmp156 *tmp48 false
   286 assertequals 0 *tmp156 "boolean negation 2"
   287 # "Function: inline def d(in n)"
-    * set :d.48:n 2
   288 op add *tmp157 zero 2
   289 label *label55
-    * op equal *tmp159 *tmp157 false
+  290 op equal *tmp159 *tmp6 false
   291 assertequals 0 *tmp159 "boolean negation 3"
-    * set :a 2
   292 # "Function: inline def d(in n)"
-    * set :d.49:n 4
   293 op add *tmp160 zero 4
   294 label *label56
-    * op pow :a 2 *tmp160
-    * assertequals 16 :a "**="
-    * set :a 2
+  295 op pow :a 2 *tmp9
+  296 assertequals 16 *tmp23 "**="
   297 # "Function: inline def d(in n)"
-    * set :d.50:n 4
   298 op add *tmp162 zero 4
   299 label *label57
-    * op mul :a 2 *tmp162
+  300 op mul :a 2 *tmp9
   301 assertequals 8 :a "*="
-    * set :a 6
   302 # "Function: inline def d(in n)"
-    * set :d.51:n 4
   303 op add *tmp164 zero 4
   304 label *label58
-    * op div :a 6 *tmp164
-    * assertequals 1.5 :a "/="
-    * set :a 6
+  305 op div :a 6 *tmp9
+  306 assertequals 1.5 *tmp11 "/="
   307 # "Function: inline def d(in n)"
-    * set :d.52:n 4
   308 op add *tmp166 zero 4
   309 label *label59
-    * op idiv :a 6 *tmp166
-    * assertequals 1 :a "\="
-    * set :a 6
+  310 op idiv :a 6 *tmp9
+  311 assertequals 1 *tmp17 "\="
   312 # "Function: inline def d(in n)"
-    * set :d.53:n 4
   313 op add *tmp168 zero 4
   314 label *label60
-    * op mod :a 6 *tmp168
-    * assertequals 2 :a "%="
-    * set :a 4
+  315 op mod :a 6 *tmp9
+  316 assertequals 2 *tmp20 "%="
   317 # "Function: inline def d(in n)"
-    * set :d.54:n 2
   318 op add *tmp170 zero 2
   319 label *label61
-    * op add :a 4 *tmp170
+  320 op add :a 4 *tmp6
   321 assertequals 6 :a "+="
-    * set :a 4
   322 # "Function: inline def d(in n)"
-    * set :d.55:n 2
   323 op add *tmp172 zero 2
   324 label *label62
-    * op sub :a 4 *tmp172
+  325 op sub :a 4 *tmp6
   326 assertequals 2 :a "-="
-    * set :a 1
   327 # "Function: inline def d(in n)"
-    * set :d.56:n 2
   328 op add *tmp174 zero 2
   329 label *label63
-    * op shl :a 1 *tmp174
-    * assertequals 4 :a "<<="
-    * set :a 9
+  330 op shl :a 1 *tmp6
+  331 assertequals 4 *tmp76 "<<="
   332 # "Function: inline def d(in n)"
-    * set :d.57:n 2
   333 op add *tmp176 zero 2
   334 label *label64
-    * op shr :a 9 *tmp176
-    * assertequals 2 :a ">>="
-    * set :a 1
+  335 op shr :a 9 *tmp6
+  336 assertequals 2 *tmp79 ">>="
   337 # "Function: inline def d(in n)"
-    * set :d.58:n 2
   338 op add *tmp178 zero 2
   339 label *label65
-    * op or :a 1 *tmp178
-    * assertequals 3 :a "|="
-    * set :a 3
+  340 op or :a 1 *tmp6
+  341 assertequals 3 *tmp82 "|="
   342 # "Function: inline def d(in n)"
-    * set :d.59:n 2
   343 op add *tmp180 zero 2
   344 label *label66
-    * op and :a 3 *tmp180
-    * assertequals 2 :a "&="
-    * set :a 3
+  345 op and :a 3 *tmp6
+  346 assertequals 2 *tmp85 "&="
   347 # "Function: inline def d(in n)"
-    * set :d.60:n 2
   348 op add *tmp182 zero 2
   349 label *label67
-    * op xor :a 3 *tmp182
-    * assertequals 1 :a "^="
-    * set :a 1
+  350 op xor :a 3 *tmp6
+  351 assertequals 1 *tmp88 "^="
   352 # "Function: inline def d(in n)"
-    * set :d.61:n 0
   353 op add *tmp184 zero 0
   354 label *label68
-    * op land :a 1 *tmp184
-    * assertequals false :a "&&="
-    * set :a 1
+  355 op land :a 1 *tmp42
+  356 assertequals false *tmp44 "&&="
   357 # "Function: inline def d(in n)"
-    * set :d.62:n 2
   358 op add *tmp186 zero 2
   359 label *label69
-    * op land :a 1 *tmp186
-    * assertequals true :a "&&="
-    * set :a 0
+  360 op land :a 1 *tmp6
+  361 assertequals true *tmp47 "&&="
   362 # "Function: inline def d(in n)"
-    * set :d.63:n 2
   363 op add *tmp188 zero 2
   364 label *label70
-    * op or *tmp190 0 *tmp188
+  365 op or *tmp190 0 *tmp6
   366 op notEqual :a *tmp190 false
   367 assertequals true :a "||="
   368 assertequals %ff0000ff %ff0000 "short color literals"
   369 assertequals %ffffffff %[white] "named color literals"
   370 # "Function: inline def o(in n)"
-    * set :o:n @copper-wall
   371 jump *label72 equal zero false
   372 set *tmp192 null
   373 jump *label73 always
   374 label *label72
   375 set *tmp192 @copper-wall
   376 label *label73
-    * set *tmp191 *tmp192
   377 label *label71
   378 sensor *tmp193 *tmp192 @id
   379 assertequals 17 *tmp193 "Logic ID"
 
   383 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   384 op mul *tmp194 :assertEqualsRound:actual 100000000
   385 # "Function: inline def round(in x)"
-    * set :round:x *tmp194
   386 op add *tmp196 *tmp194 0.5
   387 op floor *tmp195 *tmp196
   388 label *label75

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-63 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * op add *tmp0 zero 3
     3 label *label4
     4 op add *tmp2 zero 5
     5 assertequals 5 *tmp2 "add"
 
    24 op div *tmp14 1 *tmp12
    25 assertequals 0.00001 *tmp14 "div exp"
    26 # "Function: inline def d(in n)"
-    * op add *tmp15 zero 4
    27 label *label9
    28 op idiv *tmp17 6 *tmp9
    29 assertequals 1 *tmp17 "idiv"
    30 # "Function: inline def d(in n)"
-    * op add *tmp18 zero 4
    31 label *label10
    32 op mod *tmp20 6 *tmp9
    33 assertequals 2 *tmp20 "mod"
    34 # "Function: inline def d(in n)"
-    * op add *tmp21 zero 4
    35 label *label11
    36 op pow *tmp23 2 *tmp9
    37 assertequals 16 *tmp23 "pow"
    38 # "Function: inline def d(in n)"
    39 op add *tmp24 zero 5
    40 label *label12
-    * op equal *tmp26 5 *tmp24
+   41 op equal *tmp26 5 *tmp2
    42 assertequals true *tmp26 "equal 1"
    43 # "Function: inline def d(in n)"
-    * op add *tmp27 zero 6
    44 label *label13
    45 op equal *tmp29 5 *tmp3
    46 assertequals false *tmp29 "equal 2"
 
    50 op equal *tmp32 0 *tmp30
    51 assertequals true *tmp32 "equal null"
    52 # "Function: inline def d(in n)"
-    * op add *tmp33 zero 5
    53 label *label15
-    * op notEqual *tmp35 5 *tmp24
+   54 op notEqual *tmp35 5 *tmp2
    55 assertequals false *tmp35 "notEqual 1"
    56 # "Function: inline def d(in n)"
-    * op add *tmp36 zero 6
    57 label *label16
    58 op notEqual *tmp38 5 *tmp3
    59 assertequals true *tmp38 "notEqual 2"
    60 # "Function: inline def d(in n)"
-    * op add *tmp39 zero null
    61 label *label17
    62 op notEqual *tmp41 0 *tmp30
    63 assertequals false *tmp41 "notEqual null"
 
    67 op land *tmp44 1 *tmp42
    68 assertequals false *tmp44 "land 1"
    69 # "Function: inline def d(in n)"
-    * op add *tmp45 zero 2
    70 label *label19
    71 op land *tmp47 1 *tmp6
    72 assertequals true *tmp47 "land 2"
 
    76 op lessThan *tmp50 0 *tmp48
    77 assertequals true *tmp50 "lessThan 1"
    78 # "Function: inline def d(in n)"
-    * op add *tmp51 zero 0
    79 label *label21
    80 op lessThan *tmp53 1 *tmp42
    81 assertequals false *tmp53 "lessThan 2"
    82 # "Function: inline def d(in n)"
-    * op add *tmp54 zero 1
    83 label *label22
    84 op lessThanEq *tmp56 1 *tmp48
    85 assertequals true *tmp56 "lessThanEq 1"
    86 # "Function: inline def d(in n)"
-    * op add *tmp57 zero 0
    87 label *label23
    88 op lessThanEq *tmp59 1 *tmp42
    89 assertequals false *tmp59 "lessThanEq 2"
    90 # "Function: inline def d(in n)"
-    * op add *tmp60 zero 1
    91 label *label24
    92 op greaterThan *tmp62 2 *tmp48
    93 assertequals true *tmp62 "greaterThan 1"
    94 # "Function: inline def d(in n)"
-    * op add *tmp63 zero 2
    95 label *label25
    96 op greaterThan *tmp65 1 *tmp6
    97 assertequals false *tmp65 "greaterThan 2"
    98 # "Function: inline def d(in n)"
-    * op add *tmp66 zero 1
    99 label *label26
   100 op greaterThanEq *tmp68 1 *tmp48
   101 assertequals true *tmp68 "greaterThanEq 1"
   102 # "Function: inline def d(in n)"
-    * op add *tmp69 zero 2
   103 label *label27
   104 op greaterThanEq *tmp71 1 *tmp6
   105 assertequals false *tmp71 "greaterThanEq 2"
 
   108 op strictEqual *tmp73 null NULL
   109 assertequals true *tmp73 "strictEqual 2"
   110 # "Function: inline def d(in n)"
-    * op add *tmp74 zero 2
   111 label *label28
   112 op shl *tmp76 1 *tmp6
   113 assertequals 4 *tmp76 "shl"
   114 # "Function: inline def d(in n)"
-    * op add *tmp77 zero 2
   115 label *label29
   116 op shr *tmp79 9 *tmp6
   117 assertequals 2 *tmp79 "shr"
   118 # "Function: inline def d(in n)"
-    * op add *tmp80 zero 2
   119 label *label30
   120 op or *tmp82 1 *tmp6
   121 assertequals 3 *tmp82 "or"
   122 # "Function: inline def d(in n)"
-    * op add *tmp83 zero 2
   123 label *label31
   124 op and *tmp85 3 *tmp6
   125 assertequals 2 *tmp85 "and"
   126 # "Function: inline def d(in n)"
-    * op add *tmp86 zero 2
   127 label *label32
   128 op xor *tmp88 3 *tmp6
   129 assertequals 1 *tmp88 "xor"
   130 # "Function: inline def d(in n)"
-    * op add *tmp89 zero 0
   131 label *label33
   132 op not *tmp91 *tmp42
   133 assertequals -1 *tmp91 "not 1"
 
   136 label *label34
   137 op not *tmp94 *tmp92
   138 assertequals -65536 *tmp94 "not 2"
-    * set :a 0xabcdefabcdef
   139 # "Function: inline def d(in n)"
   140 op add *tmp97 zero 0xabcdefabcdef
   141 label *label35
   142 op not *tmp99 *tmp97
   143 assertequals -188900977659376 *tmp99 "not 3"
   144 # "Function: inline def d(in n)"
-    * op add *tmp100 zero 4
   145 label *label36
   146 op max *tmp102 2 *tmp9
   147 assertequals 4 *tmp102 "max"
   148 # "Function: inline def d(in n)"
-    * op add *tmp103 zero 4
   149 label *label37
   150 op min *tmp105 2 *tmp9
   151 assertequals 2 *tmp105 "min"
 
   155 op abs *tmp108 *tmp106
   156 assertequals 2 *tmp108 "abs"
   157 # "Function: inline def d(in n)"
-    * op add *tmp109 zero -2
   158 label *label39
   159 # "Function: inline def sign(in x)"
-    * set :sign:x *tmp106
   160 op greaterThan *tmp112 *tmp106 0
   161 op lessThan *tmp113 *tmp106 0
   162 op sub *tmp111 *tmp112 *tmp113
   163 label *label40
   164 assertequals -1 *tmp111 "sign(-2)"
   165 # "Function: inline def d(in n)"
-    * op add *tmp115 zero 2
   166 label *label41
   167 # "Function: inline def sign(in x)"
-    * set :sign.1:x *tmp6
   168 op greaterThan *tmp118 *tmp6 0
   169 op lessThan *tmp119 *tmp6 0
   170 op sub *tmp117 *tmp118 *tmp119
   171 label *label42
   172 assertequals 1 *tmp117 "sign(2)"
   173 # "Function: inline def d(in n)"
-    * op add *tmp121 zero 0
   174 label *label43
   175 # "Function: inline def sign(in x)"
-    * set :sign.2:x *tmp42
   176 op greaterThan *tmp124 *tmp42 0
   177 op lessThan *tmp125 *tmp42 0
   178 op sub *tmp123 *tmp124 *tmp125
 
   194 op floor *tmp135 *tmp133
   195 assertequals 2 *tmp135 "floor"
   196 # "Function: inline def d(in n)"
-    * op add *tmp136 zero 2.5
   197 label *label48
   198 op ceil *tmp138 *tmp133
   199 assertequals 3 *tmp138 "ceil"
 
   203 op sqrt *tmp141 *tmp139
   204 assertequals 4 *tmp141 "sqrt"
   205 # "Function: inline def d(in n)"
-    * op add *tmp142 zero 1
   206 label *label50
   207 op angle *tmp144 1 *tmp48
   208 assertequals 45 *tmp144 "angle"
 
   237 set :assertEqualsRound:title "atan"
   238 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   239 # "Function: inline def d(in n)"
-    * op add *tmp148 zero 8
   240 label *label52
   241 op sub *tmp150 -8 zero
   242 assertequals -8 *tmp150 "unary minus"
   243 # "Function: inline def d(in n)"
-    * op add *tmp151 zero 0
   244 label *label53
   245 op equal *tmp153 *tmp42 false
   246 assertequals 1 *tmp153 "boolean negation 1"
   247 # "Function: inline def d(in n)"
-    * op add *tmp154 zero 1
   248 label *label54
   249 op equal *tmp156 *tmp48 false
   250 assertequals 0 *tmp156 "boolean negation 2"
   251 # "Function: inline def d(in n)"
-    * op add *tmp157 zero 2
   252 label *label55
   253 op equal *tmp159 *tmp6 false
   254 assertequals 0 *tmp159 "boolean negation 3"
   255 # "Function: inline def d(in n)"
-    * op add *tmp160 zero 4
   256 label *label56
-    * op pow :a 2 *tmp9
   257 assertequals 16 *tmp23 "**="
   258 # "Function: inline def d(in n)"
-    * op add *tmp162 zero 4
   259 label *label57
   260 op mul :a 2 *tmp9
   261 assertequals 8 :a "*="
   262 # "Function: inline def d(in n)"
-    * op add *tmp164 zero 4
   263 label *label58
-    * op div :a 6 *tmp9
   264 assertequals 1.5 *tmp11 "/="
   265 # "Function: inline def d(in n)"
-    * op add *tmp166 zero 4
   266 label *label59
-    * op idiv :a 6 *tmp9
   267 assertequals 1 *tmp17 "\="
   268 # "Function: inline def d(in n)"
-    * op add *tmp168 zero 4
   269 label *label60
-    * op mod :a 6 *tmp9
   270 assertequals 2 *tmp20 "%="
   271 # "Function: inline def d(in n)"
-    * op add *tmp170 zero 2
   272 label *label61
-    * op add :a 4 *tmp6
+  273 op add :a zero 6
   274 assertequals 6 :a "+="
   275 # "Function: inline def d(in n)"
-    * op add *tmp172 zero 2
   276 label *label62
-    * op sub :a 4 *tmp6
+  277 op sub :a 2 zero
   278 assertequals 2 :a "-="
   279 # "Function: inline def d(in n)"
-    * op add *tmp174 zero 2
   280 label *label63
-    * op shl :a 1 *tmp6
   281 assertequals 4 *tmp76 "<<="
   282 # "Function: inline def d(in n)"
-    * op add *tmp176 zero 2
   283 label *label64
-    * op shr :a 9 *tmp6
   284 assertequals 2 *tmp79 ">>="
   285 # "Function: inline def d(in n)"
-    * op add *tmp178 zero 2
   286 label *label65
-    * op or :a 1 *tmp6
   287 assertequals 3 *tmp82 "|="
   288 # "Function: inline def d(in n)"
-    * op add *tmp180 zero 2
   289 label *label66
-    * op and :a 3 *tmp6
   290 assertequals 2 *tmp85 "&="
   291 # "Function: inline def d(in n)"
-    * op add *tmp182 zero 2
   292 label *label67
-    * op xor :a 3 *tmp6
   293 assertequals 1 *tmp88 "^="
   294 # "Function: inline def d(in n)"
-    * op add *tmp184 zero 0
   295 label *label68
-    * op land :a 1 *tmp42
   296 assertequals false *tmp44 "&&="
   297 # "Function: inline def d(in n)"
-    * op add *tmp186 zero 2
   298 label *label69
-    * op land :a 1 *tmp6
   299 assertequals true *tmp47 "&&="
   300 # "Function: inline def d(in n)"
-    * op add *tmp188 zero 2
   301 label *label70
   302 op or *tmp190 0 *tmp6
   303 op notEqual :a *tmp190 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    36 op pow *tmp23 2 *tmp9
    37 assertequals 16 *tmp23 "pow"
    38 # "Function: inline def d(in n)"
-    * op add *tmp24 zero 5
    39 label *label12
    40 op equal *tmp26 5 *tmp2
    41 assertequals true *tmp26 "equal 1"
 
   270 # "Function: inline def d(in n)"
   271 label *label61
   272 op add :a zero 6
-    * assertequals 6 :a "+="
+  273 assertequals 6 *tmp3 "+="
   274 # "Function: inline def d(in n)"
   275 label *label62
   276 op sub :a 2 zero

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
   269 assertequals 2 *tmp20 "%="
   270 # "Function: inline def d(in n)"
   271 label *label61
-    * op add :a zero 6
   272 assertequals 6 *tmp3 "+="
   273 # "Function: inline def d(in n)"
   274 label *label62

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   304 assertequals %ffffffff %[white] "named color literals"
   305 # "Function: inline def o(in n)"
   306 jump *label72 equal zero false
-    * set *tmp192 null
+  307 sensor *tmp193 null @id
   308 jump *label73 always
   309 label *label72
-    * set *tmp192 @copper-wall
+  310 sensor *tmp193 @copper-wall @id
   311 label *label73
   312 label *label71
-    * sensor *tmp193 *tmp192 @id
   313 assertequals 17 *tmp193 "Logic ID"
   314 stop
   315 end

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+11 instructions):
 
   214 set :assertEqualsRound:expected 1
   215 set :assertEqualsRound:actual 1
   216 set :assertEqualsRound:title "sin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  217 label *label76
+  218 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  219 op mul *tmp194 :assertEqualsRound:actual 100000000
+  220 # "Function: inline def round(in x)"
+  221 op add *tmp196 *tmp194 0.5
+  222 op floor *tmp195 *tmp196
+  223 label *label77
+  224 op div *tmp198 *tmp195 100000000
+  225 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  226 label *label78
   227 set :assertEqualsRound:expected -1
   228 set :assertEqualsRound:actual -1
   229 set :assertEqualsRound:title "cos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  230 label *label79
+  231 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  232 op mul *tmp194 :assertEqualsRound:actual 100000000
+  233 # "Function: inline def round(in x)"
+  234 op add *tmp196 *tmp194 0.5
+  235 op floor *tmp195 *tmp196
+  236 label *label80
+  237 op div *tmp198 *tmp195 100000000
+  238 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  239 label *label81
   240 set :assertEqualsRound:expected 1
   241 set :assertEqualsRound:actual 0.9999999999999999
   242 set :assertEqualsRound:title "tan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  243 label *label82
+  244 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  245 op mul *tmp194 :assertEqualsRound:actual 100000000
+  246 # "Function: inline def round(in x)"
+  247 op add *tmp196 *tmp194 0.5
+  248 op floor *tmp195 *tmp196
+  249 label *label83
+  250 op div *tmp198 *tmp195 100000000
+  251 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  252 label *label84
   253 set :assertEqualsRound:expected 90
   254 set :assertEqualsRound:actual 90
   255 set :assertEqualsRound:title "asin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  256 label *label85
+  257 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  258 op mul *tmp194 :assertEqualsRound:actual 100000000
+  259 # "Function: inline def round(in x)"
+  260 op add *tmp196 *tmp194 0.5
+  261 op floor *tmp195 *tmp196
+  262 label *label86
+  263 op div *tmp198 *tmp195 100000000
+  264 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  265 label *label87
   266 set :assertEqualsRound:expected 0
   267 set :assertEqualsRound:actual 0
   268 set :assertEqualsRound:title "acos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  269 label *label88
+  270 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  271 op mul *tmp194 :assertEqualsRound:actual 100000000
+  272 # "Function: inline def round(in x)"
+  273 op add *tmp196 *tmp194 0.5
+  274 op floor *tmp195 *tmp196
+  275 label *label89
+  276 op div *tmp198 *tmp195 100000000
+  277 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  278 label *label90
   279 set :assertEqualsRound:expected 45
   280 set :assertEqualsRound:actual 45
   281 set :assertEqualsRound:title "atan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  282 label *label91
+  283 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  284 op mul *tmp194 :assertEqualsRound:actual 100000000
+  285 # "Function: inline def round(in x)"
+  286 op add *tmp196 *tmp194 0.5
+  287 op floor *tmp195 *tmp196
+  288 label *label92
+  289 op div *tmp198 *tmp195 100000000
+  290 assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  291 label *label93
   292 # "Function: inline def d(in n)"
   293 label *label52
   294 op sub *tmp150 -8 zero
 
   367 assertequals 17 *tmp193 "Logic ID"
   368 stop
   369 end
-    * label *label3
-    * # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
-    * # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
-    * label *label75
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
-    * label *label74
-    * return :assertEqualsRound*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   216 set :assertEqualsRound:title "sin"
   217 label *label76
   218 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  219 op mul *tmp194 1 100000000
   220 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  221 op add *tmp196 100000000 0.5
+  222 op floor *tmp195 100000000.5
   223 label *label77
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  224 op div *tmp198 100000000 100000000
+  225 assertequals 1 1 "sin"
   226 label *label78
   227 set :assertEqualsRound:expected -1
   228 set :assertEqualsRound:actual -1
   229 set :assertEqualsRound:title "cos"
   230 label *label79
   231 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  232 op mul *tmp194 -1 100000000
   233 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  234 op add *tmp196 -100000000 0.5
+  235 op floor *tmp195 -99999999.5
   236 label *label80
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  237 op div *tmp198 -100000000 100000000
+  238 assertequals -1 -1 "cos"
   239 label *label81
   240 set :assertEqualsRound:expected 1
   241 set :assertEqualsRound:actual 0.9999999999999999
   242 set :assertEqualsRound:title "tan"
   243 label *label82
   244 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  245 op mul *tmp194 0.9999999999999999 100000000
   246 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  247 op add *tmp196 99999999.99999999 0.5
+  248 op floor *tmp195 100000000.49999999
   249 label *label83
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  250 op div *tmp198 100000000 100000000
+  251 assertequals 1 1 "tan"
   252 label *label84
   253 set :assertEqualsRound:expected 90
   254 set :assertEqualsRound:actual 90
   255 set :assertEqualsRound:title "asin"
   256 label *label85
   257 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  258 op mul *tmp194 90 100000000
   259 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  260 op add *tmp196 9000000000 0.5
+  261 op floor *tmp195 9000000000.5
   262 label *label86
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  263 op div *tmp198 9000000000 100000000
+  264 assertequals 90 90 "asin"
   265 label *label87
   266 set :assertEqualsRound:expected 0
   267 set :assertEqualsRound:actual 0
   268 set :assertEqualsRound:title "acos"
   269 label *label88
   270 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  271 op mul *tmp194 0 100000000
   272 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  273 op add *tmp196 0 0.5
+  274 op floor *tmp195 0.5
   275 label *label89
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  276 op div *tmp198 0 100000000
+  277 assertequals 0 0 "acos"
   278 label *label90
   279 set :assertEqualsRound:expected 45
   280 set :assertEqualsRound:actual 45
   281 set :assertEqualsRound:title "atan"
   282 label *label91
   283 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 :assertEqualsRound:actual 100000000
+  284 op mul *tmp194 45 100000000
   285 # "Function: inline def round(in x)"
-    * op add *tmp196 *tmp194 0.5
-    * op floor *tmp195 *tmp196
+  286 op add *tmp196 4500000000 0.5
+  287 op floor *tmp195 4500000000.5
   288 label *label92
-    * op div *tmp198 *tmp195 100000000
-    * assertequals :assertEqualsRound:expected *tmp198 :assertEqualsRound:title
+  289 op div *tmp198 4500000000 100000000
+  290 assertequals 45 45 "atan"
   291 label *label93
   292 # "Function: inline def d(in n)"
   293 label *label52

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
   211 op angleDiff *tmp147 45 *tmp145
   212 assertequals 90 *tmp147 "angleDiff"
   213 assertequals 5 5 "len"
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 1
-    * set :assertEqualsRound:title "sin"
   214 label *label76
   215 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 1 100000000
   216 # "Function: inline def round(in x)"
-    * op add *tmp196 100000000 0.5
-    * op floor *tmp195 100000000.5
   217 label *label77
-    * op div *tmp198 100000000 100000000
   218 assertequals 1 1 "sin"
   219 label *label78
-    * set :assertEqualsRound:expected -1
-    * set :assertEqualsRound:actual -1
-    * set :assertEqualsRound:title "cos"
   220 label *label79
   221 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 -1 100000000
   222 # "Function: inline def round(in x)"
-    * op add *tmp196 -100000000 0.5
-    * op floor *tmp195 -99999999.5
   223 label *label80
-    * op div *tmp198 -100000000 100000000
   224 assertequals -1 -1 "cos"
   225 label *label81
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 0.9999999999999999
-    * set :assertEqualsRound:title "tan"
   226 label *label82
   227 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 0.9999999999999999 100000000
   228 # "Function: inline def round(in x)"
-    * op add *tmp196 99999999.99999999 0.5
-    * op floor *tmp195 100000000.49999999
   229 label *label83
-    * op div *tmp198 100000000 100000000
   230 assertequals 1 1 "tan"
   231 label *label84
-    * set :assertEqualsRound:expected 90
-    * set :assertEqualsRound:actual 90
-    * set :assertEqualsRound:title "asin"
   232 label *label85
   233 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 90 100000000
   234 # "Function: inline def round(in x)"
-    * op add *tmp196 9000000000 0.5
-    * op floor *tmp195 9000000000.5
   235 label *label86
-    * op div *tmp198 9000000000 100000000
   236 assertequals 90 90 "asin"
   237 label *label87
-    * set :assertEqualsRound:expected 0
-    * set :assertEqualsRound:actual 0
-    * set :assertEqualsRound:title "acos"
   238 label *label88
   239 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 0 100000000
   240 # "Function: inline def round(in x)"
-    * op add *tmp196 0 0.5
-    * op floor *tmp195 0.5
   241 label *label89
-    * op div *tmp198 0 100000000
   242 assertequals 0 0 "acos"
   243 label *label90
-    * set :assertEqualsRound:expected 45
-    * set :assertEqualsRound:actual 45
-    * set :assertEqualsRound:title "atan"
   244 label *label91
   245 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp194 45 100000000
   246 # "Function: inline def round(in x)"
-    * op add *tmp196 4500000000 0.5
-    * op floor *tmp195 4500000000.5
   247 label *label92
-    * op div *tmp198 4500000000 100000000
   248 assertequals 45 45 "atan"
   249 label *label93
   250 # "Function: inline def d(in n)"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    61 op notEqual *tmp41 0 *tmp30
    62 assertequals false *tmp41 "notEqual null"
    63 # "Function: inline def d(in n)"
-    * op add *tmp42 zero 0
+   64 set *tmp42 zero
    65 label *label18
    66 op land *tmp44 1 *tmp42
    67 assertequals false *tmp44 "land 1"
 
   319 sensor *tmp193 null @id
   320 jump *label73 always
   321 label *label72
-    * sensor *tmp193 @copper-wall @id
+  322 set *tmp193 17
   323 label *label73
   324 label *label71
   325 assertequals 17 *tmp193 "Logic ID"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    63 # "Function: inline def d(in n)"
    64 set *tmp42 zero
    65 label *label18
-    * op land *tmp44 1 *tmp42
+   66 op land *tmp44 1 zero
    67 assertequals false *tmp44 "land 1"
    68 # "Function: inline def d(in n)"
    69 label *label19
 
    76 assertequals true *tmp50 "lessThan 1"
    77 # "Function: inline def d(in n)"
    78 label *label21
-    * op lessThan *tmp53 1 *tmp42
+   79 op lessThan *tmp53 1 zero
    80 assertequals false *tmp53 "lessThan 2"
    81 # "Function: inline def d(in n)"
    82 label *label22
 
    84 assertequals true *tmp56 "lessThanEq 1"
    85 # "Function: inline def d(in n)"
    86 label *label23
-    * op lessThanEq *tmp59 1 *tmp42
+   87 op lessThanEq *tmp59 1 zero
    88 assertequals false *tmp59 "lessThanEq 2"
    89 # "Function: inline def d(in n)"
    90 label *label24
 
   128 assertequals 1 *tmp88 "xor"
   129 # "Function: inline def d(in n)"
   130 label *label33
-    * op not *tmp91 *tmp42
+  131 op not *tmp91 zero
   132 assertequals -1 *tmp91 "not 1"
   133 # "Function: inline def d(in n)"
   134 op add *tmp92 zero 65535
 
   172 # "Function: inline def d(in n)"
   173 label *label43
   174 # "Function: inline def sign(in x)"
-    * op greaterThan *tmp124 *tmp42 0
-    * op lessThan *tmp125 *tmp42 0
+  175 op greaterThan *tmp124 zero 0
+  176 op lessThan *tmp125 zero 0
   177 op sub *tmp123 *tmp124 *tmp125
   178 label *label44
   179 assertequals 0 *tmp123 "sign(0)"
 
   253 assertequals -8 *tmp150 "unary minus"
   254 # "Function: inline def d(in n)"
   255 label *label53
-    * op equal *tmp153 *tmp42 false
+  256 op equal *tmp153 zero false
   257 assertequals 1 *tmp153 "boolean negation 1"
   258 # "Function: inline def d(in n)"
   259 label *label54

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    61 op notEqual *tmp41 0 *tmp30
    62 assertequals false *tmp41 "notEqual null"
    63 # "Function: inline def d(in n)"
-    * set *tmp42 zero
    64 label *label18
    65 op land *tmp44 1 zero
    66 assertequals false *tmp44 "land 1"

Modifications by Iterated phase, If Expression Optimization, pass 2, iteration 1:
 
   314 assertequals %ff0000ff %ff0000 "short color literals"
   315 assertequals %ffffffff %[white] "named color literals"
   316 # "Function: inline def o(in n)"
-    * jump *label72 equal zero false
+  317 set *tmp193 17
+  318 jump *label73 equal zero false
   319 sensor *tmp193 null @id
   320 jump *label73 always
-    * label *label72
-    * set *tmp193 17
   321 label *label73
   322 label *label71
   323 assertequals 17 *tmp193 "Logic ID"

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   317 set *tmp193 17
   318 jump *label73 equal zero false
   319 sensor *tmp193 null @id
-    * jump *label73 always
   320 label *label73
   321 label *label71
   322 assertequals 17 *tmp193 "Logic ID"

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * label *label4
     3 op add *tmp2 zero 5
     4 assertequals 5 *tmp2 "add"
     5 # "Function: inline def d(in n)"
     6 op add *tmp3 zero 6
-    * label *label5
     7 op sub *tmp5 1 zero
     8 assertequals 1 *tmp5 "sub"
     9 # "Function: inline def d(in n)"
    10 op add *tmp6 zero 2
-    * label *label6
    11 op mul *tmp8 3 *tmp6
    12 assertequals 6 *tmp8 "mul"
    13 # "Function: inline def d(in n)"
    14 op add *tmp9 zero 4
-    * label *label7
    15 op div *tmp11 6 *tmp9
    16 assertequals 1.5 *tmp11 "div"
    17 # "Function: inline def d(in n)"
    18 op add *tmp12 zero 100000
-    * label *label8
    19 op div *tmp14 1 *tmp12
    20 assertequals 0.00001 *tmp14 "div exp"
    21 # "Function: inline def d(in n)"
-    * label *label9
    22 op idiv *tmp17 6 *tmp9
    23 assertequals 1 *tmp17 "idiv"
    24 # "Function: inline def d(in n)"
-    * label *label10
    25 op mod *tmp20 6 *tmp9
    26 assertequals 2 *tmp20 "mod"
    27 # "Function: inline def d(in n)"
-    * label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
    30 # "Function: inline def d(in n)"
-    * label *label12
    31 op equal *tmp26 5 *tmp2
    32 assertequals true *tmp26 "equal 1"
    33 # "Function: inline def d(in n)"
-    * label *label13
    34 op equal *tmp29 5 *tmp3
    35 assertequals false *tmp29 "equal 2"
    36 # "Function: inline def d(in n)"
    37 op add *tmp30 zero null
-    * label *label14
    38 op equal *tmp32 0 *tmp30
    39 assertequals true *tmp32 "equal null"
    40 # "Function: inline def d(in n)"
-    * label *label15
    41 op notEqual *tmp35 5 *tmp2
    42 assertequals false *tmp35 "notEqual 1"
    43 # "Function: inline def d(in n)"
-    * label *label16
    44 op notEqual *tmp38 5 *tmp3
    45 assertequals true *tmp38 "notEqual 2"
    46 # "Function: inline def d(in n)"
-    * label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
    49 # "Function: inline def d(in n)"
-    * label *label18
    50 op land *tmp44 1 zero
    51 assertequals false *tmp44 "land 1"
    52 # "Function: inline def d(in n)"
-    * label *label19
    53 op land *tmp47 1 *tmp6
    54 assertequals true *tmp47 "land 2"
    55 # "Function: inline def d(in n)"
    56 op add *tmp48 zero 1
-    * label *label20
    57 op lessThan *tmp50 0 *tmp48
    58 assertequals true *tmp50 "lessThan 1"
    59 # "Function: inline def d(in n)"
-    * label *label21
    60 op lessThan *tmp53 1 zero
    61 assertequals false *tmp53 "lessThan 2"
    62 # "Function: inline def d(in n)"
-    * label *label22
    63 op lessThanEq *tmp56 1 *tmp48
    64 assertequals true *tmp56 "lessThanEq 1"
    65 # "Function: inline def d(in n)"
-    * label *label23
    66 op lessThanEq *tmp59 1 zero
    67 assertequals false *tmp59 "lessThanEq 2"
    68 # "Function: inline def d(in n)"
-    * label *label24
    69 op greaterThan *tmp62 2 *tmp48
    70 assertequals true *tmp62 "greaterThan 1"
    71 # "Function: inline def d(in n)"
-    * label *label25
    72 op greaterThan *tmp65 1 *tmp6
    73 assertequals false *tmp65 "greaterThan 2"
    74 # "Function: inline def d(in n)"
-    * label *label26
    75 op greaterThanEq *tmp68 1 *tmp48
    76 assertequals true *tmp68 "greaterThanEq 1"
    77 # "Function: inline def d(in n)"
-    * label *label27
    78 op greaterThanEq *tmp71 1 *tmp6
    79 assertequals false *tmp71 "greaterThanEq 2"
    80 op strictEqual *tmp72 0 NULL
 
    82 op strictEqual *tmp73 null NULL
    83 assertequals true *tmp73 "strictEqual 2"
    84 # "Function: inline def d(in n)"
-    * label *label28
    85 op shl *tmp76 1 *tmp6
    86 assertequals 4 *tmp76 "shl"
    87 # "Function: inline def d(in n)"
-    * label *label29
    88 op shr *tmp79 9 *tmp6
    89 assertequals 2 *tmp79 "shr"
    90 # "Function: inline def d(in n)"
-    * label *label30
    91 op or *tmp82 1 *tmp6
    92 assertequals 3 *tmp82 "or"
    93 # "Function: inline def d(in n)"
-    * label *label31
    94 op and *tmp85 3 *tmp6
    95 assertequals 2 *tmp85 "and"
    96 # "Function: inline def d(in n)"
-    * label *label32
    97 op xor *tmp88 3 *tmp6
    98 assertequals 1 *tmp88 "xor"
    99 # "Function: inline def d(in n)"
-    * label *label33
   100 op not *tmp91 zero
   101 assertequals -1 *tmp91 "not 1"
   102 # "Function: inline def d(in n)"
   103 op add *tmp92 zero 65535
-    * label *label34
   104 op not *tmp94 *tmp92
   105 assertequals -65536 *tmp94 "not 2"
   106 # "Function: inline def d(in n)"
   107 op add *tmp97 zero 0xabcdefabcdef
-    * label *label35
   108 op not *tmp99 *tmp97
   109 assertequals -188900977659376 *tmp99 "not 3"
   110 # "Function: inline def d(in n)"
-    * label *label36
   111 op max *tmp102 2 *tmp9
   112 assertequals 4 *tmp102 "max"
   113 # "Function: inline def d(in n)"
-    * label *label37
   114 op min *tmp105 2 *tmp9
   115 assertequals 2 *tmp105 "min"
   116 # "Function: inline def d(in n)"
   117 op add *tmp106 zero -2
-    * label *label38
   118 op abs *tmp108 *tmp106
   119 assertequals 2 *tmp108 "abs"
   120 # "Function: inline def d(in n)"
-    * label *label39
   121 # "Function: inline def sign(in x)"
   122 op greaterThan *tmp112 *tmp106 0
   123 op lessThan *tmp113 *tmp106 0
   124 op sub *tmp111 *tmp112 *tmp113
-    * label *label40
   125 assertequals -1 *tmp111 "sign(-2)"
   126 # "Function: inline def d(in n)"
-    * label *label41
   127 # "Function: inline def sign(in x)"
   128 op greaterThan *tmp118 *tmp6 0
   129 op lessThan *tmp119 *tmp6 0
   130 op sub *tmp117 *tmp118 *tmp119
-    * label *label42
   131 assertequals 1 *tmp117 "sign(2)"
   132 # "Function: inline def d(in n)"
-    * label *label43
   133 # "Function: inline def sign(in x)"
   134 op greaterThan *tmp124 zero 0
   135 op lessThan *tmp125 zero 0
   136 op sub *tmp123 *tmp124 *tmp125
-    * label *label44
   137 assertequals 0 *tmp123 "sign(0)"
   138 # "Function: inline def d(in n)"
   139 op add *tmp127 zero 2.718281828459045
-    * label *label45
   140 op log *tmp129 *tmp127
   141 assertequals 1 *tmp129 "log"
   142 # "Function: inline def d(in n)"
   143 op add *tmp130 zero 10
-    * label *label46
   144 op log10 *tmp132 *tmp130
   145 assertequals 1 *tmp132 "log10"
   146 # "Function: inline def d(in n)"
   147 op add *tmp133 zero 2.5
-    * label *label47
   148 op floor *tmp135 *tmp133
   149 assertequals 2 *tmp135 "floor"
   150 # "Function: inline def d(in n)"
-    * label *label48
   151 op ceil *tmp138 *tmp133
   152 assertequals 3 *tmp138 "ceil"
   153 # "Function: inline def d(in n)"
   154 op add *tmp139 zero 16
-    * label *label49
   155 op sqrt *tmp141 *tmp139
   156 assertequals 4 *tmp141 "sqrt"
   157 # "Function: inline def d(in n)"
-    * label *label50
   158 op angle *tmp144 1 *tmp48
   159 assertequals 45 *tmp144 "angle"
   160 # "Function: inline def d(in n)"
   161 op add *tmp145 zero 135
-    * label *label51
   162 op angleDiff *tmp147 45 *tmp145
   163 assertequals 90 *tmp147 "angleDiff"
   164 assertequals 5 5 "len"
-    * label *label76
   165 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   166 # "Function: inline def round(in x)"
-    * label *label77
   167 assertequals 1 1 "sin"
-    * label *label78
-    * label *label79
   168 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   169 # "Function: inline def round(in x)"
-    * label *label80
   170 assertequals -1 -1 "cos"
-    * label *label81
-    * label *label82
   171 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   172 # "Function: inline def round(in x)"
-    * label *label83
   173 assertequals 1 1 "tan"
-    * label *label84
-    * label *label85
   174 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   175 # "Function: inline def round(in x)"
-    * label *label86
   176 assertequals 90 90 "asin"
-    * label *label87
-    * label *label88
   177 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   178 # "Function: inline def round(in x)"
-    * label *label89
   179 assertequals 0 0 "acos"
-    * label *label90
-    * label *label91
   180 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   181 # "Function: inline def round(in x)"
-    * label *label92
   182 assertequals 45 45 "atan"
-    * label *label93
   183 # "Function: inline def d(in n)"
-    * label *label52
   184 op sub *tmp150 -8 zero
   185 assertequals -8 *tmp150 "unary minus"
   186 # "Function: inline def d(in n)"
-    * label *label53
   187 op equal *tmp153 zero false
   188 assertequals 1 *tmp153 "boolean negation 1"
   189 # "Function: inline def d(in n)"
-    * label *label54
   190 op equal *tmp156 *tmp48 false
   191 assertequals 0 *tmp156 "boolean negation 2"
   192 # "Function: inline def d(in n)"
-    * label *label55
   193 op equal *tmp159 *tmp6 false
   194 assertequals 0 *tmp159 "boolean negation 3"
   195 # "Function: inline def d(in n)"
-    * label *label56
   196 assertequals 16 *tmp23 "**="
   197 # "Function: inline def d(in n)"
-    * label *label57
   198 op mul :a 2 *tmp9
   199 assertequals 8 :a "*="
   200 # "Function: inline def d(in n)"
-    * label *label58
   201 assertequals 1.5 *tmp11 "/="
   202 # "Function: inline def d(in n)"
-    * label *label59
   203 assertequals 1 *tmp17 "\="
   204 # "Function: inline def d(in n)"
-    * label *label60
   205 assertequals 2 *tmp20 "%="
   206 # "Function: inline def d(in n)"
-    * label *label61
   207 assertequals 6 *tmp3 "+="
   208 # "Function: inline def d(in n)"
-    * label *label62
   209 op sub :a 2 zero
   210 assertequals 2 :a "-="
   211 # "Function: inline def d(in n)"
-    * label *label63
   212 assertequals 4 *tmp76 "<<="
   213 # "Function: inline def d(in n)"
-    * label *label64
   214 assertequals 2 *tmp79 ">>="
   215 # "Function: inline def d(in n)"
-    * label *label65
   216 assertequals 3 *tmp82 "|="
   217 # "Function: inline def d(in n)"
-    * label *label66
   218 assertequals 2 *tmp85 "&="
   219 # "Function: inline def d(in n)"
-    * label *label67
   220 assertequals 1 *tmp88 "^="
   221 # "Function: inline def d(in n)"
-    * label *label68
   222 assertequals false *tmp44 "&&="
   223 # "Function: inline def d(in n)"
-    * label *label69
   224 assertequals true *tmp47 "&&="
   225 # "Function: inline def d(in n)"
-    * label *label70
   226 op or *tmp190 0 *tmp6
   227 op notEqual :a *tmp190 false
   228 assertequals true :a "||="
 
   233 jump *label73 equal zero false
   234 sensor *tmp193 null @id
   235 label *label73
-    * label *label71
   236 assertequals 17 *tmp193 "Logic ID"
   237 stop
   238 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
   235 label *label73
   236 assertequals 17 *tmp193 "Logic ID"
   237 stop
-    * end

Final code before resolving virtual instructions:

set NULL null
set zero 0
# "Function: inline def d(in n)"
op add *tmp2 zero 5
assertequals 5 *tmp2 "add"
# "Function: inline def d(in n)"
op add *tmp3 zero 6
op sub *tmp5 1 zero
assertequals 1 *tmp5 "sub"
# "Function: inline def d(in n)"
op add *tmp6 zero 2
op mul *tmp8 3 *tmp6
assertequals 6 *tmp8 "mul"
# "Function: inline def d(in n)"
op add *tmp9 zero 4
op div *tmp11 6 *tmp9
assertequals 1.5 *tmp11 "div"
# "Function: inline def d(in n)"
op add *tmp12 zero 100000
op div *tmp14 1 *tmp12
assertequals 0.00001 *tmp14 "div exp"
# "Function: inline def d(in n)"
op idiv *tmp17 6 *tmp9
assertequals 1 *tmp17 "idiv"
# "Function: inline def d(in n)"
op mod *tmp20 6 *tmp9
assertequals 2 *tmp20 "mod"
# "Function: inline def d(in n)"
op pow *tmp23 2 *tmp9
assertequals 16 *tmp23 "pow"
# "Function: inline def d(in n)"
op equal *tmp26 5 *tmp2
assertequals true *tmp26 "equal 1"
# "Function: inline def d(in n)"
op equal *tmp29 5 *tmp3
assertequals false *tmp29 "equal 2"
# "Function: inline def d(in n)"
op add *tmp30 zero null
op equal *tmp32 0 *tmp30
assertequals true *tmp32 "equal null"
# "Function: inline def d(in n)"
op notEqual *tmp35 5 *tmp2
assertequals false *tmp35 "notEqual 1"
# "Function: inline def d(in n)"
op notEqual *tmp38 5 *tmp3
assertequals true *tmp38 "notEqual 2"
# "Function: inline def d(in n)"
op notEqual *tmp41 0 *tmp30
assertequals false *tmp41 "notEqual null"
# "Function: inline def d(in n)"
op land *tmp44 1 zero
assertequals false *tmp44 "land 1"
# "Function: inline def d(in n)"
op land *tmp47 1 *tmp6
assertequals true *tmp47 "land 2"
# "Function: inline def d(in n)"
op add *tmp48 zero 1
op lessThan *tmp50 0 *tmp48
assertequals true *tmp50 "lessThan 1"
# "Function: inline def d(in n)"
op lessThan *tmp53 1 zero
assertequals false *tmp53 "lessThan 2"
# "Function: inline def d(in n)"
op lessThanEq *tmp56 1 *tmp48
assertequals true *tmp56 "lessThanEq 1"
# "Function: inline def d(in n)"
op lessThanEq *tmp59 1 zero
assertequals false *tmp59 "lessThanEq 2"
# "Function: inline def d(in n)"
op greaterThan *tmp62 2 *tmp48
assertequals true *tmp62 "greaterThan 1"
# "Function: inline def d(in n)"
op greaterThan *tmp65 1 *tmp6
assertequals false *tmp65 "greaterThan 2"
# "Function: inline def d(in n)"
op greaterThanEq *tmp68 1 *tmp48
assertequals true *tmp68 "greaterThanEq 1"
# "Function: inline def d(in n)"
op greaterThanEq *tmp71 1 *tmp6
assertequals false *tmp71 "greaterThanEq 2"
op strictEqual *tmp72 0 NULL
assertequals false *tmp72 "strictEqual 1"
op strictEqual *tmp73 null NULL
assertequals true *tmp73 "strictEqual 2"
# "Function: inline def d(in n)"
op shl *tmp76 1 *tmp6
assertequals 4 *tmp76 "shl"
# "Function: inline def d(in n)"
op shr *tmp79 9 *tmp6
assertequals 2 *tmp79 "shr"
# "Function: inline def d(in n)"
op or *tmp82 1 *tmp6
assertequals 3 *tmp82 "or"
# "Function: inline def d(in n)"
op and *tmp85 3 *tmp6
assertequals 2 *tmp85 "and"
# "Function: inline def d(in n)"
op xor *tmp88 3 *tmp6
assertequals 1 *tmp88 "xor"
# "Function: inline def d(in n)"
op not *tmp91 zero
assertequals -1 *tmp91 "not 1"
# "Function: inline def d(in n)"
op add *tmp92 zero 65535
op not *tmp94 *tmp92
assertequals -65536 *tmp94 "not 2"
# "Function: inline def d(in n)"
op add *tmp97 zero 0xabcdefabcdef
op not *tmp99 *tmp97
assertequals -188900977659376 *tmp99 "not 3"
# "Function: inline def d(in n)"
op max *tmp102 2 *tmp9
assertequals 4 *tmp102 "max"
# "Function: inline def d(in n)"
op min *tmp105 2 *tmp9
assertequals 2 *tmp105 "min"
# "Function: inline def d(in n)"
op add *tmp106 zero -2
op abs *tmp108 *tmp106
assertequals 2 *tmp108 "abs"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp112 *tmp106 0
op lessThan *tmp113 *tmp106 0
op sub *tmp111 *tmp112 *tmp113
assertequals -1 *tmp111 "sign(-2)"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp118 *tmp6 0
op lessThan *tmp119 *tmp6 0
op sub *tmp117 *tmp118 *tmp119
assertequals 1 *tmp117 "sign(2)"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp124 zero 0
op lessThan *tmp125 zero 0
op sub *tmp123 *tmp124 *tmp125
assertequals 0 *tmp123 "sign(0)"
# "Function: inline def d(in n)"
op add *tmp127 zero 2.718281828459045
op log *tmp129 *tmp127
assertequals 1 *tmp129 "log"
# "Function: inline def d(in n)"
op add *tmp130 zero 10
op log10 *tmp132 *tmp130
assertequals 1 *tmp132 "log10"
# "Function: inline def d(in n)"
op add *tmp133 zero 2.5
op floor *tmp135 *tmp133
assertequals 2 *tmp135 "floor"
# "Function: inline def d(in n)"
op ceil *tmp138 *tmp133
assertequals 3 *tmp138 "ceil"
# "Function: inline def d(in n)"
op add *tmp139 zero 16
op sqrt *tmp141 *tmp139
assertequals 4 *tmp141 "sqrt"
# "Function: inline def d(in n)"
op angle *tmp144 1 *tmp48
assertequals 45 *tmp144 "angle"
# "Function: inline def d(in n)"
op add *tmp145 zero 135
op angleDiff *tmp147 45 *tmp145
assertequals 90 *tmp147 "angleDiff"
assertequals 5 5 "len"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "sin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals -1 -1 "cos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "tan"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 90 90 "asin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 0 0 "acos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 45 45 "atan"
# "Function: inline def d(in n)"
op sub *tmp150 -8 zero
assertequals -8 *tmp150 "unary minus"
# "Function: inline def d(in n)"
op equal *tmp153 zero false
assertequals 1 *tmp153 "boolean negation 1"
# "Function: inline def d(in n)"
op equal *tmp156 *tmp48 false
assertequals 0 *tmp156 "boolean negation 2"
# "Function: inline def d(in n)"
op equal *tmp159 *tmp6 false
assertequals 0 *tmp159 "boolean negation 3"
# "Function: inline def d(in n)"
assertequals 16 *tmp23 "**="
# "Function: inline def d(in n)"
op mul :a 2 *tmp9
assertequals 8 :a "*="
# "Function: inline def d(in n)"
assertequals 1.5 *tmp11 "/="
# "Function: inline def d(in n)"
assertequals 1 *tmp17 "\="
# "Function: inline def d(in n)"
assertequals 2 *tmp20 "%="
# "Function: inline def d(in n)"
assertequals 6 *tmp3 "+="
# "Function: inline def d(in n)"
op sub :a 2 zero
assertequals 2 :a "-="
# "Function: inline def d(in n)"
assertequals 4 *tmp76 "<<="
# "Function: inline def d(in n)"
assertequals 2 *tmp79 ">>="
# "Function: inline def d(in n)"
assertequals 3 *tmp82 "|="
# "Function: inline def d(in n)"
assertequals 2 *tmp85 "&="
# "Function: inline def d(in n)"
assertequals 1 *tmp88 "^="
# "Function: inline def d(in n)"
assertequals false *tmp44 "&&="
# "Function: inline def d(in n)"
assertequals true *tmp47 "&&="
# "Function: inline def d(in n)"
op or *tmp190 0 *tmp6
op notEqual :a *tmp190 false
assertequals true :a "||="
assertequals %ff0000ff %ff0000 "short color literals"
assertequals %ffffffff %[white] "named color literals"
# "Function: inline def o(in n)"
set *tmp193 17
jump *label73 equal zero false
sensor *tmp193 null @id
label *label73
assertequals 17 *tmp193 "Logic ID"
stop
