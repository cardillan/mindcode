   437 instructions before optimizations.
    74 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
     2 instructions modified by Expression Optimization (4 iterations).
     1 instructions eliminated by If Expression Optimization (2 passes, 4 iterations).
   202 instructions eliminated by Data Flow Optimization (3 passes, 14 iterations).
    11 instructions added by Function Inlining (5 iterations).
     6 function calls inlined by Function Inlining.
   169 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 797):
  * Inline function 'assertEqualsRound' defined at line 3:1      size   +19, benefit       27.0, efficiency      1.421 (-31 instructions)
    Inline function call at line 87:1                            size    +4, benefit        4.5, efficiency      1.125
    Inline function call at line 88:1                            size    +4, benefit        4.5, efficiency      1.125
    Inline function call at line 89:1                            size    +4, benefit        4.5, efficiency      1.125
    Inline function call at line 91:1                            size    +4, benefit        4.5, efficiency      1.125
    Inline function call at line 92:1                            size    +4, benefit        4.5, efficiency      1.125
    Inline function call at line 93:1                            size    +4, benefit        4.5, efficiency      1.125

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-74 instructions):
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp1 zero :d:n
-    * set *tmp0 *tmp1
+    4 op add *tmp0 zero :d:n
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp4 zero :d.1:n
-    * set *tmp3 *tmp4
+   10 op add *tmp3 zero :d.1:n
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp7 zero :d.2:n
-    * set *tmp6 *tmp7
+   16 op add *tmp6 zero :d.2:n
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp10 zero :d.3:n
-    * set *tmp9 *tmp10
+   22 op add *tmp9 zero :d.3:n
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp13 zero :d.4:n
-    * set *tmp12 *tmp13
+   28 op add *tmp12 zero :d.4:n
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp16 zero :d.5:n
-    * set *tmp15 *tmp16
+   34 op add *tmp15 zero :d.5:n
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp19 zero :d.6:n
-    * set *tmp18 *tmp19
+   40 op add *tmp18 zero :d.6:n
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 8
-    * op add *tmp22 zero :d.7:n
-    * set *tmp21 *tmp22
+   46 op add *tmp21 zero :d.7:n
    47 label *label11
    48 op emod *tmp23 -3 *tmp21
    49 assertequals 5 *tmp23 "emod"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 4
-    * op add *tmp25 zero :d.8:n
-    * set *tmp24 *tmp25
+   52 op add *tmp24 zero :d.8:n
    53 label *label12
    54 op pow *tmp26 2 *tmp24
    55 assertequals 16 *tmp26 "pow"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 5
-    * op add *tmp28 zero :d.9:n
-    * set *tmp27 *tmp28
+   58 op add *tmp27 zero :d.9:n
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals true *tmp29 "equal 1"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n 6
-    * op add *tmp31 zero :d.10:n
-    * set *tmp30 *tmp31
+   64 op add *tmp30 zero :d.10:n
    65 label *label14
    66 op equal *tmp32 5 *tmp30
    67 assertequals false *tmp32 "equal 2"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n null
-    * op add *tmp34 zero :d.11:n
-    * set *tmp33 *tmp34
+   70 op add *tmp33 zero :d.11:n
    71 label *label15
    72 op equal *tmp35 0 *tmp33
    73 assertequals true *tmp35 "equal null"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 5
-    * op add *tmp37 zero :d.12:n
-    * set *tmp36 *tmp37
+   76 op add *tmp36 zero :d.12:n
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals false *tmp38 "notEqual 1"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n 6
-    * op add *tmp40 zero :d.13:n
-    * set *tmp39 *tmp40
+   82 op add *tmp39 zero :d.13:n
    83 label *label17
    84 op notEqual *tmp41 5 *tmp39
    85 assertequals true *tmp41 "notEqual 2"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n null
-    * op add *tmp43 zero :d.14:n
-    * set *tmp42 *tmp43
+   88 op add *tmp42 zero :d.14:n
    89 label *label18
    90 op notEqual *tmp44 0 *tmp42
    91 assertequals false *tmp44 "notEqual null"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 0
-    * op add *tmp46 zero :d.15:n
-    * set *tmp45 *tmp46
+   94 op add *tmp45 zero :d.15:n
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals false *tmp47 "land 1"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 2
-    * op add *tmp49 zero :d.16:n
-    * set *tmp48 *tmp49
+  100 op add *tmp48 zero :d.16:n
   101 label *label20
   102 op land *tmp50 1 *tmp48
   103 assertequals true *tmp50 "land 2"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 1
-    * op add *tmp52 zero :d.17:n
-    * set *tmp51 *tmp52
+  106 op add *tmp51 zero :d.17:n
   107 label *label21
   108 op lessThan *tmp53 0 *tmp51
   109 assertequals true *tmp53 "lessThan 1"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 0
-    * op add *tmp55 zero :d.18:n
-    * set *tmp54 *tmp55
+  112 op add *tmp54 zero :d.18:n
   113 label *label22
   114 op lessThan *tmp56 1 *tmp54
   115 assertequals false *tmp56 "lessThan 2"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 1
-    * op add *tmp58 zero :d.19:n
-    * set *tmp57 *tmp58
+  118 op add *tmp57 zero :d.19:n
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals true *tmp59 "lessThanEq 1"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 0
-    * op add *tmp61 zero :d.20:n
-    * set *tmp60 *tmp61
+  124 op add *tmp60 zero :d.20:n
   125 label *label24
   126 op lessThanEq *tmp62 1 *tmp60
   127 assertequals false *tmp62 "lessThanEq 2"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 1
-    * op add *tmp64 zero :d.21:n
-    * set *tmp63 *tmp64
+  130 op add *tmp63 zero :d.21:n
   131 label *label25
   132 op greaterThan *tmp65 2 *tmp63
   133 assertequals true *tmp65 "greaterThan 1"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 2
-    * op add *tmp67 zero :d.22:n
-    * set *tmp66 *tmp67
+  136 op add *tmp66 zero :d.22:n
   137 label *label26
   138 op greaterThan *tmp68 1 *tmp66
   139 assertequals false *tmp68 "greaterThan 2"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 1
-    * op add *tmp70 zero :d.23:n
-    * set *tmp69 *tmp70
+  142 op add *tmp69 zero :d.23:n
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals true *tmp71 "greaterThanEq 1"
   146 # "Function: inline def d(in n)"
   147 set :d.24:n 2
-    * op add *tmp73 zero :d.24:n
-    * set *tmp72 *tmp73
+  148 op add *tmp72 zero :d.24:n
   149 label *label28
   150 op greaterThanEq *tmp74 1 *tmp72
   151 assertequals false *tmp74 "greaterThanEq 2"
 
   155 assertequals true *tmp76 "strictEqual 2"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp78 zero :d.25:n
-    * set *tmp77 *tmp78
+  158 op add *tmp77 zero :d.25:n
   159 label *label29
   160 op shl *tmp79 1 *tmp77
   161 assertequals 4 *tmp79 "shl"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp81 zero :d.26:n
-    * set *tmp80 *tmp81
+  164 op add *tmp80 zero :d.26:n
   165 label *label30
   166 op shr *tmp82 9 *tmp80
   167 assertequals 2 *tmp82 "shr"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 61
-    * op add *tmp84 zero :d.27:n
-    * set *tmp83 *tmp84
+  170 op add *tmp83 zero :d.27:n
   171 label *label31
   172 op ushr *tmp85 -1 *tmp83
   173 assertequals 7 *tmp85 "ushr"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp87 zero :d.28:n
-    * set *tmp86 *tmp87
+  176 op add *tmp86 zero :d.28:n
   177 label *label32
   178 op or *tmp88 1 *tmp86
   179 assertequals 3 *tmp88 "or"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 2
-    * op add *tmp90 zero :d.29:n
-    * set *tmp89 *tmp90
+  182 op add *tmp89 zero :d.29:n
   183 label *label33
   184 op and *tmp91 3 *tmp89
   185 assertequals 2 *tmp91 "and"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 2
-    * op add *tmp93 zero :d.30:n
-    * set *tmp92 *tmp93
+  188 op add *tmp92 zero :d.30:n
   189 label *label34
   190 op xor *tmp94 3 *tmp92
   191 assertequals 1 *tmp94 "xor"
   192 # "Function: inline def d(in n)"
   193 set :d.31:n 0
-    * op add *tmp96 zero :d.31:n
-    * set *tmp95 *tmp96
+  194 op add *tmp95 zero :d.31:n
   195 label *label35
   196 op not *tmp97 *tmp95
   197 assertequals -1 *tmp97 "not 1"
   198 # "Function: inline def d(in n)"
   199 set :d.32:n 65535
-    * op add *tmp99 zero :d.32:n
-    * set *tmp98 *tmp99
+  200 op add *tmp98 zero :d.32:n
   201 label *label36
   202 op not *tmp100 *tmp98
   203 assertequals -65536 *tmp100 "not 2"
 
   206 op sub *tmp102 0 *tmp101
   207 # "Function: inline def d(in n)"
   208 set :d.33:n :a
-    * op add *tmp104 zero :d.33:n
-    * set *tmp103 *tmp104
+  209 op add *tmp103 zero :d.33:n
   210 label *label37
   211 op not *tmp105 *tmp103
   212 assertequals *tmp102 *tmp105 "not 3"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n 4
-    * op add *tmp107 zero :d.34:n
-    * set *tmp106 *tmp107
+  215 op add *tmp106 zero :d.34:n
   216 label *label38
   217 op max *tmp108 2 *tmp106
   218 assertequals 4 *tmp108 "max"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n 4
-    * op add *tmp110 zero :d.35:n
-    * set *tmp109 *tmp110
+  221 op add *tmp109 zero :d.35:n
   222 label *label39
   223 op min *tmp111 2 *tmp109
   224 assertequals 2 *tmp111 "min"
   225 # "Function: inline def d(in n)"
   226 set :d.36:n -2
-    * op add *tmp113 zero :d.36:n
-    * set *tmp112 *tmp113
+  227 op add *tmp112 zero :d.36:n
   228 label *label40
   229 op abs *tmp114 *tmp112
   230 assertequals 2 *tmp114 "abs"
   231 # "Function: inline def d(in n)"
   232 set :d.37:n -2
-    * op add *tmp116 zero :d.37:n
-    * set *tmp115 *tmp116
+  233 op add *tmp115 zero :d.37:n
   234 label *label41
   235 # "Function: inline def sign(in x)"
   236 set :sign:x *tmp115
   237 op greaterThan *tmp118 :sign:x 0
   238 op lessThan *tmp119 :sign:x 0
-    * op sub *tmp120 *tmp118 *tmp119
-    * set *tmp117 *tmp120
+  239 op sub *tmp117 *tmp118 *tmp119
   240 label *label42
   241 assertequals -1 *tmp117 "sign(-2)"
   242 # "Function: inline def d(in n)"
   243 set :d.38:n 2
-    * op add *tmp122 zero :d.38:n
-    * set *tmp121 *tmp122
+  244 op add *tmp121 zero :d.38:n
   245 label *label43
   246 # "Function: inline def sign(in x)"
   247 set :sign.1:x *tmp121
   248 op greaterThan *tmp124 :sign.1:x 0
   249 op lessThan *tmp125 :sign.1:x 0
-    * op sub *tmp126 *tmp124 *tmp125
-    * set *tmp123 *tmp126
+  250 op sub *tmp123 *tmp124 *tmp125
   251 label *label44
   252 assertequals 1 *tmp123 "sign(2)"
   253 # "Function: inline def d(in n)"
   254 set :d.39:n 0
-    * op add *tmp128 zero :d.39:n
-    * set *tmp127 *tmp128
+  255 op add *tmp127 zero :d.39:n
   256 label *label45
   257 # "Function: inline def sign(in x)"
   258 set :sign.2:x *tmp127
   259 op greaterThan *tmp130 :sign.2:x 0
   260 op lessThan *tmp131 :sign.2:x 0
-    * op sub *tmp132 *tmp130 *tmp131
-    * set *tmp129 *tmp132
+  261 op sub *tmp129 *tmp130 *tmp131
   262 label *label46
   263 assertequals 0 *tmp129 "sign(0)"
   264 # "Function: inline def d(in n)"
   265 set :d.40:n 2.718281828459045
-    * op add *tmp134 zero :d.40:n
-    * set *tmp133 *tmp134
+  266 op add *tmp133 zero :d.40:n
   267 label *label47
   268 op log *tmp135 *tmp133
   269 assertequals 1 *tmp135 "log"
   270 # "Function: inline def d(in n)"
   271 set :d.41:n 10
-    * op add *tmp137 zero :d.41:n
-    * set *tmp136 *tmp137
+  272 op add *tmp136 zero :d.41:n
   273 label *label48
   274 op log10 *tmp138 *tmp136
   275 assertequals 1 *tmp138 "log10"
   276 # "Function: inline def d(in n)"
   277 set :d.42:n 2
-    * op add *tmp140 zero :d.42:n
-    * set *tmp139 *tmp140
+  278 op add *tmp139 zero :d.42:n
   279 label *label49
   280 # "Function: inline def logn(in number, in base)"
   281 set :logn:number 16
   282 set :logn:base *tmp139
   283 op log *tmp142 :logn:number
   284 op log *tmp143 :logn:base
-    * op div *tmp144 *tmp142 *tmp143
-    * set *tmp141 *tmp144
+  285 op div *tmp141 *tmp142 *tmp143
   286 label *label50
   287 assertequals 4 *tmp141 "logn"
   288 # "Function: inline def d(in n)"
   289 set :d.43:n 2.5
-    * op add *tmp146 zero :d.43:n
-    * set *tmp145 *tmp146
+  290 op add *tmp145 zero :d.43:n
   291 label *label51
   292 op floor *tmp147 *tmp145
   293 assertequals 2 *tmp147 "floor"
   294 # "Function: inline def d(in n)"
   295 set :d.44:n 2.5
-    * op add *tmp149 zero :d.44:n
-    * set *tmp148 *tmp149
+  296 op add *tmp148 zero :d.44:n
   297 label *label52
   298 op ceil *tmp150 *tmp148
   299 assertequals 3 *tmp150 "ceil"
   300 # "Function: inline def d(in n)"
   301 set :d.45:n 2.5
-    * op add *tmp152 zero :d.45:n
-    * set *tmp151 *tmp152
+  302 op add *tmp151 zero :d.45:n
   303 label *label53
   304 # "Function: inline def round(in x)"
   305 set :round:x *tmp151
   306 op add *tmp154 :round:x 0.5
-    * op floor *tmp155 *tmp154
-    * set *tmp153 *tmp155
+  307 op floor *tmp153 *tmp154
   308 label *label54
   309 assertequals 3 *tmp153 "round"
   310 # "Function: inline def d(in n)"
   311 set :d.46:n 16
-    * op add *tmp157 zero :d.46:n
-    * set *tmp156 *tmp157
+  312 op add *tmp156 zero :d.46:n
   313 label *label55
   314 op sqrt *tmp158 *tmp156
   315 assertequals 4 *tmp158 "sqrt"
   316 # "Function: inline def d(in n)"
   317 set :d.47:n 1
-    * op add *tmp160 zero :d.47:n
-    * set *tmp159 *tmp160
+  318 op add *tmp159 zero :d.47:n
   319 label *label56
   320 op angle *tmp161 1 *tmp159
   321 assertequals 45 *tmp161 "angle"
   322 # "Function: inline def d(in n)"
   323 set :d.48:n 135
-    * op add *tmp163 zero :d.48:n
-    * set *tmp162 *tmp163
+  324 op add *tmp162 zero :d.48:n
   325 label *label57
   326 op angleDiff *tmp164 45 *tmp162
   327 assertequals 90 *tmp164 "angleDiff"
 
   352 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   353 # "Function: inline def d(in n)"
   354 set :d.49:n 8
-    * op add *tmp166 zero :d.49:n
-    * set *tmp165 *tmp166
+  355 op add *tmp165 zero :d.49:n
   356 label *label58
   357 op sub *tmp167 0 *tmp165
   358 assertequals -8 *tmp167 "unary minus"
   359 # "Function: inline def d(in n)"
   360 set :d.50:n 0
-    * op add *tmp169 zero :d.50:n
-    * set *tmp168 *tmp169
+  361 op add *tmp168 zero :d.50:n
   362 label *label59
   363 op equal *tmp170 *tmp168 false
   364 assertequals 1 *tmp170 "boolean negation 1"
   365 # "Function: inline def d(in n)"
   366 set :d.51:n 1
-    * op add *tmp172 zero :d.51:n
-    * set *tmp171 *tmp172
+  367 op add *tmp171 zero :d.51:n
   368 label *label60
   369 op equal *tmp173 *tmp171 false
   370 assertequals 0 *tmp173 "boolean negation 2"
   371 # "Function: inline def d(in n)"
   372 set :d.52:n 2
-    * op add *tmp175 zero :d.52:n
-    * set *tmp174 *tmp175
+  373 op add *tmp174 zero :d.52:n
   374 label *label61
   375 op equal *tmp176 *tmp174 false
   376 assertequals 0 *tmp176 "boolean negation 3"
   377 set :a 2
   378 # "Function: inline def d(in n)"
   379 set :d.53:n 4
-    * op add *tmp178 zero :d.53:n
-    * set *tmp177 *tmp178
+  380 op add *tmp177 zero :d.53:n
   381 label *label62
   382 op pow :a :a *tmp177
   383 assertequals 16 :a "**="
   384 set :a 2
   385 # "Function: inline def d(in n)"
   386 set :d.54:n 4
-    * op add *tmp180 zero :d.54:n
-    * set *tmp179 *tmp180
+  387 op add *tmp179 zero :d.54:n
   388 label *label63
   389 op mul :a :a *tmp179
   390 assertequals 8 :a "*="
   391 set :a 6
   392 # "Function: inline def d(in n)"
   393 set :d.55:n 4
-    * op add *tmp182 zero :d.55:n
-    * set *tmp181 *tmp182
+  394 op add *tmp181 zero :d.55:n
   395 label *label64
   396 op div :a :a *tmp181
   397 assertequals 1.5 :a "/="
   398 set :a 6
   399 # "Function: inline def d(in n)"
   400 set :d.56:n 4
-    * op add *tmp184 zero :d.56:n
-    * set *tmp183 *tmp184
+  401 op add *tmp183 zero :d.56:n
   402 label *label65
   403 op idiv :a :a *tmp183
   404 assertequals 1 :a "\="
   405 set :a 6
   406 # "Function: inline def d(in n)"
   407 set :d.57:n 4
-    * op add *tmp186 zero :d.57:n
-    * set *tmp185 *tmp186
+  408 op add *tmp185 zero :d.57:n
   409 label *label66
   410 op mod :a :a *tmp185
   411 assertequals 2 :a "%="
   412 set :a 4
   413 # "Function: inline def d(in n)"
   414 set :d.58:n 2
-    * op add *tmp188 zero :d.58:n
-    * set *tmp187 *tmp188
+  415 op add *tmp187 zero :d.58:n
   416 label *label67
   417 op add :a :a *tmp187
   418 assertequals 6 :a "+="
   419 set :a 4
   420 # "Function: inline def d(in n)"
   421 set :d.59:n 2
-    * op add *tmp190 zero :d.59:n
-    * set *tmp189 *tmp190
+  422 op add *tmp189 zero :d.59:n
   423 label *label68
   424 op sub :a :a *tmp189
   425 assertequals 2 :a "-="
   426 set :a 1
   427 # "Function: inline def d(in n)"
   428 set :d.60:n 2
-    * op add *tmp192 zero :d.60:n
-    * set *tmp191 *tmp192
+  429 op add *tmp191 zero :d.60:n
   430 label *label69
   431 op shl :a :a *tmp191
   432 assertequals 4 :a "<<="
   433 set :a 9
   434 # "Function: inline def d(in n)"
   435 set :d.61:n 2
-    * op add *tmp194 zero :d.61:n
-    * set *tmp193 *tmp194
+  436 op add *tmp193 zero :d.61:n
   437 label *label70
   438 op shr :a :a *tmp193
   439 assertequals 2 :a ">>="
   440 set :a 1
   441 # "Function: inline def d(in n)"
   442 set :d.62:n 2
-    * op add *tmp196 zero :d.62:n
-    * set *tmp195 *tmp196
+  443 op add *tmp195 zero :d.62:n
   444 label *label71
   445 op or :a :a *tmp195
   446 assertequals 3 :a "|="
   447 set :a 3
   448 # "Function: inline def d(in n)"
   449 set :d.63:n 2
-    * op add *tmp198 zero :d.63:n
-    * set *tmp197 *tmp198
+  450 op add *tmp197 zero :d.63:n
   451 label *label72
   452 op and :a :a *tmp197
   453 assertequals 2 :a "&="
   454 set :a 3
   455 # "Function: inline def d(in n)"
   456 set :d.64:n 2
-    * op add *tmp200 zero :d.64:n
-    * set *tmp199 *tmp200
+  457 op add *tmp199 zero :d.64:n
   458 label *label73
   459 op xor :a :a *tmp199
   460 assertequals 1 :a "^="
   461 set :a 1
   462 # "Function: inline def d(in n)"
   463 set :d.65:n 0
-    * op add *tmp202 zero :d.65:n
-    * set *tmp201 *tmp202
+  464 op add *tmp201 zero :d.65:n
   465 label *label74
   466 op land :a :a *tmp201
   467 assertequals false :a "&&="
   468 set :a 1
   469 # "Function: inline def d(in n)"
   470 set :d.66:n 2
-    * op add *tmp204 zero :d.66:n
-    * set *tmp203 *tmp204
+  471 op add *tmp203 zero :d.66:n
   472 label *label75
   473 op land :a :a *tmp203
   474 assertequals true :a "&&="
   475 set :a 0
   476 # "Function: inline def d(in n)"
   477 set :d.67:n 2
-    * op add *tmp206 zero :d.67:n
-    * set *tmp205 *tmp206
+  478 op add *tmp205 zero :d.67:n
   479 label *label76
   480 op or *tmp207 :a *tmp205
   481 op notEqual :a *tmp207 false
 
   502 # "Function: inline def round(in x)"
   503 set :round.1:x *tmp211
   504 op add *tmp213 :round.1:x 0.5
-    * op floor *tmp214 *tmp213
-    * set *tmp212 *tmp214
+  505 op floor *tmp212 *tmp213
   506 label *label81
   507 op div *tmp215 *tmp212 100000000
   508 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp0 zero :d:n
+    4 op add *tmp0 zero 3
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp3 zero :d.1:n
+   10 op add *tmp3 zero 6
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp6 zero :d.2:n
+   16 op add *tmp6 zero 2
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp9 zero :d.3:n
+   22 op add *tmp9 zero 4
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp12 zero :d.4:n
+   28 op add *tmp12 zero 100000
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp15 zero :d.5:n
+   34 op add *tmp15 zero 4
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp18 zero :d.6:n
+   40 op add *tmp18 zero 4
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 8
-    * op add *tmp21 zero :d.7:n
+   46 op add *tmp21 zero 8
    47 label *label11
    48 op emod *tmp23 -3 *tmp21
    49 assertequals 5 *tmp23 "emod"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 4
-    * op add *tmp24 zero :d.8:n
+   52 op add *tmp24 zero 4
    53 label *label12
    54 op pow *tmp26 2 *tmp24
    55 assertequals 16 *tmp26 "pow"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 5
-    * op add *tmp27 zero :d.9:n
+   58 op add *tmp27 zero 5
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals true *tmp29 "equal 1"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n 6
-    * op add *tmp30 zero :d.10:n
+   64 op add *tmp30 zero 6
    65 label *label14
    66 op equal *tmp32 5 *tmp30
    67 assertequals false *tmp32 "equal 2"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n null
-    * op add *tmp33 zero :d.11:n
+   70 op add *tmp33 zero null
    71 label *label15
    72 op equal *tmp35 0 *tmp33
    73 assertequals true *tmp35 "equal null"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 5
-    * op add *tmp36 zero :d.12:n
+   76 op add *tmp36 zero 5
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals false *tmp38 "notEqual 1"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n 6
-    * op add *tmp39 zero :d.13:n
+   82 op add *tmp39 zero 6
    83 label *label17
    84 op notEqual *tmp41 5 *tmp39
    85 assertequals true *tmp41 "notEqual 2"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n null
-    * op add *tmp42 zero :d.14:n
+   88 op add *tmp42 zero null
    89 label *label18
    90 op notEqual *tmp44 0 *tmp42
    91 assertequals false *tmp44 "notEqual null"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 0
-    * op add *tmp45 zero :d.15:n
+   94 op add *tmp45 zero 0
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals false *tmp47 "land 1"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 2
-    * op add *tmp48 zero :d.16:n
+  100 op add *tmp48 zero 2
   101 label *label20
   102 op land *tmp50 1 *tmp48
   103 assertequals true *tmp50 "land 2"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 1
-    * op add *tmp51 zero :d.17:n
+  106 op add *tmp51 zero 1
   107 label *label21
   108 op lessThan *tmp53 0 *tmp51
   109 assertequals true *tmp53 "lessThan 1"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 0
-    * op add *tmp54 zero :d.18:n
+  112 op add *tmp54 zero 0
   113 label *label22
   114 op lessThan *tmp56 1 *tmp54
   115 assertequals false *tmp56 "lessThan 2"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 1
-    * op add *tmp57 zero :d.19:n
+  118 op add *tmp57 zero 1
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals true *tmp59 "lessThanEq 1"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 0
-    * op add *tmp60 zero :d.20:n
+  124 op add *tmp60 zero 0
   125 label *label24
   126 op lessThanEq *tmp62 1 *tmp60
   127 assertequals false *tmp62 "lessThanEq 2"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 1
-    * op add *tmp63 zero :d.21:n
+  130 op add *tmp63 zero 1
   131 label *label25
   132 op greaterThan *tmp65 2 *tmp63
   133 assertequals true *tmp65 "greaterThan 1"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 2
-    * op add *tmp66 zero :d.22:n
+  136 op add *tmp66 zero 2
   137 label *label26
   138 op greaterThan *tmp68 1 *tmp66
   139 assertequals false *tmp68 "greaterThan 2"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 1
-    * op add *tmp69 zero :d.23:n
+  142 op add *tmp69 zero 1
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals true *tmp71 "greaterThanEq 1"
   146 # "Function: inline def d(in n)"
   147 set :d.24:n 2
-    * op add *tmp72 zero :d.24:n
+  148 op add *tmp72 zero 2
   149 label *label28
   150 op greaterThanEq *tmp74 1 *tmp72
   151 assertequals false *tmp74 "greaterThanEq 2"
 
   155 assertequals true *tmp76 "strictEqual 2"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp77 zero :d.25:n
+  158 op add *tmp77 zero 2
   159 label *label29
   160 op shl *tmp79 1 *tmp77
   161 assertequals 4 *tmp79 "shl"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp80 zero :d.26:n
+  164 op add *tmp80 zero 2
   165 label *label30
   166 op shr *tmp82 9 *tmp80
   167 assertequals 2 *tmp82 "shr"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 61
-    * op add *tmp83 zero :d.27:n
+  170 op add *tmp83 zero 61
   171 label *label31
   172 op ushr *tmp85 -1 *tmp83
   173 assertequals 7 *tmp85 "ushr"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp86 zero :d.28:n
+  176 op add *tmp86 zero 2
   177 label *label32
   178 op or *tmp88 1 *tmp86
   179 assertequals 3 *tmp88 "or"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 2
-    * op add *tmp89 zero :d.29:n
+  182 op add *tmp89 zero 2
   183 label *label33
   184 op and *tmp91 3 *tmp89
   185 assertequals 2 *tmp91 "and"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 2
-    * op add *tmp92 zero :d.30:n
+  188 op add *tmp92 zero 2
   189 label *label34
   190 op xor *tmp94 3 *tmp92
   191 assertequals 1 *tmp94 "xor"
   192 # "Function: inline def d(in n)"
   193 set :d.31:n 0
-    * op add *tmp95 zero :d.31:n
+  194 op add *tmp95 zero 0
   195 label *label35
   196 op not *tmp97 *tmp95
   197 assertequals -1 *tmp97 "not 1"
   198 # "Function: inline def d(in n)"
   199 set :d.32:n 65535
-    * op add *tmp98 zero :d.32:n
+  200 op add *tmp98 zero 65535
   201 label *label36
   202 op not *tmp100 *tmp98
   203 assertequals -65536 *tmp100 "not 2"
   204 set :a 0xabcdefabcdef
-    * op add *tmp101 :a 1
-    * op sub *tmp102 0 *tmp101
+  205 op add *tmp101 0xabcdefabcdef 1
+  206 op sub *tmp102 0 188900977659376
   207 # "Function: inline def d(in n)"
-    * set :d.33:n :a
-    * op add *tmp103 zero :d.33:n
+  208 set :d.33:n 0xabcdefabcdef
+  209 op add *tmp103 zero :a
   210 label *label37
   211 op not *tmp105 *tmp103
-    * assertequals *tmp102 *tmp105 "not 3"
+  212 assertequals -188900977659376 *tmp105 "not 3"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n 4
-    * op add *tmp106 zero :d.34:n
+  215 op add *tmp106 zero 4
   216 label *label38
   217 op max *tmp108 2 *tmp106
   218 assertequals 4 *tmp108 "max"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n 4
-    * op add *tmp109 zero :d.35:n
+  221 op add *tmp109 zero 4
   222 label *label39
   223 op min *tmp111 2 *tmp109
   224 assertequals 2 *tmp111 "min"
   225 # "Function: inline def d(in n)"
   226 set :d.36:n -2
-    * op add *tmp112 zero :d.36:n
+  227 op add *tmp112 zero -2
   228 label *label40
   229 op abs *tmp114 *tmp112
   230 assertequals 2 *tmp114 "abs"
   231 # "Function: inline def d(in n)"
   232 set :d.37:n -2
-    * op add *tmp115 zero :d.37:n
+  233 op add *tmp115 zero -2
   234 label *label41
   235 # "Function: inline def sign(in x)"
   236 set :sign:x *tmp115
-    * op greaterThan *tmp118 :sign:x 0
-    * op lessThan *tmp119 :sign:x 0
+  237 op greaterThan *tmp118 *tmp115 0
+  238 op lessThan *tmp119 *tmp115 0
   239 op sub *tmp117 *tmp118 *tmp119
   240 label *label42
   241 assertequals -1 *tmp117 "sign(-2)"
   242 # "Function: inline def d(in n)"
   243 set :d.38:n 2
-    * op add *tmp121 zero :d.38:n
+  244 op add *tmp121 zero 2
   245 label *label43
   246 # "Function: inline def sign(in x)"
   247 set :sign.1:x *tmp121
-    * op greaterThan *tmp124 :sign.1:x 0
-    * op lessThan *tmp125 :sign.1:x 0
+  248 op greaterThan *tmp124 *tmp121 0
+  249 op lessThan *tmp125 *tmp121 0
   250 op sub *tmp123 *tmp124 *tmp125
   251 label *label44
   252 assertequals 1 *tmp123 "sign(2)"
   253 # "Function: inline def d(in n)"
   254 set :d.39:n 0
-    * op add *tmp127 zero :d.39:n
+  255 op add *tmp127 zero 0
   256 label *label45
   257 # "Function: inline def sign(in x)"
   258 set :sign.2:x *tmp127
-    * op greaterThan *tmp130 :sign.2:x 0
-    * op lessThan *tmp131 :sign.2:x 0
+  259 op greaterThan *tmp130 *tmp127 0
+  260 op lessThan *tmp131 *tmp127 0
   261 op sub *tmp129 *tmp130 *tmp131
   262 label *label46
   263 assertequals 0 *tmp129 "sign(0)"
   264 # "Function: inline def d(in n)"
   265 set :d.40:n 2.718281828459045
-    * op add *tmp133 zero :d.40:n
+  266 op add *tmp133 zero 2.718281828459045
   267 label *label47
   268 op log *tmp135 *tmp133
   269 assertequals 1 *tmp135 "log"
   270 # "Function: inline def d(in n)"
   271 set :d.41:n 10
-    * op add *tmp136 zero :d.41:n
+  272 op add *tmp136 zero 10
   273 label *label48
   274 op log10 *tmp138 *tmp136
   275 assertequals 1 *tmp138 "log10"
   276 # "Function: inline def d(in n)"
   277 set :d.42:n 2
-    * op add *tmp139 zero :d.42:n
+  278 op add *tmp139 zero 2
   279 label *label49
   280 # "Function: inline def logn(in number, in base)"
   281 set :logn:number 16
   282 set :logn:base *tmp139
-    * op log *tmp142 :logn:number
-    * op log *tmp143 :logn:base
-    * op div *tmp141 *tmp142 *tmp143
+  283 op log *tmp142 16
+  284 op log *tmp143 *tmp139
+  285 op div *tmp141 2.772588722239781 *tmp143
   286 label *label50
   287 assertequals 4 *tmp141 "logn"
   288 # "Function: inline def d(in n)"
   289 set :d.43:n 2.5
-    * op add *tmp145 zero :d.43:n
+  290 op add *tmp145 zero 2.5
   291 label *label51
   292 op floor *tmp147 *tmp145
   293 assertequals 2 *tmp147 "floor"
   294 # "Function: inline def d(in n)"
   295 set :d.44:n 2.5
-    * op add *tmp148 zero :d.44:n
+  296 op add *tmp148 zero 2.5
   297 label *label52
   298 op ceil *tmp150 *tmp148
   299 assertequals 3 *tmp150 "ceil"
   300 # "Function: inline def d(in n)"
   301 set :d.45:n 2.5
-    * op add *tmp151 zero :d.45:n
+  302 op add *tmp151 zero 2.5
   303 label *label53
   304 # "Function: inline def round(in x)"
   305 set :round:x *tmp151
-    * op add *tmp154 :round:x 0.5
+  306 op add *tmp154 *tmp151 0.5
   307 op floor *tmp153 *tmp154
   308 label *label54
   309 assertequals 3 *tmp153 "round"
   310 # "Function: inline def d(in n)"
   311 set :d.46:n 16
-    * op add *tmp156 zero :d.46:n
+  312 op add *tmp156 zero 16
   313 label *label55
   314 op sqrt *tmp158 *tmp156
   315 assertequals 4 *tmp158 "sqrt"
   316 # "Function: inline def d(in n)"
   317 set :d.47:n 1
-    * op add *tmp159 zero :d.47:n
+  318 op add *tmp159 zero 1
   319 label *label56
   320 op angle *tmp161 1 *tmp159
   321 assertequals 45 *tmp161 "angle"
   322 # "Function: inline def d(in n)"
   323 set :d.48:n 135
-    * op add *tmp162 zero :d.48:n
+  324 op add *tmp162 zero 135
   325 label *label57
   326 op angleDiff *tmp164 45 *tmp162
   327 assertequals 90 *tmp164 "angleDiff"
 
   352 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   353 # "Function: inline def d(in n)"
   354 set :d.49:n 8
-    * op add *tmp165 zero :d.49:n
+  355 op add *tmp165 zero 8
   356 label *label58
   357 op sub *tmp167 0 *tmp165
   358 assertequals -8 *tmp167 "unary minus"
   359 # "Function: inline def d(in n)"
   360 set :d.50:n 0
-    * op add *tmp168 zero :d.50:n
+  361 op add *tmp168 zero 0
   362 label *label59
   363 op equal *tmp170 *tmp168 false
   364 assertequals 1 *tmp170 "boolean negation 1"
   365 # "Function: inline def d(in n)"
   366 set :d.51:n 1
-    * op add *tmp171 zero :d.51:n
+  367 op add *tmp171 zero 1
   368 label *label60
   369 op equal *tmp173 *tmp171 false
   370 assertequals 0 *tmp173 "boolean negation 2"
   371 # "Function: inline def d(in n)"
   372 set :d.52:n 2
-    * op add *tmp174 zero :d.52:n
+  373 op add *tmp174 zero 2
   374 label *label61
   375 op equal *tmp176 *tmp174 false
   376 assertequals 0 *tmp176 "boolean negation 3"
   377 set :a 2
   378 # "Function: inline def d(in n)"
   379 set :d.53:n 4
-    * op add *tmp177 zero :d.53:n
+  380 op add *tmp177 zero 4
   381 label *label62
-    * op pow :a :a *tmp177
+  382 op pow :a 2 *tmp177
   383 assertequals 16 :a "**="
   384 set :a 2
   385 # "Function: inline def d(in n)"
   386 set :d.54:n 4
-    * op add *tmp179 zero :d.54:n
+  387 op add *tmp179 zero 4
   388 label *label63
-    * op mul :a :a *tmp179
+  389 op mul :a 2 *tmp179
   390 assertequals 8 :a "*="
   391 set :a 6
   392 # "Function: inline def d(in n)"
   393 set :d.55:n 4
-    * op add *tmp181 zero :d.55:n
+  394 op add *tmp181 zero 4
   395 label *label64
-    * op div :a :a *tmp181
+  396 op div :a 6 *tmp181
   397 assertequals 1.5 :a "/="
   398 set :a 6
   399 # "Function: inline def d(in n)"
   400 set :d.56:n 4
-    * op add *tmp183 zero :d.56:n
+  401 op add *tmp183 zero 4
   402 label *label65
-    * op idiv :a :a *tmp183
+  403 op idiv :a 6 *tmp183
   404 assertequals 1 :a "\="
   405 set :a 6
   406 # "Function: inline def d(in n)"
   407 set :d.57:n 4
-    * op add *tmp185 zero :d.57:n
+  408 op add *tmp185 zero 4
   409 label *label66
-    * op mod :a :a *tmp185
+  410 op mod :a 6 *tmp185
   411 assertequals 2 :a "%="
   412 set :a 4
   413 # "Function: inline def d(in n)"
   414 set :d.58:n 2
-    * op add *tmp187 zero :d.58:n
+  415 op add *tmp187 zero 2
   416 label *label67
-    * op add :a :a *tmp187
+  417 op add :a 4 *tmp187
   418 assertequals 6 :a "+="
   419 set :a 4
   420 # "Function: inline def d(in n)"
   421 set :d.59:n 2
-    * op add *tmp189 zero :d.59:n
+  422 op add *tmp189 zero 2
   423 label *label68
-    * op sub :a :a *tmp189
+  424 op sub :a 4 *tmp189
   425 assertequals 2 :a "-="
   426 set :a 1
   427 # "Function: inline def d(in n)"
   428 set :d.60:n 2
-    * op add *tmp191 zero :d.60:n
+  429 op add *tmp191 zero 2
   430 label *label69
-    * op shl :a :a *tmp191
+  431 op shl :a 1 *tmp191
   432 assertequals 4 :a "<<="
   433 set :a 9
   434 # "Function: inline def d(in n)"
   435 set :d.61:n 2
-    * op add *tmp193 zero :d.61:n
+  436 op add *tmp193 zero 2
   437 label *label70
-    * op shr :a :a *tmp193
+  438 op shr :a 9 *tmp193
   439 assertequals 2 :a ">>="
   440 set :a 1
   441 # "Function: inline def d(in n)"
   442 set :d.62:n 2
-    * op add *tmp195 zero :d.62:n
+  443 op add *tmp195 zero 2
   444 label *label71
-    * op or :a :a *tmp195
+  445 op or :a 1 *tmp195
   446 assertequals 3 :a "|="
   447 set :a 3
   448 # "Function: inline def d(in n)"
   449 set :d.63:n 2
-    * op add *tmp197 zero :d.63:n
+  450 op add *tmp197 zero 2
   451 label *label72
-    * op and :a :a *tmp197
+  452 op and :a 3 *tmp197
   453 assertequals 2 :a "&="
   454 set :a 3
   455 # "Function: inline def d(in n)"
   456 set :d.64:n 2
-    * op add *tmp199 zero :d.64:n
+  457 op add *tmp199 zero 2
   458 label *label73
-    * op xor :a :a *tmp199
+  459 op xor :a 3 *tmp199
   460 assertequals 1 :a "^="
   461 set :a 1
   462 # "Function: inline def d(in n)"
   463 set :d.65:n 0
-    * op add *tmp201 zero :d.65:n
+  464 op add *tmp201 zero 0
   465 label *label74
-    * op land :a :a *tmp201
+  466 op land :a 1 *tmp201
   467 assertequals false :a "&&="
   468 set :a 1
   469 # "Function: inline def d(in n)"
   470 set :d.66:n 2
-    * op add *tmp203 zero :d.66:n
+  471 op add *tmp203 zero 2
   472 label *label75
-    * op land :a :a *tmp203
+  473 op land :a 1 *tmp203
   474 assertequals true :a "&&="
   475 set :a 0
   476 # "Function: inline def d(in n)"
   477 set :d.67:n 2
-    * op add *tmp205 zero :d.67:n
+  478 op add *tmp205 zero 2
   479 label *label76
-    * op or *tmp207 :a *tmp205
+  480 op or *tmp207 0 *tmp205
   481 op notEqual :a *tmp207 false
   482 assertequals true :a "||="
   483 assertequals %ff0000ff %ff0000 "short color literals"
 
   488 set *tmp209 null
   489 jump *label79 always
   490 label *label78
-    * set *tmp209 :o:n
+  491 set *tmp209 @copper-wall
   492 label *label79
   493 set *tmp208 *tmp209
   494 label *label77
-    * sensor *tmp210 *tmp208 @id
+  495 sensor *tmp210 *tmp209 @id
   496 assertequals 17 *tmp210 "Logic ID"
   497 stop
   498 end
 
   501 op mul *tmp211 :assertEqualsRound:actual 100000000
   502 # "Function: inline def round(in x)"
   503 set :round.1:x *tmp211
-    * op add *tmp213 :round.1:x 0.5
+  504 op add *tmp213 *tmp211 0.5
   505 op floor *tmp212 *tmp213
   506 label *label81
   507 op div *tmp215 *tmp212 100000000

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-90 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * set :d:n 3
     3 op add *tmp0 zero 3
     4 label *label4
-    * op add *tmp2 2 *tmp0
+    5 op add *tmp2 zero 5
     6 assertequals 5 *tmp2 "add"
     7 # "Function: inline def d(in n)"
-    * set :d.1:n 6
     8 op add *tmp3 zero 6
     9 label *label5
-    * op sub *tmp5 7 *tmp3
+   10 op sub *tmp5 1 zero
    11 assertequals 1 *tmp5 "sub"
    12 # "Function: inline def d(in n)"
-    * set :d.2:n 2
    13 op add *tmp6 zero 2
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 # "Function: inline def d(in n)"
-    * set :d.3:n 4
    18 op add *tmp9 zero 4
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 # "Function: inline def d(in n)"
-    * set :d.4:n 100000
    23 op add *tmp12 zero 100000
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 # "Function: inline def d(in n)"
-    * set :d.5:n 4
    28 op add *tmp15 zero 4
    29 label *label9
-    * op idiv *tmp17 6 *tmp15
+   30 op idiv *tmp17 6 *tmp9
    31 assertequals 1 *tmp17 "idiv"
    32 # "Function: inline def d(in n)"
-    * set :d.6:n 4
    33 op add *tmp18 zero 4
    34 label *label10
-    * op mod *tmp20 6 *tmp18
+   35 op mod *tmp20 6 *tmp9
    36 assertequals 2 *tmp20 "mod"
    37 # "Function: inline def d(in n)"
-    * set :d.7:n 8
    38 op add *tmp21 zero 8
    39 label *label11
    40 op emod *tmp23 -3 *tmp21
    41 assertequals 5 *tmp23 "emod"
    42 # "Function: inline def d(in n)"
-    * set :d.8:n 4
    43 op add *tmp24 zero 4
    44 label *label12
-    * op pow *tmp26 2 *tmp24
+   45 op pow *tmp26 2 *tmp9
    46 assertequals 16 *tmp26 "pow"
    47 # "Function: inline def d(in n)"
-    * set :d.9:n 5
    48 op add *tmp27 zero 5
    49 label *label13
    50 op equal *tmp29 5 *tmp27
    51 assertequals true *tmp29 "equal 1"
    52 # "Function: inline def d(in n)"
-    * set :d.10:n 6
    53 op add *tmp30 zero 6
    54 label *label14
-    * op equal *tmp32 5 *tmp30
+   55 op equal *tmp32 5 *tmp3
    56 assertequals false *tmp32 "equal 2"
    57 # "Function: inline def d(in n)"
-    * set :d.11:n null
    58 op add *tmp33 zero null
    59 label *label15
    60 op equal *tmp35 0 *tmp33
    61 assertequals true *tmp35 "equal null"
    62 # "Function: inline def d(in n)"
-    * set :d.12:n 5
    63 op add *tmp36 zero 5
    64 label *label16
-    * op notEqual *tmp38 5 *tmp36
+   65 op notEqual *tmp38 5 *tmp27
    66 assertequals false *tmp38 "notEqual 1"
    67 # "Function: inline def d(in n)"
-    * set :d.13:n 6
    68 op add *tmp39 zero 6
    69 label *label17
-    * op notEqual *tmp41 5 *tmp39
+   70 op notEqual *tmp41 5 *tmp3
    71 assertequals true *tmp41 "notEqual 2"
    72 # "Function: inline def d(in n)"
-    * set :d.14:n null
    73 op add *tmp42 zero null
    74 label *label18
-    * op notEqual *tmp44 0 *tmp42
+   75 op notEqual *tmp44 0 *tmp33
    76 assertequals false *tmp44 "notEqual null"
    77 # "Function: inline def d(in n)"
-    * set :d.15:n 0
    78 op add *tmp45 zero 0
    79 label *label19
    80 op land *tmp47 1 *tmp45
    81 assertequals false *tmp47 "land 1"
    82 # "Function: inline def d(in n)"
-    * set :d.16:n 2
    83 op add *tmp48 zero 2
    84 label *label20
-    * op land *tmp50 1 *tmp48
+   85 op land *tmp50 1 *tmp6
    86 assertequals true *tmp50 "land 2"
    87 # "Function: inline def d(in n)"
-    * set :d.17:n 1
    88 op add *tmp51 zero 1
    89 label *label21
    90 op lessThan *tmp53 0 *tmp51
    91 assertequals true *tmp53 "lessThan 1"
    92 # "Function: inline def d(in n)"
-    * set :d.18:n 0
    93 op add *tmp54 zero 0
    94 label *label22
-    * op lessThan *tmp56 1 *tmp54
+   95 op lessThan *tmp56 1 *tmp45
    96 assertequals false *tmp56 "lessThan 2"
    97 # "Function: inline def d(in n)"
-    * set :d.19:n 1
    98 op add *tmp57 zero 1
    99 label *label23
-    * op lessThanEq *tmp59 1 *tmp57
+  100 op lessThanEq *tmp59 1 *tmp51
   101 assertequals true *tmp59 "lessThanEq 1"
   102 # "Function: inline def d(in n)"
-    * set :d.20:n 0
   103 op add *tmp60 zero 0
   104 label *label24
-    * op lessThanEq *tmp62 1 *tmp60
+  105 op lessThanEq *tmp62 1 *tmp45
   106 assertequals false *tmp62 "lessThanEq 2"
   107 # "Function: inline def d(in n)"
-    * set :d.21:n 1
   108 op add *tmp63 zero 1
   109 label *label25
-    * op greaterThan *tmp65 2 *tmp63
+  110 op greaterThan *tmp65 2 *tmp51
   111 assertequals true *tmp65 "greaterThan 1"
   112 # "Function: inline def d(in n)"
-    * set :d.22:n 2
   113 op add *tmp66 zero 2
   114 label *label26
-    * op greaterThan *tmp68 1 *tmp66
+  115 op greaterThan *tmp68 1 *tmp6
   116 assertequals false *tmp68 "greaterThan 2"
   117 # "Function: inline def d(in n)"
-    * set :d.23:n 1
   118 op add *tmp69 zero 1
   119 label *label27
-    * op greaterThanEq *tmp71 1 *tmp69
+  120 op greaterThanEq *tmp71 1 *tmp51
   121 assertequals true *tmp71 "greaterThanEq 1"
   122 # "Function: inline def d(in n)"
-    * set :d.24:n 2
   123 op add *tmp72 zero 2
   124 label *label28
-    * op greaterThanEq *tmp74 1 *tmp72
+  125 op greaterThanEq *tmp74 1 *tmp6
   126 assertequals false *tmp74 "greaterThanEq 2"
   127 op strictEqual *tmp75 0 NULL
   128 assertequals false *tmp75 "strictEqual 1"
   129 op strictEqual *tmp76 null NULL
   130 assertequals true *tmp76 "strictEqual 2"
   131 # "Function: inline def d(in n)"
-    * set :d.25:n 2
   132 op add *tmp77 zero 2
   133 label *label29
-    * op shl *tmp79 1 *tmp77
+  134 op shl *tmp79 1 *tmp6
   135 assertequals 4 *tmp79 "shl"
   136 # "Function: inline def d(in n)"
-    * set :d.26:n 2
   137 op add *tmp80 zero 2
   138 label *label30
-    * op shr *tmp82 9 *tmp80
+  139 op shr *tmp82 9 *tmp6
   140 assertequals 2 *tmp82 "shr"
   141 # "Function: inline def d(in n)"
-    * set :d.27:n 61
   142 op add *tmp83 zero 61
   143 label *label31
   144 op ushr *tmp85 -1 *tmp83
   145 assertequals 7 *tmp85 "ushr"
   146 # "Function: inline def d(in n)"
-    * set :d.28:n 2
   147 op add *tmp86 zero 2
   148 label *label32
-    * op or *tmp88 1 *tmp86
+  149 op or *tmp88 1 *tmp6
   150 assertequals 3 *tmp88 "or"
   151 # "Function: inline def d(in n)"
-    * set :d.29:n 2
   152 op add *tmp89 zero 2
   153 label *label33
-    * op and *tmp91 3 *tmp89
+  154 op and *tmp91 3 *tmp6
   155 assertequals 2 *tmp91 "and"
   156 # "Function: inline def d(in n)"
-    * set :d.30:n 2
   157 op add *tmp92 zero 2
   158 label *label34
-    * op xor *tmp94 3 *tmp92
+  159 op xor *tmp94 3 *tmp6
   160 assertequals 1 *tmp94 "xor"
   161 # "Function: inline def d(in n)"
-    * set :d.31:n 0
   162 op add *tmp95 zero 0
   163 label *label35
-    * op not *tmp97 *tmp95
+  164 op not *tmp97 *tmp45
   165 assertequals -1 *tmp97 "not 1"
   166 # "Function: inline def d(in n)"
-    * set :d.32:n 65535
   167 op add *tmp98 zero 65535
   168 label *label36
   169 op not *tmp100 *tmp98
   170 assertequals -65536 *tmp100 "not 2"
   171 set :a 0xabcdefabcdef
-    * op add *tmp101 0xabcdefabcdef 1
-    * op sub *tmp102 0 188900977659376
   172 # "Function: inline def d(in n)"
-    * set :d.33:n 0xabcdefabcdef
-    * op add *tmp103 zero :a
+  173 op add *tmp103 zero 0xabcdefabcdef
   174 label *label37
   175 op not *tmp105 *tmp103
   176 assertequals -188900977659376 *tmp105 "not 3"
   177 # "Function: inline def d(in n)"
-    * set :d.34:n 4
   178 op add *tmp106 zero 4
   179 label *label38
-    * op max *tmp108 2 *tmp106
+  180 op max *tmp108 2 *tmp9
   181 assertequals 4 *tmp108 "max"
   182 # "Function: inline def d(in n)"
-    * set :d.35:n 4
   183 op add *tmp109 zero 4
   184 label *label39
-    * op min *tmp111 2 *tmp109
+  185 op min *tmp111 2 *tmp9
   186 assertequals 2 *tmp111 "min"
   187 # "Function: inline def d(in n)"
-    * set :d.36:n -2
   188 op add *tmp112 zero -2
   189 label *label40
   190 op abs *tmp114 *tmp112
   191 assertequals 2 *tmp114 "abs"
   192 # "Function: inline def d(in n)"
-    * set :d.37:n -2
   193 op add *tmp115 zero -2
   194 label *label41
   195 # "Function: inline def sign(in x)"
-    * set :sign:x *tmp115
-    * op greaterThan *tmp118 *tmp115 0
-    * op lessThan *tmp119 *tmp115 0
+  196 set :sign:x *tmp112
+  197 op greaterThan *tmp118 *tmp112 0
+  198 op lessThan *tmp119 *tmp112 0
   199 op sub *tmp117 *tmp118 *tmp119
   200 label *label42
   201 assertequals -1 *tmp117 "sign(-2)"
   202 # "Function: inline def d(in n)"
-    * set :d.38:n 2
   203 op add *tmp121 zero 2
   204 label *label43
   205 # "Function: inline def sign(in x)"
-    * set :sign.1:x *tmp121
-    * op greaterThan *tmp124 *tmp121 0
-    * op lessThan *tmp125 *tmp121 0
+  206 set :sign.1:x *tmp6
+  207 op greaterThan *tmp124 *tmp6 0
+  208 op lessThan *tmp125 *tmp6 0
   209 op sub *tmp123 *tmp124 *tmp125
   210 label *label44
   211 assertequals 1 *tmp123 "sign(2)"
   212 # "Function: inline def d(in n)"
-    * set :d.39:n 0
   213 op add *tmp127 zero 0
   214 label *label45
   215 # "Function: inline def sign(in x)"
-    * set :sign.2:x *tmp127
-    * op greaterThan *tmp130 *tmp127 0
-    * op lessThan *tmp131 *tmp127 0
+  216 set :sign.2:x *tmp45
+  217 op greaterThan *tmp130 *tmp45 0
+  218 op lessThan *tmp131 *tmp45 0
   219 op sub *tmp129 *tmp130 *tmp131
   220 label *label46
   221 assertequals 0 *tmp129 "sign(0)"
   222 # "Function: inline def d(in n)"
-    * set :d.40:n 2.718281828459045
   223 op add *tmp133 zero 2.718281828459045
   224 label *label47
   225 op log *tmp135 *tmp133
   226 assertequals 1 *tmp135 "log"
   227 # "Function: inline def d(in n)"
-    * set :d.41:n 10
   228 op add *tmp136 zero 10
   229 label *label48
   230 op log10 *tmp138 *tmp136
   231 assertequals 1 *tmp138 "log10"
   232 # "Function: inline def d(in n)"
-    * set :d.42:n 2
   233 op add *tmp139 zero 2
   234 label *label49
   235 # "Function: inline def logn(in number, in base)"
-    * set :logn:number 16
-    * set :logn:base *tmp139
-    * op log *tmp142 16
-    * op log *tmp143 *tmp139
+  236 set :logn:base *tmp6
+  237 op log *tmp143 *tmp6
   238 op div *tmp141 2.772588722239781 *tmp143
   239 label *label50
   240 assertequals 4 *tmp141 "logn"
   241 # "Function: inline def d(in n)"
-    * set :d.43:n 2.5
   242 op add *tmp145 zero 2.5
   243 label *label51
   244 op floor *tmp147 *tmp145
   245 assertequals 2 *tmp147 "floor"
   246 # "Function: inline def d(in n)"
-    * set :d.44:n 2.5
   247 op add *tmp148 zero 2.5
   248 label *label52
-    * op ceil *tmp150 *tmp148
+  249 op ceil *tmp150 *tmp145
   250 assertequals 3 *tmp150 "ceil"
   251 # "Function: inline def d(in n)"
-    * set :d.45:n 2.5
   252 op add *tmp151 zero 2.5
   253 label *label53
   254 # "Function: inline def round(in x)"
-    * set :round:x *tmp151
-    * op add *tmp154 *tmp151 0.5
+  255 set :round:x *tmp145
+  256 op add *tmp154 *tmp145 0.5
   257 op floor *tmp153 *tmp154
   258 label *label54
   259 assertequals 3 *tmp153 "round"
   260 # "Function: inline def d(in n)"
-    * set :d.46:n 16
   261 op add *tmp156 zero 16
   262 label *label55
   263 op sqrt *tmp158 *tmp156
   264 assertequals 4 *tmp158 "sqrt"
   265 # "Function: inline def d(in n)"
-    * set :d.47:n 1
   266 op add *tmp159 zero 1
   267 label *label56
-    * op angle *tmp161 1 *tmp159
+  268 op angle *tmp161 1 *tmp51
   269 assertequals 45 *tmp161 "angle"
   270 # "Function: inline def d(in n)"
-    * set :d.48:n 135
   271 op add *tmp162 zero 135
   272 label *label57
   273 op angleDiff *tmp164 45 *tmp162
 
   298 set :assertEqualsRound:title "atan"
   299 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   300 # "Function: inline def d(in n)"
-    * set :d.49:n 8
   301 op add *tmp165 zero 8
   302 label *label58
-    * op sub *tmp167 0 *tmp165
+  303 op sub *tmp167 0 *tmp21
   304 assertequals -8 *tmp167 "unary minus"
   305 # "Function: inline def d(in n)"
-    * set :d.50:n 0
   306 op add *tmp168 zero 0
   307 label *label59
-    * op equal *tmp170 *tmp168 false
+  308 op equal *tmp170 *tmp45 false
   309 assertequals 1 *tmp170 "boolean negation 1"
   310 # "Function: inline def d(in n)"
-    * set :d.51:n 1
   311 op add *tmp171 zero 1
   312 label *label60
-    * op equal *tmp173 *tmp171 false
+  313 op equal *tmp173 *tmp51 false
   314 assertequals 0 *tmp173 "boolean negation 2"
   315 # "Function: inline def d(in n)"
-    * set :d.52:n 2
   316 op add *tmp174 zero 2
   317 label *label61
-    * op equal *tmp176 *tmp174 false
+  318 op equal *tmp176 *tmp6 false
   319 assertequals 0 *tmp176 "boolean negation 3"
-    * set :a 2
   320 # "Function: inline def d(in n)"
-    * set :d.53:n 4
   321 op add *tmp177 zero 4
   322 label *label62
-    * op pow :a 2 *tmp177
-    * assertequals 16 :a "**="
-    * set :a 2
+  323 op pow :a 2 *tmp9
+  324 assertequals 16 *tmp26 "**="
   325 # "Function: inline def d(in n)"
-    * set :d.54:n 4
   326 op add *tmp179 zero 4
   327 label *label63
-    * op mul :a 2 *tmp179
+  328 op mul :a 2 *tmp9
   329 assertequals 8 :a "*="
-    * set :a 6
   330 # "Function: inline def d(in n)"
-    * set :d.55:n 4
   331 op add *tmp181 zero 4
   332 label *label64
-    * op div :a 6 *tmp181
-    * assertequals 1.5 :a "/="
-    * set :a 6
+  333 op div :a 6 *tmp9
+  334 assertequals 1.5 *tmp11 "/="
   335 # "Function: inline def d(in n)"
-    * set :d.56:n 4
   336 op add *tmp183 zero 4
   337 label *label65
-    * op idiv :a 6 *tmp183
-    * assertequals 1 :a "\="
-    * set :a 6
+  338 op idiv :a 6 *tmp9
+  339 assertequals 1 *tmp17 "\="
   340 # "Function: inline def d(in n)"
-    * set :d.57:n 4
   341 op add *tmp185 zero 4
   342 label *label66
-    * op mod :a 6 *tmp185
-    * assertequals 2 :a "%="
-    * set :a 4
+  343 op mod :a 6 *tmp9
+  344 assertequals 2 *tmp20 "%="
   345 # "Function: inline def d(in n)"
-    * set :d.58:n 2
   346 op add *tmp187 zero 2
   347 label *label67
-    * op add :a 4 *tmp187
+  348 op add :a 4 *tmp6
   349 assertequals 6 :a "+="
-    * set :a 4
   350 # "Function: inline def d(in n)"
-    * set :d.59:n 2
   351 op add *tmp189 zero 2
   352 label *label68
-    * op sub :a 4 *tmp189
+  353 op sub :a 4 *tmp6
   354 assertequals 2 :a "-="
-    * set :a 1
   355 # "Function: inline def d(in n)"
-    * set :d.60:n 2
   356 op add *tmp191 zero 2
   357 label *label69
-    * op shl :a 1 *tmp191
-    * assertequals 4 :a "<<="
-    * set :a 9
+  358 op shl :a 1 *tmp6
+  359 assertequals 4 *tmp79 "<<="
   360 # "Function: inline def d(in n)"
-    * set :d.61:n 2
   361 op add *tmp193 zero 2
   362 label *label70
-    * op shr :a 9 *tmp193
-    * assertequals 2 :a ">>="
-    * set :a 1
+  363 op shr :a 9 *tmp6
+  364 assertequals 2 *tmp82 ">>="
   365 # "Function: inline def d(in n)"
-    * set :d.62:n 2
   366 op add *tmp195 zero 2
   367 label *label71
-    * op or :a 1 *tmp195
-    * assertequals 3 :a "|="
-    * set :a 3
+  368 op or :a 1 *tmp6
+  369 assertequals 3 *tmp88 "|="
   370 # "Function: inline def d(in n)"
-    * set :d.63:n 2
   371 op add *tmp197 zero 2
   372 label *label72
-    * op and :a 3 *tmp197
-    * assertequals 2 :a "&="
-    * set :a 3
+  373 op and :a 3 *tmp6
+  374 assertequals 2 *tmp91 "&="
   375 # "Function: inline def d(in n)"
-    * set :d.64:n 2
   376 op add *tmp199 zero 2
   377 label *label73
-    * op xor :a 3 *tmp199
-    * assertequals 1 :a "^="
-    * set :a 1
+  378 op xor :a 3 *tmp6
+  379 assertequals 1 *tmp94 "^="
   380 # "Function: inline def d(in n)"
-    * set :d.65:n 0
   381 op add *tmp201 zero 0
   382 label *label74
-    * op land :a 1 *tmp201
-    * assertequals false :a "&&="
-    * set :a 1
+  383 op land :a 1 *tmp45
+  384 assertequals false *tmp47 "&&="
   385 # "Function: inline def d(in n)"
-    * set :d.66:n 2
   386 op add *tmp203 zero 2
   387 label *label75
-    * op land :a 1 *tmp203
-    * assertequals true :a "&&="
-    * set :a 0
+  388 op land :a 1 *tmp6
+  389 assertequals true *tmp50 "&&="
   390 # "Function: inline def d(in n)"
-    * set :d.67:n 2
   391 op add *tmp205 zero 2
   392 label *label76
-    * op or *tmp207 0 *tmp205
+  393 op or *tmp207 0 *tmp6
   394 op notEqual :a *tmp207 false
   395 assertequals true :a "||="
   396 assertequals %ff0000ff %ff0000 "short color literals"
   397 assertequals %ffffffff %[white] "named color literals"
   398 # "Function: inline def o(in n)"
-    * set :o:n @copper-wall
   399 jump *label78 equal zero false
   400 set *tmp209 null
   401 jump *label79 always
   402 label *label78
   403 set *tmp209 @copper-wall
   404 label *label79
-    * set *tmp208 *tmp209
   405 label *label77
   406 sensor *tmp210 *tmp209 @id
   407 assertequals 17 *tmp210 "Logic ID"
 
   411 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   412 op mul *tmp211 :assertEqualsRound:actual 100000000
   413 # "Function: inline def round(in x)"
-    * set :round.1:x *tmp211
   414 op add *tmp213 *tmp211 0.5
   415 op floor *tmp212 *tmp213
   416 label *label81

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-67 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * op add *tmp0 zero 3
     3 label *label4
     4 op add *tmp2 zero 5
     5 assertequals 5 *tmp2 "add"
 
    24 op div *tmp14 1 *tmp12
    25 assertequals 0.00001 *tmp14 "div exp"
    26 # "Function: inline def d(in n)"
-    * op add *tmp15 zero 4
    27 label *label9
    28 op idiv *tmp17 6 *tmp9
    29 assertequals 1 *tmp17 "idiv"
    30 # "Function: inline def d(in n)"
-    * op add *tmp18 zero 4
    31 label *label10
    32 op mod *tmp20 6 *tmp9
    33 assertequals 2 *tmp20 "mod"
 
    37 op emod *tmp23 -3 *tmp21
    38 assertequals 5 *tmp23 "emod"
    39 # "Function: inline def d(in n)"
-    * op add *tmp24 zero 4
    40 label *label12
    41 op pow *tmp26 2 *tmp9
    42 assertequals 16 *tmp26 "pow"
    43 # "Function: inline def d(in n)"
    44 op add *tmp27 zero 5
    45 label *label13
-    * op equal *tmp29 5 *tmp27
+   46 op equal *tmp29 5 *tmp2
    47 assertequals true *tmp29 "equal 1"
    48 # "Function: inline def d(in n)"
-    * op add *tmp30 zero 6
    49 label *label14
    50 op equal *tmp32 5 *tmp3
    51 assertequals false *tmp32 "equal 2"
 
    55 op equal *tmp35 0 *tmp33
    56 assertequals true *tmp35 "equal null"
    57 # "Function: inline def d(in n)"
-    * op add *tmp36 zero 5
    58 label *label16
-    * op notEqual *tmp38 5 *tmp27
+   59 op notEqual *tmp38 5 *tmp2
    60 assertequals false *tmp38 "notEqual 1"
    61 # "Function: inline def d(in n)"
-    * op add *tmp39 zero 6
    62 label *label17
    63 op notEqual *tmp41 5 *tmp3
    64 assertequals true *tmp41 "notEqual 2"
    65 # "Function: inline def d(in n)"
-    * op add *tmp42 zero null
    66 label *label18
    67 op notEqual *tmp44 0 *tmp33
    68 assertequals false *tmp44 "notEqual null"
 
    72 op land *tmp47 1 *tmp45
    73 assertequals false *tmp47 "land 1"
    74 # "Function: inline def d(in n)"
-    * op add *tmp48 zero 2
    75 label *label20
    76 op land *tmp50 1 *tmp6
    77 assertequals true *tmp50 "land 2"
 
    81 op lessThan *tmp53 0 *tmp51
    82 assertequals true *tmp53 "lessThan 1"
    83 # "Function: inline def d(in n)"
-    * op add *tmp54 zero 0
    84 label *label22
    85 op lessThan *tmp56 1 *tmp45
    86 assertequals false *tmp56 "lessThan 2"
    87 # "Function: inline def d(in n)"
-    * op add *tmp57 zero 1
    88 label *label23
    89 op lessThanEq *tmp59 1 *tmp51
    90 assertequals true *tmp59 "lessThanEq 1"
    91 # "Function: inline def d(in n)"
-    * op add *tmp60 zero 0
    92 label *label24
    93 op lessThanEq *tmp62 1 *tmp45
    94 assertequals false *tmp62 "lessThanEq 2"
    95 # "Function: inline def d(in n)"
-    * op add *tmp63 zero 1
    96 label *label25
    97 op greaterThan *tmp65 2 *tmp51
    98 assertequals true *tmp65 "greaterThan 1"
    99 # "Function: inline def d(in n)"
-    * op add *tmp66 zero 2
   100 label *label26
   101 op greaterThan *tmp68 1 *tmp6
   102 assertequals false *tmp68 "greaterThan 2"
   103 # "Function: inline def d(in n)"
-    * op add *tmp69 zero 1
   104 label *label27
   105 op greaterThanEq *tmp71 1 *tmp51
   106 assertequals true *tmp71 "greaterThanEq 1"
   107 # "Function: inline def d(in n)"
-    * op add *tmp72 zero 2
   108 label *label28
   109 op greaterThanEq *tmp74 1 *tmp6
   110 assertequals false *tmp74 "greaterThanEq 2"
 
   113 op strictEqual *tmp76 null NULL
   114 assertequals true *tmp76 "strictEqual 2"
   115 # "Function: inline def d(in n)"
-    * op add *tmp77 zero 2
   116 label *label29
   117 op shl *tmp79 1 *tmp6
   118 assertequals 4 *tmp79 "shl"
   119 # "Function: inline def d(in n)"
-    * op add *tmp80 zero 2
   120 label *label30
   121 op shr *tmp82 9 *tmp6
   122 assertequals 2 *tmp82 "shr"
 
   126 op ushr *tmp85 -1 *tmp83
   127 assertequals 7 *tmp85 "ushr"
   128 # "Function: inline def d(in n)"
-    * op add *tmp86 zero 2
   129 label *label32
   130 op or *tmp88 1 *tmp6
   131 assertequals 3 *tmp88 "or"
   132 # "Function: inline def d(in n)"
-    * op add *tmp89 zero 2
   133 label *label33
   134 op and *tmp91 3 *tmp6
   135 assertequals 2 *tmp91 "and"
   136 # "Function: inline def d(in n)"
-    * op add *tmp92 zero 2
   137 label *label34
   138 op xor *tmp94 3 *tmp6
   139 assertequals 1 *tmp94 "xor"
   140 # "Function: inline def d(in n)"
-    * op add *tmp95 zero 0
   141 label *label35
   142 op not *tmp97 *tmp45
   143 assertequals -1 *tmp97 "not 1"
 
   146 label *label36
   147 op not *tmp100 *tmp98
   148 assertequals -65536 *tmp100 "not 2"
-    * set :a 0xabcdefabcdef
   149 # "Function: inline def d(in n)"
   150 op add *tmp103 zero 0xabcdefabcdef
   151 label *label37
   152 op not *tmp105 *tmp103
   153 assertequals -188900977659376 *tmp105 "not 3"
   154 # "Function: inline def d(in n)"
-    * op add *tmp106 zero 4
   155 label *label38
   156 op max *tmp108 2 *tmp9
   157 assertequals 4 *tmp108 "max"
   158 # "Function: inline def d(in n)"
-    * op add *tmp109 zero 4
   159 label *label39
   160 op min *tmp111 2 *tmp9
   161 assertequals 2 *tmp111 "min"
 
   165 op abs *tmp114 *tmp112
   166 assertequals 2 *tmp114 "abs"
   167 # "Function: inline def d(in n)"
-    * op add *tmp115 zero -2
   168 label *label41
   169 # "Function: inline def sign(in x)"
-    * set :sign:x *tmp112
   170 op greaterThan *tmp118 *tmp112 0
   171 op lessThan *tmp119 *tmp112 0
   172 op sub *tmp117 *tmp118 *tmp119
   173 label *label42
   174 assertequals -1 *tmp117 "sign(-2)"
   175 # "Function: inline def d(in n)"
-    * op add *tmp121 zero 2
   176 label *label43
   177 # "Function: inline def sign(in x)"
-    * set :sign.1:x *tmp6
   178 op greaterThan *tmp124 *tmp6 0
   179 op lessThan *tmp125 *tmp6 0
   180 op sub *tmp123 *tmp124 *tmp125
   181 label *label44
   182 assertequals 1 *tmp123 "sign(2)"
   183 # "Function: inline def d(in n)"
-    * op add *tmp127 zero 0
   184 label *label45
   185 # "Function: inline def sign(in x)"
-    * set :sign.2:x *tmp45
   186 op greaterThan *tmp130 *tmp45 0
   187 op lessThan *tmp131 *tmp45 0
   188 op sub *tmp129 *tmp130 *tmp131
 
   199 op log10 *tmp138 *tmp136
   200 assertequals 1 *tmp138 "log10"
   201 # "Function: inline def d(in n)"
-    * op add *tmp139 zero 2
   202 label *label49
   203 # "Function: inline def logn(in number, in base)"
-    * set :logn:base *tmp6
   204 op log *tmp143 *tmp6
   205 op div *tmp141 2.772588722239781 *tmp143
   206 label *label50
 
   211 op floor *tmp147 *tmp145
   212 assertequals 2 *tmp147 "floor"
   213 # "Function: inline def d(in n)"
-    * op add *tmp148 zero 2.5
   214 label *label52
   215 op ceil *tmp150 *tmp145
   216 assertequals 3 *tmp150 "ceil"
   217 # "Function: inline def d(in n)"
-    * op add *tmp151 zero 2.5
   218 label *label53
   219 # "Function: inline def round(in x)"
-    * set :round:x *tmp145
-    * op add *tmp154 *tmp145 0.5
+  220 op add *tmp154 zero 3
   221 op floor *tmp153 *tmp154
   222 label *label54
   223 assertequals 3 *tmp153 "round"
 
   227 op sqrt *tmp158 *tmp156
   228 assertequals 4 *tmp158 "sqrt"
   229 # "Function: inline def d(in n)"
-    * op add *tmp159 zero 1
   230 label *label56
   231 op angle *tmp161 1 *tmp51
   232 assertequals 45 *tmp161 "angle"
 
   261 set :assertEqualsRound:title "atan"
   262 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   263 # "Function: inline def d(in n)"
-    * op add *tmp165 zero 8
   264 label *label58
-    * op sub *tmp167 0 *tmp21
+  265 op sub *tmp167 -8 zero
   266 assertequals -8 *tmp167 "unary minus"
   267 # "Function: inline def d(in n)"
-    * op add *tmp168 zero 0
   268 label *label59
   269 op equal *tmp170 *tmp45 false
   270 assertequals 1 *tmp170 "boolean negation 1"
   271 # "Function: inline def d(in n)"
-    * op add *tmp171 zero 1
   272 label *label60
   273 op equal *tmp173 *tmp51 false
   274 assertequals 0 *tmp173 "boolean negation 2"
   275 # "Function: inline def d(in n)"
-    * op add *tmp174 zero 2
   276 label *label61
   277 op equal *tmp176 *tmp6 false
   278 assertequals 0 *tmp176 "boolean negation 3"
   279 # "Function: inline def d(in n)"
-    * op add *tmp177 zero 4
   280 label *label62
-    * op pow :a 2 *tmp9
   281 assertequals 16 *tmp26 "**="
   282 # "Function: inline def d(in n)"
-    * op add *tmp179 zero 4
   283 label *label63
   284 op mul :a 2 *tmp9
   285 assertequals 8 :a "*="
   286 # "Function: inline def d(in n)"
-    * op add *tmp181 zero 4
   287 label *label64
-    * op div :a 6 *tmp9
   288 assertequals 1.5 *tmp11 "/="
   289 # "Function: inline def d(in n)"
-    * op add *tmp183 zero 4
   290 label *label65
-    * op idiv :a 6 *tmp9
   291 assertequals 1 *tmp17 "\="
   292 # "Function: inline def d(in n)"
-    * op add *tmp185 zero 4
   293 label *label66
-    * op mod :a 6 *tmp9
   294 assertequals 2 *tmp20 "%="
   295 # "Function: inline def d(in n)"
-    * op add *tmp187 zero 2
   296 label *label67
-    * op add :a 4 *tmp6
+  297 op add :a zero 6
   298 assertequals 6 :a "+="
   299 # "Function: inline def d(in n)"
-    * op add *tmp189 zero 2
   300 label *label68
-    * op sub :a 4 *tmp6
+  301 op sub :a 2 zero
   302 assertequals 2 :a "-="
   303 # "Function: inline def d(in n)"
-    * op add *tmp191 zero 2
   304 label *label69
-    * op shl :a 1 *tmp6
   305 assertequals 4 *tmp79 "<<="
   306 # "Function: inline def d(in n)"
-    * op add *tmp193 zero 2
   307 label *label70
-    * op shr :a 9 *tmp6
   308 assertequals 2 *tmp82 ">>="
   309 # "Function: inline def d(in n)"
-    * op add *tmp195 zero 2
   310 label *label71
-    * op or :a 1 *tmp6
   311 assertequals 3 *tmp88 "|="
   312 # "Function: inline def d(in n)"
-    * op add *tmp197 zero 2
   313 label *label72
-    * op and :a 3 *tmp6
   314 assertequals 2 *tmp91 "&="
   315 # "Function: inline def d(in n)"
-    * op add *tmp199 zero 2
   316 label *label73
-    * op xor :a 3 *tmp6
   317 assertequals 1 *tmp94 "^="
   318 # "Function: inline def d(in n)"
-    * op add *tmp201 zero 0
   319 label *label74
-    * op land :a 1 *tmp45
   320 assertequals false *tmp47 "&&="
   321 # "Function: inline def d(in n)"
-    * op add *tmp203 zero 2
   322 label *label75
-    * op land :a 1 *tmp6
   323 assertequals true *tmp50 "&&="
   324 # "Function: inline def d(in n)"
-    * op add *tmp205 zero 2
   325 label *label76
   326 op or *tmp207 0 *tmp6
   327 op notEqual :a *tmp207 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    41 op pow *tmp26 2 *tmp9
    42 assertequals 16 *tmp26 "pow"
    43 # "Function: inline def d(in n)"
-    * op add *tmp27 zero 5
    44 label *label13
    45 op equal *tmp29 5 *tmp2
    46 assertequals true *tmp29 "equal 1"
 
   294 # "Function: inline def d(in n)"
   295 label *label67
   296 op add :a zero 6
-    * assertequals 6 :a "+="
+  297 assertequals 6 *tmp3 "+="
   298 # "Function: inline def d(in n)"
   299 label *label68
   300 op sub :a 2 zero

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
   293 assertequals 2 *tmp20 "%="
   294 # "Function: inline def d(in n)"
   295 label *label67
-    * op add :a zero 6
   296 assertequals 6 *tmp3 "+="
   297 # "Function: inline def d(in n)"
   298 label *label68

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   328 assertequals %ffffffff %[white] "named color literals"
   329 # "Function: inline def o(in n)"
   330 jump *label78 equal zero false
-    * set *tmp209 null
+  331 sensor *tmp210 null @id
   332 jump *label79 always
   333 label *label78
-    * set *tmp209 @copper-wall
+  334 sensor *tmp210 @copper-wall @id
   335 label *label79
   336 label *label77
-    * sensor *tmp210 *tmp209 @id
   337 assertequals 17 *tmp210 "Logic ID"
   338 stop
   339 end

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+11 instructions):
 
   238 set :assertEqualsRound:expected 1
   239 set :assertEqualsRound:actual 1
   240 set :assertEqualsRound:title "sin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  241 label *label82
+  242 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  243 op mul *tmp211 :assertEqualsRound:actual 100000000
+  244 # "Function: inline def round(in x)"
+  245 op add *tmp213 *tmp211 0.5
+  246 op floor *tmp212 *tmp213
+  247 label *label83
+  248 op div *tmp215 *tmp212 100000000
+  249 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  250 label *label84
   251 set :assertEqualsRound:expected -1
   252 set :assertEqualsRound:actual -1
   253 set :assertEqualsRound:title "cos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  254 label *label85
+  255 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  256 op mul *tmp211 :assertEqualsRound:actual 100000000
+  257 # "Function: inline def round(in x)"
+  258 op add *tmp213 *tmp211 0.5
+  259 op floor *tmp212 *tmp213
+  260 label *label86
+  261 op div *tmp215 *tmp212 100000000
+  262 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  263 label *label87
   264 set :assertEqualsRound:expected 1
   265 set :assertEqualsRound:actual 0.9999999999999999
   266 set :assertEqualsRound:title "tan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  267 label *label88
+  268 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  269 op mul *tmp211 :assertEqualsRound:actual 100000000
+  270 # "Function: inline def round(in x)"
+  271 op add *tmp213 *tmp211 0.5
+  272 op floor *tmp212 *tmp213
+  273 label *label89
+  274 op div *tmp215 *tmp212 100000000
+  275 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  276 label *label90
   277 set :assertEqualsRound:expected 90
   278 set :assertEqualsRound:actual 90
   279 set :assertEqualsRound:title "asin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  280 label *label91
+  281 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  282 op mul *tmp211 :assertEqualsRound:actual 100000000
+  283 # "Function: inline def round(in x)"
+  284 op add *tmp213 *tmp211 0.5
+  285 op floor *tmp212 *tmp213
+  286 label *label92
+  287 op div *tmp215 *tmp212 100000000
+  288 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  289 label *label93
   290 set :assertEqualsRound:expected 0
   291 set :assertEqualsRound:actual 0
   292 set :assertEqualsRound:title "acos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  293 label *label94
+  294 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  295 op mul *tmp211 :assertEqualsRound:actual 100000000
+  296 # "Function: inline def round(in x)"
+  297 op add *tmp213 *tmp211 0.5
+  298 op floor *tmp212 *tmp213
+  299 label *label95
+  300 op div *tmp215 *tmp212 100000000
+  301 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  302 label *label96
   303 set :assertEqualsRound:expected 45
   304 set :assertEqualsRound:actual 45
   305 set :assertEqualsRound:title "atan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  306 label *label97
+  307 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  308 op mul *tmp211 :assertEqualsRound:actual 100000000
+  309 # "Function: inline def round(in x)"
+  310 op add *tmp213 *tmp211 0.5
+  311 op floor *tmp212 *tmp213
+  312 label *label98
+  313 op div *tmp215 *tmp212 100000000
+  314 assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  315 label *label99
   316 # "Function: inline def d(in n)"
   317 label *label58
   318 op sub *tmp167 -8 zero
 
   391 assertequals 17 *tmp210 "Logic ID"
   392 stop
   393 end
-    * label *label3
-    * # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
-    * # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
-    * label *label81
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
-    * label *label80
-    * return :assertEqualsRound*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   240 set :assertEqualsRound:title "sin"
   241 label *label82
   242 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  243 op mul *tmp211 1 100000000
   244 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  245 op add *tmp213 100000000 0.5
+  246 op floor *tmp212 100000000.5
   247 label *label83
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  248 op div *tmp215 100000000 100000000
+  249 assertequals 1 1 "sin"
   250 label *label84
   251 set :assertEqualsRound:expected -1
   252 set :assertEqualsRound:actual -1
   253 set :assertEqualsRound:title "cos"
   254 label *label85
   255 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  256 op mul *tmp211 -1 100000000
   257 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  258 op add *tmp213 -100000000 0.5
+  259 op floor *tmp212 -99999999.5
   260 label *label86
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  261 op div *tmp215 -100000000 100000000
+  262 assertequals -1 -1 "cos"
   263 label *label87
   264 set :assertEqualsRound:expected 1
   265 set :assertEqualsRound:actual 0.9999999999999999
   266 set :assertEqualsRound:title "tan"
   267 label *label88
   268 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  269 op mul *tmp211 0.9999999999999999 100000000
   270 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  271 op add *tmp213 99999999.99999999 0.5
+  272 op floor *tmp212 100000000.49999999
   273 label *label89
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  274 op div *tmp215 100000000 100000000
+  275 assertequals 1 1 "tan"
   276 label *label90
   277 set :assertEqualsRound:expected 90
   278 set :assertEqualsRound:actual 90
   279 set :assertEqualsRound:title "asin"
   280 label *label91
   281 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  282 op mul *tmp211 90 100000000
   283 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  284 op add *tmp213 9000000000 0.5
+  285 op floor *tmp212 9000000000.5
   286 label *label92
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  287 op div *tmp215 9000000000 100000000
+  288 assertequals 90 90 "asin"
   289 label *label93
   290 set :assertEqualsRound:expected 0
   291 set :assertEqualsRound:actual 0
   292 set :assertEqualsRound:title "acos"
   293 label *label94
   294 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  295 op mul *tmp211 0 100000000
   296 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  297 op add *tmp213 0 0.5
+  298 op floor *tmp212 0.5
   299 label *label95
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  300 op div *tmp215 0 100000000
+  301 assertequals 0 0 "acos"
   302 label *label96
   303 set :assertEqualsRound:expected 45
   304 set :assertEqualsRound:actual 45
   305 set :assertEqualsRound:title "atan"
   306 label *label97
   307 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 :assertEqualsRound:actual 100000000
+  308 op mul *tmp211 45 100000000
   309 # "Function: inline def round(in x)"
-    * op add *tmp213 *tmp211 0.5
-    * op floor *tmp212 *tmp213
+  310 op add *tmp213 4500000000 0.5
+  311 op floor *tmp212 4500000000.5
   312 label *label98
-    * op div *tmp215 *tmp212 100000000
-    * assertequals :assertEqualsRound:expected *tmp215 :assertEqualsRound:title
+  313 op div *tmp215 4500000000 100000000
+  314 assertequals 45 45 "atan"
   315 label *label99
   316 # "Function: inline def d(in n)"
   317 label *label58

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
   235 op angleDiff *tmp164 45 *tmp162
   236 assertequals 90 *tmp164 "angleDiff"
   237 assertequals 5 5 "len"
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 1
-    * set :assertEqualsRound:title "sin"
   238 label *label82
   239 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 1 100000000
   240 # "Function: inline def round(in x)"
-    * op add *tmp213 100000000 0.5
-    * op floor *tmp212 100000000.5
   241 label *label83
-    * op div *tmp215 100000000 100000000
   242 assertequals 1 1 "sin"
   243 label *label84
-    * set :assertEqualsRound:expected -1
-    * set :assertEqualsRound:actual -1
-    * set :assertEqualsRound:title "cos"
   244 label *label85
   245 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 -1 100000000
   246 # "Function: inline def round(in x)"
-    * op add *tmp213 -100000000 0.5
-    * op floor *tmp212 -99999999.5
   247 label *label86
-    * op div *tmp215 -100000000 100000000
   248 assertequals -1 -1 "cos"
   249 label *label87
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 0.9999999999999999
-    * set :assertEqualsRound:title "tan"
   250 label *label88
   251 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 0.9999999999999999 100000000
   252 # "Function: inline def round(in x)"
-    * op add *tmp213 99999999.99999999 0.5
-    * op floor *tmp212 100000000.49999999
   253 label *label89
-    * op div *tmp215 100000000 100000000
   254 assertequals 1 1 "tan"
   255 label *label90
-    * set :assertEqualsRound:expected 90
-    * set :assertEqualsRound:actual 90
-    * set :assertEqualsRound:title "asin"
   256 label *label91
   257 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 90 100000000
   258 # "Function: inline def round(in x)"
-    * op add *tmp213 9000000000 0.5
-    * op floor *tmp212 9000000000.5
   259 label *label92
-    * op div *tmp215 9000000000 100000000
   260 assertequals 90 90 "asin"
   261 label *label93
-    * set :assertEqualsRound:expected 0
-    * set :assertEqualsRound:actual 0
-    * set :assertEqualsRound:title "acos"
   262 label *label94
   263 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 0 100000000
   264 # "Function: inline def round(in x)"
-    * op add *tmp213 0 0.5
-    * op floor *tmp212 0.5
   265 label *label95
-    * op div *tmp215 0 100000000
   266 assertequals 0 0 "acos"
   267 label *label96
-    * set :assertEqualsRound:expected 45
-    * set :assertEqualsRound:actual 45
-    * set :assertEqualsRound:title "atan"
   268 label *label97
   269 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp211 45 100000000
   270 # "Function: inline def round(in x)"
-    * op add *tmp213 4500000000 0.5
-    * op floor *tmp212 4500000000.5
   271 label *label98
-    * op div *tmp215 4500000000 100000000
   272 assertequals 45 45 "atan"
   273 label *label99
   274 # "Function: inline def d(in n)"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    66 op notEqual *tmp44 0 *tmp33
    67 assertequals false *tmp44 "notEqual null"
    68 # "Function: inline def d(in n)"
-    * op add *tmp45 zero 0
+   69 set *tmp45 zero
    70 label *label19
    71 op land *tmp47 1 *tmp45
    72 assertequals false *tmp47 "land 1"
 
   343 sensor *tmp210 null @id
   344 jump *label79 always
   345 label *label78
-    * sensor *tmp210 @copper-wall @id
+  346 set *tmp210 17
   347 label *label79
   348 label *label77
   349 assertequals 17 *tmp210 "Logic ID"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    68 # "Function: inline def d(in n)"
    69 set *tmp45 zero
    70 label *label19
-    * op land *tmp47 1 *tmp45
+   71 op land *tmp47 1 zero
    72 assertequals false *tmp47 "land 1"
    73 # "Function: inline def d(in n)"
    74 label *label20
 
    81 assertequals true *tmp53 "lessThan 1"
    82 # "Function: inline def d(in n)"
    83 label *label22
-    * op lessThan *tmp56 1 *tmp45
+   84 op lessThan *tmp56 1 zero
    85 assertequals false *tmp56 "lessThan 2"
    86 # "Function: inline def d(in n)"
    87 label *label23
 
    89 assertequals true *tmp59 "lessThanEq 1"
    90 # "Function: inline def d(in n)"
    91 label *label24
-    * op lessThanEq *tmp62 1 *tmp45
+   92 op lessThanEq *tmp62 1 zero
    93 assertequals false *tmp62 "lessThanEq 2"
    94 # "Function: inline def d(in n)"
    95 label *label25
 
   138 assertequals 1 *tmp94 "xor"
   139 # "Function: inline def d(in n)"
   140 label *label35
-    * op not *tmp97 *tmp45
+  141 op not *tmp97 zero
   142 assertequals -1 *tmp97 "not 1"
   143 # "Function: inline def d(in n)"
   144 op add *tmp98 zero 65535
 
   182 # "Function: inline def d(in n)"
   183 label *label45
   184 # "Function: inline def sign(in x)"
-    * op greaterThan *tmp130 *tmp45 0
-    * op lessThan *tmp131 *tmp45 0
+  185 op greaterThan *tmp130 zero 0
+  186 op lessThan *tmp131 zero 0
   187 op sub *tmp129 *tmp130 *tmp131
   188 label *label46
   189 assertequals 0 *tmp129 "sign(0)"
 
   277 assertequals -8 *tmp167 "unary minus"
   278 # "Function: inline def d(in n)"
   279 label *label59
-    * op equal *tmp170 *tmp45 false
+  280 op equal *tmp170 zero false
   281 assertequals 1 *tmp170 "boolean negation 1"
   282 # "Function: inline def d(in n)"
   283 label *label60

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    66 op notEqual *tmp44 0 *tmp33
    67 assertequals false *tmp44 "notEqual null"
    68 # "Function: inline def d(in n)"
-    * set *tmp45 zero
    69 label *label19
    70 op land *tmp47 1 zero
    71 assertequals false *tmp47 "land 1"

Modifications by Iterated phase, If Expression Optimization, pass 2, iteration 1:
 
   338 assertequals %ff0000ff %ff0000 "short color literals"
   339 assertequals %ffffffff %[white] "named color literals"
   340 # "Function: inline def o(in n)"
-    * jump *label78 equal zero false
+  341 set *tmp210 17
+  342 jump *label79 equal zero false
   343 sensor *tmp210 null @id
   344 jump *label79 always
-    * label *label78
-    * set *tmp210 17
   345 label *label79
   346 label *label77
   347 assertequals 17 *tmp210 "Logic ID"

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   341 set *tmp210 17
   342 jump *label79 equal zero false
   343 sensor *tmp210 null @id
-    * jump *label79 always
   344 label *label79
   345 label *label77
   346 assertequals 17 *tmp210 "Logic ID"

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * label *label4
     3 op add *tmp2 zero 5
     4 assertequals 5 *tmp2 "add"
     5 # "Function: inline def d(in n)"
     6 op add *tmp3 zero 6
-    * label *label5
     7 op sub *tmp5 1 zero
     8 assertequals 1 *tmp5 "sub"
     9 # "Function: inline def d(in n)"
    10 op add *tmp6 zero 2
-    * label *label6
    11 op mul *tmp8 3 *tmp6
    12 assertequals 6 *tmp8 "mul"
    13 # "Function: inline def d(in n)"
    14 op add *tmp9 zero 4
-    * label *label7
    15 op div *tmp11 6 *tmp9
    16 assertequals 1.5 *tmp11 "div"
    17 # "Function: inline def d(in n)"
    18 op add *tmp12 zero 100000
-    * label *label8
    19 op div *tmp14 1 *tmp12
    20 assertequals 0.00001 *tmp14 "div exp"
    21 # "Function: inline def d(in n)"
-    * label *label9
    22 op idiv *tmp17 6 *tmp9
    23 assertequals 1 *tmp17 "idiv"
    24 # "Function: inline def d(in n)"
-    * label *label10
    25 op mod *tmp20 6 *tmp9
    26 assertequals 2 *tmp20 "mod"
    27 # "Function: inline def d(in n)"
    28 op add *tmp21 zero 8
-    * label *label11
    29 op emod *tmp23 -3 *tmp21
    30 assertequals 5 *tmp23 "emod"
    31 # "Function: inline def d(in n)"
-    * label *label12
    32 op pow *tmp26 2 *tmp9
    33 assertequals 16 *tmp26 "pow"
    34 # "Function: inline def d(in n)"
-    * label *label13
    35 op equal *tmp29 5 *tmp2
    36 assertequals true *tmp29 "equal 1"
    37 # "Function: inline def d(in n)"
-    * label *label14
    38 op equal *tmp32 5 *tmp3
    39 assertequals false *tmp32 "equal 2"
    40 # "Function: inline def d(in n)"
    41 op add *tmp33 zero null
-    * label *label15
    42 op equal *tmp35 0 *tmp33
    43 assertequals true *tmp35 "equal null"
    44 # "Function: inline def d(in n)"
-    * label *label16
    45 op notEqual *tmp38 5 *tmp2
    46 assertequals false *tmp38 "notEqual 1"
    47 # "Function: inline def d(in n)"
-    * label *label17
    48 op notEqual *tmp41 5 *tmp3
    49 assertequals true *tmp41 "notEqual 2"
    50 # "Function: inline def d(in n)"
-    * label *label18
    51 op notEqual *tmp44 0 *tmp33
    52 assertequals false *tmp44 "notEqual null"
    53 # "Function: inline def d(in n)"
-    * label *label19
    54 op land *tmp47 1 zero
    55 assertequals false *tmp47 "land 1"
    56 # "Function: inline def d(in n)"
-    * label *label20
    57 op land *tmp50 1 *tmp6
    58 assertequals true *tmp50 "land 2"
    59 # "Function: inline def d(in n)"
    60 op add *tmp51 zero 1
-    * label *label21
    61 op lessThan *tmp53 0 *tmp51
    62 assertequals true *tmp53 "lessThan 1"
    63 # "Function: inline def d(in n)"
-    * label *label22
    64 op lessThan *tmp56 1 zero
    65 assertequals false *tmp56 "lessThan 2"
    66 # "Function: inline def d(in n)"
-    * label *label23
    67 op lessThanEq *tmp59 1 *tmp51
    68 assertequals true *tmp59 "lessThanEq 1"
    69 # "Function: inline def d(in n)"
-    * label *label24
    70 op lessThanEq *tmp62 1 zero
    71 assertequals false *tmp62 "lessThanEq 2"
    72 # "Function: inline def d(in n)"
-    * label *label25
    73 op greaterThan *tmp65 2 *tmp51
    74 assertequals true *tmp65 "greaterThan 1"
    75 # "Function: inline def d(in n)"
-    * label *label26
    76 op greaterThan *tmp68 1 *tmp6
    77 assertequals false *tmp68 "greaterThan 2"
    78 # "Function: inline def d(in n)"
-    * label *label27
    79 op greaterThanEq *tmp71 1 *tmp51
    80 assertequals true *tmp71 "greaterThanEq 1"
    81 # "Function: inline def d(in n)"
-    * label *label28
    82 op greaterThanEq *tmp74 1 *tmp6
    83 assertequals false *tmp74 "greaterThanEq 2"
    84 op strictEqual *tmp75 0 NULL
 
    86 op strictEqual *tmp76 null NULL
    87 assertequals true *tmp76 "strictEqual 2"
    88 # "Function: inline def d(in n)"
-    * label *label29
    89 op shl *tmp79 1 *tmp6
    90 assertequals 4 *tmp79 "shl"
    91 # "Function: inline def d(in n)"
-    * label *label30
    92 op shr *tmp82 9 *tmp6
    93 assertequals 2 *tmp82 "shr"
    94 # "Function: inline def d(in n)"
    95 op add *tmp83 zero 61
-    * label *label31
    96 op ushr *tmp85 -1 *tmp83
    97 assertequals 7 *tmp85 "ushr"
    98 # "Function: inline def d(in n)"
-    * label *label32
    99 op or *tmp88 1 *tmp6
   100 assertequals 3 *tmp88 "or"
   101 # "Function: inline def d(in n)"
-    * label *label33
   102 op and *tmp91 3 *tmp6
   103 assertequals 2 *tmp91 "and"
   104 # "Function: inline def d(in n)"
-    * label *label34
   105 op xor *tmp94 3 *tmp6
   106 assertequals 1 *tmp94 "xor"
   107 # "Function: inline def d(in n)"
-    * label *label35
   108 op not *tmp97 zero
   109 assertequals -1 *tmp97 "not 1"
   110 # "Function: inline def d(in n)"
   111 op add *tmp98 zero 65535
-    * label *label36
   112 op not *tmp100 *tmp98
   113 assertequals -65536 *tmp100 "not 2"
   114 # "Function: inline def d(in n)"
   115 op add *tmp103 zero 0xabcdefabcdef
-    * label *label37
   116 op not *tmp105 *tmp103
   117 assertequals -188900977659376 *tmp105 "not 3"
   118 # "Function: inline def d(in n)"
-    * label *label38
   119 op max *tmp108 2 *tmp9
   120 assertequals 4 *tmp108 "max"
   121 # "Function: inline def d(in n)"
-    * label *label39
   122 op min *tmp111 2 *tmp9
   123 assertequals 2 *tmp111 "min"
   124 # "Function: inline def d(in n)"
   125 op add *tmp112 zero -2
-    * label *label40
   126 op abs *tmp114 *tmp112
   127 assertequals 2 *tmp114 "abs"
   128 # "Function: inline def d(in n)"
-    * label *label41
   129 # "Function: inline def sign(in x)"
   130 op greaterThan *tmp118 *tmp112 0
   131 op lessThan *tmp119 *tmp112 0
   132 op sub *tmp117 *tmp118 *tmp119
-    * label *label42
   133 assertequals -1 *tmp117 "sign(-2)"
   134 # "Function: inline def d(in n)"
-    * label *label43
   135 # "Function: inline def sign(in x)"
   136 op greaterThan *tmp124 *tmp6 0
   137 op lessThan *tmp125 *tmp6 0
   138 op sub *tmp123 *tmp124 *tmp125
-    * label *label44
   139 assertequals 1 *tmp123 "sign(2)"
   140 # "Function: inline def d(in n)"
-    * label *label45
   141 # "Function: inline def sign(in x)"
   142 op greaterThan *tmp130 zero 0
   143 op lessThan *tmp131 zero 0
   144 op sub *tmp129 *tmp130 *tmp131
-    * label *label46
   145 assertequals 0 *tmp129 "sign(0)"
   146 # "Function: inline def d(in n)"
   147 op add *tmp133 zero 2.718281828459045
-    * label *label47
   148 op log *tmp135 *tmp133
   149 assertequals 1 *tmp135 "log"
   150 # "Function: inline def d(in n)"
   151 op add *tmp136 zero 10
-    * label *label48
   152 op log10 *tmp138 *tmp136
   153 assertequals 1 *tmp138 "log10"
   154 # "Function: inline def d(in n)"
-    * label *label49
   155 # "Function: inline def logn(in number, in base)"
   156 op log *tmp143 *tmp6
   157 op div *tmp141 2.772588722239781 *tmp143
-    * label *label50
   158 assertequals 4 *tmp141 "logn"
   159 # "Function: inline def d(in n)"
   160 op add *tmp145 zero 2.5
-    * label *label51
   161 op floor *tmp147 *tmp145
   162 assertequals 2 *tmp147 "floor"
   163 # "Function: inline def d(in n)"
-    * label *label52
   164 op ceil *tmp150 *tmp145
   165 assertequals 3 *tmp150 "ceil"
   166 # "Function: inline def d(in n)"
-    * label *label53
   167 # "Function: inline def round(in x)"
   168 op add *tmp154 zero 3
   169 op floor *tmp153 *tmp154
-    * label *label54
   170 assertequals 3 *tmp153 "round"
   171 # "Function: inline def d(in n)"
   172 op add *tmp156 zero 16
-    * label *label55
   173 op sqrt *tmp158 *tmp156
   174 assertequals 4 *tmp158 "sqrt"
   175 # "Function: inline def d(in n)"
-    * label *label56
   176 op angle *tmp161 1 *tmp51
   177 assertequals 45 *tmp161 "angle"
   178 # "Function: inline def d(in n)"
   179 op add *tmp162 zero 135
-    * label *label57
   180 op angleDiff *tmp164 45 *tmp162
   181 assertequals 90 *tmp164 "angleDiff"
   182 assertequals 5 5 "len"
-    * label *label82
   183 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   184 # "Function: inline def round(in x)"
-    * label *label83
   185 assertequals 1 1 "sin"
-    * label *label84
-    * label *label85
   186 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   187 # "Function: inline def round(in x)"
-    * label *label86
   188 assertequals -1 -1 "cos"
-    * label *label87
-    * label *label88
   189 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   190 # "Function: inline def round(in x)"
-    * label *label89
   191 assertequals 1 1 "tan"
-    * label *label90
-    * label *label91
   192 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   193 # "Function: inline def round(in x)"
-    * label *label92
   194 assertequals 90 90 "asin"
-    * label *label93
-    * label *label94
   195 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   196 # "Function: inline def round(in x)"
-    * label *label95
   197 assertequals 0 0 "acos"
-    * label *label96
-    * label *label97
   198 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   199 # "Function: inline def round(in x)"
-    * label *label98
   200 assertequals 45 45 "atan"
-    * label *label99
   201 # "Function: inline def d(in n)"
-    * label *label58
   202 op sub *tmp167 -8 zero
   203 assertequals -8 *tmp167 "unary minus"
   204 # "Function: inline def d(in n)"
-    * label *label59
   205 op equal *tmp170 zero false
   206 assertequals 1 *tmp170 "boolean negation 1"
   207 # "Function: inline def d(in n)"
-    * label *label60
   208 op equal *tmp173 *tmp51 false
   209 assertequals 0 *tmp173 "boolean negation 2"
   210 # "Function: inline def d(in n)"
-    * label *label61
   211 op equal *tmp176 *tmp6 false
   212 assertequals 0 *tmp176 "boolean negation 3"
   213 # "Function: inline def d(in n)"
-    * label *label62
   214 assertequals 16 *tmp26 "**="
   215 # "Function: inline def d(in n)"
-    * label *label63
   216 op mul :a 2 *tmp9
   217 assertequals 8 :a "*="
   218 # "Function: inline def d(in n)"
-    * label *label64
   219 assertequals 1.5 *tmp11 "/="
   220 # "Function: inline def d(in n)"
-    * label *label65
   221 assertequals 1 *tmp17 "\="
   222 # "Function: inline def d(in n)"
-    * label *label66
   223 assertequals 2 *tmp20 "%="
   224 # "Function: inline def d(in n)"
-    * label *label67
   225 assertequals 6 *tmp3 "+="
   226 # "Function: inline def d(in n)"
-    * label *label68
   227 op sub :a 2 zero
   228 assertequals 2 :a "-="
   229 # "Function: inline def d(in n)"
-    * label *label69
   230 assertequals 4 *tmp79 "<<="
   231 # "Function: inline def d(in n)"
-    * label *label70
   232 assertequals 2 *tmp82 ">>="
   233 # "Function: inline def d(in n)"
-    * label *label71
   234 assertequals 3 *tmp88 "|="
   235 # "Function: inline def d(in n)"
-    * label *label72
   236 assertequals 2 *tmp91 "&="
   237 # "Function: inline def d(in n)"
-    * label *label73
   238 assertequals 1 *tmp94 "^="
   239 # "Function: inline def d(in n)"
-    * label *label74
   240 assertequals false *tmp47 "&&="
   241 # "Function: inline def d(in n)"
-    * label *label75
   242 assertequals true *tmp50 "&&="
   243 # "Function: inline def d(in n)"
-    * label *label76
   244 op or *tmp207 0 *tmp6
   245 op notEqual :a *tmp207 false
   246 assertequals true :a "||="
 
   251 jump *label79 equal zero false
   252 sensor *tmp210 null @id
   253 label *label79
-    * label *label77
   254 assertequals 17 *tmp210 "Logic ID"
   255 stop
   256 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
   253 label *label79
   254 assertequals 17 *tmp210 "Logic ID"
   255 stop
-    * end

Final code before resolving virtual instructions:

set NULL null
set zero 0
# "Function: inline def d(in n)"
op add *tmp2 zero 5
assertequals 5 *tmp2 "add"
# "Function: inline def d(in n)"
op add *tmp3 zero 6
op sub *tmp5 1 zero
assertequals 1 *tmp5 "sub"
# "Function: inline def d(in n)"
op add *tmp6 zero 2
op mul *tmp8 3 *tmp6
assertequals 6 *tmp8 "mul"
# "Function: inline def d(in n)"
op add *tmp9 zero 4
op div *tmp11 6 *tmp9
assertequals 1.5 *tmp11 "div"
# "Function: inline def d(in n)"
op add *tmp12 zero 100000
op div *tmp14 1 *tmp12
assertequals 0.00001 *tmp14 "div exp"
# "Function: inline def d(in n)"
op idiv *tmp17 6 *tmp9
assertequals 1 *tmp17 "idiv"
# "Function: inline def d(in n)"
op mod *tmp20 6 *tmp9
assertequals 2 *tmp20 "mod"
# "Function: inline def d(in n)"
op add *tmp21 zero 8
op emod *tmp23 -3 *tmp21
assertequals 5 *tmp23 "emod"
# "Function: inline def d(in n)"
op pow *tmp26 2 *tmp9
assertequals 16 *tmp26 "pow"
# "Function: inline def d(in n)"
op equal *tmp29 5 *tmp2
assertequals true *tmp29 "equal 1"
# "Function: inline def d(in n)"
op equal *tmp32 5 *tmp3
assertequals false *tmp32 "equal 2"
# "Function: inline def d(in n)"
op add *tmp33 zero null
op equal *tmp35 0 *tmp33
assertequals true *tmp35 "equal null"
# "Function: inline def d(in n)"
op notEqual *tmp38 5 *tmp2
assertequals false *tmp38 "notEqual 1"
# "Function: inline def d(in n)"
op notEqual *tmp41 5 *tmp3
assertequals true *tmp41 "notEqual 2"
# "Function: inline def d(in n)"
op notEqual *tmp44 0 *tmp33
assertequals false *tmp44 "notEqual null"
# "Function: inline def d(in n)"
op land *tmp47 1 zero
assertequals false *tmp47 "land 1"
# "Function: inline def d(in n)"
op land *tmp50 1 *tmp6
assertequals true *tmp50 "land 2"
# "Function: inline def d(in n)"
op add *tmp51 zero 1
op lessThan *tmp53 0 *tmp51
assertequals true *tmp53 "lessThan 1"
# "Function: inline def d(in n)"
op lessThan *tmp56 1 zero
assertequals false *tmp56 "lessThan 2"
# "Function: inline def d(in n)"
op lessThanEq *tmp59 1 *tmp51
assertequals true *tmp59 "lessThanEq 1"
# "Function: inline def d(in n)"
op lessThanEq *tmp62 1 zero
assertequals false *tmp62 "lessThanEq 2"
# "Function: inline def d(in n)"
op greaterThan *tmp65 2 *tmp51
assertequals true *tmp65 "greaterThan 1"
# "Function: inline def d(in n)"
op greaterThan *tmp68 1 *tmp6
assertequals false *tmp68 "greaterThan 2"
# "Function: inline def d(in n)"
op greaterThanEq *tmp71 1 *tmp51
assertequals true *tmp71 "greaterThanEq 1"
# "Function: inline def d(in n)"
op greaterThanEq *tmp74 1 *tmp6
assertequals false *tmp74 "greaterThanEq 2"
op strictEqual *tmp75 0 NULL
assertequals false *tmp75 "strictEqual 1"
op strictEqual *tmp76 null NULL
assertequals true *tmp76 "strictEqual 2"
# "Function: inline def d(in n)"
op shl *tmp79 1 *tmp6
assertequals 4 *tmp79 "shl"
# "Function: inline def d(in n)"
op shr *tmp82 9 *tmp6
assertequals 2 *tmp82 "shr"
# "Function: inline def d(in n)"
op add *tmp83 zero 61
op ushr *tmp85 -1 *tmp83
assertequals 7 *tmp85 "ushr"
# "Function: inline def d(in n)"
op or *tmp88 1 *tmp6
assertequals 3 *tmp88 "or"
# "Function: inline def d(in n)"
op and *tmp91 3 *tmp6
assertequals 2 *tmp91 "and"
# "Function: inline def d(in n)"
op xor *tmp94 3 *tmp6
assertequals 1 *tmp94 "xor"
# "Function: inline def d(in n)"
op not *tmp97 zero
assertequals -1 *tmp97 "not 1"
# "Function: inline def d(in n)"
op add *tmp98 zero 65535
op not *tmp100 *tmp98
assertequals -65536 *tmp100 "not 2"
# "Function: inline def d(in n)"
op add *tmp103 zero 0xabcdefabcdef
op not *tmp105 *tmp103
assertequals -188900977659376 *tmp105 "not 3"
# "Function: inline def d(in n)"
op max *tmp108 2 *tmp9
assertequals 4 *tmp108 "max"
# "Function: inline def d(in n)"
op min *tmp111 2 *tmp9
assertequals 2 *tmp111 "min"
# "Function: inline def d(in n)"
op add *tmp112 zero -2
op abs *tmp114 *tmp112
assertequals 2 *tmp114 "abs"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp118 *tmp112 0
op lessThan *tmp119 *tmp112 0
op sub *tmp117 *tmp118 *tmp119
assertequals -1 *tmp117 "sign(-2)"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp124 *tmp6 0
op lessThan *tmp125 *tmp6 0
op sub *tmp123 *tmp124 *tmp125
assertequals 1 *tmp123 "sign(2)"
# "Function: inline def d(in n)"
# "Function: inline def sign(in x)"
op greaterThan *tmp130 zero 0
op lessThan *tmp131 zero 0
op sub *tmp129 *tmp130 *tmp131
assertequals 0 *tmp129 "sign(0)"
# "Function: inline def d(in n)"
op add *tmp133 zero 2.718281828459045
op log *tmp135 *tmp133
assertequals 1 *tmp135 "log"
# "Function: inline def d(in n)"
op add *tmp136 zero 10
op log10 *tmp138 *tmp136
assertequals 1 *tmp138 "log10"
# "Function: inline def d(in n)"
# "Function: inline def logn(in number, in base)"
op log *tmp143 *tmp6
op div *tmp141 2.772588722239781 *tmp143
assertequals 4 *tmp141 "logn"
# "Function: inline def d(in n)"
op add *tmp145 zero 2.5
op floor *tmp147 *tmp145
assertequals 2 *tmp147 "floor"
# "Function: inline def d(in n)"
op ceil *tmp150 *tmp145
assertequals 3 *tmp150 "ceil"
# "Function: inline def d(in n)"
# "Function: inline def round(in x)"
op add *tmp154 zero 3
op floor *tmp153 *tmp154
assertequals 3 *tmp153 "round"
# "Function: inline def d(in n)"
op add *tmp156 zero 16
op sqrt *tmp158 *tmp156
assertequals 4 *tmp158 "sqrt"
# "Function: inline def d(in n)"
op angle *tmp161 1 *tmp51
assertequals 45 *tmp161 "angle"
# "Function: inline def d(in n)"
op add *tmp162 zero 135
op angleDiff *tmp164 45 *tmp162
assertequals 90 *tmp164 "angleDiff"
assertequals 5 5 "len"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "sin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals -1 -1 "cos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "tan"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 90 90 "asin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 0 0 "acos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 45 45 "atan"
# "Function: inline def d(in n)"
op sub *tmp167 -8 zero
assertequals -8 *tmp167 "unary minus"
# "Function: inline def d(in n)"
op equal *tmp170 zero false
assertequals 1 *tmp170 "boolean negation 1"
# "Function: inline def d(in n)"
op equal *tmp173 *tmp51 false
assertequals 0 *tmp173 "boolean negation 2"
# "Function: inline def d(in n)"
op equal *tmp176 *tmp6 false
assertequals 0 *tmp176 "boolean negation 3"
# "Function: inline def d(in n)"
assertequals 16 *tmp26 "**="
# "Function: inline def d(in n)"
op mul :a 2 *tmp9
assertequals 8 :a "*="
# "Function: inline def d(in n)"
assertequals 1.5 *tmp11 "/="
# "Function: inline def d(in n)"
assertequals 1 *tmp17 "\="
# "Function: inline def d(in n)"
assertequals 2 *tmp20 "%="
# "Function: inline def d(in n)"
assertequals 6 *tmp3 "+="
# "Function: inline def d(in n)"
op sub :a 2 zero
assertequals 2 :a "-="
# "Function: inline def d(in n)"
assertequals 4 *tmp79 "<<="
# "Function: inline def d(in n)"
assertequals 2 *tmp82 ">>="
# "Function: inline def d(in n)"
assertequals 3 *tmp88 "|="
# "Function: inline def d(in n)"
assertequals 2 *tmp91 "&="
# "Function: inline def d(in n)"
assertequals 1 *tmp94 "^="
# "Function: inline def d(in n)"
assertequals false *tmp47 "&&="
# "Function: inline def d(in n)"
assertequals true *tmp50 "&&="
# "Function: inline def d(in n)"
op or *tmp207 0 *tmp6
op notEqual :a *tmp207 false
assertequals true :a "||="
assertequals %ff0000ff %ff0000 "short color literals"
assertequals %ffffffff %[white] "named color literals"
# "Function: inline def o(in n)"
set *tmp210 17
jump *label79 equal zero false
sensor *tmp210 null @id
label *label79
assertequals 17 *tmp210 "Logic ID"
stop
