   397 instructions before optimizations.
    65 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
     2 instructions modified by Expression Optimization (4 iterations).
     1 instructions eliminated by If Expression Optimization (2 passes, 4 iterations).
   189 instructions eliminated by Data Flow Optimization (3 passes, 14 iterations).
    11 instructions added by Function Inlining (5 iterations).
     6 function calls inlined by Function Inlining.
   151 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 815):
  * Inline function 'assertEqualsRound' defined at line 3:1      cost    19, benefit       27.0, efficiency      1.421 (-31 instructions)
    Inline function call at line 83:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 84:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 85:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 87:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 88:1                            cost     4, benefit        4.5, efficiency      1.125
    Inline function call at line 89:1                            cost     4, benefit        4.5, efficiency      1.125

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-65 instructions):
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp1 zero :d:n
-    * set *tmp0 *tmp1
+    4 op add *tmp0 zero :d:n
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp4 zero :d.1:n
-    * set *tmp3 *tmp4
+   10 op add *tmp3 zero :d.1:n
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp7 zero :d.2:n
-    * set *tmp6 *tmp7
+   16 op add *tmp6 zero :d.2:n
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp10 zero :d.3:n
-    * set *tmp9 *tmp10
+   22 op add *tmp9 zero :d.3:n
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp13 zero :d.4:n
-    * set *tmp12 *tmp13
+   28 op add *tmp12 zero :d.4:n
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp16 zero :d.5:n
-    * set *tmp15 *tmp16
+   34 op add *tmp15 zero :d.5:n
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp19 zero :d.6:n
-    * set *tmp18 *tmp19
+   40 op add *tmp18 zero :d.6:n
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 4
-    * op add *tmp22 zero :d.7:n
-    * set *tmp21 *tmp22
+   46 op add *tmp21 zero :d.7:n
    47 label *label11
    48 op pow *tmp23 2 *tmp21
    49 assertequals 16 *tmp23 "pow"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 5
-    * op add *tmp25 zero :d.8:n
-    * set *tmp24 *tmp25
+   52 op add *tmp24 zero :d.8:n
    53 label *label12
    54 op equal *tmp26 5 *tmp24
    55 assertequals true *tmp26 "equal 1"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 6
-    * op add *tmp28 zero :d.9:n
-    * set *tmp27 *tmp28
+   58 op add *tmp27 zero :d.9:n
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals false *tmp29 "equal 2"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n null
-    * op add *tmp31 zero :d.10:n
-    * set *tmp30 *tmp31
+   64 op add *tmp30 zero :d.10:n
    65 label *label14
    66 op equal *tmp32 0 *tmp30
    67 assertequals true *tmp32 "equal null"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n 5
-    * op add *tmp34 zero :d.11:n
-    * set *tmp33 *tmp34
+   70 op add *tmp33 zero :d.11:n
    71 label *label15
    72 op notEqual *tmp35 5 *tmp33
    73 assertequals false *tmp35 "notEqual 1"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 6
-    * op add *tmp37 zero :d.12:n
-    * set *tmp36 *tmp37
+   76 op add *tmp36 zero :d.12:n
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals true *tmp38 "notEqual 2"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n null
-    * op add *tmp40 zero :d.13:n
-    * set *tmp39 *tmp40
+   82 op add *tmp39 zero :d.13:n
    83 label *label17
    84 op notEqual *tmp41 0 *tmp39
    85 assertequals false *tmp41 "notEqual null"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n 0
-    * op add *tmp43 zero :d.14:n
-    * set *tmp42 *tmp43
+   88 op add *tmp42 zero :d.14:n
    89 label *label18
    90 op land *tmp44 1 *tmp42
    91 assertequals false *tmp44 "land 1"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 2
-    * op add *tmp46 zero :d.15:n
-    * set *tmp45 *tmp46
+   94 op add *tmp45 zero :d.15:n
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals true *tmp47 "land 2"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 1
-    * op add *tmp49 zero :d.16:n
-    * set *tmp48 *tmp49
+  100 op add *tmp48 zero :d.16:n
   101 label *label20
   102 op lessThan *tmp50 0 *tmp48
   103 assertequals true *tmp50 "lessThan 1"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 0
-    * op add *tmp52 zero :d.17:n
-    * set *tmp51 *tmp52
+  106 op add *tmp51 zero :d.17:n
   107 label *label21
   108 op lessThan *tmp53 1 *tmp51
   109 assertequals false *tmp53 "lessThan 2"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 1
-    * op add *tmp55 zero :d.18:n
-    * set *tmp54 *tmp55
+  112 op add *tmp54 zero :d.18:n
   113 label *label22
   114 op lessThanEq *tmp56 1 *tmp54
   115 assertequals true *tmp56 "lessThanEq 1"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 0
-    * op add *tmp58 zero :d.19:n
-    * set *tmp57 *tmp58
+  118 op add *tmp57 zero :d.19:n
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals false *tmp59 "lessThanEq 2"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 1
-    * op add *tmp61 zero :d.20:n
-    * set *tmp60 *tmp61
+  124 op add *tmp60 zero :d.20:n
   125 label *label24
   126 op greaterThan *tmp62 2 *tmp60
   127 assertequals true *tmp62 "greaterThan 1"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 2
-    * op add *tmp64 zero :d.21:n
-    * set *tmp63 *tmp64
+  130 op add *tmp63 zero :d.21:n
   131 label *label25
   132 op greaterThan *tmp65 1 *tmp63
   133 assertequals false *tmp65 "greaterThan 2"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 1
-    * op add *tmp67 zero :d.22:n
-    * set *tmp66 *tmp67
+  136 op add *tmp66 zero :d.22:n
   137 label *label26
   138 op greaterThanEq *tmp68 1 *tmp66
   139 assertequals true *tmp68 "greaterThanEq 1"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 2
-    * op add *tmp70 zero :d.23:n
-    * set *tmp69 *tmp70
+  142 op add *tmp69 zero :d.23:n
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals false *tmp71 "greaterThanEq 2"
 
   149 assertequals true *tmp73 "strictEqual 2"
   150 # "Function: inline def d(in n)"
   151 set :d.24:n 2
-    * op add *tmp75 zero :d.24:n
-    * set *tmp74 *tmp75
+  152 op add *tmp74 zero :d.24:n
   153 label *label28
   154 op shl *tmp76 1 *tmp74
   155 assertequals 4 *tmp76 "shl"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp78 zero :d.25:n
-    * set *tmp77 *tmp78
+  158 op add *tmp77 zero :d.25:n
   159 label *label29
   160 op shr *tmp79 9 *tmp77
   161 assertequals 2 *tmp79 "shr"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp81 zero :d.26:n
-    * set *tmp80 *tmp81
+  164 op add *tmp80 zero :d.26:n
   165 label *label30
   166 op or *tmp82 1 *tmp80
   167 assertequals 3 *tmp82 "or"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 2
-    * op add *tmp84 zero :d.27:n
-    * set *tmp83 *tmp84
+  170 op add *tmp83 zero :d.27:n
   171 label *label31
   172 op and *tmp85 3 *tmp83
   173 assertequals 2 *tmp85 "and"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp87 zero :d.28:n
-    * set *tmp86 *tmp87
+  176 op add *tmp86 zero :d.28:n
   177 label *label32
   178 op xor *tmp88 3 *tmp86
   179 assertequals 1 *tmp88 "xor"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 0
-    * op add *tmp90 zero :d.29:n
-    * set *tmp89 *tmp90
+  182 op add *tmp89 zero :d.29:n
   183 label *label33
   184 op not *tmp91 *tmp89
   185 assertequals -1 *tmp91 "not 1"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 65535
-    * op add *tmp93 zero :d.30:n
-    * set *tmp92 *tmp93
+  188 op add *tmp92 zero :d.30:n
   189 label *label34
   190 op not *tmp94 *tmp92
   191 assertequals -65536 *tmp94 "not 2"
 
   194 op sub *tmp96 0 *tmp95
   195 # "Function: inline def d(in n)"
   196 set :d.31:n :a
-    * op add *tmp98 zero :d.31:n
-    * set *tmp97 *tmp98
+  197 op add *tmp97 zero :d.31:n
   198 label *label35
   199 op not *tmp99 *tmp97
   200 assertequals *tmp96 *tmp99 "not 3"
   201 # "Function: inline def d(in n)"
   202 set :d.32:n 4
-    * op add *tmp101 zero :d.32:n
-    * set *tmp100 *tmp101
+  203 op add *tmp100 zero :d.32:n
   204 label *label36
   205 op max *tmp102 2 *tmp100
   206 assertequals 4 *tmp102 "max"
   207 # "Function: inline def d(in n)"
   208 set :d.33:n 4
-    * op add *tmp104 zero :d.33:n
-    * set *tmp103 *tmp104
+  209 op add *tmp103 zero :d.33:n
   210 label *label37
   211 op min *tmp105 2 *tmp103
   212 assertequals 2 *tmp105 "min"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n -2
-    * op add *tmp107 zero :d.34:n
-    * set *tmp106 *tmp107
+  215 op add *tmp106 zero :d.34:n
   216 label *label38
   217 op abs *tmp108 *tmp106
   218 assertequals 2 *tmp108 "abs"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n -2
-    * op add *tmp110 zero :d.35:n
-    * set *tmp109 *tmp110
+  221 op add *tmp109 zero :d.35:n
   222 label *label39
   223 op sign *tmp111 *tmp109
   224 assertequals -1 *tmp111 "sign(-2)"
   225 # "Function: inline def d(in n)"
   226 set :d.36:n 2
-    * op add *tmp113 zero :d.36:n
-    * set *tmp112 *tmp113
+  227 op add *tmp112 zero :d.36:n
   228 label *label40
   229 op sign *tmp114 *tmp112
   230 assertequals 1 *tmp114 "sign(2)"
   231 # "Function: inline def d(in n)"
   232 set :d.37:n 0
-    * op add *tmp116 zero :d.37:n
-    * set *tmp115 *tmp116
+  233 op add *tmp115 zero :d.37:n
   234 label *label41
   235 op sign *tmp117 *tmp115
   236 assertequals 0 *tmp117 "sign(0)"
   237 # "Function: inline def d(in n)"
   238 set :d.38:n 2.718281828459045
-    * op add *tmp119 zero :d.38:n
-    * set *tmp118 *tmp119
+  239 op add *tmp118 zero :d.38:n
   240 label *label42
   241 op log *tmp120 *tmp118
   242 assertequals 1 *tmp120 "log"
   243 # "Function: inline def d(in n)"
   244 set :d.39:n 10
-    * op add *tmp122 zero :d.39:n
-    * set *tmp121 *tmp122
+  245 op add *tmp121 zero :d.39:n
   246 label *label43
   247 op log10 *tmp123 *tmp121
   248 assertequals 1 *tmp123 "log10"
   249 # "Function: inline def d(in n)"
   250 set :d.40:n 2.5
-    * op add *tmp125 zero :d.40:n
-    * set *tmp124 *tmp125
+  251 op add *tmp124 zero :d.40:n
   252 label *label44
   253 op floor *tmp126 *tmp124
   254 assertequals 2 *tmp126 "floor"
   255 # "Function: inline def d(in n)"
   256 set :d.41:n 2.5
-    * op add *tmp128 zero :d.41:n
-    * set *tmp127 *tmp128
+  257 op add *tmp127 zero :d.41:n
   258 label *label45
   259 op ceil *tmp129 *tmp127
   260 assertequals 3 *tmp129 "ceil"
   261 # "Function: inline def d(in n)"
   262 set :d.42:n 16
-    * op add *tmp131 zero :d.42:n
-    * set *tmp130 *tmp131
+  263 op add *tmp130 zero :d.42:n
   264 label *label46
   265 op sqrt *tmp132 *tmp130
   266 assertequals 4 *tmp132 "sqrt"
   267 # "Function: inline def d(in n)"
   268 set :d.43:n 1
-    * op add *tmp134 zero :d.43:n
-    * set *tmp133 *tmp134
+  269 op add *tmp133 zero :d.43:n
   270 label *label47
   271 op angle *tmp135 1 *tmp133
   272 assertequals 45 *tmp135 "angle"
   273 # "Function: inline def d(in n)"
   274 set :d.44:n 135
-    * op add *tmp137 zero :d.44:n
-    * set *tmp136 *tmp137
+  275 op add *tmp136 zero :d.44:n
   276 label *label48
   277 op angleDiff *tmp138 45 *tmp136
   278 assertequals 90 *tmp138 "angleDiff"
 
   303 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   304 # "Function: inline def d(in n)"
   305 set :d.45:n 8
-    * op add *tmp140 zero :d.45:n
-    * set *tmp139 *tmp140
+  306 op add *tmp139 zero :d.45:n
   307 label *label49
   308 op sub *tmp141 0 *tmp139
   309 assertequals -8 *tmp141 "unary minus"
   310 # "Function: inline def d(in n)"
   311 set :d.46:n 0
-    * op add *tmp143 zero :d.46:n
-    * set *tmp142 *tmp143
+  312 op add *tmp142 zero :d.46:n
   313 label *label50
   314 op equal *tmp144 *tmp142 false
   315 assertequals 1 *tmp144 "boolean negation 1"
   316 # "Function: inline def d(in n)"
   317 set :d.47:n 1
-    * op add *tmp146 zero :d.47:n
-    * set *tmp145 *tmp146
+  318 op add *tmp145 zero :d.47:n
   319 label *label51
   320 op equal *tmp147 *tmp145 false
   321 assertequals 0 *tmp147 "boolean negation 2"
   322 # "Function: inline def d(in n)"
   323 set :d.48:n 2
-    * op add *tmp149 zero :d.48:n
-    * set *tmp148 *tmp149
+  324 op add *tmp148 zero :d.48:n
   325 label *label52
   326 op equal *tmp150 *tmp148 false
   327 assertequals 0 *tmp150 "boolean negation 3"
   328 set :a 2
   329 # "Function: inline def d(in n)"
   330 set :d.49:n 4
-    * op add *tmp152 zero :d.49:n
-    * set *tmp151 *tmp152
+  331 op add *tmp151 zero :d.49:n
   332 label *label53
   333 op pow :a :a *tmp151
   334 assertequals 16 :a "**="
   335 set :a 2
   336 # "Function: inline def d(in n)"
   337 set :d.50:n 4
-    * op add *tmp154 zero :d.50:n
-    * set *tmp153 *tmp154
+  338 op add *tmp153 zero :d.50:n
   339 label *label54
   340 op mul :a :a *tmp153
   341 assertequals 8 :a "*="
   342 set :a 6
   343 # "Function: inline def d(in n)"
   344 set :d.51:n 4
-    * op add *tmp156 zero :d.51:n
-    * set *tmp155 *tmp156
+  345 op add *tmp155 zero :d.51:n
   346 label *label55
   347 op div :a :a *tmp155
   348 assertequals 1.5 :a "/="
   349 set :a 6
   350 # "Function: inline def d(in n)"
   351 set :d.52:n 4
-    * op add *tmp158 zero :d.52:n
-    * set *tmp157 *tmp158
+  352 op add *tmp157 zero :d.52:n
   353 label *label56
   354 op idiv :a :a *tmp157
   355 assertequals 1 :a "\="
   356 set :a 6
   357 # "Function: inline def d(in n)"
   358 set :d.53:n 4
-    * op add *tmp160 zero :d.53:n
-    * set *tmp159 *tmp160
+  359 op add *tmp159 zero :d.53:n
   360 label *label57
   361 op mod :a :a *tmp159
   362 assertequals 2 :a "%="
   363 set :a 4
   364 # "Function: inline def d(in n)"
   365 set :d.54:n 2
-    * op add *tmp162 zero :d.54:n
-    * set *tmp161 *tmp162
+  366 op add *tmp161 zero :d.54:n
   367 label *label58
   368 op add :a :a *tmp161
   369 assertequals 6 :a "+="
   370 set :a 4
   371 # "Function: inline def d(in n)"
   372 set :d.55:n 2
-    * op add *tmp164 zero :d.55:n
-    * set *tmp163 *tmp164
+  373 op add *tmp163 zero :d.55:n
   374 label *label59
   375 op sub :a :a *tmp163
   376 assertequals 2 :a "-="
   377 set :a 1
   378 # "Function: inline def d(in n)"
   379 set :d.56:n 2
-    * op add *tmp166 zero :d.56:n
-    * set *tmp165 *tmp166
+  380 op add *tmp165 zero :d.56:n
   381 label *label60
   382 op shl :a :a *tmp165
   383 assertequals 4 :a "<<="
   384 set :a 9
   385 # "Function: inline def d(in n)"
   386 set :d.57:n 2
-    * op add *tmp168 zero :d.57:n
-    * set *tmp167 *tmp168
+  387 op add *tmp167 zero :d.57:n
   388 label *label61
   389 op shr :a :a *tmp167
   390 assertequals 2 :a ">>="
   391 set :a 1
   392 # "Function: inline def d(in n)"
   393 set :d.58:n 2
-    * op add *tmp170 zero :d.58:n
-    * set *tmp169 *tmp170
+  394 op add *tmp169 zero :d.58:n
   395 label *label62
   396 op or :a :a *tmp169
   397 assertequals 3 :a "|="
   398 set :a 3
   399 # "Function: inline def d(in n)"
   400 set :d.59:n 2
-    * op add *tmp172 zero :d.59:n
-    * set *tmp171 *tmp172
+  401 op add *tmp171 zero :d.59:n
   402 label *label63
   403 op and :a :a *tmp171
   404 assertequals 2 :a "&="
   405 set :a 3
   406 # "Function: inline def d(in n)"
   407 set :d.60:n 2
-    * op add *tmp174 zero :d.60:n
-    * set *tmp173 *tmp174
+  408 op add *tmp173 zero :d.60:n
   409 label *label64
   410 op xor :a :a *tmp173
   411 assertequals 1 :a "^="
   412 set :a 1
   413 # "Function: inline def d(in n)"
   414 set :d.61:n 0
-    * op add *tmp176 zero :d.61:n
-    * set *tmp175 *tmp176
+  415 op add *tmp175 zero :d.61:n
   416 label *label65
   417 op land :a :a *tmp175
   418 assertequals false :a "&&="
   419 set :a 1
   420 # "Function: inline def d(in n)"
   421 set :d.62:n 2
-    * op add *tmp178 zero :d.62:n
-    * set *tmp177 *tmp178
+  422 op add *tmp177 zero :d.62:n
   423 label *label66
   424 op land :a :a *tmp177
   425 assertequals true :a "&&="
   426 set :a 0
   427 # "Function: inline def d(in n)"
   428 set :d.63:n 2
-    * op add *tmp180 zero :d.63:n
-    * set *tmp179 *tmp180
+  429 op add *tmp179 zero :d.63:n
   430 label *label67
   431 op or *tmp181 :a *tmp179
   432 op notEqual :a *tmp181 false
 
   453 # "Function: inline def round(in x)"
   454 set :round:x *tmp185
   455 op add *tmp187 :round:x 0.5
-    * op floor *tmp188 *tmp187
-    * set *tmp186 *tmp188
+  456 op floor *tmp186 *tmp187
   457 label *label72
   458 op div *tmp189 *tmp186 100000000
   459 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     1 set zero 0
     2 # "Function: inline def d(in n)"
     3 set :d:n 3
-    * op add *tmp0 zero :d:n
+    4 op add *tmp0 zero 3
     5 label *label4
     6 op add *tmp2 2 *tmp0
     7 assertequals 5 *tmp2 "add"
     8 # "Function: inline def d(in n)"
     9 set :d.1:n 6
-    * op add *tmp3 zero :d.1:n
+   10 op add *tmp3 zero 6
    11 label *label5
    12 op sub *tmp5 7 *tmp3
    13 assertequals 1 *tmp5 "sub"
    14 # "Function: inline def d(in n)"
    15 set :d.2:n 2
-    * op add *tmp6 zero :d.2:n
+   16 op add *tmp6 zero 2
    17 label *label6
    18 op mul *tmp8 3 *tmp6
    19 assertequals 6 *tmp8 "mul"
    20 # "Function: inline def d(in n)"
    21 set :d.3:n 4
-    * op add *tmp9 zero :d.3:n
+   22 op add *tmp9 zero 4
    23 label *label7
    24 op div *tmp11 6 *tmp9
    25 assertequals 1.5 *tmp11 "div"
    26 # "Function: inline def d(in n)"
    27 set :d.4:n 100000
-    * op add *tmp12 zero :d.4:n
+   28 op add *tmp12 zero 100000
    29 label *label8
    30 op div *tmp14 1 *tmp12
    31 assertequals 0.00001 *tmp14 "div exp"
    32 # "Function: inline def d(in n)"
    33 set :d.5:n 4
-    * op add *tmp15 zero :d.5:n
+   34 op add *tmp15 zero 4
    35 label *label9
    36 op idiv *tmp17 6 *tmp15
    37 assertequals 1 *tmp17 "idiv"
    38 # "Function: inline def d(in n)"
    39 set :d.6:n 4
-    * op add *tmp18 zero :d.6:n
+   40 op add *tmp18 zero 4
    41 label *label10
    42 op mod *tmp20 6 *tmp18
    43 assertequals 2 *tmp20 "mod"
    44 # "Function: inline def d(in n)"
    45 set :d.7:n 4
-    * op add *tmp21 zero :d.7:n
+   46 op add *tmp21 zero 4
    47 label *label11
    48 op pow *tmp23 2 *tmp21
    49 assertequals 16 *tmp23 "pow"
    50 # "Function: inline def d(in n)"
    51 set :d.8:n 5
-    * op add *tmp24 zero :d.8:n
+   52 op add *tmp24 zero 5
    53 label *label12
    54 op equal *tmp26 5 *tmp24
    55 assertequals true *tmp26 "equal 1"
    56 # "Function: inline def d(in n)"
    57 set :d.9:n 6
-    * op add *tmp27 zero :d.9:n
+   58 op add *tmp27 zero 6
    59 label *label13
    60 op equal *tmp29 5 *tmp27
    61 assertequals false *tmp29 "equal 2"
    62 # "Function: inline def d(in n)"
    63 set :d.10:n null
-    * op add *tmp30 zero :d.10:n
+   64 op add *tmp30 zero null
    65 label *label14
    66 op equal *tmp32 0 *tmp30
    67 assertequals true *tmp32 "equal null"
    68 # "Function: inline def d(in n)"
    69 set :d.11:n 5
-    * op add *tmp33 zero :d.11:n
+   70 op add *tmp33 zero 5
    71 label *label15
    72 op notEqual *tmp35 5 *tmp33
    73 assertequals false *tmp35 "notEqual 1"
    74 # "Function: inline def d(in n)"
    75 set :d.12:n 6
-    * op add *tmp36 zero :d.12:n
+   76 op add *tmp36 zero 6
    77 label *label16
    78 op notEqual *tmp38 5 *tmp36
    79 assertequals true *tmp38 "notEqual 2"
    80 # "Function: inline def d(in n)"
    81 set :d.13:n null
-    * op add *tmp39 zero :d.13:n
+   82 op add *tmp39 zero null
    83 label *label17
    84 op notEqual *tmp41 0 *tmp39
    85 assertequals false *tmp41 "notEqual null"
    86 # "Function: inline def d(in n)"
    87 set :d.14:n 0
-    * op add *tmp42 zero :d.14:n
+   88 op add *tmp42 zero 0
    89 label *label18
    90 op land *tmp44 1 *tmp42
    91 assertequals false *tmp44 "land 1"
    92 # "Function: inline def d(in n)"
    93 set :d.15:n 2
-    * op add *tmp45 zero :d.15:n
+   94 op add *tmp45 zero 2
    95 label *label19
    96 op land *tmp47 1 *tmp45
    97 assertequals true *tmp47 "land 2"
    98 # "Function: inline def d(in n)"
    99 set :d.16:n 1
-    * op add *tmp48 zero :d.16:n
+  100 op add *tmp48 zero 1
   101 label *label20
   102 op lessThan *tmp50 0 *tmp48
   103 assertequals true *tmp50 "lessThan 1"
   104 # "Function: inline def d(in n)"
   105 set :d.17:n 0
-    * op add *tmp51 zero :d.17:n
+  106 op add *tmp51 zero 0
   107 label *label21
   108 op lessThan *tmp53 1 *tmp51
   109 assertequals false *tmp53 "lessThan 2"
   110 # "Function: inline def d(in n)"
   111 set :d.18:n 1
-    * op add *tmp54 zero :d.18:n
+  112 op add *tmp54 zero 1
   113 label *label22
   114 op lessThanEq *tmp56 1 *tmp54
   115 assertequals true *tmp56 "lessThanEq 1"
   116 # "Function: inline def d(in n)"
   117 set :d.19:n 0
-    * op add *tmp57 zero :d.19:n
+  118 op add *tmp57 zero 0
   119 label *label23
   120 op lessThanEq *tmp59 1 *tmp57
   121 assertequals false *tmp59 "lessThanEq 2"
   122 # "Function: inline def d(in n)"
   123 set :d.20:n 1
-    * op add *tmp60 zero :d.20:n
+  124 op add *tmp60 zero 1
   125 label *label24
   126 op greaterThan *tmp62 2 *tmp60
   127 assertequals true *tmp62 "greaterThan 1"
   128 # "Function: inline def d(in n)"
   129 set :d.21:n 2
-    * op add *tmp63 zero :d.21:n
+  130 op add *tmp63 zero 2
   131 label *label25
   132 op greaterThan *tmp65 1 *tmp63
   133 assertequals false *tmp65 "greaterThan 2"
   134 # "Function: inline def d(in n)"
   135 set :d.22:n 1
-    * op add *tmp66 zero :d.22:n
+  136 op add *tmp66 zero 1
   137 label *label26
   138 op greaterThanEq *tmp68 1 *tmp66
   139 assertequals true *tmp68 "greaterThanEq 1"
   140 # "Function: inline def d(in n)"
   141 set :d.23:n 2
-    * op add *tmp69 zero :d.23:n
+  142 op add *tmp69 zero 2
   143 label *label27
   144 op greaterThanEq *tmp71 1 *tmp69
   145 assertequals false *tmp71 "greaterThanEq 2"
 
   149 assertequals true *tmp73 "strictEqual 2"
   150 # "Function: inline def d(in n)"
   151 set :d.24:n 2
-    * op add *tmp74 zero :d.24:n
+  152 op add *tmp74 zero 2
   153 label *label28
   154 op shl *tmp76 1 *tmp74
   155 assertequals 4 *tmp76 "shl"
   156 # "Function: inline def d(in n)"
   157 set :d.25:n 2
-    * op add *tmp77 zero :d.25:n
+  158 op add *tmp77 zero 2
   159 label *label29
   160 op shr *tmp79 9 *tmp77
   161 assertequals 2 *tmp79 "shr"
   162 # "Function: inline def d(in n)"
   163 set :d.26:n 2
-    * op add *tmp80 zero :d.26:n
+  164 op add *tmp80 zero 2
   165 label *label30
   166 op or *tmp82 1 *tmp80
   167 assertequals 3 *tmp82 "or"
   168 # "Function: inline def d(in n)"
   169 set :d.27:n 2
-    * op add *tmp83 zero :d.27:n
+  170 op add *tmp83 zero 2
   171 label *label31
   172 op and *tmp85 3 *tmp83
   173 assertequals 2 *tmp85 "and"
   174 # "Function: inline def d(in n)"
   175 set :d.28:n 2
-    * op add *tmp86 zero :d.28:n
+  176 op add *tmp86 zero 2
   177 label *label32
   178 op xor *tmp88 3 *tmp86
   179 assertequals 1 *tmp88 "xor"
   180 # "Function: inline def d(in n)"
   181 set :d.29:n 0
-    * op add *tmp89 zero :d.29:n
+  182 op add *tmp89 zero 0
   183 label *label33
   184 op not *tmp91 *tmp89
   185 assertequals -1 *tmp91 "not 1"
   186 # "Function: inline def d(in n)"
   187 set :d.30:n 65535
-    * op add *tmp92 zero :d.30:n
+  188 op add *tmp92 zero 65535
   189 label *label34
   190 op not *tmp94 *tmp92
   191 assertequals -65536 *tmp94 "not 2"
   192 set :a 0xabcdefabcdef
-    * op add *tmp95 :a 1
-    * op sub *tmp96 0 *tmp95
+  193 op add *tmp95 0xabcdefabcdef 1
+  194 op sub *tmp96 0 188900977659376
   195 # "Function: inline def d(in n)"
-    * set :d.31:n :a
-    * op add *tmp97 zero :d.31:n
+  196 set :d.31:n 0xabcdefabcdef
+  197 op add *tmp97 zero :a
   198 label *label35
   199 op not *tmp99 *tmp97
-    * assertequals *tmp96 *tmp99 "not 3"
+  200 assertequals -188900977659376 *tmp99 "not 3"
   201 # "Function: inline def d(in n)"
   202 set :d.32:n 4
-    * op add *tmp100 zero :d.32:n
+  203 op add *tmp100 zero 4
   204 label *label36
   205 op max *tmp102 2 *tmp100
   206 assertequals 4 *tmp102 "max"
   207 # "Function: inline def d(in n)"
   208 set :d.33:n 4
-    * op add *tmp103 zero :d.33:n
+  209 op add *tmp103 zero 4
   210 label *label37
   211 op min *tmp105 2 *tmp103
   212 assertequals 2 *tmp105 "min"
   213 # "Function: inline def d(in n)"
   214 set :d.34:n -2
-    * op add *tmp106 zero :d.34:n
+  215 op add *tmp106 zero -2
   216 label *label38
   217 op abs *tmp108 *tmp106
   218 assertequals 2 *tmp108 "abs"
   219 # "Function: inline def d(in n)"
   220 set :d.35:n -2
-    * op add *tmp109 zero :d.35:n
+  221 op add *tmp109 zero -2
   222 label *label39
   223 op sign *tmp111 *tmp109
   224 assertequals -1 *tmp111 "sign(-2)"
   225 # "Function: inline def d(in n)"
   226 set :d.36:n 2
-    * op add *tmp112 zero :d.36:n
+  227 op add *tmp112 zero 2
   228 label *label40
   229 op sign *tmp114 *tmp112
   230 assertequals 1 *tmp114 "sign(2)"
   231 # "Function: inline def d(in n)"
   232 set :d.37:n 0
-    * op add *tmp115 zero :d.37:n
+  233 op add *tmp115 zero 0
   234 label *label41
   235 op sign *tmp117 *tmp115
   236 assertequals 0 *tmp117 "sign(0)"
   237 # "Function: inline def d(in n)"
   238 set :d.38:n 2.718281828459045
-    * op add *tmp118 zero :d.38:n
+  239 op add *tmp118 zero 2.718281828459045
   240 label *label42
   241 op log *tmp120 *tmp118
   242 assertequals 1 *tmp120 "log"
   243 # "Function: inline def d(in n)"
   244 set :d.39:n 10
-    * op add *tmp121 zero :d.39:n
+  245 op add *tmp121 zero 10
   246 label *label43
   247 op log10 *tmp123 *tmp121
   248 assertequals 1 *tmp123 "log10"
   249 # "Function: inline def d(in n)"
   250 set :d.40:n 2.5
-    * op add *tmp124 zero :d.40:n
+  251 op add *tmp124 zero 2.5
   252 label *label44
   253 op floor *tmp126 *tmp124
   254 assertequals 2 *tmp126 "floor"
   255 # "Function: inline def d(in n)"
   256 set :d.41:n 2.5
-    * op add *tmp127 zero :d.41:n
+  257 op add *tmp127 zero 2.5
   258 label *label45
   259 op ceil *tmp129 *tmp127
   260 assertequals 3 *tmp129 "ceil"
   261 # "Function: inline def d(in n)"
   262 set :d.42:n 16
-    * op add *tmp130 zero :d.42:n
+  263 op add *tmp130 zero 16
   264 label *label46
   265 op sqrt *tmp132 *tmp130
   266 assertequals 4 *tmp132 "sqrt"
   267 # "Function: inline def d(in n)"
   268 set :d.43:n 1
-    * op add *tmp133 zero :d.43:n
+  269 op add *tmp133 zero 1
   270 label *label47
   271 op angle *tmp135 1 *tmp133
   272 assertequals 45 *tmp135 "angle"
   273 # "Function: inline def d(in n)"
   274 set :d.44:n 135
-    * op add *tmp136 zero :d.44:n
+  275 op add *tmp136 zero 135
   276 label *label48
   277 op angleDiff *tmp138 45 *tmp136
   278 assertequals 90 *tmp138 "angleDiff"
 
   303 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   304 # "Function: inline def d(in n)"
   305 set :d.45:n 8
-    * op add *tmp139 zero :d.45:n
+  306 op add *tmp139 zero 8
   307 label *label49
   308 op sub *tmp141 0 *tmp139
   309 assertequals -8 *tmp141 "unary minus"
   310 # "Function: inline def d(in n)"
   311 set :d.46:n 0
-    * op add *tmp142 zero :d.46:n
+  312 op add *tmp142 zero 0
   313 label *label50
   314 op equal *tmp144 *tmp142 false
   315 assertequals 1 *tmp144 "boolean negation 1"
   316 # "Function: inline def d(in n)"
   317 set :d.47:n 1
-    * op add *tmp145 zero :d.47:n
+  318 op add *tmp145 zero 1
   319 label *label51
   320 op equal *tmp147 *tmp145 false
   321 assertequals 0 *tmp147 "boolean negation 2"
   322 # "Function: inline def d(in n)"
   323 set :d.48:n 2
-    * op add *tmp148 zero :d.48:n
+  324 op add *tmp148 zero 2
   325 label *label52
   326 op equal *tmp150 *tmp148 false
   327 assertequals 0 *tmp150 "boolean negation 3"
   328 set :a 2
   329 # "Function: inline def d(in n)"
   330 set :d.49:n 4
-    * op add *tmp151 zero :d.49:n
+  331 op add *tmp151 zero 4
   332 label *label53
-    * op pow :a :a *tmp151
+  333 op pow :a 2 *tmp151
   334 assertequals 16 :a "**="
   335 set :a 2
   336 # "Function: inline def d(in n)"
   337 set :d.50:n 4
-    * op add *tmp153 zero :d.50:n
+  338 op add *tmp153 zero 4
   339 label *label54
-    * op mul :a :a *tmp153
+  340 op mul :a 2 *tmp153
   341 assertequals 8 :a "*="
   342 set :a 6
   343 # "Function: inline def d(in n)"
   344 set :d.51:n 4
-    * op add *tmp155 zero :d.51:n
+  345 op add *tmp155 zero 4
   346 label *label55
-    * op div :a :a *tmp155
+  347 op div :a 6 *tmp155
   348 assertequals 1.5 :a "/="
   349 set :a 6
   350 # "Function: inline def d(in n)"
   351 set :d.52:n 4
-    * op add *tmp157 zero :d.52:n
+  352 op add *tmp157 zero 4
   353 label *label56
-    * op idiv :a :a *tmp157
+  354 op idiv :a 6 *tmp157
   355 assertequals 1 :a "\="
   356 set :a 6
   357 # "Function: inline def d(in n)"
   358 set :d.53:n 4
-    * op add *tmp159 zero :d.53:n
+  359 op add *tmp159 zero 4
   360 label *label57
-    * op mod :a :a *tmp159
+  361 op mod :a 6 *tmp159
   362 assertequals 2 :a "%="
   363 set :a 4
   364 # "Function: inline def d(in n)"
   365 set :d.54:n 2
-    * op add *tmp161 zero :d.54:n
+  366 op add *tmp161 zero 2
   367 label *label58
-    * op add :a :a *tmp161
+  368 op add :a 4 *tmp161
   369 assertequals 6 :a "+="
   370 set :a 4
   371 # "Function: inline def d(in n)"
   372 set :d.55:n 2
-    * op add *tmp163 zero :d.55:n
+  373 op add *tmp163 zero 2
   374 label *label59
-    * op sub :a :a *tmp163
+  375 op sub :a 4 *tmp163
   376 assertequals 2 :a "-="
   377 set :a 1
   378 # "Function: inline def d(in n)"
   379 set :d.56:n 2
-    * op add *tmp165 zero :d.56:n
+  380 op add *tmp165 zero 2
   381 label *label60
-    * op shl :a :a *tmp165
+  382 op shl :a 1 *tmp165
   383 assertequals 4 :a "<<="
   384 set :a 9
   385 # "Function: inline def d(in n)"
   386 set :d.57:n 2
-    * op add *tmp167 zero :d.57:n
+  387 op add *tmp167 zero 2
   388 label *label61
-    * op shr :a :a *tmp167
+  389 op shr :a 9 *tmp167
   390 assertequals 2 :a ">>="
   391 set :a 1
   392 # "Function: inline def d(in n)"
   393 set :d.58:n 2
-    * op add *tmp169 zero :d.58:n
+  394 op add *tmp169 zero 2
   395 label *label62
-    * op or :a :a *tmp169
+  396 op or :a 1 *tmp169
   397 assertequals 3 :a "|="
   398 set :a 3
   399 # "Function: inline def d(in n)"
   400 set :d.59:n 2
-    * op add *tmp171 zero :d.59:n
+  401 op add *tmp171 zero 2
   402 label *label63
-    * op and :a :a *tmp171
+  403 op and :a 3 *tmp171
   404 assertequals 2 :a "&="
   405 set :a 3
   406 # "Function: inline def d(in n)"
   407 set :d.60:n 2
-    * op add *tmp173 zero :d.60:n
+  408 op add *tmp173 zero 2
   409 label *label64
-    * op xor :a :a *tmp173
+  410 op xor :a 3 *tmp173
   411 assertequals 1 :a "^="
   412 set :a 1
   413 # "Function: inline def d(in n)"
   414 set :d.61:n 0
-    * op add *tmp175 zero :d.61:n
+  415 op add *tmp175 zero 0
   416 label *label65
-    * op land :a :a *tmp175
+  417 op land :a 1 *tmp175
   418 assertequals false :a "&&="
   419 set :a 1
   420 # "Function: inline def d(in n)"
   421 set :d.62:n 2
-    * op add *tmp177 zero :d.62:n
+  422 op add *tmp177 zero 2
   423 label *label66
-    * op land :a :a *tmp177
+  424 op land :a 1 *tmp177
   425 assertequals true :a "&&="
   426 set :a 0
   427 # "Function: inline def d(in n)"
   428 set :d.63:n 2
-    * op add *tmp179 zero :d.63:n
+  429 op add *tmp179 zero 2
   430 label *label67
-    * op or *tmp181 :a *tmp179
+  431 op or *tmp181 0 *tmp179
   432 op notEqual :a *tmp181 false
   433 assertequals true :a "||="
   434 assertequals %ff0000ff %ff0000 "short color literals"
 
   439 set *tmp183 null
   440 jump *label70 always
   441 label *label69
-    * set *tmp183 :o:n
+  442 set *tmp183 @copper-wall
   443 label *label70
   444 set *tmp182 *tmp183
   445 label *label68
-    * sensor *tmp184 *tmp182 @id
+  446 sensor *tmp184 *tmp183 @id
   447 assertequals 17 *tmp184 "Logic ID"
   448 stop
   449 end
 
   452 op mul *tmp185 :assertEqualsRound:actual 100000000
   453 # "Function: inline def round(in x)"
   454 set :round:x *tmp185
-    * op add *tmp187 :round:x 0.5
+  455 op add *tmp187 *tmp185 0.5
   456 op floor *tmp186 *tmp187
   457 label *label72
   458 op div *tmp189 *tmp186 100000000

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-84 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * set :d:n 3
     3 op add *tmp0 zero 3
     4 label *label4
-    * op add *tmp2 2 *tmp0
+    5 op add *tmp2 zero 5
     6 assertequals 5 *tmp2 "add"
     7 # "Function: inline def d(in n)"
-    * set :d.1:n 6
     8 op add *tmp3 zero 6
     9 label *label5
-    * op sub *tmp5 7 *tmp3
+   10 op sub *tmp5 1 zero
    11 assertequals 1 *tmp5 "sub"
    12 # "Function: inline def d(in n)"
-    * set :d.2:n 2
    13 op add *tmp6 zero 2
    14 label *label6
    15 op mul *tmp8 3 *tmp6
    16 assertequals 6 *tmp8 "mul"
    17 # "Function: inline def d(in n)"
-    * set :d.3:n 4
    18 op add *tmp9 zero 4
    19 label *label7
    20 op div *tmp11 6 *tmp9
    21 assertequals 1.5 *tmp11 "div"
    22 # "Function: inline def d(in n)"
-    * set :d.4:n 100000
    23 op add *tmp12 zero 100000
    24 label *label8
    25 op div *tmp14 1 *tmp12
    26 assertequals 0.00001 *tmp14 "div exp"
    27 # "Function: inline def d(in n)"
-    * set :d.5:n 4
    28 op add *tmp15 zero 4
    29 label *label9
-    * op idiv *tmp17 6 *tmp15
+   30 op idiv *tmp17 6 *tmp9
    31 assertequals 1 *tmp17 "idiv"
    32 # "Function: inline def d(in n)"
-    * set :d.6:n 4
    33 op add *tmp18 zero 4
    34 label *label10
-    * op mod *tmp20 6 *tmp18
+   35 op mod *tmp20 6 *tmp9
    36 assertequals 2 *tmp20 "mod"
    37 # "Function: inline def d(in n)"
-    * set :d.7:n 4
    38 op add *tmp21 zero 4
    39 label *label11
-    * op pow *tmp23 2 *tmp21
+   40 op pow *tmp23 2 *tmp9
    41 assertequals 16 *tmp23 "pow"
    42 # "Function: inline def d(in n)"
-    * set :d.8:n 5
    43 op add *tmp24 zero 5
    44 label *label12
    45 op equal *tmp26 5 *tmp24
    46 assertequals true *tmp26 "equal 1"
    47 # "Function: inline def d(in n)"
-    * set :d.9:n 6
    48 op add *tmp27 zero 6
    49 label *label13
-    * op equal *tmp29 5 *tmp27
+   50 op equal *tmp29 5 *tmp3
    51 assertequals false *tmp29 "equal 2"
    52 # "Function: inline def d(in n)"
-    * set :d.10:n null
    53 op add *tmp30 zero null
    54 label *label14
    55 op equal *tmp32 0 *tmp30
    56 assertequals true *tmp32 "equal null"
    57 # "Function: inline def d(in n)"
-    * set :d.11:n 5
    58 op add *tmp33 zero 5
    59 label *label15
-    * op notEqual *tmp35 5 *tmp33
+   60 op notEqual *tmp35 5 *tmp24
    61 assertequals false *tmp35 "notEqual 1"
    62 # "Function: inline def d(in n)"
-    * set :d.12:n 6
    63 op add *tmp36 zero 6
    64 label *label16
-    * op notEqual *tmp38 5 *tmp36
+   65 op notEqual *tmp38 5 *tmp3
    66 assertequals true *tmp38 "notEqual 2"
    67 # "Function: inline def d(in n)"
-    * set :d.13:n null
    68 op add *tmp39 zero null
    69 label *label17
-    * op notEqual *tmp41 0 *tmp39
+   70 op notEqual *tmp41 0 *tmp30
    71 assertequals false *tmp41 "notEqual null"
    72 # "Function: inline def d(in n)"
-    * set :d.14:n 0
    73 op add *tmp42 zero 0
    74 label *label18
    75 op land *tmp44 1 *tmp42
    76 assertequals false *tmp44 "land 1"
    77 # "Function: inline def d(in n)"
-    * set :d.15:n 2
    78 op add *tmp45 zero 2
    79 label *label19
-    * op land *tmp47 1 *tmp45
+   80 op land *tmp47 1 *tmp6
    81 assertequals true *tmp47 "land 2"
    82 # "Function: inline def d(in n)"
-    * set :d.16:n 1
    83 op add *tmp48 zero 1
    84 label *label20
    85 op lessThan *tmp50 0 *tmp48
    86 assertequals true *tmp50 "lessThan 1"
    87 # "Function: inline def d(in n)"
-    * set :d.17:n 0
    88 op add *tmp51 zero 0
    89 label *label21
-    * op lessThan *tmp53 1 *tmp51
+   90 op lessThan *tmp53 1 *tmp42
    91 assertequals false *tmp53 "lessThan 2"
    92 # "Function: inline def d(in n)"
-    * set :d.18:n 1
    93 op add *tmp54 zero 1
    94 label *label22
-    * op lessThanEq *tmp56 1 *tmp54
+   95 op lessThanEq *tmp56 1 *tmp48
    96 assertequals true *tmp56 "lessThanEq 1"
    97 # "Function: inline def d(in n)"
-    * set :d.19:n 0
    98 op add *tmp57 zero 0
    99 label *label23
-    * op lessThanEq *tmp59 1 *tmp57
+  100 op lessThanEq *tmp59 1 *tmp42
   101 assertequals false *tmp59 "lessThanEq 2"
   102 # "Function: inline def d(in n)"
-    * set :d.20:n 1
   103 op add *tmp60 zero 1
   104 label *label24
-    * op greaterThan *tmp62 2 *tmp60
+  105 op greaterThan *tmp62 2 *tmp48
   106 assertequals true *tmp62 "greaterThan 1"
   107 # "Function: inline def d(in n)"
-    * set :d.21:n 2
   108 op add *tmp63 zero 2
   109 label *label25
-    * op greaterThan *tmp65 1 *tmp63
+  110 op greaterThan *tmp65 1 *tmp6
   111 assertequals false *tmp65 "greaterThan 2"
   112 # "Function: inline def d(in n)"
-    * set :d.22:n 1
   113 op add *tmp66 zero 1
   114 label *label26
-    * op greaterThanEq *tmp68 1 *tmp66
+  115 op greaterThanEq *tmp68 1 *tmp48
   116 assertequals true *tmp68 "greaterThanEq 1"
   117 # "Function: inline def d(in n)"
-    * set :d.23:n 2
   118 op add *tmp69 zero 2
   119 label *label27
-    * op greaterThanEq *tmp71 1 *tmp69
+  120 op greaterThanEq *tmp71 1 *tmp6
   121 assertequals false *tmp71 "greaterThanEq 2"
   122 op strictEqual *tmp72 0 NULL
   123 assertequals false *tmp72 "strictEqual 1"
   124 op strictEqual *tmp73 null NULL
   125 assertequals true *tmp73 "strictEqual 2"
   126 # "Function: inline def d(in n)"
-    * set :d.24:n 2
   127 op add *tmp74 zero 2
   128 label *label28
-    * op shl *tmp76 1 *tmp74
+  129 op shl *tmp76 1 *tmp6
   130 assertequals 4 *tmp76 "shl"
   131 # "Function: inline def d(in n)"
-    * set :d.25:n 2
   132 op add *tmp77 zero 2
   133 label *label29
-    * op shr *tmp79 9 *tmp77
+  134 op shr *tmp79 9 *tmp6
   135 assertequals 2 *tmp79 "shr"
   136 # "Function: inline def d(in n)"
-    * set :d.26:n 2
   137 op add *tmp80 zero 2
   138 label *label30
-    * op or *tmp82 1 *tmp80
+  139 op or *tmp82 1 *tmp6
   140 assertequals 3 *tmp82 "or"
   141 # "Function: inline def d(in n)"
-    * set :d.27:n 2
   142 op add *tmp83 zero 2
   143 label *label31
-    * op and *tmp85 3 *tmp83
+  144 op and *tmp85 3 *tmp6
   145 assertequals 2 *tmp85 "and"
   146 # "Function: inline def d(in n)"
-    * set :d.28:n 2
   147 op add *tmp86 zero 2
   148 label *label32
-    * op xor *tmp88 3 *tmp86
+  149 op xor *tmp88 3 *tmp6
   150 assertequals 1 *tmp88 "xor"
   151 # "Function: inline def d(in n)"
-    * set :d.29:n 0
   152 op add *tmp89 zero 0
   153 label *label33
-    * op not *tmp91 *tmp89
+  154 op not *tmp91 *tmp42
   155 assertequals -1 *tmp91 "not 1"
   156 # "Function: inline def d(in n)"
-    * set :d.30:n 65535
   157 op add *tmp92 zero 65535
   158 label *label34
   159 op not *tmp94 *tmp92
   160 assertequals -65536 *tmp94 "not 2"
   161 set :a 0xabcdefabcdef
-    * op add *tmp95 0xabcdefabcdef 1
-    * op sub *tmp96 0 188900977659376
   162 # "Function: inline def d(in n)"
-    * set :d.31:n 0xabcdefabcdef
-    * op add *tmp97 zero :a
+  163 op add *tmp97 zero 0xabcdefabcdef
   164 label *label35
   165 op not *tmp99 *tmp97
   166 assertequals -188900977659376 *tmp99 "not 3"
   167 # "Function: inline def d(in n)"
-    * set :d.32:n 4
   168 op add *tmp100 zero 4
   169 label *label36
-    * op max *tmp102 2 *tmp100
+  170 op max *tmp102 2 *tmp9
   171 assertequals 4 *tmp102 "max"
   172 # "Function: inline def d(in n)"
-    * set :d.33:n 4
   173 op add *tmp103 zero 4
   174 label *label37
-    * op min *tmp105 2 *tmp103
+  175 op min *tmp105 2 *tmp9
   176 assertequals 2 *tmp105 "min"
   177 # "Function: inline def d(in n)"
-    * set :d.34:n -2
   178 op add *tmp106 zero -2
   179 label *label38
   180 op abs *tmp108 *tmp106
   181 assertequals 2 *tmp108 "abs"
   182 # "Function: inline def d(in n)"
-    * set :d.35:n -2
   183 op add *tmp109 zero -2
   184 label *label39
-    * op sign *tmp111 *tmp109
+  185 op sign *tmp111 *tmp106
   186 assertequals -1 *tmp111 "sign(-2)"
   187 # "Function: inline def d(in n)"
-    * set :d.36:n 2
   188 op add *tmp112 zero 2
   189 label *label40
-    * op sign *tmp114 *tmp112
+  190 op sign *tmp114 *tmp6
   191 assertequals 1 *tmp114 "sign(2)"
   192 # "Function: inline def d(in n)"
-    * set :d.37:n 0
   193 op add *tmp115 zero 0
   194 label *label41
-    * op sign *tmp117 *tmp115
+  195 op sign *tmp117 *tmp42
   196 assertequals 0 *tmp117 "sign(0)"
   197 # "Function: inline def d(in n)"
-    * set :d.38:n 2.718281828459045
   198 op add *tmp118 zero 2.718281828459045
   199 label *label42
   200 op log *tmp120 *tmp118
   201 assertequals 1 *tmp120 "log"
   202 # "Function: inline def d(in n)"
-    * set :d.39:n 10
   203 op add *tmp121 zero 10
   204 label *label43
   205 op log10 *tmp123 *tmp121
   206 assertequals 1 *tmp123 "log10"
   207 # "Function: inline def d(in n)"
-    * set :d.40:n 2.5
   208 op add *tmp124 zero 2.5
   209 label *label44
   210 op floor *tmp126 *tmp124
   211 assertequals 2 *tmp126 "floor"
   212 # "Function: inline def d(in n)"
-    * set :d.41:n 2.5
   213 op add *tmp127 zero 2.5
   214 label *label45
-    * op ceil *tmp129 *tmp127
+  215 op ceil *tmp129 *tmp124
   216 assertequals 3 *tmp129 "ceil"
   217 # "Function: inline def d(in n)"
-    * set :d.42:n 16
   218 op add *tmp130 zero 16
   219 label *label46
   220 op sqrt *tmp132 *tmp130
   221 assertequals 4 *tmp132 "sqrt"
   222 # "Function: inline def d(in n)"
-    * set :d.43:n 1
   223 op add *tmp133 zero 1
   224 label *label47
-    * op angle *tmp135 1 *tmp133
+  225 op angle *tmp135 1 *tmp48
   226 assertequals 45 *tmp135 "angle"
   227 # "Function: inline def d(in n)"
-    * set :d.44:n 135
   228 op add *tmp136 zero 135
   229 label *label48
   230 op angleDiff *tmp138 45 *tmp136
 
   255 set :assertEqualsRound:title "atan"
   256 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   257 # "Function: inline def d(in n)"
-    * set :d.45:n 8
   258 op add *tmp139 zero 8
   259 label *label49
-    * op sub *tmp141 0 *tmp139
+  260 op sub *tmp141 -8 zero
   261 assertequals -8 *tmp141 "unary minus"
   262 # "Function: inline def d(in n)"
-    * set :d.46:n 0
   263 op add *tmp142 zero 0
   264 label *label50
-    * op equal *tmp144 *tmp142 false
+  265 op equal *tmp144 *tmp42 false
   266 assertequals 1 *tmp144 "boolean negation 1"
   267 # "Function: inline def d(in n)"
-    * set :d.47:n 1
   268 op add *tmp145 zero 1
   269 label *label51
-    * op equal *tmp147 *tmp145 false
+  270 op equal *tmp147 *tmp48 false
   271 assertequals 0 *tmp147 "boolean negation 2"
   272 # "Function: inline def d(in n)"
-    * set :d.48:n 2
   273 op add *tmp148 zero 2
   274 label *label52
-    * op equal *tmp150 *tmp148 false
+  275 op equal *tmp150 *tmp6 false
   276 assertequals 0 *tmp150 "boolean negation 3"
-    * set :a 2
   277 # "Function: inline def d(in n)"
-    * set :d.49:n 4
   278 op add *tmp151 zero 4
   279 label *label53
-    * op pow :a 2 *tmp151
-    * assertequals 16 :a "**="
-    * set :a 2
+  280 op pow :a 2 *tmp9
+  281 assertequals 16 *tmp23 "**="
   282 # "Function: inline def d(in n)"
-    * set :d.50:n 4
   283 op add *tmp153 zero 4
   284 label *label54
-    * op mul :a 2 *tmp153
+  285 op mul :a 2 *tmp9
   286 assertequals 8 :a "*="
-    * set :a 6
   287 # "Function: inline def d(in n)"
-    * set :d.51:n 4
   288 op add *tmp155 zero 4
   289 label *label55
-    * op div :a 6 *tmp155
-    * assertequals 1.5 :a "/="
-    * set :a 6
+  290 op div :a 6 *tmp9
+  291 assertequals 1.5 *tmp11 "/="
   292 # "Function: inline def d(in n)"
-    * set :d.52:n 4
   293 op add *tmp157 zero 4
   294 label *label56
-    * op idiv :a 6 *tmp157
-    * assertequals 1 :a "\="
-    * set :a 6
+  295 op idiv :a 6 *tmp9
+  296 assertequals 1 *tmp17 "\="
   297 # "Function: inline def d(in n)"
-    * set :d.53:n 4
   298 op add *tmp159 zero 4
   299 label *label57
-    * op mod :a 6 *tmp159
-    * assertequals 2 :a "%="
-    * set :a 4
+  300 op mod :a 6 *tmp9
+  301 assertequals 2 *tmp20 "%="
   302 # "Function: inline def d(in n)"
-    * set :d.54:n 2
   303 op add *tmp161 zero 2
   304 label *label58
-    * op add :a 4 *tmp161
+  305 op add :a 4 *tmp6
   306 assertequals 6 :a "+="
-    * set :a 4
   307 # "Function: inline def d(in n)"
-    * set :d.55:n 2
   308 op add *tmp163 zero 2
   309 label *label59
-    * op sub :a 4 *tmp163
+  310 op sub :a 4 *tmp6
   311 assertequals 2 :a "-="
-    * set :a 1
   312 # "Function: inline def d(in n)"
-    * set :d.56:n 2
   313 op add *tmp165 zero 2
   314 label *label60
-    * op shl :a 1 *tmp165
-    * assertequals 4 :a "<<="
-    * set :a 9
+  315 op shl :a 1 *tmp6
+  316 assertequals 4 *tmp76 "<<="
   317 # "Function: inline def d(in n)"
-    * set :d.57:n 2
   318 op add *tmp167 zero 2
   319 label *label61
-    * op shr :a 9 *tmp167
-    * assertequals 2 :a ">>="
-    * set :a 1
+  320 op shr :a 9 *tmp6
+  321 assertequals 2 *tmp79 ">>="
   322 # "Function: inline def d(in n)"
-    * set :d.58:n 2
   323 op add *tmp169 zero 2
   324 label *label62
-    * op or :a 1 *tmp169
-    * assertequals 3 :a "|="
-    * set :a 3
+  325 op or :a 1 *tmp6
+  326 assertequals 3 *tmp82 "|="
   327 # "Function: inline def d(in n)"
-    * set :d.59:n 2
   328 op add *tmp171 zero 2
   329 label *label63
-    * op and :a 3 *tmp171
-    * assertequals 2 :a "&="
-    * set :a 3
+  330 op and :a 3 *tmp6
+  331 assertequals 2 *tmp85 "&="
   332 # "Function: inline def d(in n)"
-    * set :d.60:n 2
   333 op add *tmp173 zero 2
   334 label *label64
-    * op xor :a 3 *tmp173
-    * assertequals 1 :a "^="
-    * set :a 1
+  335 op xor :a 3 *tmp6
+  336 assertequals 1 *tmp88 "^="
   337 # "Function: inline def d(in n)"
-    * set :d.61:n 0
   338 op add *tmp175 zero 0
   339 label *label65
-    * op land :a 1 *tmp175
-    * assertequals false :a "&&="
-    * set :a 1
+  340 op land :a 1 *tmp42
+  341 assertequals false *tmp44 "&&="
   342 # "Function: inline def d(in n)"
-    * set :d.62:n 2
   343 op add *tmp177 zero 2
   344 label *label66
-    * op land :a 1 *tmp177
-    * assertequals true :a "&&="
-    * set :a 0
+  345 op land :a 1 *tmp6
+  346 assertequals true *tmp47 "&&="
   347 # "Function: inline def d(in n)"
-    * set :d.63:n 2
   348 op add *tmp179 zero 2
   349 label *label67
-    * op or *tmp181 0 *tmp179
+  350 op or *tmp181 0 *tmp6
   351 op notEqual :a *tmp181 false
   352 assertequals true :a "||="
   353 assertequals %ff0000ff %ff0000 "short color literals"
   354 assertequals %ffffffff %[white] "named color literals"
   355 # "Function: inline def o(in n)"
-    * set :o:n @copper-wall
   356 jump *label69 equal zero false
   357 set *tmp183 null
   358 jump *label70 always
   359 label *label69
   360 set *tmp183 @copper-wall
   361 label *label70
-    * set *tmp182 *tmp183
   362 label *label68
   363 sensor *tmp184 *tmp183 @id
   364 assertequals 17 *tmp184 "Logic ID"
 
   368 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   369 op mul *tmp185 :assertEqualsRound:actual 100000000
   370 # "Function: inline def round(in x)"
-    * set :round:x *tmp185
   371 op add *tmp187 *tmp185 0.5
   372 op floor *tmp186 *tmp187
   373 label *label72

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-60 instructions):
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * op add *tmp0 zero 3
     3 label *label4
     4 op add *tmp2 zero 5
     5 assertequals 5 *tmp2 "add"
 
    24 op div *tmp14 1 *tmp12
    25 assertequals 0.00001 *tmp14 "div exp"
    26 # "Function: inline def d(in n)"
-    * op add *tmp15 zero 4
    27 label *label9
    28 op idiv *tmp17 6 *tmp9
    29 assertequals 1 *tmp17 "idiv"
    30 # "Function: inline def d(in n)"
-    * op add *tmp18 zero 4
    31 label *label10
    32 op mod *tmp20 6 *tmp9
    33 assertequals 2 *tmp20 "mod"
    34 # "Function: inline def d(in n)"
-    * op add *tmp21 zero 4
    35 label *label11
    36 op pow *tmp23 2 *tmp9
    37 assertequals 16 *tmp23 "pow"
    38 # "Function: inline def d(in n)"
    39 op add *tmp24 zero 5
    40 label *label12
-    * op equal *tmp26 5 *tmp24
+   41 op equal *tmp26 5 *tmp2
    42 assertequals true *tmp26 "equal 1"
    43 # "Function: inline def d(in n)"
-    * op add *tmp27 zero 6
    44 label *label13
    45 op equal *tmp29 5 *tmp3
    46 assertequals false *tmp29 "equal 2"
 
    50 op equal *tmp32 0 *tmp30
    51 assertequals true *tmp32 "equal null"
    52 # "Function: inline def d(in n)"
-    * op add *tmp33 zero 5
    53 label *label15
-    * op notEqual *tmp35 5 *tmp24
+   54 op notEqual *tmp35 5 *tmp2
    55 assertequals false *tmp35 "notEqual 1"
    56 # "Function: inline def d(in n)"
-    * op add *tmp36 zero 6
    57 label *label16
    58 op notEqual *tmp38 5 *tmp3
    59 assertequals true *tmp38 "notEqual 2"
    60 # "Function: inline def d(in n)"
-    * op add *tmp39 zero null
    61 label *label17
    62 op notEqual *tmp41 0 *tmp30
    63 assertequals false *tmp41 "notEqual null"
 
    67 op land *tmp44 1 *tmp42
    68 assertequals false *tmp44 "land 1"
    69 # "Function: inline def d(in n)"
-    * op add *tmp45 zero 2
    70 label *label19
    71 op land *tmp47 1 *tmp6
    72 assertequals true *tmp47 "land 2"
 
    76 op lessThan *tmp50 0 *tmp48
    77 assertequals true *tmp50 "lessThan 1"
    78 # "Function: inline def d(in n)"
-    * op add *tmp51 zero 0
    79 label *label21
    80 op lessThan *tmp53 1 *tmp42
    81 assertequals false *tmp53 "lessThan 2"
    82 # "Function: inline def d(in n)"
-    * op add *tmp54 zero 1
    83 label *label22
    84 op lessThanEq *tmp56 1 *tmp48
    85 assertequals true *tmp56 "lessThanEq 1"
    86 # "Function: inline def d(in n)"
-    * op add *tmp57 zero 0
    87 label *label23
    88 op lessThanEq *tmp59 1 *tmp42
    89 assertequals false *tmp59 "lessThanEq 2"
    90 # "Function: inline def d(in n)"
-    * op add *tmp60 zero 1
    91 label *label24
    92 op greaterThan *tmp62 2 *tmp48
    93 assertequals true *tmp62 "greaterThan 1"
    94 # "Function: inline def d(in n)"
-    * op add *tmp63 zero 2
    95 label *label25
    96 op greaterThan *tmp65 1 *tmp6
    97 assertequals false *tmp65 "greaterThan 2"
    98 # "Function: inline def d(in n)"
-    * op add *tmp66 zero 1
    99 label *label26
   100 op greaterThanEq *tmp68 1 *tmp48
   101 assertequals true *tmp68 "greaterThanEq 1"
   102 # "Function: inline def d(in n)"
-    * op add *tmp69 zero 2
   103 label *label27
   104 op greaterThanEq *tmp71 1 *tmp6
   105 assertequals false *tmp71 "greaterThanEq 2"
 
   108 op strictEqual *tmp73 null NULL
   109 assertequals true *tmp73 "strictEqual 2"
   110 # "Function: inline def d(in n)"
-    * op add *tmp74 zero 2
   111 label *label28
   112 op shl *tmp76 1 *tmp6
   113 assertequals 4 *tmp76 "shl"
   114 # "Function: inline def d(in n)"
-    * op add *tmp77 zero 2
   115 label *label29
   116 op shr *tmp79 9 *tmp6
   117 assertequals 2 *tmp79 "shr"
   118 # "Function: inline def d(in n)"
-    * op add *tmp80 zero 2
   119 label *label30
   120 op or *tmp82 1 *tmp6
   121 assertequals 3 *tmp82 "or"
   122 # "Function: inline def d(in n)"
-    * op add *tmp83 zero 2
   123 label *label31
   124 op and *tmp85 3 *tmp6
   125 assertequals 2 *tmp85 "and"
   126 # "Function: inline def d(in n)"
-    * op add *tmp86 zero 2
   127 label *label32
   128 op xor *tmp88 3 *tmp6
   129 assertequals 1 *tmp88 "xor"
   130 # "Function: inline def d(in n)"
-    * op add *tmp89 zero 0
   131 label *label33
   132 op not *tmp91 *tmp42
   133 assertequals -1 *tmp91 "not 1"
 
   136 label *label34
   137 op not *tmp94 *tmp92
   138 assertequals -65536 *tmp94 "not 2"
-    * set :a 0xabcdefabcdef
   139 # "Function: inline def d(in n)"
   140 op add *tmp97 zero 0xabcdefabcdef
   141 label *label35
   142 op not *tmp99 *tmp97
   143 assertequals -188900977659376 *tmp99 "not 3"
   144 # "Function: inline def d(in n)"
-    * op add *tmp100 zero 4
   145 label *label36
   146 op max *tmp102 2 *tmp9
   147 assertequals 4 *tmp102 "max"
   148 # "Function: inline def d(in n)"
-    * op add *tmp103 zero 4
   149 label *label37
   150 op min *tmp105 2 *tmp9
   151 assertequals 2 *tmp105 "min"
 
   155 op abs *tmp108 *tmp106
   156 assertequals 2 *tmp108 "abs"
   157 # "Function: inline def d(in n)"
-    * op add *tmp109 zero -2
   158 label *label39
   159 op sign *tmp111 *tmp106
   160 assertequals -1 *tmp111 "sign(-2)"
   161 # "Function: inline def d(in n)"
-    * op add *tmp112 zero 2
   162 label *label40
   163 op sign *tmp114 *tmp6
   164 assertequals 1 *tmp114 "sign(2)"
   165 # "Function: inline def d(in n)"
-    * op add *tmp115 zero 0
   166 label *label41
   167 op sign *tmp117 *tmp42
   168 assertequals 0 *tmp117 "sign(0)"
 
   182 op floor *tmp126 *tmp124
   183 assertequals 2 *tmp126 "floor"
   184 # "Function: inline def d(in n)"
-    * op add *tmp127 zero 2.5
   185 label *label45
   186 op ceil *tmp129 *tmp124
   187 assertequals 3 *tmp129 "ceil"
 
   191 op sqrt *tmp132 *tmp130
   192 assertequals 4 *tmp132 "sqrt"
   193 # "Function: inline def d(in n)"
-    * op add *tmp133 zero 1
   194 label *label47
   195 op angle *tmp135 1 *tmp48
   196 assertequals 45 *tmp135 "angle"
 
   225 set :assertEqualsRound:title "atan"
   226 call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
   227 # "Function: inline def d(in n)"
-    * op add *tmp139 zero 8
   228 label *label49
   229 op sub *tmp141 -8 zero
   230 assertequals -8 *tmp141 "unary minus"
   231 # "Function: inline def d(in n)"
-    * op add *tmp142 zero 0
   232 label *label50
   233 op equal *tmp144 *tmp42 false
   234 assertequals 1 *tmp144 "boolean negation 1"
   235 # "Function: inline def d(in n)"
-    * op add *tmp145 zero 1
   236 label *label51
   237 op equal *tmp147 *tmp48 false
   238 assertequals 0 *tmp147 "boolean negation 2"
   239 # "Function: inline def d(in n)"
-    * op add *tmp148 zero 2
   240 label *label52
   241 op equal *tmp150 *tmp6 false
   242 assertequals 0 *tmp150 "boolean negation 3"
   243 # "Function: inline def d(in n)"
-    * op add *tmp151 zero 4
   244 label *label53
-    * op pow :a 2 *tmp9
   245 assertequals 16 *tmp23 "**="
   246 # "Function: inline def d(in n)"
-    * op add *tmp153 zero 4
   247 label *label54
   248 op mul :a 2 *tmp9
   249 assertequals 8 :a "*="
   250 # "Function: inline def d(in n)"
-    * op add *tmp155 zero 4
   251 label *label55
-    * op div :a 6 *tmp9
   252 assertequals 1.5 *tmp11 "/="
   253 # "Function: inline def d(in n)"
-    * op add *tmp157 zero 4
   254 label *label56
-    * op idiv :a 6 *tmp9
   255 assertequals 1 *tmp17 "\="
   256 # "Function: inline def d(in n)"
-    * op add *tmp159 zero 4
   257 label *label57
-    * op mod :a 6 *tmp9
   258 assertequals 2 *tmp20 "%="
   259 # "Function: inline def d(in n)"
-    * op add *tmp161 zero 2
   260 label *label58
-    * op add :a 4 *tmp6
+  261 op add :a zero 6
   262 assertequals 6 :a "+="
   263 # "Function: inline def d(in n)"
-    * op add *tmp163 zero 2
   264 label *label59
-    * op sub :a 4 *tmp6
+  265 op sub :a 2 zero
   266 assertequals 2 :a "-="
   267 # "Function: inline def d(in n)"
-    * op add *tmp165 zero 2
   268 label *label60
-    * op shl :a 1 *tmp6
   269 assertequals 4 *tmp76 "<<="
   270 # "Function: inline def d(in n)"
-    * op add *tmp167 zero 2
   271 label *label61
-    * op shr :a 9 *tmp6
   272 assertequals 2 *tmp79 ">>="
   273 # "Function: inline def d(in n)"
-    * op add *tmp169 zero 2
   274 label *label62
-    * op or :a 1 *tmp6
   275 assertequals 3 *tmp82 "|="
   276 # "Function: inline def d(in n)"
-    * op add *tmp171 zero 2
   277 label *label63
-    * op and :a 3 *tmp6
   278 assertequals 2 *tmp85 "&="
   279 # "Function: inline def d(in n)"
-    * op add *tmp173 zero 2
   280 label *label64
-    * op xor :a 3 *tmp6
   281 assertequals 1 *tmp88 "^="
   282 # "Function: inline def d(in n)"
-    * op add *tmp175 zero 0
   283 label *label65
-    * op land :a 1 *tmp42
   284 assertequals false *tmp44 "&&="
   285 # "Function: inline def d(in n)"
-    * op add *tmp177 zero 2
   286 label *label66
-    * op land :a 1 *tmp6
   287 assertequals true *tmp47 "&&="
   288 # "Function: inline def d(in n)"
-    * op add *tmp179 zero 2
   289 label *label67
   290 op or *tmp181 0 *tmp6
   291 op notEqual :a *tmp181 false

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-1 instructions):
 
    36 op pow *tmp23 2 *tmp9
    37 assertequals 16 *tmp23 "pow"
    38 # "Function: inline def d(in n)"
-    * op add *tmp24 zero 5
    39 label *label12
    40 op equal *tmp26 5 *tmp2
    41 assertequals true *tmp26 "equal 1"
 
   258 # "Function: inline def d(in n)"
   259 label *label58
   260 op add :a zero 6
-    * assertequals 6 :a "+="
+  261 assertequals 6 *tmp3 "+="
   262 # "Function: inline def d(in n)"
   263 label *label59
   264 op sub :a 2 zero

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 5 (-1 instructions):
 
   257 assertequals 2 *tmp20 "%="
   258 # "Function: inline def d(in n)"
   259 label *label58
-    * op add :a zero 6
   260 assertequals 6 *tmp3 "+="
   261 # "Function: inline def d(in n)"
   262 label *label59

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
   292 assertequals %ffffffff %[white] "named color literals"
   293 # "Function: inline def o(in n)"
   294 jump *label69 equal zero false
-    * set *tmp183 null
+  295 sensor *tmp184 null @id
   296 jump *label70 always
   297 label *label69
-    * set *tmp183 @copper-wall
+  298 sensor *tmp184 @copper-wall @id
   299 label *label70
   300 label *label68
-    * sensor *tmp184 *tmp183 @id
   301 assertequals 17 *tmp184 "Logic ID"
   302 stop
   303 end

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+11 instructions):
 
   202 set :assertEqualsRound:expected 1
   203 set :assertEqualsRound:actual 1
   204 set :assertEqualsRound:title "sin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  205 label *label73
+  206 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  207 op mul *tmp185 :assertEqualsRound:actual 100000000
+  208 # "Function: inline def round(in x)"
+  209 op add *tmp187 *tmp185 0.5
+  210 op floor *tmp186 *tmp187
+  211 label *label74
+  212 op div *tmp189 *tmp186 100000000
+  213 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  214 label *label75
   215 set :assertEqualsRound:expected -1
   216 set :assertEqualsRound:actual -1
   217 set :assertEqualsRound:title "cos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  218 label *label76
+  219 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  220 op mul *tmp185 :assertEqualsRound:actual 100000000
+  221 # "Function: inline def round(in x)"
+  222 op add *tmp187 *tmp185 0.5
+  223 op floor *tmp186 *tmp187
+  224 label *label77
+  225 op div *tmp189 *tmp186 100000000
+  226 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  227 label *label78
   228 set :assertEqualsRound:expected 1
   229 set :assertEqualsRound:actual 0.9999999999999999
   230 set :assertEqualsRound:title "tan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  231 label *label79
+  232 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  233 op mul *tmp185 :assertEqualsRound:actual 100000000
+  234 # "Function: inline def round(in x)"
+  235 op add *tmp187 *tmp185 0.5
+  236 op floor *tmp186 *tmp187
+  237 label *label80
+  238 op div *tmp189 *tmp186 100000000
+  239 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  240 label *label81
   241 set :assertEqualsRound:expected 90
   242 set :assertEqualsRound:actual 90
   243 set :assertEqualsRound:title "asin"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  244 label *label82
+  245 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  246 op mul *tmp185 :assertEqualsRound:actual 100000000
+  247 # "Function: inline def round(in x)"
+  248 op add *tmp187 *tmp185 0.5
+  249 op floor *tmp186 *tmp187
+  250 label *label83
+  251 op div *tmp189 *tmp186 100000000
+  252 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  253 label *label84
   254 set :assertEqualsRound:expected 0
   255 set :assertEqualsRound:actual 0
   256 set :assertEqualsRound:title "acos"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  257 label *label85
+  258 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  259 op mul *tmp185 :assertEqualsRound:actual 100000000
+  260 # "Function: inline def round(in x)"
+  261 op add *tmp187 *tmp185 0.5
+  262 op floor *tmp186 *tmp187
+  263 label *label86
+  264 op div *tmp189 *tmp186 100000000
+  265 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  266 label *label87
   267 set :assertEqualsRound:expected 45
   268 set :assertEqualsRound:actual 45
   269 set :assertEqualsRound:title "atan"
-    * call *label3 :assertEqualsRound*retaddr :assertEqualsRound*retval
+  270 label *label88
+  271 # "Function: void assertEqualsRound(in expected, in actual, in title)"
+  272 op mul *tmp185 :assertEqualsRound:actual 100000000
+  273 # "Function: inline def round(in x)"
+  274 op add *tmp187 *tmp185 0.5
+  275 op floor *tmp186 *tmp187
+  276 label *label89
+  277 op div *tmp189 *tmp186 100000000
+  278 assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  279 label *label90
   280 # "Function: inline def d(in n)"
   281 label *label49
   282 op sub *tmp141 -8 zero
 
   355 assertequals 17 *tmp184 "Logic ID"
   356 stop
   357 end
-    * label *label3
-    * # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
-    * # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
-    * label *label72
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
-    * label *label71
-    * return :assertEqualsRound*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   204 set :assertEqualsRound:title "sin"
   205 label *label73
   206 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  207 op mul *tmp185 1 100000000
   208 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  209 op add *tmp187 100000000 0.5
+  210 op floor *tmp186 100000000.5
   211 label *label74
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  212 op div *tmp189 100000000 100000000
+  213 assertequals 1 1 "sin"
   214 label *label75
   215 set :assertEqualsRound:expected -1
   216 set :assertEqualsRound:actual -1
   217 set :assertEqualsRound:title "cos"
   218 label *label76
   219 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  220 op mul *tmp185 -1 100000000
   221 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  222 op add *tmp187 -100000000 0.5
+  223 op floor *tmp186 -99999999.5
   224 label *label77
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  225 op div *tmp189 -100000000 100000000
+  226 assertequals -1 -1 "cos"
   227 label *label78
   228 set :assertEqualsRound:expected 1
   229 set :assertEqualsRound:actual 0.9999999999999999
   230 set :assertEqualsRound:title "tan"
   231 label *label79
   232 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  233 op mul *tmp185 0.9999999999999999 100000000
   234 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  235 op add *tmp187 99999999.99999999 0.5
+  236 op floor *tmp186 100000000.49999999
   237 label *label80
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  238 op div *tmp189 100000000 100000000
+  239 assertequals 1 1 "tan"
   240 label *label81
   241 set :assertEqualsRound:expected 90
   242 set :assertEqualsRound:actual 90
   243 set :assertEqualsRound:title "asin"
   244 label *label82
   245 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  246 op mul *tmp185 90 100000000
   247 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  248 op add *tmp187 9000000000 0.5
+  249 op floor *tmp186 9000000000.5
   250 label *label83
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  251 op div *tmp189 9000000000 100000000
+  252 assertequals 90 90 "asin"
   253 label *label84
   254 set :assertEqualsRound:expected 0
   255 set :assertEqualsRound:actual 0
   256 set :assertEqualsRound:title "acos"
   257 label *label85
   258 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  259 op mul *tmp185 0 100000000
   260 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  261 op add *tmp187 0 0.5
+  262 op floor *tmp186 0.5
   263 label *label86
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  264 op div *tmp189 0 100000000
+  265 assertequals 0 0 "acos"
   266 label *label87
   267 set :assertEqualsRound:expected 45
   268 set :assertEqualsRound:actual 45
   269 set :assertEqualsRound:title "atan"
   270 label *label88
   271 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 :assertEqualsRound:actual 100000000
+  272 op mul *tmp185 45 100000000
   273 # "Function: inline def round(in x)"
-    * op add *tmp187 *tmp185 0.5
-    * op floor *tmp186 *tmp187
+  274 op add *tmp187 4500000000 0.5
+  275 op floor *tmp186 4500000000.5
   276 label *label89
-    * op div *tmp189 *tmp186 100000000
-    * assertequals :assertEqualsRound:expected *tmp189 :assertEqualsRound:title
+  277 op div *tmp189 4500000000 100000000
+  278 assertequals 45 45 "atan"
   279 label *label90
   280 # "Function: inline def d(in n)"
   281 label *label49

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
   199 op angleDiff *tmp138 45 *tmp136
   200 assertequals 90 *tmp138 "angleDiff"
   201 assertequals 5 5 "len"
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 1
-    * set :assertEqualsRound:title "sin"
   202 label *label73
   203 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 1 100000000
   204 # "Function: inline def round(in x)"
-    * op add *tmp187 100000000 0.5
-    * op floor *tmp186 100000000.5
   205 label *label74
-    * op div *tmp189 100000000 100000000
   206 assertequals 1 1 "sin"
   207 label *label75
-    * set :assertEqualsRound:expected -1
-    * set :assertEqualsRound:actual -1
-    * set :assertEqualsRound:title "cos"
   208 label *label76
   209 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 -1 100000000
   210 # "Function: inline def round(in x)"
-    * op add *tmp187 -100000000 0.5
-    * op floor *tmp186 -99999999.5
   211 label *label77
-    * op div *tmp189 -100000000 100000000
   212 assertequals -1 -1 "cos"
   213 label *label78
-    * set :assertEqualsRound:expected 1
-    * set :assertEqualsRound:actual 0.9999999999999999
-    * set :assertEqualsRound:title "tan"
   214 label *label79
   215 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 0.9999999999999999 100000000
   216 # "Function: inline def round(in x)"
-    * op add *tmp187 99999999.99999999 0.5
-    * op floor *tmp186 100000000.49999999
   217 label *label80
-    * op div *tmp189 100000000 100000000
   218 assertequals 1 1 "tan"
   219 label *label81
-    * set :assertEqualsRound:expected 90
-    * set :assertEqualsRound:actual 90
-    * set :assertEqualsRound:title "asin"
   220 label *label82
   221 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 90 100000000
   222 # "Function: inline def round(in x)"
-    * op add *tmp187 9000000000 0.5
-    * op floor *tmp186 9000000000.5
   223 label *label83
-    * op div *tmp189 9000000000 100000000
   224 assertequals 90 90 "asin"
   225 label *label84
-    * set :assertEqualsRound:expected 0
-    * set :assertEqualsRound:actual 0
-    * set :assertEqualsRound:title "acos"
   226 label *label85
   227 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 0 100000000
   228 # "Function: inline def round(in x)"
-    * op add *tmp187 0 0.5
-    * op floor *tmp186 0.5
   229 label *label86
-    * op div *tmp189 0 100000000
   230 assertequals 0 0 "acos"
   231 label *label87
-    * set :assertEqualsRound:expected 45
-    * set :assertEqualsRound:actual 45
-    * set :assertEqualsRound:title "atan"
   232 label *label88
   233 # "Function: void assertEqualsRound(in expected, in actual, in title)"
-    * op mul *tmp185 45 100000000
   234 # "Function: inline def round(in x)"
-    * op add *tmp187 4500000000 0.5
-    * op floor *tmp186 4500000000.5
   235 label *label89
-    * op div *tmp189 4500000000 100000000
   236 assertequals 45 45 "atan"
   237 label *label90
   238 # "Function: inline def d(in n)"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
    61 op notEqual *tmp41 0 *tmp30
    62 assertequals false *tmp41 "notEqual null"
    63 # "Function: inline def d(in n)"
-    * op add *tmp42 zero 0
+   64 set *tmp42 zero
    65 label *label18
    66 op land *tmp44 1 *tmp42
    67 assertequals false *tmp44 "land 1"
 
   307 sensor *tmp184 null @id
   308 jump *label70 always
   309 label *label69
-    * sensor *tmp184 @copper-wall @id
+  310 set *tmp184 17
   311 label *label70
   312 label *label68
   313 assertequals 17 *tmp184 "Logic ID"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    63 # "Function: inline def d(in n)"
    64 set *tmp42 zero
    65 label *label18
-    * op land *tmp44 1 *tmp42
+   66 op land *tmp44 1 zero
    67 assertequals false *tmp44 "land 1"
    68 # "Function: inline def d(in n)"
    69 label *label19
 
    76 assertequals true *tmp50 "lessThan 1"
    77 # "Function: inline def d(in n)"
    78 label *label21
-    * op lessThan *tmp53 1 *tmp42
+   79 op lessThan *tmp53 1 zero
    80 assertequals false *tmp53 "lessThan 2"
    81 # "Function: inline def d(in n)"
    82 label *label22
 
    84 assertequals true *tmp56 "lessThanEq 1"
    85 # "Function: inline def d(in n)"
    86 label *label23
-    * op lessThanEq *tmp59 1 *tmp42
+   87 op lessThanEq *tmp59 1 zero
    88 assertequals false *tmp59 "lessThanEq 2"
    89 # "Function: inline def d(in n)"
    90 label *label24
 
   128 assertequals 1 *tmp88 "xor"
   129 # "Function: inline def d(in n)"
   130 label *label33
-    * op not *tmp91 *tmp42
+  131 op not *tmp91 zero
   132 assertequals -1 *tmp91 "not 1"
   133 # "Function: inline def d(in n)"
   134 op add *tmp92 zero 65535
 
   163 assertequals 1 *tmp114 "sign(2)"
   164 # "Function: inline def d(in n)"
   165 label *label41
-    * op sign *tmp117 *tmp42
+  166 op sign *tmp117 zero
   167 assertequals 0 *tmp117 "sign(0)"
   168 # "Function: inline def d(in n)"
   169 op add *tmp118 zero 2.718281828459045
 
   241 assertequals -8 *tmp141 "unary minus"
   242 # "Function: inline def d(in n)"
   243 label *label50
-    * op equal *tmp144 *tmp42 false
+  244 op equal *tmp144 zero false
   245 assertequals 1 *tmp144 "boolean negation 1"
   246 # "Function: inline def d(in n)"
   247 label *label51

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-1 instructions):
 
    61 op notEqual *tmp41 0 *tmp30
    62 assertequals false *tmp41 "notEqual null"
    63 # "Function: inline def d(in n)"
-    * set *tmp42 zero
    64 label *label18
    65 op land *tmp44 1 zero
    66 assertequals false *tmp44 "land 1"

Modifications by Iterated phase, If Expression Optimization, pass 2, iteration 1:
 
   302 assertequals %ff0000ff %ff0000 "short color literals"
   303 assertequals %ffffffff %[white] "named color literals"
   304 # "Function: inline def o(in n)"
-    * jump *label69 equal zero false
+  305 set *tmp184 17
+  306 jump *label70 equal zero false
   307 sensor *tmp184 null @id
   308 jump *label70 always
-    * label *label69
-    * set *tmp184 17
   309 label *label70
   310 label *label68
   311 assertequals 17 *tmp184 "Logic ID"

Modifications by Iterated phase, Single Step Elimination, pass 3, iteration 1 (-1 instructions):
 
   305 set *tmp184 17
   306 jump *label70 equal zero false
   307 sensor *tmp184 null @id
-    * jump *label70 always
   308 label *label70
   309 label *label68
   310 assertequals 17 *tmp184 "Logic ID"

Modifications by Jumps phase, Jump Normalization, pass 5, iteration 1:
     0 set NULL null
     1 set zero 0
     2 # "Function: inline def d(in n)"
-    * label *label4
     3 op add *tmp2 zero 5
     4 assertequals 5 *tmp2 "add"
     5 # "Function: inline def d(in n)"
     6 op add *tmp3 zero 6
-    * label *label5
     7 op sub *tmp5 1 zero
     8 assertequals 1 *tmp5 "sub"
     9 # "Function: inline def d(in n)"
    10 op add *tmp6 zero 2
-    * label *label6
    11 op mul *tmp8 3 *tmp6
    12 assertequals 6 *tmp8 "mul"
    13 # "Function: inline def d(in n)"
    14 op add *tmp9 zero 4
-    * label *label7
    15 op div *tmp11 6 *tmp9
    16 assertequals 1.5 *tmp11 "div"
    17 # "Function: inline def d(in n)"
    18 op add *tmp12 zero 100000
-    * label *label8
    19 op div *tmp14 1 *tmp12
    20 assertequals 0.00001 *tmp14 "div exp"
    21 # "Function: inline def d(in n)"
-    * label *label9
    22 op idiv *tmp17 6 *tmp9
    23 assertequals 1 *tmp17 "idiv"
    24 # "Function: inline def d(in n)"
-    * label *label10
    25 op mod *tmp20 6 *tmp9
    26 assertequals 2 *tmp20 "mod"
    27 # "Function: inline def d(in n)"
-    * label *label11
    28 op pow *tmp23 2 *tmp9
    29 assertequals 16 *tmp23 "pow"
    30 # "Function: inline def d(in n)"
-    * label *label12
    31 op equal *tmp26 5 *tmp2
    32 assertequals true *tmp26 "equal 1"
    33 # "Function: inline def d(in n)"
-    * label *label13
    34 op equal *tmp29 5 *tmp3
    35 assertequals false *tmp29 "equal 2"
    36 # "Function: inline def d(in n)"
    37 op add *tmp30 zero null
-    * label *label14
    38 op equal *tmp32 0 *tmp30
    39 assertequals true *tmp32 "equal null"
    40 # "Function: inline def d(in n)"
-    * label *label15
    41 op notEqual *tmp35 5 *tmp2
    42 assertequals false *tmp35 "notEqual 1"
    43 # "Function: inline def d(in n)"
-    * label *label16
    44 op notEqual *tmp38 5 *tmp3
    45 assertequals true *tmp38 "notEqual 2"
    46 # "Function: inline def d(in n)"
-    * label *label17
    47 op notEqual *tmp41 0 *tmp30
    48 assertequals false *tmp41 "notEqual null"
    49 # "Function: inline def d(in n)"
-    * label *label18
    50 op land *tmp44 1 zero
    51 assertequals false *tmp44 "land 1"
    52 # "Function: inline def d(in n)"
-    * label *label19
    53 op land *tmp47 1 *tmp6
    54 assertequals true *tmp47 "land 2"
    55 # "Function: inline def d(in n)"
    56 op add *tmp48 zero 1
-    * label *label20
    57 op lessThan *tmp50 0 *tmp48
    58 assertequals true *tmp50 "lessThan 1"
    59 # "Function: inline def d(in n)"
-    * label *label21
    60 op lessThan *tmp53 1 zero
    61 assertequals false *tmp53 "lessThan 2"
    62 # "Function: inline def d(in n)"
-    * label *label22
    63 op lessThanEq *tmp56 1 *tmp48
    64 assertequals true *tmp56 "lessThanEq 1"
    65 # "Function: inline def d(in n)"
-    * label *label23
    66 op lessThanEq *tmp59 1 zero
    67 assertequals false *tmp59 "lessThanEq 2"
    68 # "Function: inline def d(in n)"
-    * label *label24
    69 op greaterThan *tmp62 2 *tmp48
    70 assertequals true *tmp62 "greaterThan 1"
    71 # "Function: inline def d(in n)"
-    * label *label25
    72 op greaterThan *tmp65 1 *tmp6
    73 assertequals false *tmp65 "greaterThan 2"
    74 # "Function: inline def d(in n)"
-    * label *label26
    75 op greaterThanEq *tmp68 1 *tmp48
    76 assertequals true *tmp68 "greaterThanEq 1"
    77 # "Function: inline def d(in n)"
-    * label *label27
    78 op greaterThanEq *tmp71 1 *tmp6
    79 assertequals false *tmp71 "greaterThanEq 2"
    80 op strictEqual *tmp72 0 NULL
 
    82 op strictEqual *tmp73 null NULL
    83 assertequals true *tmp73 "strictEqual 2"
    84 # "Function: inline def d(in n)"
-    * label *label28
    85 op shl *tmp76 1 *tmp6
    86 assertequals 4 *tmp76 "shl"
    87 # "Function: inline def d(in n)"
-    * label *label29
    88 op shr *tmp79 9 *tmp6
    89 assertequals 2 *tmp79 "shr"
    90 # "Function: inline def d(in n)"
-    * label *label30
    91 op or *tmp82 1 *tmp6
    92 assertequals 3 *tmp82 "or"
    93 # "Function: inline def d(in n)"
-    * label *label31
    94 op and *tmp85 3 *tmp6
    95 assertequals 2 *tmp85 "and"
    96 # "Function: inline def d(in n)"
-    * label *label32
    97 op xor *tmp88 3 *tmp6
    98 assertequals 1 *tmp88 "xor"
    99 # "Function: inline def d(in n)"
-    * label *label33
   100 op not *tmp91 zero
   101 assertequals -1 *tmp91 "not 1"
   102 # "Function: inline def d(in n)"
   103 op add *tmp92 zero 65535
-    * label *label34
   104 op not *tmp94 *tmp92
   105 assertequals -65536 *tmp94 "not 2"
   106 # "Function: inline def d(in n)"
   107 op add *tmp97 zero 0xabcdefabcdef
-    * label *label35
   108 op not *tmp99 *tmp97
   109 assertequals -188900977659376 *tmp99 "not 3"
   110 # "Function: inline def d(in n)"
-    * label *label36
   111 op max *tmp102 2 *tmp9
   112 assertequals 4 *tmp102 "max"
   113 # "Function: inline def d(in n)"
-    * label *label37
   114 op min *tmp105 2 *tmp9
   115 assertequals 2 *tmp105 "min"
   116 # "Function: inline def d(in n)"
   117 op add *tmp106 zero -2
-    * label *label38
   118 op abs *tmp108 *tmp106
   119 assertequals 2 *tmp108 "abs"
   120 # "Function: inline def d(in n)"
-    * label *label39
   121 op sign *tmp111 *tmp106
   122 assertequals -1 *tmp111 "sign(-2)"
   123 # "Function: inline def d(in n)"
-    * label *label40
   124 op sign *tmp114 *tmp6
   125 assertequals 1 *tmp114 "sign(2)"
   126 # "Function: inline def d(in n)"
-    * label *label41
   127 op sign *tmp117 zero
   128 assertequals 0 *tmp117 "sign(0)"
   129 # "Function: inline def d(in n)"
   130 op add *tmp118 zero 2.718281828459045
-    * label *label42
   131 op log *tmp120 *tmp118
   132 assertequals 1 *tmp120 "log"
   133 # "Function: inline def d(in n)"
   134 op add *tmp121 zero 10
-    * label *label43
   135 op log10 *tmp123 *tmp121
   136 assertequals 1 *tmp123 "log10"
   137 # "Function: inline def d(in n)"
   138 op add *tmp124 zero 2.5
-    * label *label44
   139 op floor *tmp126 *tmp124
   140 assertequals 2 *tmp126 "floor"
   141 # "Function: inline def d(in n)"
-    * label *label45
   142 op ceil *tmp129 *tmp124
   143 assertequals 3 *tmp129 "ceil"
   144 # "Function: inline def d(in n)"
   145 op add *tmp130 zero 16
-    * label *label46
   146 op sqrt *tmp132 *tmp130
   147 assertequals 4 *tmp132 "sqrt"
   148 # "Function: inline def d(in n)"
-    * label *label47
   149 op angle *tmp135 1 *tmp48
   150 assertequals 45 *tmp135 "angle"
   151 # "Function: inline def d(in n)"
   152 op add *tmp136 zero 135
-    * label *label48
   153 op angleDiff *tmp138 45 *tmp136
   154 assertequals 90 *tmp138 "angleDiff"
   155 assertequals 5 5 "len"
-    * label *label73
   156 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   157 # "Function: inline def round(in x)"
-    * label *label74
   158 assertequals 1 1 "sin"
-    * label *label75
-    * label *label76
   159 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   160 # "Function: inline def round(in x)"
-    * label *label77
   161 assertequals -1 -1 "cos"
-    * label *label78
-    * label *label79
   162 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   163 # "Function: inline def round(in x)"
-    * label *label80
   164 assertequals 1 1 "tan"
-    * label *label81
-    * label *label82
   165 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   166 # "Function: inline def round(in x)"
-    * label *label83
   167 assertequals 90 90 "asin"
-    * label *label84
-    * label *label85
   168 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   169 # "Function: inline def round(in x)"
-    * label *label86
   170 assertequals 0 0 "acos"
-    * label *label87
-    * label *label88
   171 # "Function: void assertEqualsRound(in expected, in actual, in title)"
   172 # "Function: inline def round(in x)"
-    * label *label89
   173 assertequals 45 45 "atan"
-    * label *label90
   174 # "Function: inline def d(in n)"
-    * label *label49
   175 op sub *tmp141 -8 zero
   176 assertequals -8 *tmp141 "unary minus"
   177 # "Function: inline def d(in n)"
-    * label *label50
   178 op equal *tmp144 zero false
   179 assertequals 1 *tmp144 "boolean negation 1"
   180 # "Function: inline def d(in n)"
-    * label *label51
   181 op equal *tmp147 *tmp48 false
   182 assertequals 0 *tmp147 "boolean negation 2"
   183 # "Function: inline def d(in n)"
-    * label *label52
   184 op equal *tmp150 *tmp6 false
   185 assertequals 0 *tmp150 "boolean negation 3"
   186 # "Function: inline def d(in n)"
-    * label *label53
   187 assertequals 16 *tmp23 "**="
   188 # "Function: inline def d(in n)"
-    * label *label54
   189 op mul :a 2 *tmp9
   190 assertequals 8 :a "*="
   191 # "Function: inline def d(in n)"
-    * label *label55
   192 assertequals 1.5 *tmp11 "/="
   193 # "Function: inline def d(in n)"
-    * label *label56
   194 assertequals 1 *tmp17 "\="
   195 # "Function: inline def d(in n)"
-    * label *label57
   196 assertequals 2 *tmp20 "%="
   197 # "Function: inline def d(in n)"
-    * label *label58
   198 assertequals 6 *tmp3 "+="
   199 # "Function: inline def d(in n)"
-    * label *label59
   200 op sub :a 2 zero
   201 assertequals 2 :a "-="
   202 # "Function: inline def d(in n)"
-    * label *label60
   203 assertequals 4 *tmp76 "<<="
   204 # "Function: inline def d(in n)"
-    * label *label61
   205 assertequals 2 *tmp79 ">>="
   206 # "Function: inline def d(in n)"
-    * label *label62
   207 assertequals 3 *tmp82 "|="
   208 # "Function: inline def d(in n)"
-    * label *label63
   209 assertequals 2 *tmp85 "&="
   210 # "Function: inline def d(in n)"
-    * label *label64
   211 assertequals 1 *tmp88 "^="
   212 # "Function: inline def d(in n)"
-    * label *label65
   213 assertequals false *tmp44 "&&="
   214 # "Function: inline def d(in n)"
-    * label *label66
   215 assertequals true *tmp47 "&&="
   216 # "Function: inline def d(in n)"
-    * label *label67
   217 op or *tmp181 0 *tmp6
   218 op notEqual :a *tmp181 false
   219 assertequals true :a "||="
 
   224 jump *label70 equal zero false
   225 sensor *tmp184 null @id
   226 label *label70
-    * label *label68
   227 assertequals 17 *tmp184 "Logic ID"
   228 stop
   229 end

Modifications by Jumps phase, Single Step Elimination, pass 5, iteration 1 (-1 instructions):
 
   226 label *label70
   227 assertequals 17 *tmp184 "Logic ID"
   228 stop
-    * end

Final code before resolving virtual instructions:

set NULL null
set zero 0
# "Function: inline def d(in n)"
op add *tmp2 zero 5
assertequals 5 *tmp2 "add"
# "Function: inline def d(in n)"
op add *tmp3 zero 6
op sub *tmp5 1 zero
assertequals 1 *tmp5 "sub"
# "Function: inline def d(in n)"
op add *tmp6 zero 2
op mul *tmp8 3 *tmp6
assertequals 6 *tmp8 "mul"
# "Function: inline def d(in n)"
op add *tmp9 zero 4
op div *tmp11 6 *tmp9
assertequals 1.5 *tmp11 "div"
# "Function: inline def d(in n)"
op add *tmp12 zero 100000
op div *tmp14 1 *tmp12
assertequals 0.00001 *tmp14 "div exp"
# "Function: inline def d(in n)"
op idiv *tmp17 6 *tmp9
assertequals 1 *tmp17 "idiv"
# "Function: inline def d(in n)"
op mod *tmp20 6 *tmp9
assertequals 2 *tmp20 "mod"
# "Function: inline def d(in n)"
op pow *tmp23 2 *tmp9
assertequals 16 *tmp23 "pow"
# "Function: inline def d(in n)"
op equal *tmp26 5 *tmp2
assertequals true *tmp26 "equal 1"
# "Function: inline def d(in n)"
op equal *tmp29 5 *tmp3
assertequals false *tmp29 "equal 2"
# "Function: inline def d(in n)"
op add *tmp30 zero null
op equal *tmp32 0 *tmp30
assertequals true *tmp32 "equal null"
# "Function: inline def d(in n)"
op notEqual *tmp35 5 *tmp2
assertequals false *tmp35 "notEqual 1"
# "Function: inline def d(in n)"
op notEqual *tmp38 5 *tmp3
assertequals true *tmp38 "notEqual 2"
# "Function: inline def d(in n)"
op notEqual *tmp41 0 *tmp30
assertequals false *tmp41 "notEqual null"
# "Function: inline def d(in n)"
op land *tmp44 1 zero
assertequals false *tmp44 "land 1"
# "Function: inline def d(in n)"
op land *tmp47 1 *tmp6
assertequals true *tmp47 "land 2"
# "Function: inline def d(in n)"
op add *tmp48 zero 1
op lessThan *tmp50 0 *tmp48
assertequals true *tmp50 "lessThan 1"
# "Function: inline def d(in n)"
op lessThan *tmp53 1 zero
assertequals false *tmp53 "lessThan 2"
# "Function: inline def d(in n)"
op lessThanEq *tmp56 1 *tmp48
assertequals true *tmp56 "lessThanEq 1"
# "Function: inline def d(in n)"
op lessThanEq *tmp59 1 zero
assertequals false *tmp59 "lessThanEq 2"
# "Function: inline def d(in n)"
op greaterThan *tmp62 2 *tmp48
assertequals true *tmp62 "greaterThan 1"
# "Function: inline def d(in n)"
op greaterThan *tmp65 1 *tmp6
assertequals false *tmp65 "greaterThan 2"
# "Function: inline def d(in n)"
op greaterThanEq *tmp68 1 *tmp48
assertequals true *tmp68 "greaterThanEq 1"
# "Function: inline def d(in n)"
op greaterThanEq *tmp71 1 *tmp6
assertequals false *tmp71 "greaterThanEq 2"
op strictEqual *tmp72 0 NULL
assertequals false *tmp72 "strictEqual 1"
op strictEqual *tmp73 null NULL
assertequals true *tmp73 "strictEqual 2"
# "Function: inline def d(in n)"
op shl *tmp76 1 *tmp6
assertequals 4 *tmp76 "shl"
# "Function: inline def d(in n)"
op shr *tmp79 9 *tmp6
assertequals 2 *tmp79 "shr"
# "Function: inline def d(in n)"
op or *tmp82 1 *tmp6
assertequals 3 *tmp82 "or"
# "Function: inline def d(in n)"
op and *tmp85 3 *tmp6
assertequals 2 *tmp85 "and"
# "Function: inline def d(in n)"
op xor *tmp88 3 *tmp6
assertequals 1 *tmp88 "xor"
# "Function: inline def d(in n)"
op not *tmp91 zero
assertequals -1 *tmp91 "not 1"
# "Function: inline def d(in n)"
op add *tmp92 zero 65535
op not *tmp94 *tmp92
assertequals -65536 *tmp94 "not 2"
# "Function: inline def d(in n)"
op add *tmp97 zero 0xabcdefabcdef
op not *tmp99 *tmp97
assertequals -188900977659376 *tmp99 "not 3"
# "Function: inline def d(in n)"
op max *tmp102 2 *tmp9
assertequals 4 *tmp102 "max"
# "Function: inline def d(in n)"
op min *tmp105 2 *tmp9
assertequals 2 *tmp105 "min"
# "Function: inline def d(in n)"
op add *tmp106 zero -2
op abs *tmp108 *tmp106
assertequals 2 *tmp108 "abs"
# "Function: inline def d(in n)"
op sign *tmp111 *tmp106
assertequals -1 *tmp111 "sign(-2)"
# "Function: inline def d(in n)"
op sign *tmp114 *tmp6
assertequals 1 *tmp114 "sign(2)"
# "Function: inline def d(in n)"
op sign *tmp117 zero
assertequals 0 *tmp117 "sign(0)"
# "Function: inline def d(in n)"
op add *tmp118 zero 2.718281828459045
op log *tmp120 *tmp118
assertequals 1 *tmp120 "log"
# "Function: inline def d(in n)"
op add *tmp121 zero 10
op log10 *tmp123 *tmp121
assertequals 1 *tmp123 "log10"
# "Function: inline def d(in n)"
op add *tmp124 zero 2.5
op floor *tmp126 *tmp124
assertequals 2 *tmp126 "floor"
# "Function: inline def d(in n)"
op ceil *tmp129 *tmp124
assertequals 3 *tmp129 "ceil"
# "Function: inline def d(in n)"
op add *tmp130 zero 16
op sqrt *tmp132 *tmp130
assertequals 4 *tmp132 "sqrt"
# "Function: inline def d(in n)"
op angle *tmp135 1 *tmp48
assertequals 45 *tmp135 "angle"
# "Function: inline def d(in n)"
op add *tmp136 zero 135
op angleDiff *tmp138 45 *tmp136
assertequals 90 *tmp138 "angleDiff"
assertequals 5 5 "len"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "sin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals -1 -1 "cos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 1 1 "tan"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 90 90 "asin"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 0 0 "acos"
# "Function: void assertEqualsRound(in expected, in actual, in title)"
# "Function: inline def round(in x)"
assertequals 45 45 "atan"
# "Function: inline def d(in n)"
op sub *tmp141 -8 zero
assertequals -8 *tmp141 "unary minus"
# "Function: inline def d(in n)"
op equal *tmp144 zero false
assertequals 1 *tmp144 "boolean negation 1"
# "Function: inline def d(in n)"
op equal *tmp147 *tmp48 false
assertequals 0 *tmp147 "boolean negation 2"
# "Function: inline def d(in n)"
op equal *tmp150 *tmp6 false
assertequals 0 *tmp150 "boolean negation 3"
# "Function: inline def d(in n)"
assertequals 16 *tmp23 "**="
# "Function: inline def d(in n)"
op mul :a 2 *tmp9
assertequals 8 :a "*="
# "Function: inline def d(in n)"
assertequals 1.5 *tmp11 "/="
# "Function: inline def d(in n)"
assertequals 1 *tmp17 "\="
# "Function: inline def d(in n)"
assertequals 2 *tmp20 "%="
# "Function: inline def d(in n)"
assertequals 6 *tmp3 "+="
# "Function: inline def d(in n)"
op sub :a 2 zero
assertequals 2 :a "-="
# "Function: inline def d(in n)"
assertequals 4 *tmp76 "<<="
# "Function: inline def d(in n)"
assertequals 2 *tmp79 ">>="
# "Function: inline def d(in n)"
assertequals 3 *tmp82 "|="
# "Function: inline def d(in n)"
assertequals 2 *tmp85 "&="
# "Function: inline def d(in n)"
assertequals 1 *tmp88 "^="
# "Function: inline def d(in n)"
assertequals false *tmp44 "&&="
# "Function: inline def d(in n)"
assertequals true *tmp47 "&&="
# "Function: inline def d(in n)"
op or *tmp181 0 *tmp6
op notEqual :a *tmp181 false
assertequals true :a "||="
assertequals %ff0000ff %ff0000 "short color literals"
assertequals %ffffffff %[white] "named color literals"
# "Function: inline def o(in n)"
set *tmp184 17
jump *label70 equal zero false
sensor *tmp184 null @id
label *label70
assertequals 17 *tmp184 "Logic ID"
stop
