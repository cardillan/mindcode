   117 instructions before optimizations.
     1 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Jump Optimization (6 iterations).
     3 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
   180 instructions eliminated by Expression Optimization (5 iterations).
    31 instructions eliminated by Data Flow Optimization (4 passes, 16 iterations).
     1 instructions eliminated by Loop Optimization (5 iterations).
     2 loops improved by Loop Optimization.
   171 instructions added by Loop Unrolling (9 iterations).
     2 loops unrolled by Loop Unrolling.
     3 jump tables inlined by Array Optimization.
     8 instructions eliminated by Print Merging.
    75 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 899):
  * Unroll iteration loop at line 7:5                            cost     0, benefit       49.0, efficiency   Infinity (-20 instructions)
    Unroll loop at line 25:5                                     cost    18, benefit      450.0, efficiency       25.0
    Inline read jump table of array 'array'                      cost    14, benefit     1300.0, efficiency       92.9
    Inline write jump table of array 'array'                     cost     0, benefit     1250.0, efficiency   Infinity
    Inline array access at line 17:5                             cost    17, benefit     1250.0, efficiency       73.5
    Inline array access at line 26:9                             cost    17, benefit       50.0, efficiency        2.9
    Inline array access at line 17:5                             cost    17, benefit     1250.0, efficiency       73.5

Pass 1: speed optimization selection (cost limit 919):
    Unroll loop at line 25:5                                     cost    18, benefit      450.0, efficiency       25.0
    Inline read jump table of array 'array'                      cost    14, benefit     1300.0, efficiency       92.9
  * Inline write jump table of array 'array'                     cost     0, benefit     1250.0, efficiency   Infinity (-3 instructions)
    Inline array access at line 17:5                             cost    17, benefit     1250.0, efficiency       73.5
    Inline array access at line 26:9                             cost    17, benefit       50.0, efficiency        2.9
    Inline array access at line 17:5                             cost    17, benefit     1250.0, efficiency       73.5

Pass 1: speed optimization selection (cost limit 922):
    Unroll loop at line 25:5                                     cost    18, benefit      450.0, efficiency       25.0
  * Inline read jump table of array 'array'                      cost    14, benefit     1300.0, efficiency       92.9 (+14 instructions)
    Inline array access at line 17:5                             cost    17, benefit     1250.0, efficiency       73.5
    Inline array access at line 26:9                             cost    17, benefit       50.0, efficiency        2.9

Pass 1: speed optimization selection (cost limit 908):
  * Unroll loop at line 25:5                                     cost     1, benefit      450.0, efficiency      450.0 (+181 instructions)

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-1 instructions):
 
    60 op mod *tmp1 :countDigits.0:number 10
    61 set *tmp2 *tmp1
    62 readarr<regular> *tmp3 .array[] *tmp2
-    * set *tmp4 *tmp3
    63 op add *tmp3 *tmp3 1
    64 writearr<regular> *tmp3 .array[] *tmp2
    65 op idiv :countDigits.0:number :countDigits.0:number 10

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-1 instructions):
 
    57 jump *label15 greaterThanEq :i LIMIT
    58 set :countDigits.0:number :i
    59 label *label17
-    * op mod *tmp1 :countDigits.0:number 10
-    * set *tmp2 *tmp1
+   60 op mod *tmp2 :countDigits.0:number 10
    61 readarr<regular> *tmp3 .array[] *tmp2
    62 op add *tmp3 *tmp3 1
    63 writearr<regular> *tmp3 .array[] *tmp2

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    63 writearr<regular> *tmp3 .array[] *tmp2
    64 op idiv :countDigits.0:number :countDigits.0:number 10
    65 label *label18
-    * op greaterThan *tmp5 :countDigits.0:number 0
-    * jump *label17 notEqual *tmp5 false
+   66 jump *label17 greaterThan :countDigits.0:number 0
    67 label *label19
    68 label *label16
    69 label *label14

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-10 instructions):
     0 set LIMIT 100
-    * set :a .array*0
     1 setaddr *tmp0 *label3
     2 jump *label0 always
     3 multilabel *label3 (m:marker0)
-    * set .array*0 :a
-    * set :a .array*1
+    4 set .array*0 0
     5 setaddr *tmp0 *label4
     6 jump *label0 always
     7 multilabel *label4 (m:marker0)
-    * set .array*1 :a
-    * set :a .array*2
+    8 set .array*1 0
     9 setaddr *tmp0 *label5
    10 jump *label0 always
    11 multilabel *label5 (m:marker0)
-    * set .array*2 :a
-    * set :a .array*3
+   12 set .array*2 0
    13 setaddr *tmp0 *label6
    14 jump *label0 always
    15 multilabel *label6 (m:marker0)
-    * set .array*3 :a
-    * set :a .array*4
+   16 set .array*3 0
    17 setaddr *tmp0 *label7
    18 jump *label0 always
    19 multilabel *label7 (m:marker0)
-    * set .array*4 :a
-    * set :a .array*5
+   20 set .array*4 0
    21 setaddr *tmp0 *label8
    22 jump *label0 always
    23 multilabel *label8 (m:marker0)
-    * set .array*5 :a
-    * set :a .array*6
+   24 set .array*5 0
    25 setaddr *tmp0 *label9
    26 jump *label0 always
    27 multilabel *label9 (m:marker0)
-    * set .array*6 :a
-    * set :a .array*7
+   28 set .array*6 0
    29 setaddr *tmp0 *label10
    30 jump *label0 always
    31 multilabel *label10 (m:marker0)
-    * set .array*7 :a
-    * set :a .array*8
+   32 set .array*7 0
    33 setaddr *tmp0 *label11
    34 jump *label0 always
    35 multilabel *label11 (m:marker0)
-    * set .array*8 :a
-    * set :a .array*9
+   36 set .array*8 0
    37 setaddr *tmp0 *label12
    38 label *label0
    39 set :a 0
    40 label *label1
    41 multijump *tmp0 0 0 (m:marker0)
    42 multilabel *label12 (m:marker0)
-    * set .array*9 :a
+   43 set .array*9 0
    44 label *label2
    45 set :i 0
    46 label *label13
 
    67 jump *label23 greaterThanEq :printArray.0:i 10
    68 set *tmp6 :printArray.0:i
    69 print "-"
-    * readarr<regular> *tmp7 .array[] *tmp6
+   70 readarr<regular> *tmp7 .array[] :printArray.0:i
    71 print *tmp7
    72 label *label22
    73 op add :printArray.0:i :printArray.0:i 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
    36 set .array*8 0
    37 setaddr *tmp0 *label12
    38 label *label0
-    * set :a 0
    39 label *label1
    40 multijump *tmp0 0 0 (m:marker0)
    41 multilabel *label12 (m:marker0)
 
    64 set :printArray.0:i 1
    65 label *label21
    66 jump *label23 greaterThanEq :printArray.0:i 10
-    * set *tmp6 :printArray.0:i
    67 print "-"
    68 readarr<regular> *tmp7 .array[] :printArray.0:i
    69 print *tmp7

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
 
    44 set :i 0
    45 label *label13
    46 jump *label15 greaterThanEq :i LIMIT
+   47 label *label24
    48 set :countDigits.0:number :i
    49 label *label17
    50 op mod *tmp2 :countDigits.0:number 10
 
    58 label *label16
    59 label *label14
    60 op add :i :i 1
-    * jump *label13 always
+   61 jump *label24 lessThan :i LIMIT
    62 label *label15
    63 assertflush
    64 print .array*0
    65 set :printArray.0:i 1
    66 label *label21
-    * jump *label23 greaterThanEq :printArray.0:i 10
+   67 label *label25
    68 print "-"
    69 readarr<regular> *tmp7 .array[] :printArray.0:i
    70 print *tmp7
    71 label *label22
    72 op add :printArray.0:i :printArray.0:i 1
-    * jump *label21 always
+   73 jump *label25 lessThan :printArray.0:i 10
    74 label *label23
    75 label *label20
    76 assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"

Modifications by Unroll iteration loop at line 7:5 (-20 instructions):
     0 set LIMIT 100
-    * setaddr *tmp0 *label3
-    * jump *label0 always
-    * multilabel *label3 (m:marker0)
-    * set .array*0 0
-    * setaddr *tmp0 *label4
-    * jump *label0 always
-    * multilabel *label4 (m:marker0)
-    * set .array*1 0
-    * setaddr *tmp0 *label5
-    * jump *label0 always
-    * multilabel *label5 (m:marker0)
-    * set .array*2 0
-    * setaddr *tmp0 *label6
-    * jump *label0 always
-    * multilabel *label6 (m:marker0)
-    * set .array*3 0
-    * setaddr *tmp0 *label7
-    * jump *label0 always
-    * multilabel *label7 (m:marker0)
-    * set .array*4 0
-    * setaddr *tmp0 *label8
-    * jump *label0 always
-    * multilabel *label8 (m:marker0)
-    * set .array*5 0
-    * setaddr *tmp0 *label9
-    * jump *label0 always
-    * multilabel *label9 (m:marker0)
-    * set .array*6 0
-    * setaddr *tmp0 *label10
-    * jump *label0 always
-    * multilabel *label10 (m:marker0)
-    * set .array*7 0
-    * setaddr *tmp0 *label11
-    * jump *label0 always
-    * multilabel *label11 (m:marker0)
-    * set .array*8 0
-    * setaddr *tmp0 *label12
-    * label *label0
-    * label *label1
-    * multijump *tmp0 0 0 (m:marker0)
-    * multilabel *label12 (m:marker0)
-    * set .array*9 0
-    * label *label2
+    1 label *label26
+    2 label *label27
+    3 set .array*0 0
+    4 label *label30
+    5 label *label31
+    6 set .array*1 0
+    7 label *label34
+    8 label *label35
+    9 set .array*2 0
+   10 label *label38
+   11 label *label39
+   12 set .array*3 0
+   13 label *label42
+   14 label *label43
+   15 set .array*4 0
+   16 label *label46
+   17 label *label47
+   18 set .array*5 0
+   19 label *label50
+   20 label *label51
+   21 set .array*6 0
+   22 label *label54
+   23 label *label55
+   24 set .array*7 0
+   25 label *label58
+   26 label *label59
+   27 set .array*8 0
+   28 label *label62
+   29 label *label63
+   30 set .array*9 0
+   31 label *label2
    32 set :i 0
    33 label *label13
    34 jump *label15 greaterThanEq :i LIMIT

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    31 label *label2
    32 set :i 0
    33 label *label13
-    * jump *label15 greaterThanEq :i LIMIT
+   34 jump *label15 greaterThanEq 0 LIMIT
    35 label *label24
    36 set :countDigits.0:number :i
    37 label *label17

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-3 instructions):
 
    38 op mod *tmp2 :countDigits.0:number 10
    39 readarr<regular> *tmp3 .array[] *tmp2
    40 op add *tmp3 *tmp3 1
-    * writearr<regular> *tmp3 .array[] *tmp2
+   41 writearr<inlined> *tmp3 .array[] *tmp2
    42 op idiv :countDigits.0:number :countDigits.0:number 10
    43 label *label18
    44 jump *label17 greaterThan :countDigits.0:number 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (+14 instructions):
 
    36 set :countDigits.0:number :i
    37 label *label17
    38 op mod *tmp2 :countDigits.0:number 10
-    * readarr<regular> *tmp3 .array[] *tmp2
+   39 readarr<inlined> *tmp3 .array[] *tmp2
    40 op add *tmp3 *tmp3 1
    41 writearr<inlined> *tmp3 .array[] *tmp2
    42 op idiv :countDigits.0:number :countDigits.0:number 10
 
    54 label *label21
    55 label *label25
    56 print "-"
-    * readarr<regular> *tmp7 .array[] :printArray.0:i
+   57 readarr<inlined> *tmp7 .array[] :printArray.0:i
    58 print *tmp7
    59 label *label22
    60 op add :printArray.0:i :printArray.0:i 1

Modifications by Unroll loop at line 25:5 (+191 instructions):
 
    50 label *label15
    51 assertflush
    52 print .array*0
-    * set :printArray.0:i 1
-    * label *label21
-    * label *label25
-    * print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
-    * print *tmp7
-    * label *label22
-    * op add :printArray.0:i :printArray.0:i 1
-    * jump *label25 lessThan :printArray.0:i 10
-    * label *label23
+   53 set :printArray.0:i 1
+   54 label *label67
+   55 label *label68
+   56 print "-"
+   57 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   58 print *tmp7
+   59 label *label69
+   60 op add :printArray.0:i :printArray.0:i 1
+   61 label *label70
+   62 print "-"
+   63 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   64 print *tmp7
+   65 label *label71
+   66 op add :printArray.0:i :printArray.0:i 1
+   67 label *label72
+   68 print "-"
+   69 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   70 print *tmp7
+   71 label *label73
+   72 op add :printArray.0:i :printArray.0:i 1
+   73 label *label74
+   74 print "-"
+   75 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   76 print *tmp7
+   77 label *label75
+   78 op add :printArray.0:i :printArray.0:i 1
+   79 label *label76
+   80 print "-"
+   81 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   82 print *tmp7
+   83 label *label77
+   84 op add :printArray.0:i :printArray.0:i 1
+   85 label *label78
+   86 print "-"
+   87 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   88 print *tmp7
+   89 label *label79
+   90 op add :printArray.0:i :printArray.0:i 1
+   91 label *label80
+   92 print "-"
+   93 readarr<inlined> *tmp7 .array[] :printArray.0:i
+   94 print *tmp7
+   95 label *label81
+   96 op add :printArray.0:i :printArray.0:i 1
+   97 label *label82
+   98 print "-"
+   99 readarr<inlined> *tmp7 .array[] :printArray.0:i
+  100 print *tmp7
+  101 label *label83
+  102 op add :printArray.0:i :printArray.0:i 1
+  103 label *label84
+  104 print "-"
+  105 readarr<inlined> *tmp7 .array[] :printArray.0:i
+  106 print *tmp7
+  107 label *label85
+  108 op add :printArray.0:i :printArray.0:i 1
+  109 label *label23
   110 label *label20
   111 assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"
   112 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    54 label *label67
    55 label *label68
    56 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   57 readarr<inlined> *tmp7 .array[] 1
    58 print *tmp7
    59 label *label69
-    * op add :printArray.0:i :printArray.0:i 1
+   60 op add :printArray.0:i 1 1
    61 label *label70
    62 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   63 readarr<inlined> *tmp7 .array[] 2
    64 print *tmp7
    65 label *label71
-    * op add :printArray.0:i :printArray.0:i 1
+   66 op add :printArray.0:i 2 1
    67 label *label72
    68 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   69 readarr<inlined> *tmp7 .array[] 3
    70 print *tmp7
    71 label *label73
-    * op add :printArray.0:i :printArray.0:i 1
+   72 op add :printArray.0:i 3 1
    73 label *label74
    74 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   75 readarr<inlined> *tmp7 .array[] 4
    76 print *tmp7
    77 label *label75
-    * op add :printArray.0:i :printArray.0:i 1
+   78 op add :printArray.0:i 4 1
    79 label *label76
    80 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   81 readarr<inlined> *tmp7 .array[] 5
    82 print *tmp7
    83 label *label77
-    * op add :printArray.0:i :printArray.0:i 1
+   84 op add :printArray.0:i 5 1
    85 label *label78
    86 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   87 readarr<inlined> *tmp7 .array[] 6
    88 print *tmp7
    89 label *label79
-    * op add :printArray.0:i :printArray.0:i 1
+   90 op add :printArray.0:i 6 1
    91 label *label80
    92 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   93 readarr<inlined> *tmp7 .array[] 7
    94 print *tmp7
    95 label *label81
-    * op add :printArray.0:i :printArray.0:i 1
+   96 op add :printArray.0:i 7 1
    97 label *label82
    98 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+   99 readarr<inlined> *tmp7 .array[] 8
   100 print *tmp7
   101 label *label83
-    * op add :printArray.0:i :printArray.0:i 1
+  102 op add :printArray.0:i 8 1
   103 label *label84
   104 print "-"
-    * readarr<inlined> *tmp7 .array[] :printArray.0:i
+  105 readarr<inlined> *tmp7 .array[] 9
   106 print *tmp7
   107 label *label85
-    * op add :printArray.0:i :printArray.0:i 1
+  108 op add :printArray.0:i 9 1
   109 label *label23
   110 label *label20
   111 assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-10 instructions):
 
    50 label *label15
    51 assertflush
    52 print .array*0
-    * set :printArray.0:i 1
    53 label *label67
    54 label *label68
    55 print "-"
    56 readarr<inlined> *tmp7 .array[] 1
    57 print *tmp7
    58 label *label69
-    * op add :printArray.0:i 1 1
    59 label *label70
    60 print "-"
    61 readarr<inlined> *tmp7 .array[] 2
    62 print *tmp7
    63 label *label71
-    * op add :printArray.0:i 2 1
    64 label *label72
    65 print "-"
    66 readarr<inlined> *tmp7 .array[] 3
    67 print *tmp7
    68 label *label73
-    * op add :printArray.0:i 3 1
    69 label *label74
    70 print "-"
    71 readarr<inlined> *tmp7 .array[] 4
    72 print *tmp7
    73 label *label75
-    * op add :printArray.0:i 4 1
    74 label *label76
    75 print "-"
    76 readarr<inlined> *tmp7 .array[] 5
    77 print *tmp7
    78 label *label77
-    * op add :printArray.0:i 5 1
    79 label *label78
    80 print "-"
    81 readarr<inlined> *tmp7 .array[] 6
    82 print *tmp7
    83 label *label79
-    * op add :printArray.0:i 6 1
    84 label *label80
    85 print "-"
    86 readarr<inlined> *tmp7 .array[] 7
    87 print *tmp7
    88 label *label81
-    * op add :printArray.0:i 7 1
    89 label *label82
    90 print "-"
    91 readarr<inlined> *tmp7 .array[] 8
    92 print *tmp7
    93 label *label83
-    * op add :printArray.0:i 8 1
    94 label *label84
    95 print "-"
    96 readarr<inlined> *tmp7 .array[] 9
    97 print *tmp7
    98 label *label85
-    * op add :printArray.0:i 9 1
    99 label *label23
   100 label *label20
   101 assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1 (-180 instructions):
 
    53 label *label67
    54 label *label68
    55 print "-"
-    * readarr<inlined> *tmp7 .array[] 1
+   56 set *tmp7 .array*1
    57 print *tmp7
    58 label *label69
    59 label *label70
    60 print "-"
-    * readarr<inlined> *tmp7 .array[] 2
+   61 set *tmp7 .array*2
    62 print *tmp7
    63 label *label71
    64 label *label72
    65 print "-"
-    * readarr<inlined> *tmp7 .array[] 3
+   66 set *tmp7 .array*3
    67 print *tmp7
    68 label *label73
    69 label *label74
    70 print "-"
-    * readarr<inlined> *tmp7 .array[] 4
+   71 set *tmp7 .array*4
    72 print *tmp7
    73 label *label75
    74 label *label76
    75 print "-"
-    * readarr<inlined> *tmp7 .array[] 5
+   76 set *tmp7 .array*5
    77 print *tmp7
    78 label *label77
    79 label *label78
    80 print "-"
-    * readarr<inlined> *tmp7 .array[] 6
+   81 set *tmp7 .array*6
    82 print *tmp7
    83 label *label79
    84 label *label80
    85 print "-"
-    * readarr<inlined> *tmp7 .array[] 7
+   86 set *tmp7 .array*7
    87 print *tmp7
    88 label *label81
    89 label *label82
    90 print "-"
-    * readarr<inlined> *tmp7 .array[] 8
+   91 set *tmp7 .array*8
    92 print *tmp7
    93 label *label83
    94 label *label84
    95 print "-"
-    * readarr<inlined> *tmp7 .array[] 9
+   96 set *tmp7 .array*9
    97 print *tmp7
    98 label *label85
    99 label *label23

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
    54 label *label68
    55 print "-"
    56 set *tmp7 .array*1
-    * print *tmp7
+   57 print .array*1
    58 label *label69
    59 label *label70
    60 print "-"
    61 set *tmp7 .array*2
-    * print *tmp7
+   62 print .array*2
    63 label *label71
    64 label *label72
    65 print "-"
    66 set *tmp7 .array*3
-    * print *tmp7
+   67 print .array*3
    68 label *label73
    69 label *label74
    70 print "-"
    71 set *tmp7 .array*4
-    * print *tmp7
+   72 print .array*4
    73 label *label75
    74 label *label76
    75 print "-"
    76 set *tmp7 .array*5
-    * print *tmp7
+   77 print .array*5
    78 label *label77
    79 label *label78
    80 print "-"
    81 set *tmp7 .array*6
-    * print *tmp7
+   82 print .array*6
    83 label *label79
    84 label *label80
    85 print "-"
    86 set *tmp7 .array*7
-    * print *tmp7
+   87 print .array*7
    88 label *label81
    89 label *label82
    90 print "-"
    91 set *tmp7 .array*8
-    * print *tmp7
+   92 print .array*8
    93 label *label83
    94 label *label84
    95 print "-"
    96 set *tmp7 .array*9
-    * print *tmp7
+   97 print .array*9
    98 label *label85
    99 label *label23
   100 label *label20

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 2 (-9 instructions):
 
    53 label *label67
    54 label *label68
    55 print "-"
-    * set *tmp7 .array*1
    56 print .array*1
    57 label *label69
    58 label *label70
    59 print "-"
-    * set *tmp7 .array*2
    60 print .array*2
    61 label *label71
    62 label *label72
    63 print "-"
-    * set *tmp7 .array*3
    64 print .array*3
    65 label *label73
    66 label *label74
    67 print "-"
-    * set *tmp7 .array*4
    68 print .array*4
    69 label *label75
    70 label *label76
    71 print "-"
-    * set *tmp7 .array*5
    72 print .array*5
    73 label *label77
    74 label *label78
    75 print "-"
-    * set *tmp7 .array*6
    76 print .array*6
    77 label *label79
    78 label *label80
    79 print "-"
-    * set *tmp7 .array*7
    80 print .array*7
    81 label *label81
    82 label *label82
    83 print "-"
-    * set *tmp7 .array*8
    84 print .array*8
    85 label *label83
    86 label *label84
    87 print "-"
-    * set *tmp7 .array*9
    88 print .array*9
    89 label *label85
    90 label *label23

Modifications by Virtual Instruction Expansion (+2 instructions):
 
    36 set :countDigits.0:number :i
    37 label *label17
    38 op mod *tmp2 :countDigits.0:number 10
-    * readarr<inlined> *tmp3 .array[] *tmp2
+   39 op mul *tmp8 *tmp2 2
+   40 multijump *label87 *tmp8 0 (m:marker1)
+   41 multilabel *label87 (m:marker1)
+   42 set *tmp3 .array*0
+   43 jump *label86 always
+   44 multilabel *label88 (m:marker1)
+   45 set *tmp3 .array*1
+   46 jump *label86 always
+   47 multilabel *label89 (m:marker1)
+   48 set *tmp3 .array*2
+   49 jump *label86 always
+   50 multilabel *label90 (m:marker1)
+   51 set *tmp3 .array*3
+   52 jump *label86 always
+   53 multilabel *label91 (m:marker1)
+   54 set *tmp3 .array*4
+   55 jump *label86 always
+   56 multilabel *label92 (m:marker1)
+   57 set *tmp3 .array*5
+   58 jump *label86 always
+   59 multilabel *label93 (m:marker1)
+   60 set *tmp3 .array*6
+   61 jump *label86 always
+   62 multilabel *label94 (m:marker1)
+   63 set *tmp3 .array*7
+   64 jump *label86 always
+   65 multilabel *label95 (m:marker1)
+   66 set *tmp3 .array*8
+   67 jump *label86 always
+   68 multilabel *label96 (m:marker1)
+   69 set *tmp3 .array*9
+   70 jump *label86 always
+   71 label *label86
    72 op add *tmp3 *tmp3 1
-    * writearr<inlined> *tmp3 .array[] *tmp2
+   73 op mul *tmp9 *tmp2 2
+   74 multijump *label99 *tmp9 0 (m:marker2)
+   75 multilabel *label99 (m:marker2)
+   76 set .array*0 *tmp3
+   77 jump *label98 always
+   78 multilabel *label100 (m:marker2)
+   79 set .array*1 *tmp3
+   80 jump *label98 always
+   81 multilabel *label101 (m:marker2)
+   82 set .array*2 *tmp3
+   83 jump *label98 always
+   84 multilabel *label102 (m:marker2)
+   85 set .array*3 *tmp3
+   86 jump *label98 always
+   87 multilabel *label103 (m:marker2)
+   88 set .array*4 *tmp3
+   89 jump *label98 always
+   90 multilabel *label104 (m:marker2)
+   91 set .array*5 *tmp3
+   92 jump *label98 always
+   93 multilabel *label105 (m:marker2)
+   94 set .array*6 *tmp3
+   95 jump *label98 always
+   96 multilabel *label106 (m:marker2)
+   97 set .array*7 *tmp3
+   98 jump *label98 always
+   99 multilabel *label107 (m:marker2)
+  100 set .array*8 *tmp3
+  101 jump *label98 always
+  102 multilabel *label108 (m:marker2)
+  103 set .array*9 *tmp3
+  104 jump *label98 always
+  105 label *label98
   106 op idiv :countDigits.0:number :countDigits.0:number 10
   107 label *label18
   108 jump *label17 greaterThan :countDigits.0:number 0

Modifications by Iterated phase, Single Step Elimination, pass 4, iteration 1 (-2 instructions):
 
    67 jump *label86 always
    68 multilabel *label96 (m:marker1)
    69 set *tmp3 .array*9
-    * jump *label86 always
    70 label *label86
    71 op add *tmp3 *tmp3 1
    72 op mul *tmp9 *tmp2 2
 
   100 jump *label98 always
   101 multilabel *label108 (m:marker2)
   102 set .array*9 *tmp3
-    * jump *label98 always
   103 label *label98
   104 op idiv :countDigits.0:number :countDigits.0:number 10
   105 label *label18

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
   152 label *label23
   153 label *label20
   154 assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-8 instructions):
 
   114 print .array*0
   115 label *label67
   116 label *label68
-    * print "-"
-    * print .array*1
+  117 print "-{0}-{0}-{0}-{0}-{0}-{0}-{0}-{0}-"
+  118 format .array*1
   119 label *label69
   120 label *label70
-    * print "-"
-    * print .array*2
+  121 format .array*2
   122 label *label71
   123 label *label72
-    * print "-"
-    * print .array*3
+  124 format .array*3
   125 label *label73
   126 label *label74
-    * print "-"
-    * print .array*4
+  127 format .array*4
   128 label *label75
   129 label *label76
-    * print "-"
-    * print .array*5
+  130 format .array*5
   131 label *label77
   132 label *label78
-    * print "-"
-    * print .array*6
+  133 format .array*6
   134 label *label79
   135 label *label80
-    * print "-"
-    * print .array*7
+  136 format .array*7
   137 label *label81
   138 label *label82
-    * print "-"
-    * print .array*8
+  139 format .array*8
   140 label *label83
   141 label *label84
-    * print "-"
   142 print .array*9
   143 label *label85
   144 label *label23

Final code before resolving virtual instructions:

set LIMIT 100
set .array*0 0
set .array*1 0
set .array*2 0
set .array*3 0
set .array*4 0
set .array*5 0
set .array*6 0
set .array*7 0
set .array*8 0
set .array*9 0
set :i 0
jump *label15 greaterThanEq 0 LIMIT
label *label24
set :countDigits.0:number :i
label *label17
op mod *tmp2 :countDigits.0:number 10
op mul *tmp8 *tmp2 2
multijump *label87 *tmp8 0
multilabel *label87
set *tmp3 .array*0
jump *label86 always
multilabel *label88
set *tmp3 .array*1
jump *label86 always
multilabel *label89
set *tmp3 .array*2
jump *label86 always
multilabel *label90
set *tmp3 .array*3
jump *label86 always
multilabel *label91
set *tmp3 .array*4
jump *label86 always
multilabel *label92
set *tmp3 .array*5
jump *label86 always
multilabel *label93
set *tmp3 .array*6
jump *label86 always
multilabel *label94
set *tmp3 .array*7
jump *label86 always
multilabel *label95
set *tmp3 .array*8
jump *label86 always
multilabel *label96
set *tmp3 .array*9
label *label86
op add *tmp3 *tmp3 1
op mul *tmp9 *tmp2 2
multijump *label99 *tmp9 0
multilabel *label99
set .array*0 *tmp3
jump *label98 always
multilabel *label100
set .array*1 *tmp3
jump *label98 always
multilabel *label101
set .array*2 *tmp3
jump *label98 always
multilabel *label102
set .array*3 *tmp3
jump *label98 always
multilabel *label103
set .array*4 *tmp3
jump *label98 always
multilabel *label104
set .array*5 *tmp3
jump *label98 always
multilabel *label105
set .array*6 *tmp3
jump *label98 always
multilabel *label106
set .array*7 *tmp3
jump *label98 always
multilabel *label107
set .array*8 *tmp3
jump *label98 always
multilabel *label108
set .array*9 *tmp3
label *label98
op idiv :countDigits.0:number :countDigits.0:number 10
jump *label17 greaterThan :countDigits.0:number 0
op add :i :i 1
jump *label24 lessThan :i LIMIT
label *label15
assertflush
print .array*0
print "-{0}-{0}-{0}-{0}-{0}-{0}-{0}-{0}-"
format .array*1
format .array*2
format .array*3
format .array*4
format .array*5
format .array*6
format .array*7
format .array*8
print .array*9
assertprints "10-20-20-20-20-20-20-20-20-20" "digit counts"
