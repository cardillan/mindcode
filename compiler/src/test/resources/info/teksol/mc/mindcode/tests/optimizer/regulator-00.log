   261 instructions before optimizations.
    19 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
    27 instructions eliminated by Dead Code Elimination (7 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    10 instructions eliminated by Jump Optimization (5 iterations).
    10 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     3 instructions eliminated by If Expression Optimization (3 iterations).
     7 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
     1 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
    38 instructions added by Case Switching (5 iterations).
     1 case expressions converted to switched jumps Case Switching.
     7 instructions eliminated by Jump Straightening (5 iterations).
     3 instructions updated by JumpThreading.
    35 instructions eliminated by Print Merging.
   180 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 819):
    Replicate loop condition at line 72:1                        cost     1, benefit       25.0, efficiency     25.000
  o Convert case at line 25:9 (segments: 1)                      cost    85, benefit     2812.5, efficiency     33.088
  * Convert case at line 25:9 (segments: 2)                      cost    38, benefit     2916.7, efficiency     76.754 (+38 instructions)
  o Convert case at line 25:9 (segments: 4)                      cost    26, benefit     2326.4, efficiency     89.476
  o Convert case at line 25:9 (segments: 6)                      cost     8, benefit     1840.3, efficiency    230.035
  o Convert case at line 25:9 (segments: 6)                      cost     2, benefit     2083.3, efficiency   1041.667

Pass 1: speed optimization selection (cost limit 781):
  * Replicate loop condition at line 72:1                        cost     1, benefit       25.0, efficiency     25.000 (+1 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    25 print :block
    26 print "\n"
    27 sensor *tmp5 :block @type
-    * set *tmp6 *tmp5
-    * jump *label8 equal *tmp6 @message
+   28 jump *label8 equal *tmp5 @message
    29 jump *label7 always
    30 label *label8
    31 set .MESSAGE :block
    32 set *tmp4 .MESSAGE
    33 jump *label6 always
    34 label *label7
-    * jump *label10 equal *tmp6 @switch
+   35 jump *label10 equal *tmp5 @switch
    36 jump *label9 always
    37 label *label10
    38 set .SWITCH :block
    39 set *tmp4 .SWITCH
    40 jump *label6 always
    41 label *label9
-    * jump *label12 equal *tmp6 @sorter
-    * jump *label12 equal *tmp6 @inverted-sorter
-    * jump *label12 equal *tmp6 @unloader
+   42 jump *label12 equal *tmp5 @sorter
+   43 jump *label12 equal *tmp5 @inverted-sorter
+   44 jump *label12 equal *tmp5 @unloader
    45 jump *label11 always
    46 label *label12
    47 set .SORTER :block
    48 set *tmp4 .SORTER
    49 jump *label6 always
    50 label *label11
-    * jump *label14 equal *tmp6 @vault
-    * jump *label14 equal *tmp6 @container
-    * jump *label14 equal *tmp6 @core-shard
-    * jump *label14 equal *tmp6 @core-foundation
-    * jump *label14 equal *tmp6 @core-nucleus
+   51 jump *label14 equal *tmp5 @vault
+   52 jump *label14 equal *tmp5 @container
+   53 jump *label14 equal *tmp5 @core-shard
+   54 jump *label14 equal *tmp5 @core-foundation
+   55 jump *label14 equal *tmp5 @core-nucleus
    56 jump *label13 always
    57 label *label14
    58 set .CONTAINER :block
 
    63 set *tmp4 .START
    64 jump *label6 always
    65 label *label13
-    * jump *label16 equal *tmp6 @liquid-tank
-    * jump *label16 equal *tmp6 @liquid-container
-    * jump *label16 equal *tmp6 @liquid-router
+   66 jump *label16 equal *tmp5 @liquid-tank
+   67 jump *label16 equal *tmp5 @liquid-container
+   68 jump *label16 equal *tmp5 @liquid-router
    69 jump *label15 always
    70 label *label16
    71 set .CONTAINER :block
 
    76 set *tmp4 .START
    77 jump *label6 always
    78 label *label15
-    * jump *label18 equal *tmp6 @battery
-    * jump *label18 equal *tmp6 @battery-large
+   79 jump *label18 equal *tmp5 @battery
+   80 jump *label18 equal *tmp5 @battery-large
    81 jump *label17 always
    82 label *label18
    83 set .CONTAINER :block
 
    88 set *tmp4 .START
    89 jump *label6 always
    90 label *label17
-    * jump *label20 equal *tmp6 @power-node
-    * jump *label20 equal *tmp6 @power-node-large
-    * jump *label20 equal *tmp6 @surge-tower
+   91 jump *label20 equal *tmp5 @power-node
+   92 jump *label20 equal *tmp5 @power-node-large
+   93 jump *label20 equal *tmp5 @surge-tower
    94 jump *label19 always
    95 label *label20
    96 set .CONTAINER :block

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-17 instructions):
 
    29 jump *label7 always
    30 label *label8
    31 set .MESSAGE :block
-    * set *tmp4 .MESSAGE
    32 jump *label6 always
    33 label *label7
    34 jump *label10 equal *tmp5 @switch
    35 jump *label9 always
    36 label *label10
    37 set .SWITCH :block
-    * set *tmp4 .SWITCH
    38 jump *label6 always
    39 label *label9
    40 jump *label12 equal *tmp5 @sorter
 
    43 jump *label11 always
    44 label *label12
    45 set .SORTER :block
-    * set *tmp4 .SORTER
    46 jump *label6 always
    47 label *label11
    48 jump *label14 equal *tmp5 @vault
 
    57 set .MAXIMUM @itemCapacity
    58 op add *tmp7 :n 1
    59 set .START *tmp7
-    * set *tmp4 .START
    60 jump *label6 always
    61 label *label13
    62 jump *label16 equal *tmp5 @liquid-tank
 
    69 set .MAXIMUM @liquidCapacity
    70 op add *tmp8 :n 1
    71 set .START *tmp8
-    * set *tmp4 .START
    72 jump *label6 always
    73 label *label15
    74 jump *label18 equal *tmp5 @battery
 
    80 set .MAXIMUM @powerCapacity
    81 op add *tmp9 :n 1
    82 set .START *tmp9
-    * set *tmp4 .START
    83 jump *label6 always
    84 label *label17
    85 jump *label20 equal *tmp5 @power-node
 
    92 set .MAXIMUM @powerNetCapacity
    93 op add *tmp10 :n 1
    94 set .START *tmp10
-    * set *tmp4 .START
    95 jump *label6 always
    96 label *label19
-    * set *tmp4 null
    97 label *label6
    98 label *label4
    99 jump *label3 always
 
   114 jump *label21 equal *tmp11 false
   115 print "No container."
   116 print "\n"
-    * set *tmp12 "No container."
   117 jump *label22 always
   118 label *label21
-    * set *tmp12 null
   119 label *label22
   120 printflush .MESSAGE
   121 label *label1
 
   144 label *label24
   145 set *tmp18 null
   146 label *label25
-    * set *tmp16 *tmp18
   147 label *label23
   148 set .CYCLES 0
   149 set *tmp21 .SWITCH
 
   163 set :item .SENSOR
   164 print "Measuring [gold]total[] in "
   165 print .CONTAINER
-    * set *tmp30 null
   166 jump *label32 always
   167 label *label31
   168 print "Measuring [gold]"
 
   170 print "["
   171 print "] in "
   172 print .CONTAINER
-    * set *tmp30 null
   173 label *label32
   174 sensor *tmp31 .CONTAINER .MAXIMUM
   175 set :max *tmp31
 
   201 label *label37
   202 set *tmp37 *tmp39
   203 label *label35
-    * set *tmp36 *tmp37
   204 jump *label34 always
   205 label *label33
   206 op greaterThanEq *tmp42 :pct PCT_HIGH
 
   231 label *label40
   232 set *tmp43 null
   233 label *label41
-    * set *tmp36 *tmp43
   234 label *label34
   235 print "\n"
   236 print "Level: [gold]"
 
   248 print PCT_LOW
   249 print "%"
   250 print "[]"
-    * set *tmp49 null
   251 jump *label48 always
   252 label *label47
   253 print "\n"
 
   260 print PCT_HIGH
   261 print "%"
   262 print "[]"
-    * set *tmp49 null
   263 label *label48
   264 print .ACTIVE_TEXT
   265 set :n .START

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-5 instructions):
 
   139 set *tmp20 "\nCurrently inactive:[salmon]"
   140 label *label27
   141 set .ACTIVE_TEXT *tmp20
-    * set *tmp18 .ACTIVE_TEXT
   142 jump *label25 always
   143 label *label24
-    * set *tmp18 null
   144 label *label25
   145 label *label23
   146 set .CYCLES 0
 
   197 label *label36
   198 set *tmp39 null
   199 label *label37
-    * set *tmp37 *tmp39
   200 label *label35
   201 jump *label34 always
   202 label *label33
 
   223 label *label44
   224 set *tmp44 *tmp46
   225 label *label42
-    * set *tmp43 *tmp44
   226 jump *label41 always
   227 label *label40
-    * set *tmp43 null
   228 label *label41
   229 label *label34
   230 print "\n"

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-3 instructions):
 
   192 set *tmp41 "\nCurrently inactive:[salmon]"
   193 label *label39
   194 set .ACTIVE_TEXT *tmp41
-    * set *tmp39 .ACTIVE_TEXT
   195 jump *label37 always
   196 label *label36
-    * set *tmp39 null
   197 label *label37
   198 label *label35
   199 jump *label34 always
 
   219 label *label43
   220 set *tmp46 null
   221 label *label44
-    * set *tmp44 *tmp46
   222 label *label42
   223 jump *label41 always
   224 label *label40

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   214 set *tmp48 "\nCurrently inactive:[salmon]"
   215 label *label46
   216 set .ACTIVE_TEXT *tmp48
-    * set *tmp46 .ACTIVE_TEXT
   217 jump *label44 always
   218 label *label43
-    * set *tmp46 null
   219 label *label44
   220 label *label42
   221 jump *label41 always

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-19 instructions):
 
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
-    * set *tmp0 @links
-    * set :n *tmp0
+   15 set :n @links
    16 label *label3
    17 op greaterThan *tmp1 :n 0
    18 jump *label5 equal *tmp1 false
-    * op sub *tmp2 :n 1
-    * set :n *tmp2
-    * getlink *tmp3 :n
-    * set :block *tmp3
+   19 op sub :n :n 1
+   20 getlink :block :n
    21 print "Found: "
    22 print :block
    23 print "\n"
 
    52 set .CONTAINER :block
    53 set .SENSOR @totalItems
    54 set .MAXIMUM @itemCapacity
-    * op add *tmp7 :n 1
-    * set .START *tmp7
+   55 op add .START :n 1
    56 jump *label6 always
    57 label *label13
    58 jump *label16 equal *tmp5 @liquid-tank
 
    63 set .CONTAINER :block
    64 set .SENSOR @totalLiquids
    65 set .MAXIMUM @liquidCapacity
-    * op add *tmp8 :n 1
-    * set .START *tmp8
+   66 op add .START :n 1
    67 jump *label6 always
    68 label *label15
    69 jump *label18 equal *tmp5 @battery
 
    73 set .CONTAINER :block
    74 set .SENSOR @totalPower
    75 set .MAXIMUM @powerCapacity
-    * op add *tmp9 :n 1
-    * set .START *tmp9
+   76 op add .START :n 1
    77 jump *label6 always
    78 label *label17
    79 jump *label20 equal *tmp5 @power-node
 
    84 set .CONTAINER :block
    85 set .SENSOR @powerNetStored
    86 set .MAXIMUM @powerNetCapacity
-    * op add *tmp10 :n 1
-    * set .START *tmp10
+   87 op add .START :n 1
    88 jump *label6 always
    89 label *label19
    90 label *label6
 
   116 jump *label0 notEqual *tmp13 false
   117 label *label2
   118 sensor *tmp14 .SORTER @type
-    * op strictEqual *tmp15 *tmp14 @inverted-sorter
-    * set .INVERTED *tmp15
+  119 op strictEqual .INVERTED *tmp14 @inverted-sorter
   120 set :setState:newState true
   121 op notEqual *tmp17 .STATE :setState:newState
   122 jump *label24 equal *tmp17 false
   123 set .STATE :setState:newState
   124 op add .CYCLES .CYCLES 1
-    * op xor *tmp19 .INVERTED .STATE
-    * set .ON *tmp19
+  125 op xor .ON .INVERTED .STATE
   126 jump *label26 equal .ON false
   127 set *tmp20 "\nCurrently active:[green]"
   128 jump *label27 always
 
   135 label *label25
   136 label *label23
   137 set .CYCLES 0
-    * set *tmp21 .SWITCH
-    * control enabled *tmp21 0
+  138 control enabled .SWITCH 0
   139 label *label28
   140 sensor *tmp23 .SWITCH @enabled
   141 op equal *tmp24 *tmp23 0
   142 jump *label30 equal *tmp24 false
-    * set *tmp25 @time
-    * set :start *tmp25
-    * sensor *tmp26 .SORTER @config
-    * set :item *tmp26
+  143 set :start @time
+  144 sensor :item .SORTER @config
   145 op equal *tmp27 :item null
   146 op notEqual *tmp28 .SENSOR @totalItems
   147 op or *tmp29 *tmp27 *tmp28
 
   157 print "] in "
   158 print .CONTAINER
   159 label *label32
-    * sensor *tmp31 .CONTAINER .MAXIMUM
-    * set :max *tmp31
-    * sensor *tmp32 .CONTAINER :item
-    * set :amount *tmp32
+  160 sensor :max .CONTAINER .MAXIMUM
+  161 sensor :amount .CONTAINER :item
   162 op mul *tmp33 100 :amount
-    * op idiv *tmp34 *tmp33 :max
-    * set :pct *tmp34
+  163 op idiv :pct *tmp33 :max
   164 op lessThanEq *tmp35 :pct PCT_LOW
   165 jump *label33 equal *tmp35 false
   166 set :setState.1:newState true
 
   168 jump *label36 equal *tmp38 false
   169 set .STATE :setState.1:newState
   170 op add .CYCLES .CYCLES 1
-    * op xor *tmp40 .INVERTED .STATE
-    * set .ON *tmp40
+  171 op xor .ON .INVERTED .STATE
   172 jump *label38 equal .ON false
   173 set *tmp41 "\nCurrently active:[green]"
   174 jump *label39 always
 
   189 jump *label43 equal *tmp45 false
   190 set .STATE :setState.2:newState
   191 op add .CYCLES .CYCLES 1
-    * op xor *tmp47 .INVERTED .STATE
-    * set .ON *tmp47
+  192 op xor .ON .INVERTED .STATE
   193 jump *label45 equal .ON false
   194 set *tmp48 "\nCurrently active:[green]"
   195 jump *label46 always
 
   239 label *label49
   240 op lessThan *tmp50 :n @links
   241 jump *label51 equal *tmp50 false
-    * getlink *tmp51 :n
-    * set :block *tmp51
-    * set *tmp52 :block
-    * control enabled *tmp52 .ON
+  242 getlink :block :n
+  243 control enabled :block .ON
   244 print "\n    "
   245 print :block
   246 op add :n :n 1

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-7 instructions):
 
    22 print :block
    23 print "\n"
    24 sensor *tmp5 :block @type
-    * jump *label8 equal *tmp5 @message
-    * jump *label7 always
+   25 jump *label7 notEqual *tmp5 @message
    26 label *label8
    27 set .MESSAGE :block
    28 jump *label6 always
    29 label *label7
-    * jump *label10 equal *tmp5 @switch
-    * jump *label9 always
+   30 jump *label9 notEqual *tmp5 @switch
    31 label *label10
    32 set .SWITCH :block
    33 jump *label6 always
    34 label *label9
    35 jump *label12 equal *tmp5 @sorter
    36 jump *label12 equal *tmp5 @inverted-sorter
-    * jump *label12 equal *tmp5 @unloader
-    * jump *label11 always
+   37 jump *label11 notEqual *tmp5 @unloader
    38 label *label12
    39 set .SORTER :block
    40 jump *label6 always
 
    43 jump *label14 equal *tmp5 @container
    44 jump *label14 equal *tmp5 @core-shard
    45 jump *label14 equal *tmp5 @core-foundation
-    * jump *label14 equal *tmp5 @core-nucleus
-    * jump *label13 always
+   46 jump *label13 notEqual *tmp5 @core-nucleus
    47 label *label14
    48 set .CONTAINER :block
    49 set .SENSOR @totalItems
 
    53 label *label13
    54 jump *label16 equal *tmp5 @liquid-tank
    55 jump *label16 equal *tmp5 @liquid-container
-    * jump *label16 equal *tmp5 @liquid-router
-    * jump *label15 always
+   56 jump *label15 notEqual *tmp5 @liquid-router
    57 label *label16
    58 set .CONTAINER :block
    59 set .SENSOR @totalLiquids
 
    62 jump *label6 always
    63 label *label15
    64 jump *label18 equal *tmp5 @battery
-    * jump *label18 equal *tmp5 @battery-large
-    * jump *label17 always
+   65 jump *label17 notEqual *tmp5 @battery-large
    66 label *label18
    67 set .CONTAINER :block
    68 set .SENSOR @totalPower
 
    72 label *label17
    73 jump *label20 equal *tmp5 @power-node
    74 jump *label20 equal *tmp5 @power-node-large
-    * jump *label20 equal *tmp5 @surge-tower
-    * jump *label19 always
+   75 jump *label19 notEqual *tmp5 @surge-tower
    76 label *label20
    77 set .CONTAINER :block
    78 set .SENSOR @powerNetStored

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-10 instructions):
 
    14 print "\n"
    15 set :n @links
    16 label *label3
-    * op greaterThan *tmp1 :n 0
-    * jump *label5 equal *tmp1 false
+   17 jump *label5 lessThanEq :n 0
    18 op sub :n :n 1
    19 getlink :block :n
    20 print "Found: "
 
    95 print "Container: "
    96 print .CONTAINER
    97 print "\n"
-    * op equal *tmp11 .CONTAINER null
-    * jump *label21 equal *tmp11 false
+   98 jump *label21 notEqual .CONTAINER null
    99 print "No container."
   100 print "\n"
   101 jump *label22 always
 
   103 label *label22
   104 printflush .MESSAGE
   105 label *label1
-    * op equal *tmp13 .CONTAINER null
-    * jump *label0 notEqual *tmp13 false
+  106 jump *label0 equal .CONTAINER null
   107 label *label2
   108 sensor *tmp14 .SORTER @type
   109 op strictEqual .INVERTED *tmp14 @inverted-sorter
   110 set :setState:newState true
-    * op notEqual *tmp17 .STATE :setState:newState
-    * jump *label24 equal *tmp17 false
+  111 jump *label24 equal .STATE :setState:newState
   112 set .STATE :setState:newState
   113 op add .CYCLES .CYCLES 1
   114 op xor .ON .INVERTED .STATE
 
   127 control enabled .SWITCH 0
   128 label *label28
   129 sensor *tmp23 .SWITCH @enabled
-    * op equal *tmp24 *tmp23 0
-    * jump *label30 equal *tmp24 false
+  130 jump *label30 notEqual *tmp23 0
   131 set :start @time
   132 sensor :item .SORTER @config
   133 op equal *tmp27 :item null
 
   149 sensor :amount .CONTAINER :item
   150 op mul *tmp33 100 :amount
   151 op idiv :pct *tmp33 :max
-    * op lessThanEq *tmp35 :pct PCT_LOW
-    * jump *label33 equal *tmp35 false
+  152 jump *label33 greaterThan :pct PCT_LOW
   153 set :setState.1:newState true
-    * op notEqual *tmp38 .STATE :setState.1:newState
-    * jump *label36 equal *tmp38 false
+  154 jump *label36 equal .STATE :setState.1:newState
   155 set .STATE :setState.1:newState
   156 op add .CYCLES .CYCLES 1
   157 op xor .ON .INVERTED .STATE
 
   168 label *label35
   169 jump *label34 always
   170 label *label33
-    * op greaterThanEq *tmp42 :pct PCT_HIGH
-    * jump *label40 equal *tmp42 false
+  171 jump *label40 lessThan :pct PCT_HIGH
   172 set :setState.2:newState false
-    * op notEqual *tmp45 .STATE :setState.2:newState
-    * jump *label43 equal *tmp45 false
+  173 jump *label43 equal .STATE :setState.2:newState
   174 set .STATE :setState.2:newState
   175 op add .CYCLES .CYCLES 1
   176 op xor .ON .INVERTED .STATE
 
   221 print .ACTIVE_TEXT
   222 set :n .START
   223 label *label49
-    * op lessThan *tmp50 :n @links
-    * jump *label51 equal *tmp50 false
+  224 jump *label51 greaterThanEq :n @links
   225 getlink :block :n
   226 control enabled :block .ON
   227 print "\n    "

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-6 instructions):
 
    77 set .SENSOR @powerNetStored
    78 set .MAXIMUM @powerNetCapacity
    79 op add .START :n 1
-    * jump *label6 always
    80 label *label19
    81 label *label6
    82 label *label4
 
    97 jump *label21 notEqual .CONTAINER null
    98 print "No container."
    99 print "\n"
-    * jump *label22 always
   100 label *label21
   101 label *label22
   102 printflush .MESSAGE
 
   117 set *tmp20 "\nCurrently inactive:[salmon]"
   118 label *label27
   119 set .ACTIVE_TEXT *tmp20
-    * jump *label25 always
   120 label *label24
   121 label *label25
   122 label *label23
 
   159 set *tmp41 "\nCurrently inactive:[salmon]"
   160 label *label39
   161 set .ACTIVE_TEXT *tmp41
-    * jump *label37 always
   162 label *label36
   163 label *label37
   164 label *label35
 
   177 set *tmp48 "\nCurrently inactive:[salmon]"
   178 label *label46
   179 set .ACTIVE_TEXT *tmp48
-    * jump *label44 always
   180 label *label43
   181 label *label44
   182 label *label42
-    * jump *label41 always
   183 label *label40
   184 label *label41
   185 label *label34

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
     2 set .CONTAINER null
     3 set .SORTER null
     4 set .SWITCH null
-    * set .STATE .SWITCH
-    * set .START .STATE
-    * set .SENSOR .START
-    * set .ON .SENSOR
-    * set .MESSAGE .ON
-    * set .MAXIMUM .MESSAGE
-    * set .ACTIVE_TEXT .MAXIMUM
+    5 set .STATE null
+    6 set .START .SWITCH
+    7 set .SENSOR .STATE
+    8 set .ON .START
+    9 set .MESSAGE .SENSOR
+   10 set .MAXIMUM .ON
+   11 set .ACTIVE_TEXT .MESSAGE
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
   108 set :setState:newState true
-    * jump *label24 equal .STATE :setState:newState
-    * set .STATE :setState:newState
-    * op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  109 jump *label24 equal .STATE true
+  110 set .STATE true
+  111 op xor .ON .INVERTED :setState:newState
   112 jump *label26 equal .ON false
   113 set *tmp20 "\nCurrently active:[green]"
   114 jump *label27 always
 
   147 op idiv :pct *tmp33 :max
   148 jump *label33 greaterThan :pct PCT_LOW
   149 set :setState.1:newState true
-    * jump *label36 equal .STATE :setState.1:newState
-    * set .STATE :setState.1:newState
+  150 jump *label36 equal .STATE true
+  151 set .STATE true
   152 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  153 op xor .ON .INVERTED :setState.1:newState
   154 jump *label38 equal .ON false
   155 set *tmp41 "\nCurrently active:[green]"
   156 jump *label39 always
 
   165 label *label33
   166 jump *label40 lessThan :pct PCT_HIGH
   167 set :setState.2:newState false
-    * jump *label43 equal .STATE :setState.2:newState
-    * set .STATE :setState.2:newState
+  168 jump *label43 equal .STATE false
+  169 set .STATE false
   170 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  171 op xor .ON .INVERTED :setState.2:newState
   172 jump *label45 equal .ON false
   173 set *tmp48 "\nCurrently active:[green]"
   174 jump *label46 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2:
 
     3 set .SORTER null
     4 set .SWITCH null
     5 set .STATE null
-    * set .START .SWITCH
-    * set .SENSOR .STATE
-    * set .ON .START
-    * set .MESSAGE .SENSOR
-    * set .MAXIMUM .ON
-    * set .ACTIVE_TEXT .MESSAGE
+    6 set .START null
+    7 set .SENSOR null
+    8 set .ON .SWITCH
+    9 set .MESSAGE .STATE
+   10 set .MAXIMUM .START
+   11 set .ACTIVE_TEXT .SENSOR
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
   108 set :setState:newState true
-    * jump *label24 equal .STATE true
+  109 jump *label24 equal null true
   110 set .STATE true
-    * op xor .ON .INVERTED :setState:newState
+  111 op xor .ON .INVERTED true
   112 jump *label26 equal .ON false
   113 set *tmp20 "\nCurrently active:[green]"
   114 jump *label27 always
 
   150 jump *label36 equal .STATE true
   151 set .STATE true
   152 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED :setState.1:newState
+  153 op xor .ON .INVERTED true
   154 jump *label38 equal .ON false
   155 set *tmp41 "\nCurrently active:[green]"
   156 jump *label39 always
 
   168 jump *label43 equal .STATE false
   169 set .STATE false
   170 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED :setState.2:newState
+  171 op xor .ON .INVERTED false
   172 jump *label45 equal .ON false
   173 set *tmp48 "\nCurrently active:[green]"
   174 jump *label46 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
     5 set .STATE null
     6 set .START null
     7 set .SENSOR null
-    * set .ON .SWITCH
-    * set .MESSAGE .STATE
-    * set .MAXIMUM .START
-    * set .ACTIVE_TEXT .SENSOR
+    8 set .ON null
+    9 set .MESSAGE null
+   10 set .MAXIMUM null
+   11 set .ACTIVE_TEXT null
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   105 label *label2
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
-    * set :setState:newState true
   108 jump *label24 equal null true
   109 set .STATE true
   110 op xor .ON .INVERTED true
 
   145 op mul *tmp33 100 :amount
   146 op idiv :pct *tmp33 :max
   147 jump *label33 greaterThan :pct PCT_LOW
-    * set :setState.1:newState true
   148 jump *label36 equal .STATE true
   149 set .STATE true
   150 op add .CYCLES .CYCLES 1
 
   162 jump *label34 always
   163 label *label33
   164 jump *label40 lessThan :pct PCT_HIGH
-    * set :setState.2:newState false
   165 jump *label43 equal .STATE false
   166 set .STATE false
   167 op add .CYCLES .CYCLES 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-3 instructions):
 
     2 set .CONTAINER null
     3 set .SORTER null
     4 set .SWITCH null
-    * set .STATE null
     5 set .START null
     6 set .SENSOR null
-    * set .ON null
     7 set .MESSAGE null
     8 set .MAXIMUM null
-    * set .ACTIVE_TEXT null
     9 label *label0
    10 print "Configuring regulator..."
    11 print "\n"

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    12 set :n @links
    13 label *label3
    14 jump *label5 lessThanEq :n 0
+   15 label *label52
    16 op sub :n :n 1
    17 getlink :block :n
    18 print "Found: "
 
    78 label *label19
    79 label *label6
    80 label *label4
-    * jump *label3 always
+   81 jump *label52 greaterThan :n 0
    82 label *label5
    83 print "Message: "
    84 print .MESSAGE
 
   210 set :n .START
   211 label *label49
   212 jump *label51 greaterThanEq :n @links
+  213 label *label53
   214 getlink :block :n
   215 control enabled :block .ON
   216 print "\n    "
   217 print :block
   218 op add :n :n 1
   219 label *label50
-    * jump *label49 always
+  220 jump *label53 lessThan :n @links
   221 label *label51
   222 print "[]"
   223 print "\n"

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-3 instructions):
 
   106 jump *label24 equal null true
   107 set .STATE true
   108 op xor .ON .INVERTED true
-    * jump *label26 equal .ON false
-    * set *tmp20 "\nCurrently active:[green]"
+  109 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
+  110 jump *label27 equal .ON false
+  111 set .ACTIVE_TEXT "\nCurrently active:[green]"
   112 jump *label27 always
-    * label *label26
-    * set *tmp20 "\nCurrently inactive:[salmon]"
   113 label *label27
-    * set .ACTIVE_TEXT *tmp20
   114 label *label24
   115 label *label25
   116 label *label23
 
   145 set .STATE true
   146 op add .CYCLES .CYCLES 1
   147 op xor .ON .INVERTED true
-    * jump *label38 equal .ON false
-    * set *tmp41 "\nCurrently active:[green]"
+  148 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
+  149 jump *label39 equal .ON false
+  150 set .ACTIVE_TEXT "\nCurrently active:[green]"
   151 jump *label39 always
-    * label *label38
-    * set *tmp41 "\nCurrently inactive:[salmon]"
   152 label *label39
-    * set .ACTIVE_TEXT *tmp41
   153 label *label36
   154 label *label37
   155 label *label35
 
   160 set .STATE false
   161 op add .CYCLES .CYCLES 1
   162 op xor .ON .INVERTED false
-    * jump *label45 equal .ON false
-    * set *tmp48 "\nCurrently active:[green]"
+  163 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
+  164 jump *label46 equal .ON false
+  165 set .ACTIVE_TEXT "\nCurrently active:[green]"
   166 jump *label46 always
-    * label *label45
-    * set *tmp48 "\nCurrently inactive:[salmon]"
   167 label *label46
-    * set .ACTIVE_TEXT *tmp48
   168 label *label43
   169 label *label44
   170 label *label42

Modifications by Convert case at line 25:9 (segments: 2) (+38 instructions):
 
    19 print :block
    20 print "\n"
    21 sensor *tmp5 :block @type
-    * jump *label7 notEqual *tmp5 @message
+   22 sensor *tmp56 *tmp5 @id
+   23 jump *label55 greaterThanEq *tmp56 96
+   24 jump *label54 lessThan *tmp56 48
+   25 multijump *label56 *tmp56 48 (m:*label104)
+   26 multilabel *label56 (m:*label104)
+   27 jump *label12 always
+   28 multilabel *label57 (m:*label104)
+   29 jump *label12 always
+   30 multilabel *label58 (m:*label104)
+   31 jump *label54 always
+   32 multilabel *label59 (m:*label104)
+   33 jump *label54 always
+   34 multilabel *label60 (m:*label104)
+   35 jump *label54 always
+   36 multilabel *label61 (m:*label104)
+   37 jump *label54 always
+   38 multilabel *label62 (m:*label104)
+   39 jump *label54 always
+   40 multilabel *label63 (m:*label104)
+   41 jump *label54 always
+   42 multilabel *label64 (m:*label104)
+   43 jump *label54 always
+   44 multilabel *label65 (m:*label104)
+   45 jump *label54 always
+   46 multilabel *label66 (m:*label104)
+   47 jump *label54 always
+   48 multilabel *label67 (m:*label104)
+   49 jump *label54 always
+   50 multilabel *label68 (m:*label104)
+   51 jump *label54 always
+   52 multilabel *label69 (m:*label104)
+   53 jump *label54 always
+   54 multilabel *label70 (m:*label104)
+   55 jump *label54 always
+   56 multilabel *label71 (m:*label104)
+   57 jump *label16 always
+   58 multilabel *label72 (m:*label104)
+   59 jump *label16 always
+   60 multilabel *label73 (m:*label104)
+   61 jump *label54 always
+   62 multilabel *label74 (m:*label104)
+   63 jump *label54 always
+   64 multilabel *label75 (m:*label104)
+   65 jump *label54 always
+   66 multilabel *label76 (m:*label104)
+   67 jump *label20 always
+   68 multilabel *label77 (m:*label104)
+   69 jump *label20 always
+   70 multilabel *label78 (m:*label104)
+   71 jump *label20 always
+   72 multilabel *label79 (m:*label104)
+   73 jump *label54 always
+   74 multilabel *label80 (m:*label104)
+   75 jump *label18 always
+   76 multilabel *label81 (m:*label104)
+   77 jump *label18 always
+   78 multilabel *label82 (m:*label104)
+   79 jump *label54 always
+   80 multilabel *label83 (m:*label104)
+   81 jump *label54 always
+   82 multilabel *label84 (m:*label104)
+   83 jump *label54 always
+   84 multilabel *label85 (m:*label104)
+   85 jump *label54 always
+   86 multilabel *label86 (m:*label104)
+   87 jump *label54 always
+   88 multilabel *label87 (m:*label104)
+   89 jump *label54 always
+   90 multilabel *label88 (m:*label104)
+   91 jump *label54 always
+   92 multilabel *label89 (m:*label104)
+   93 jump *label54 always
+   94 multilabel *label90 (m:*label104)
+   95 jump *label54 always
+   96 multilabel *label91 (m:*label104)
+   97 jump *label54 always
+   98 multilabel *label92 (m:*label104)
+   99 jump *label54 always
+  100 multilabel *label93 (m:*label104)
+  101 jump *label54 always
+  102 multilabel *label94 (m:*label104)
+  103 jump *label54 always
+  104 multilabel *label95 (m:*label104)
+  105 jump *label54 always
+  106 multilabel *label96 (m:*label104)
+  107 jump *label54 always
+  108 multilabel *label97 (m:*label104)
+  109 jump *label54 always
+  110 multilabel *label98 (m:*label104)
+  111 jump *label14 always
+  112 multilabel *label99 (m:*label104)
+  113 jump *label14 always
+  114 multilabel *label100 (m:*label104)
+  115 jump *label14 always
+  116 multilabel *label101 (m:*label104)
+  117 jump *label14 always
+  118 multilabel *label102 (m:*label104)
+  119 jump *label14 always
+  120 multilabel *label103 (m:*label104)
+  121 jump *label12 always
+  122 label *label55
+  123 jump *label8 equal *tmp56 137
+  124 jump *label10 equal *tmp56 138
+  125 jump *label16 equal *tmp56 146
+  126 jump *label54 always
   127 label *label8
   128 set .MESSAGE :block
   129 jump *label6 always
   130 label *label7
-    * jump *label9 notEqual *tmp5 @switch
   131 label *label10
   132 set .SWITCH :block
   133 jump *label6 always
   134 label *label9
-    * jump *label12 equal *tmp5 @sorter
-    * jump *label12 equal *tmp5 @inverted-sorter
-    * jump *label11 notEqual *tmp5 @unloader
   135 label *label12
   136 set .SORTER :block
   137 jump *label6 always
   138 label *label11
-    * jump *label14 equal *tmp5 @vault
-    * jump *label14 equal *tmp5 @container
-    * jump *label14 equal *tmp5 @core-shard
-    * jump *label14 equal *tmp5 @core-foundation
-    * jump *label13 notEqual *tmp5 @core-nucleus
   139 label *label14
   140 set .CONTAINER :block
   141 set .SENSOR @totalItems
 
   143 op add .START :n 1
   144 jump *label6 always
   145 label *label13
-    * jump *label16 equal *tmp5 @liquid-tank
-    * jump *label16 equal *tmp5 @liquid-container
-    * jump *label15 notEqual *tmp5 @liquid-router
   146 label *label16
   147 set .CONTAINER :block
   148 set .SENSOR @totalLiquids
 
   150 op add .START :n 1
   151 jump *label6 always
   152 label *label15
-    * jump *label18 equal *tmp5 @battery
-    * jump *label17 notEqual *tmp5 @battery-large
   153 label *label18
   154 set .CONTAINER :block
   155 set .SENSOR @totalPower
 
   157 op add .START :n 1
   158 jump *label6 always
   159 label *label17
-    * jump *label20 equal *tmp5 @power-node
-    * jump *label20 equal *tmp5 @power-node-large
-    * jump *label19 notEqual *tmp5 @surge-tower
   160 label *label20
   161 set .CONTAINER :block
   162 set .SENSOR @powerNetStored
   163 set .MAXIMUM @powerNetCapacity
   164 op add .START :n 1
   165 label *label19
+  166 label *label54
   167 label *label6
   168 label *label4
   169 jump *label52 greaterThan :n 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   291 print .ACTIVE_TEXT
   292 set :n .START
   293 label *label49
-    * jump *label51 greaterThanEq :n @links
+  294 jump *label51 greaterThanEq .START @links
   295 label *label53
   296 getlink :block :n
   297 control enabled :block .ON

Modifications by Replicate loop condition at line 72:1 (+1 instructions):
 
   207 label *label28
   208 sensor *tmp23 .SWITCH @enabled
   209 jump *label30 notEqual *tmp23 0
+  210 label *label105
   211 set :start @time
   212 sensor :item .SORTER @config
   213 op equal *tmp27 :item null
 
   315 print "ms"
   316 printflush .MESSAGE
   317 label *label29
-    * jump *label28 always
+  318 sensor *tmp23 .SWITCH @enabled
+  319 jump *label105 equal *tmp23 0
   320 label *label30
   321 end

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-1 instructions):
 
   191 label *label2
   192 sensor *tmp14 .SORTER @type
   193 op strictEqual .INVERTED *tmp14 @inverted-sorter
-    * jump *label24 equal null true
   194 set .STATE true
   195 op xor .ON .INVERTED true
   196 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-3 instructions):
 
   196 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
   197 jump *label27 equal .ON false
   198 set .ACTIVE_TEXT "\nCurrently active:[green]"
-    * jump *label27 always
   199 label *label27
   200 label *label24
   201 label *label25
 
   235 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
   236 jump *label39 equal .ON false
   237 set .ACTIVE_TEXT "\nCurrently active:[green]"
-    * jump *label39 always
   238 label *label39
   239 label *label36
   240 label *label37
 
   249 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
   250 jump *label46 equal .ON false
   251 set .ACTIVE_TEXT "\nCurrently active:[green]"
-    * jump *label46 always
   252 label *label46
   253 label *label43
   254 label *label44

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   245 jump *label43 equal .STATE false
   246 set .STATE false
   247 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED false
+  248 set .ON .INVERTED
   249 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
   250 jump *label46 equal .ON false
   251 set .ACTIVE_TEXT "\nCurrently active:[green]"

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
   247 op add .CYCLES .CYCLES 1
   248 set .ON .INVERTED
   249 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
-    * jump *label46 equal .ON false
+  250 jump *label46 equal .INVERTED false
   251 set .ACTIVE_TEXT "\nCurrently active:[green]"
   252 label *label46
   253 label *label43

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    10 print "Configuring regulator..."
    11 print "\n"
    12 set :n @links
-    * label *label3
    13 jump *label5 lessThanEq :n 0
    14 label *label52
    15 op sub :n :n 1
 
   126 label *label8
   127 set .MESSAGE :block
   128 jump *label6 always
-    * label *label7
   129 label *label10
   130 set .SWITCH :block
   131 jump *label6 always
-    * label *label9
   132 label *label12
   133 set .SORTER :block
   134 jump *label6 always
-    * label *label11
   135 label *label14
   136 set .CONTAINER :block
   137 set .SENSOR @totalItems
   138 set .MAXIMUM @itemCapacity
   139 op add .START :n 1
   140 jump *label6 always
-    * label *label13
   141 label *label16
   142 set .CONTAINER :block
   143 set .SENSOR @totalLiquids
   144 set .MAXIMUM @liquidCapacity
   145 op add .START :n 1
   146 jump *label6 always
-    * label *label15
   147 label *label18
   148 set .CONTAINER :block
   149 set .SENSOR @totalPower
   150 set .MAXIMUM @powerCapacity
   151 op add .START :n 1
   152 jump *label6 always
-    * label *label17
   153 label *label20
   154 set .CONTAINER :block
   155 set .SENSOR @powerNetStored
   156 set .MAXIMUM @powerNetCapacity
   157 op add .START :n 1
-    * label *label19
   158 label *label54
   159 label *label6
-    * label *label4
   160 jump *label52 greaterThan :n 0
   161 label *label5
   162 print "Message: "
 
   175 print "No container."
   176 print "\n"
   177 label *label21
-    * label *label22
   178 printflush .MESSAGE
-    * label *label1
   179 jump *label0 equal .CONTAINER null
-    * label *label2
   180 sensor *tmp14 .SORTER @type
   181 op strictEqual .INVERTED *tmp14 @inverted-sorter
   182 set .STATE true
 
   185 jump *label27 equal .ON false
   186 set .ACTIVE_TEXT "\nCurrently active:[green]"
   187 label *label27
-    * label *label24
-    * label *label25
-    * label *label23
   188 set .CYCLES 0
   189 control enabled .SWITCH 0
-    * label *label28
   190 sensor *tmp23 .SWITCH @enabled
   191 jump *label30 notEqual *tmp23 0
   192 label *label105
 
   221 set .ACTIVE_TEXT "\nCurrently active:[green]"
   222 label *label39
   223 label *label36
-    * label *label37
-    * label *label35
   224 jump *label34 always
   225 label *label33
   226 jump *label40 lessThan :pct PCT_HIGH
 
   233 set .ACTIVE_TEXT "\nCurrently active:[green]"
   234 label *label46
   235 label *label43
-    * label *label44
-    * label *label42
   236 label *label40
-    * label *label41
   237 label *label34
   238 print "\n"
   239 print "Level: [gold]"
 
   266 label *label48
   267 print .ACTIVE_TEXT
   268 set :n .START
-    * label *label49
   269 jump *label51 greaterThanEq .START @links
   270 label *label53
   271 getlink :block :n
 
   273 print "\n    "
   274 print :block
   275 op add :n :n 1
-    * label *label50
   276 jump *label53 lessThan :n @links
   277 label *label51
   278 print "[]"
 
   287 print " "
   288 print "ms"
   289 printflush .MESSAGE
-    * label *label29
   290 sensor *tmp23 .SWITCH @enabled
   291 jump *label105 equal *tmp23 0
   292 label *label30

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
+    0 label __start__
     1 set PCT_LOW 60
     2 set PCT_HIGH 80
     3 set .CONTAINER null
 
   189 set .CYCLES 0
   190 control enabled .SWITCH 0
   191 sensor *tmp23 .SWITCH @enabled
-    * jump *label30 notEqual *tmp23 0
+  192 jump __start__ notEqual *tmp23 0
   193 label *label105
   194 set :start @time
   195 sensor :item .SORTER @config
 
   213 op mul *tmp33 100 :amount
   214 op idiv :pct *tmp33 :max
   215 jump *label33 greaterThan :pct PCT_LOW
-    * jump *label36 equal .STATE true
+  216 jump *label34 equal .STATE true
   217 set .STATE true
   218 op add .CYCLES .CYCLES 1
   219 op xor .ON .INVERTED true
   220 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
-    * jump *label39 equal .ON false
+  221 jump *label34 equal .ON false
   222 set .ACTIVE_TEXT "\nCurrently active:[green]"
   223 label *label39
   224 label *label36

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1:
 
   220 set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
   221 jump *label34 equal .ON false
   222 set .ACTIVE_TEXT "\nCurrently active:[green]"
-    * label *label39
-    * label *label36
   223 jump *label34 always
   224 label *label33
   225 jump *label40 lessThan :pct PCT_HIGH
 
   288 printflush .MESSAGE
   289 sensor *tmp23 .SWITCH @enabled
   290 jump *label105 equal *tmp23 0
-    * label *label30
   291 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   288 printflush .MESSAGE
   289 sensor *tmp23 .SWITCH @enabled
   290 jump *label105 equal *tmp23 0
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-35 instructions):
 
     8 set .MESSAGE null
     9 set .MAXIMUM null
    10 label *label0
-    * print "Configuring regulator..."
-    * print "\n"
+   11 print "Configuring regulator...\n"
    12 set :n @links
    13 jump *label5 lessThanEq :n 0
    14 label *label52
    15 op sub :n :n 1
    16 getlink :block :n
-    * print "Found: "
-    * print :block
-    * print "\n"
+   17 print "Found: {0}\n"
+   18 format :block
    19 sensor *tmp5 :block @type
    20 sensor *tmp56 *tmp5 @id
    21 jump *label55 greaterThanEq *tmp56 96
 
   158 label *label6
   159 jump *label52 greaterThan :n 0
   160 label *label5
-    * print "Message: "
-    * print .MESSAGE
-    * print "\n"
-    * print "Switch: "
-    * print .SWITCH
-    * print "\n"
-    * print "Sorter: "
-    * print .SORTER
-    * print "\n"
-    * print "Container: "
-    * print .CONTAINER
-    * print "\n"
+  161 print "Message: {0}\nSwitch: {0}\nSorter: {0}\nContainer: {0}\n"
+  162 format .MESSAGE
+  163 format .SWITCH
+  164 format .SORTER
+  165 format .CONTAINER
   166 jump *label21 notEqual .CONTAINER null
-    * print "No container."
-    * print "\n"
+  167 print "No container.\n"
   168 label *label21
   169 printflush .MESSAGE
   170 jump *label0 equal .CONTAINER null
 
   192 print .CONTAINER
   193 jump *label32 always
   194 label *label31
-    * print "Measuring [gold]"
-    * print :item
-    * print "["
-    * print "] in "
+  195 print "Measuring [gold]{0}[] in "
+  196 format :item
   197 print .CONTAINER
   198 label *label32
   199 sensor :max .CONTAINER .MAXIMUM
 
   222 label *label43
   223 label *label40
   224 label *label34
-    * print "\n"
-    * print "Level: [gold]"
-    * print :pct
-    * print "%"
-    * print "[]"
+  225 print "\nLevel: [gold]{0}%[]"
+  226 format :pct
   227 jump *label47 equal .INVERTED false
-    * print "\n"
-    * print "Activate above [green]"
-    * print PCT_HIGH
-    * print "%"
-    * print "[]"
-    * print "\n"
-    * print "Deactivate below [salmon]"
-    * print PCT_LOW
-    * print "%"
-    * print "[]"
+  228 print "\nActivate above [green]{0}%[]\nDeactivate below [salmon]{0}%[]"
+  229 format PCT_HIGH
+  230 format PCT_LOW
   231 jump *label48 always
   232 label *label47
-    * print "\n"
-    * print "Activate below [green]"
-    * print PCT_LOW
-    * print "%"
-    * print "[]"
-    * print "\n"
-    * print "Deactivate above [salmon]"
-    * print PCT_HIGH
-    * print "%"
-    * print "[]"
+  233 print "\nActivate below [green]{0}%[]\nDeactivate above [salmon]{0}%[]"
+  234 format PCT_LOW
+  235 format PCT_HIGH
   236 label *label48
   237 print .ACTIVE_TEXT
   238 set :n .START
 
   245 op add :n :n 1
   246 jump *label53 lessThan :n @links
   247 label *label51
-    * print "[]"
-    * print "\n"
-    * print "# of cycles: "
-    * print .CYCLES
+  248 print "[]\n# of cycles: {0}\n[lightgray]Loop: {0} ms"
+  249 format .CYCLES
   250 op sub *tmp54 @time :start
   251 op floor *tmp55 *tmp54
-    * print "\n"
-    * print "[lightgray]Loop: "
-    * print *tmp55
-    * print " "
-    * print "ms"
+  252 format *tmp55
   253 printflush .MESSAGE
   254 sensor *tmp23 .SWITCH @enabled
   255 jump *label105 equal *tmp23 0

Final code before resolving virtual instructions:

label __start__
set PCT_LOW 60
set PCT_HIGH 80
set .CONTAINER null
set .SORTER null
set .SWITCH null
set .START null
set .SENSOR null
set .MESSAGE null
set .MAXIMUM null
label *label0
print "Configuring regulator...\n"
set :n @links
jump *label5 lessThanEq :n 0
label *label52
op sub :n :n 1
getlink :block :n
print "Found: {0}\n"
format :block
sensor *tmp5 :block @type
sensor *tmp56 *tmp5 @id
jump *label55 greaterThanEq *tmp56 96
jump *label54 lessThan *tmp56 48
multijump *label56 *tmp56 48
multilabel *label56
jump *label12 always
multilabel *label57
jump *label12 always
multilabel *label58
jump *label54 always
multilabel *label59
jump *label54 always
multilabel *label60
jump *label54 always
multilabel *label61
jump *label54 always
multilabel *label62
jump *label54 always
multilabel *label63
jump *label54 always
multilabel *label64
jump *label54 always
multilabel *label65
jump *label54 always
multilabel *label66
jump *label54 always
multilabel *label67
jump *label54 always
multilabel *label68
jump *label54 always
multilabel *label69
jump *label54 always
multilabel *label70
jump *label54 always
multilabel *label71
jump *label16 always
multilabel *label72
jump *label16 always
multilabel *label73
jump *label54 always
multilabel *label74
jump *label54 always
multilabel *label75
jump *label54 always
multilabel *label76
jump *label20 always
multilabel *label77
jump *label20 always
multilabel *label78
jump *label20 always
multilabel *label79
jump *label54 always
multilabel *label80
jump *label18 always
multilabel *label81
jump *label18 always
multilabel *label82
jump *label54 always
multilabel *label83
jump *label54 always
multilabel *label84
jump *label54 always
multilabel *label85
jump *label54 always
multilabel *label86
jump *label54 always
multilabel *label87
jump *label54 always
multilabel *label88
jump *label54 always
multilabel *label89
jump *label54 always
multilabel *label90
jump *label54 always
multilabel *label91
jump *label54 always
multilabel *label92
jump *label54 always
multilabel *label93
jump *label54 always
multilabel *label94
jump *label54 always
multilabel *label95
jump *label54 always
multilabel *label96
jump *label54 always
multilabel *label97
jump *label54 always
multilabel *label98
jump *label14 always
multilabel *label99
jump *label14 always
multilabel *label100
jump *label14 always
multilabel *label101
jump *label14 always
multilabel *label102
jump *label14 always
multilabel *label103
jump *label12 always
label *label55
jump *label8 equal *tmp56 137
jump *label10 equal *tmp56 138
jump *label16 equal *tmp56 146
jump *label54 always
label *label8
set .MESSAGE :block
jump *label6 always
label *label10
set .SWITCH :block
jump *label6 always
label *label12
set .SORTER :block
jump *label6 always
label *label14
set .CONTAINER :block
set .SENSOR @totalItems
set .MAXIMUM @itemCapacity
op add .START :n 1
jump *label6 always
label *label16
set .CONTAINER :block
set .SENSOR @totalLiquids
set .MAXIMUM @liquidCapacity
op add .START :n 1
jump *label6 always
label *label18
set .CONTAINER :block
set .SENSOR @totalPower
set .MAXIMUM @powerCapacity
op add .START :n 1
jump *label6 always
label *label20
set .CONTAINER :block
set .SENSOR @powerNetStored
set .MAXIMUM @powerNetCapacity
op add .START :n 1
label *label54
label *label6
jump *label52 greaterThan :n 0
label *label5
print "Message: {0}\nSwitch: {0}\nSorter: {0}\nContainer: {0}\n"
format .MESSAGE
format .SWITCH
format .SORTER
format .CONTAINER
jump *label21 notEqual .CONTAINER null
print "No container.\n"
label *label21
printflush .MESSAGE
jump *label0 equal .CONTAINER null
sensor *tmp14 .SORTER @type
op strictEqual .INVERTED *tmp14 @inverted-sorter
set .STATE true
op xor .ON .INVERTED true
set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump *label27 equal .ON false
set .ACTIVE_TEXT "\nCurrently active:[green]"
label *label27
set .CYCLES 0
control enabled .SWITCH 0
sensor *tmp23 .SWITCH @enabled
jump __start__ notEqual *tmp23 0
label *label105
set :start @time
sensor :item .SORTER @config
op equal *tmp27 :item null
op notEqual *tmp28 .SENSOR @totalItems
op or *tmp29 *tmp27 *tmp28
jump *label31 equal *tmp29 false
set :item .SENSOR
print "Measuring [gold]total[] in "
print .CONTAINER
jump *label32 always
label *label31
print "Measuring [gold]{0}[] in "
format :item
print .CONTAINER
label *label32
sensor :max .CONTAINER .MAXIMUM
sensor :amount .CONTAINER :item
op mul *tmp33 100 :amount
op idiv :pct *tmp33 :max
jump *label33 greaterThan :pct PCT_LOW
jump *label34 equal .STATE true
set .STATE true
op add .CYCLES .CYCLES 1
op xor .ON .INVERTED true
set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump *label34 equal .ON false
set .ACTIVE_TEXT "\nCurrently active:[green]"
jump *label34 always
label *label33
jump *label40 lessThan :pct PCT_HIGH
jump *label43 equal .STATE false
set .STATE false
op add .CYCLES .CYCLES 1
set .ON .INVERTED
set .ACTIVE_TEXT "\nCurrently inactive:[salmon]"
jump *label46 equal .INVERTED false
set .ACTIVE_TEXT "\nCurrently active:[green]"
label *label46
label *label43
label *label40
label *label34
print "\nLevel: [gold]{0}%[]"
format :pct
jump *label47 equal .INVERTED false
print "\nActivate above [green]{0}%[]\nDeactivate below [salmon]{0}%[]"
format PCT_HIGH
format PCT_LOW
jump *label48 always
label *label47
print "\nActivate below [green]{0}%[]\nDeactivate above [salmon]{0}%[]"
format PCT_LOW
format PCT_HIGH
label *label48
print .ACTIVE_TEXT
set :n .START
jump *label51 greaterThanEq .START @links
label *label53
getlink :block :n
control enabled :block .ON
print "\n    "
print :block
op add :n :n 1
jump *label53 lessThan :n @links
label *label51
print "[]\n# of cycles: {0}\n[lightgray]Loop: {0} ms"
format .CYCLES
op sub *tmp54 @time :start
op floor *tmp55 *tmp54
format *tmp55
printflush .MESSAGE
sensor *tmp23 .SWITCH @enabled
jump *label105 equal *tmp23 0
