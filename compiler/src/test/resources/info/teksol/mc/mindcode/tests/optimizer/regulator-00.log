   261 instructions before optimizations.
    19 instructions eliminated by Temp Variables Elimination (2 iterations).
     1 instructions eliminated by Case Expression Optimization.
    27 instructions eliminated by Dead Code Elimination (7 iterations).
     1 instructions eliminated by Jump Normalization (5 iterations).
    10 instructions eliminated by Jump Optimization (5 iterations).
     7 instructions eliminated by Single Step Elimination (2 passes, 7 iterations).
     1 instructions modified by Expression Optimization (3 iterations).
     9 instructions eliminated by If Expression Optimization (3 iterations).
     7 instructions eliminated by Data Flow Optimization (3 passes, 11 iterations).
     1 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
   131 instructions added by Case Switching (5 iterations).
     1 case expressions converted to switched jumps Case Switching.
     7 instructions eliminated by Jump Straightening (5 iterations).
     2 instructions updated by JumpThreading.
    35 instructions eliminated by Print Merging.
   270 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 825):
  * Replicate loop condition at line 72:1                        size    +1, benefit       25.0, efficiency     25.000 (+1 instructions)
  o Convert case at line 25:9 (segments: 15)                     size    +0, benefit     2013.9, efficiency   Infinity
  o Convert case at line 25:9 (segments: 6)                      size    +1, benefit     2118.1, efficiency   2118.056
  o Convert case at line 25:9 (segments: 4)                      size   +20, benefit     2152.8, efficiency    107.639
  o Convert case at line 25:9 (segments: 6)                      size   +21, benefit     2256.9, efficiency    107.474
  o Convert case at line 25:9 (segments: 2)                      size   +38, benefit     2326.4, efficiency     61.221
  o Convert case at line 25:9 (segments: 5)                      size   +39, benefit     2361.1, efficiency     60.541
  o Convert case at line 25:9 (segments: 4, padded low)          size   +67, benefit     2395.8, efficiency     35.759
  o Convert case at line 25:9 (segments: 6, padded low)          size   +68, benefit     2500.0, efficiency     36.765
  o Convert case at line 25:9 (segments: 3)                      size   +80, benefit     2812.5, efficiency     35.156
  o Convert case at line 25:9 (segments: 1)                      size   +84, benefit     2847.2, efficiency     33.896
  o Convert case at line 25:9 (segments: 5, padded low)          size   +86, benefit     2881.9, efficiency     33.511
  o Convert case at line 25:9 (segments: 3, padded low)          size  +127, benefit     3333.3, efficiency     26.247
  o Convert case at line 25:9 (segments: 1, padded low)          size  +131, benefit     3472.2, efficiency     26.506

Pass 1: speed optimization selection (cost limit 824):
  o Convert case at line 25:9 (segments: 15)                     size    +0, benefit     2013.9, efficiency   Infinity
  o Convert case at line 25:9 (segments: 6)                      size    +1, benefit     2118.1, efficiency   2118.056
  o Convert case at line 25:9 (segments: 4)                      size   +20, benefit     2152.8, efficiency    107.639
  o Convert case at line 25:9 (segments: 6)                      size   +21, benefit     2256.9, efficiency    107.474
  o Convert case at line 25:9 (segments: 2)                      size   +38, benefit     2326.4, efficiency     61.221
  o Convert case at line 25:9 (segments: 5)                      size   +39, benefit     2361.1, efficiency     60.541
  o Convert case at line 25:9 (segments: 4, padded low)          size   +67, benefit     2395.8, efficiency     35.759
  o Convert case at line 25:9 (segments: 6, padded low)          size   +68, benefit     2500.0, efficiency     36.765
  o Convert case at line 25:9 (segments: 3)                      size   +80, benefit     2812.5, efficiency     35.156
  o Convert case at line 25:9 (segments: 1)                      size   +84, benefit     2847.2, efficiency     33.896
  o Convert case at line 25:9 (segments: 5, padded low)          size   +86, benefit     2881.9, efficiency     33.511
  o Convert case at line 25:9 (segments: 3, padded low)          size  +127, benefit     3333.3, efficiency     26.247
  * Convert case at line 25:9 (segments: 1, padded low)          size  +131, benefit     3472.2, efficiency     26.506 (+131 instructions)

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
    25 print :block
    26 print "\n"
    27 sensor *tmp5 :block @type
-    * set *tmp6 *tmp5
-    * jump *label8 equal *tmp6 @message
+   28 jump *label8 equal *tmp5 @message
    29 jump *label7 always
    30 label *label8
    31 set .MESSAGE :block
    32 set *tmp4 .MESSAGE
    33 jump *label6 always
    34 label *label7
-    * jump *label10 equal *tmp6 @switch
+   35 jump *label10 equal *tmp5 @switch
    36 jump *label9 always
    37 label *label10
    38 set .SWITCH :block
    39 set *tmp4 .SWITCH
    40 jump *label6 always
    41 label *label9
-    * jump *label12 equal *tmp6 @sorter
-    * jump *label12 equal *tmp6 @inverted-sorter
-    * jump *label12 equal *tmp6 @unloader
+   42 jump *label12 equal *tmp5 @sorter
+   43 jump *label12 equal *tmp5 @inverted-sorter
+   44 jump *label12 equal *tmp5 @unloader
    45 jump *label11 always
    46 label *label12
    47 set .SORTER :block
    48 set *tmp4 .SORTER
    49 jump *label6 always
    50 label *label11
-    * jump *label14 equal *tmp6 @vault
-    * jump *label14 equal *tmp6 @container
-    * jump *label14 equal *tmp6 @core-shard
-    * jump *label14 equal *tmp6 @core-foundation
-    * jump *label14 equal *tmp6 @core-nucleus
+   51 jump *label14 equal *tmp5 @vault
+   52 jump *label14 equal *tmp5 @container
+   53 jump *label14 equal *tmp5 @core-shard
+   54 jump *label14 equal *tmp5 @core-foundation
+   55 jump *label14 equal *tmp5 @core-nucleus
    56 jump *label13 always
    57 label *label14
    58 set .CONTAINER :block
 
    63 set *tmp4 .START
    64 jump *label6 always
    65 label *label13
-    * jump *label16 equal *tmp6 @liquid-tank
-    * jump *label16 equal *tmp6 @liquid-container
-    * jump *label16 equal *tmp6 @liquid-router
+   66 jump *label16 equal *tmp5 @liquid-tank
+   67 jump *label16 equal *tmp5 @liquid-container
+   68 jump *label16 equal *tmp5 @liquid-router
    69 jump *label15 always
    70 label *label16
    71 set .CONTAINER :block
 
    76 set *tmp4 .START
    77 jump *label6 always
    78 label *label15
-    * jump *label18 equal *tmp6 @battery
-    * jump *label18 equal *tmp6 @battery-large
+   79 jump *label18 equal *tmp5 @battery
+   80 jump *label18 equal *tmp5 @battery-large
    81 jump *label17 always
    82 label *label18
    83 set .CONTAINER :block
 
    88 set *tmp4 .START
    89 jump *label6 always
    90 label *label17
-    * jump *label20 equal *tmp6 @power-node
-    * jump *label20 equal *tmp6 @power-node-large
-    * jump *label20 equal *tmp6 @surge-tower
+   91 jump *label20 equal *tmp5 @power-node
+   92 jump *label20 equal *tmp5 @power-node-large
+   93 jump *label20 equal *tmp5 @surge-tower
    94 jump *label19 always
    95 label *label20
    96 set .CONTAINER :block

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-17 instructions):
 
    29 jump *label7 always
    30 label *label8
    31 set .MESSAGE :block
-    * set *tmp4 .MESSAGE
    32 jump *label6 always
    33 label *label7
    34 jump *label10 equal *tmp5 @switch
    35 jump *label9 always
    36 label *label10
    37 set .SWITCH :block
-    * set *tmp4 .SWITCH
    38 jump *label6 always
    39 label *label9
    40 jump *label12 equal *tmp5 @sorter
 
    43 jump *label11 always
    44 label *label12
    45 set .SORTER :block
-    * set *tmp4 .SORTER
    46 jump *label6 always
    47 label *label11
    48 jump *label14 equal *tmp5 @vault
 
    57 set .MAXIMUM @itemCapacity
    58 op add *tmp7 :n 1
    59 set .START *tmp7
-    * set *tmp4 .START
    60 jump *label6 always
    61 label *label13
    62 jump *label16 equal *tmp5 @liquid-tank
 
    69 set .MAXIMUM @liquidCapacity
    70 op add *tmp8 :n 1
    71 set .START *tmp8
-    * set *tmp4 .START
    72 jump *label6 always
    73 label *label15
    74 jump *label18 equal *tmp5 @battery
 
    80 set .MAXIMUM @powerCapacity
    81 op add *tmp9 :n 1
    82 set .START *tmp9
-    * set *tmp4 .START
    83 jump *label6 always
    84 label *label17
    85 jump *label20 equal *tmp5 @power-node
 
    92 set .MAXIMUM @powerNetCapacity
    93 op add *tmp10 :n 1
    94 set .START *tmp10
-    * set *tmp4 .START
    95 jump *label6 always
    96 label *label19
-    * set *tmp4 null
    97 label *label6
    98 label *label4
    99 jump *label3 always
 
   114 jump *label21 equal *tmp11 false
   115 print "No container."
   116 print "\n"
-    * set *tmp12 "No container."
   117 jump *label22 always
   118 label *label21
-    * set *tmp12 null
   119 label *label22
   120 printflush .MESSAGE
   121 label *label1
 
   144 label *label24
   145 set *tmp18 null
   146 label *label25
-    * set *tmp16 *tmp18
   147 label *label23
   148 set .CYCLES 0
   149 set *tmp21 .SWITCH
 
   163 set :item .SENSOR
   164 print "Measuring [gold]total[] in "
   165 print .CONTAINER
-    * set *tmp30 null
   166 jump *label32 always
   167 label *label31
   168 print "Measuring [gold]"
 
   170 print "["
   171 print "] in "
   172 print .CONTAINER
-    * set *tmp30 null
   173 label *label32
   174 sensor *tmp31 .CONTAINER .MAXIMUM
   175 set :max *tmp31
 
   201 label *label37
   202 set *tmp37 *tmp39
   203 label *label35
-    * set *tmp36 *tmp37
   204 jump *label34 always
   205 label *label33
   206 op greaterThanEq *tmp42 :pct PCT_HIGH
 
   231 label *label40
   232 set *tmp43 null
   233 label *label41
-    * set *tmp36 *tmp43
   234 label *label34
   235 print "\n"
   236 print "Level: [gold]"
 
   248 print PCT_LOW
   249 print "%"
   250 print "[]"
-    * set *tmp49 null
   251 jump *label48 always
   252 label *label47
   253 print "\n"
 
   260 print PCT_HIGH
   261 print "%"
   262 print "[]"
-    * set *tmp49 null
   263 label *label48
   264 print .ACTIVE_TEXT
   265 set :n .START

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-5 instructions):
 
   139 set *tmp20 "\nCurrently inactive:[salmon]"
   140 label *label27
   141 set .ACTIVE_TEXT *tmp20
-    * set *tmp18 .ACTIVE_TEXT
   142 jump *label25 always
   143 label *label24
-    * set *tmp18 null
   144 label *label25
   145 label *label23
   146 set .CYCLES 0
 
   197 label *label36
   198 set *tmp39 null
   199 label *label37
-    * set *tmp37 *tmp39
   200 label *label35
   201 jump *label34 always
   202 label *label33
 
   223 label *label44
   224 set *tmp44 *tmp46
   225 label *label42
-    * set *tmp43 *tmp44
   226 jump *label41 always
   227 label *label40
-    * set *tmp43 null
   228 label *label41
   229 label *label34
   230 print "\n"

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-3 instructions):
 
   192 set *tmp41 "\nCurrently inactive:[salmon]"
   193 label *label39
   194 set .ACTIVE_TEXT *tmp41
-    * set *tmp39 .ACTIVE_TEXT
   195 jump *label37 always
   196 label *label36
-    * set *tmp39 null
   197 label *label37
   198 label *label35
   199 jump *label34 always
 
   219 label *label43
   220 set *tmp46 null
   221 label *label44
-    * set *tmp44 *tmp46
   222 label *label42
   223 jump *label41 always
   224 label *label40

Modifications by Initial phase, Dead Code Elimination, iteration 4 (-2 instructions):
 
   214 set *tmp48 "\nCurrently inactive:[salmon]"
   215 label *label46
   216 set .ACTIVE_TEXT *tmp48
-    * set *tmp46 .ACTIVE_TEXT
   217 jump *label44 always
   218 label *label43
-    * set *tmp46 null
   219 label *label44
   220 label *label42
   221 jump *label41 always

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-19 instructions):
 
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
-    * set *tmp0 @links
-    * set :n *tmp0
+   15 set :n @links
    16 label *label3
    17 op greaterThan *tmp1 :n 0
    18 jump *label5 equal *tmp1 false
-    * op sub *tmp2 :n 1
-    * set :n *tmp2
-    * getlink *tmp3 :n
-    * set :block *tmp3
+   19 op sub :n :n 1
+   20 getlink :block :n
    21 print "Found: "
    22 print :block
    23 print "\n"
 
    52 set .CONTAINER :block
    53 set .SENSOR @totalItems
    54 set .MAXIMUM @itemCapacity
-    * op add *tmp7 :n 1
-    * set .START *tmp7
+   55 op add .START :n 1
    56 jump *label6 always
    57 label *label13
    58 jump *label16 equal *tmp5 @liquid-tank
 
    63 set .CONTAINER :block
    64 set .SENSOR @totalLiquids
    65 set .MAXIMUM @liquidCapacity
-    * op add *tmp8 :n 1
-    * set .START *tmp8
+   66 op add .START :n 1
    67 jump *label6 always
    68 label *label15
    69 jump *label18 equal *tmp5 @battery
 
    73 set .CONTAINER :block
    74 set .SENSOR @totalPower
    75 set .MAXIMUM @powerCapacity
-    * op add *tmp9 :n 1
-    * set .START *tmp9
+   76 op add .START :n 1
    77 jump *label6 always
    78 label *label17
    79 jump *label20 equal *tmp5 @power-node
 
    84 set .CONTAINER :block
    85 set .SENSOR @powerNetStored
    86 set .MAXIMUM @powerNetCapacity
-    * op add *tmp10 :n 1
-    * set .START *tmp10
+   87 op add .START :n 1
    88 jump *label6 always
    89 label *label19
    90 label *label6
 
   116 jump *label0 notEqual *tmp13 false
   117 label *label2
   118 sensor *tmp14 .SORTER @type
-    * op strictEqual *tmp15 *tmp14 @inverted-sorter
-    * set .INVERTED *tmp15
+  119 op strictEqual .INVERTED *tmp14 @inverted-sorter
   120 set :setState:newState true
   121 op notEqual *tmp17 .STATE :setState:newState
   122 jump *label24 equal *tmp17 false
   123 set .STATE :setState:newState
   124 op add .CYCLES .CYCLES 1
-    * op xor *tmp19 .INVERTED .STATE
-    * set .ON *tmp19
+  125 op xor .ON .INVERTED .STATE
   126 jump *label26 equal .ON false
   127 set *tmp20 "\nCurrently active:[green]"
   128 jump *label27 always
 
   135 label *label25
   136 label *label23
   137 set .CYCLES 0
-    * set *tmp21 .SWITCH
-    * control enabled *tmp21 0
+  138 control enabled .SWITCH 0
   139 label *label28
   140 sensor *tmp23 .SWITCH @enabled
   141 op equal *tmp24 *tmp23 0
   142 jump *label30 equal *tmp24 false
-    * set *tmp25 @time
-    * set :start *tmp25
-    * sensor *tmp26 .SORTER @config
-    * set :item *tmp26
+  143 set :start @time
+  144 sensor :item .SORTER @config
   145 op equal *tmp27 :item null
   146 op notEqual *tmp28 .SENSOR @totalItems
   147 op or *tmp29 *tmp27 *tmp28
 
   157 print "] in "
   158 print .CONTAINER
   159 label *label32
-    * sensor *tmp31 .CONTAINER .MAXIMUM
-    * set :max *tmp31
-    * sensor *tmp32 .CONTAINER :item
-    * set :amount *tmp32
+  160 sensor :max .CONTAINER .MAXIMUM
+  161 sensor :amount .CONTAINER :item
   162 op mul *tmp33 100 :amount
-    * op idiv *tmp34 *tmp33 :max
-    * set :pct *tmp34
+  163 op idiv :pct *tmp33 :max
   164 op lessThanEq *tmp35 :pct PCT_LOW
   165 jump *label33 equal *tmp35 false
   166 set :setState.1:newState true
 
   168 jump *label36 equal *tmp38 false
   169 set .STATE :setState.1:newState
   170 op add .CYCLES .CYCLES 1
-    * op xor *tmp40 .INVERTED .STATE
-    * set .ON *tmp40
+  171 op xor .ON .INVERTED .STATE
   172 jump *label38 equal .ON false
   173 set *tmp41 "\nCurrently active:[green]"
   174 jump *label39 always
 
   189 jump *label43 equal *tmp45 false
   190 set .STATE :setState.2:newState
   191 op add .CYCLES .CYCLES 1
-    * op xor *tmp47 .INVERTED .STATE
-    * set .ON *tmp47
+  192 op xor .ON .INVERTED .STATE
   193 jump *label45 equal .ON false
   194 set *tmp48 "\nCurrently active:[green]"
   195 jump *label46 always
 
   239 label *label49
   240 op lessThan *tmp50 :n @links
   241 jump *label51 equal *tmp50 false
-    * getlink *tmp51 :n
-    * set :block *tmp51
-    * set *tmp52 :block
-    * control enabled *tmp52 .ON
+  242 getlink :block :n
+  243 control enabled :block .ON
   244 print "\n    "
   245 print :block
   246 op add :n :n 1

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-7 instructions):
 
    22 print :block
    23 print "\n"
    24 sensor *tmp5 :block @type
-    * jump *label8 equal *tmp5 @message
-    * jump *label7 always
+   25 jump *label7 notEqual *tmp5 @message
    26 label *label8
    27 set .MESSAGE :block
    28 jump *label6 always
    29 label *label7
-    * jump *label10 equal *tmp5 @switch
-    * jump *label9 always
+   30 jump *label9 notEqual *tmp5 @switch
    31 label *label10
    32 set .SWITCH :block
    33 jump *label6 always
    34 label *label9
    35 jump *label12 equal *tmp5 @sorter
    36 jump *label12 equal *tmp5 @inverted-sorter
-    * jump *label12 equal *tmp5 @unloader
-    * jump *label11 always
+   37 jump *label11 notEqual *tmp5 @unloader
    38 label *label12
    39 set .SORTER :block
    40 jump *label6 always
 
    43 jump *label14 equal *tmp5 @container
    44 jump *label14 equal *tmp5 @core-shard
    45 jump *label14 equal *tmp5 @core-foundation
-    * jump *label14 equal *tmp5 @core-nucleus
-    * jump *label13 always
+   46 jump *label13 notEqual *tmp5 @core-nucleus
    47 label *label14
    48 set .CONTAINER :block
    49 set .SENSOR @totalItems
 
    53 label *label13
    54 jump *label16 equal *tmp5 @liquid-tank
    55 jump *label16 equal *tmp5 @liquid-container
-    * jump *label16 equal *tmp5 @liquid-router
-    * jump *label15 always
+   56 jump *label15 notEqual *tmp5 @liquid-router
    57 label *label16
    58 set .CONTAINER :block
    59 set .SENSOR @totalLiquids
 
    62 jump *label6 always
    63 label *label15
    64 jump *label18 equal *tmp5 @battery
-    * jump *label18 equal *tmp5 @battery-large
-    * jump *label17 always
+   65 jump *label17 notEqual *tmp5 @battery-large
    66 label *label18
    67 set .CONTAINER :block
    68 set .SENSOR @totalPower
 
    72 label *label17
    73 jump *label20 equal *tmp5 @power-node
    74 jump *label20 equal *tmp5 @power-node-large
-    * jump *label20 equal *tmp5 @surge-tower
-    * jump *label19 always
+   75 jump *label19 notEqual *tmp5 @surge-tower
    76 label *label20
    77 set .CONTAINER :block
    78 set .SENSOR @powerNetStored

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-10 instructions):
 
    14 print "\n"
    15 set :n @links
    16 label *label3
-    * op greaterThan *tmp1 :n 0
-    * jump *label5 equal *tmp1 false
+   17 jump *label5 lessThanEq :n 0
    18 op sub :n :n 1
    19 getlink :block :n
    20 print "Found: "
 
    95 print "Container: "
    96 print .CONTAINER
    97 print "\n"
-    * op equal *tmp11 .CONTAINER null
-    * jump *label21 equal *tmp11 false
+   98 jump *label21 notEqual .CONTAINER null
    99 print "No container."
   100 print "\n"
   101 jump *label22 always
 
   103 label *label22
   104 printflush .MESSAGE
   105 label *label1
-    * op equal *tmp13 .CONTAINER null
-    * jump *label0 notEqual *tmp13 false
+  106 jump *label0 equal .CONTAINER null
   107 label *label2
   108 sensor *tmp14 .SORTER @type
   109 op strictEqual .INVERTED *tmp14 @inverted-sorter
   110 set :setState:newState true
-    * op notEqual *tmp17 .STATE :setState:newState
-    * jump *label24 equal *tmp17 false
+  111 jump *label24 equal .STATE :setState:newState
   112 set .STATE :setState:newState
   113 op add .CYCLES .CYCLES 1
   114 op xor .ON .INVERTED .STATE
 
   127 control enabled .SWITCH 0
   128 label *label28
   129 sensor *tmp23 .SWITCH @enabled
-    * op equal *tmp24 *tmp23 0
-    * jump *label30 equal *tmp24 false
+  130 jump *label30 notEqual *tmp23 0
   131 set :start @time
   132 sensor :item .SORTER @config
   133 op equal *tmp27 :item null
 
   149 sensor :amount .CONTAINER :item
   150 op mul *tmp33 100 :amount
   151 op idiv :pct *tmp33 :max
-    * op lessThanEq *tmp35 :pct PCT_LOW
-    * jump *label33 equal *tmp35 false
+  152 jump *label33 greaterThan :pct PCT_LOW
   153 set :setState.1:newState true
-    * op notEqual *tmp38 .STATE :setState.1:newState
-    * jump *label36 equal *tmp38 false
+  154 jump *label36 equal .STATE :setState.1:newState
   155 set .STATE :setState.1:newState
   156 op add .CYCLES .CYCLES 1
   157 op xor .ON .INVERTED .STATE
 
   168 label *label35
   169 jump *label34 always
   170 label *label33
-    * op greaterThanEq *tmp42 :pct PCT_HIGH
-    * jump *label40 equal *tmp42 false
+  171 jump *label40 lessThan :pct PCT_HIGH
   172 set :setState.2:newState false
-    * op notEqual *tmp45 .STATE :setState.2:newState
-    * jump *label43 equal *tmp45 false
+  173 jump *label43 equal .STATE :setState.2:newState
   174 set .STATE :setState.2:newState
   175 op add .CYCLES .CYCLES 1
   176 op xor .ON .INVERTED .STATE
 
   221 print .ACTIVE_TEXT
   222 set :n .START
   223 label *label49
-    * op lessThan *tmp50 :n @links
-    * jump *label51 equal *tmp50 false
+  224 jump *label51 greaterThanEq :n @links
   225 getlink :block :n
   226 control enabled :block .ON
   227 print "\n    "

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-6 instructions):
 
    77 set .SENSOR @powerNetStored
    78 set .MAXIMUM @powerNetCapacity
    79 op add .START :n 1
-    * jump *label6 always
    80 label *label19
    81 label *label6
    82 label *label4
 
    97 jump *label21 notEqual .CONTAINER null
    98 print "No container."
    99 print "\n"
-    * jump *label22 always
   100 label *label21
   101 label *label22
   102 printflush .MESSAGE
 
   117 set *tmp20 "\nCurrently inactive:[salmon]"
   118 label *label27
   119 set .ACTIVE_TEXT *tmp20
-    * jump *label25 always
   120 label *label24
   121 label *label25
   122 label *label23
 
   159 set *tmp41 "\nCurrently inactive:[salmon]"
   160 label *label39
   161 set .ACTIVE_TEXT *tmp41
-    * jump *label37 always
   162 label *label36
   163 label *label37
   164 label *label35
 
   177 set *tmp48 "\nCurrently inactive:[salmon]"
   178 label *label46
   179 set .ACTIVE_TEXT *tmp48
-    * jump *label44 always
   180 label *label43
   181 label *label44
   182 label *label42
-    * jump *label41 always
   183 label *label40
   184 label *label41
   185 label *label34

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-1 instructions):
 
     2 set .CONTAINER null
     3 set .SORTER null
     4 set .SWITCH null
-    * set .STATE .SWITCH
-    * set .START .STATE
-    * set .SENSOR .START
-    * set .ON .SENSOR
-    * set .MESSAGE .ON
-    * set .MAXIMUM .MESSAGE
-    * set .ACTIVE_TEXT .MAXIMUM
+    5 set .STATE null
+    6 set .START .SWITCH
+    7 set .SENSOR .STATE
+    8 set .ON .START
+    9 set .MESSAGE .SENSOR
+   10 set .MAXIMUM .ON
+   11 set .ACTIVE_TEXT .MESSAGE
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
   108 set :setState:newState true
-    * jump *label24 equal .STATE :setState:newState
-    * set .STATE :setState:newState
-    * op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  109 jump *label24 equal .STATE true
+  110 set .STATE true
+  111 op xor .ON .INVERTED :setState:newState
   112 jump *label26 equal .ON false
   113 set *tmp20 "\nCurrently active:[green]"
   114 jump *label27 always
 
   147 op idiv :pct *tmp33 :max
   148 jump *label33 greaterThan :pct PCT_LOW
   149 set :setState.1:newState true
-    * jump *label36 equal .STATE :setState.1:newState
-    * set .STATE :setState.1:newState
+  150 jump *label36 equal .STATE true
+  151 set .STATE true
   152 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  153 op xor .ON .INVERTED :setState.1:newState
   154 jump *label38 equal .ON false
   155 set *tmp41 "\nCurrently active:[green]"
   156 jump *label39 always
 
   165 label *label33
   166 jump *label40 lessThan :pct PCT_HIGH
   167 set :setState.2:newState false
-    * jump *label43 equal .STATE :setState.2:newState
-    * set .STATE :setState.2:newState
+  168 jump *label43 equal .STATE false
+  169 set .STATE false
   170 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED .STATE
+  171 op xor .ON .INVERTED :setState.2:newState
   172 jump *label45 equal .ON false
   173 set *tmp48 "\nCurrently active:[green]"
   174 jump *label46 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2:
 
     3 set .SORTER null
     4 set .SWITCH null
     5 set .STATE null
-    * set .START .SWITCH
-    * set .SENSOR .STATE
-    * set .ON .START
-    * set .MESSAGE .SENSOR
-    * set .MAXIMUM .ON
-    * set .ACTIVE_TEXT .MESSAGE
+    6 set .START null
+    7 set .SENSOR null
+    8 set .ON .SWITCH
+    9 set .MESSAGE .STATE
+   10 set .MAXIMUM .START
+   11 set .ACTIVE_TEXT .SENSOR
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
   108 set :setState:newState true
-    * jump *label24 equal .STATE true
+  109 jump *label24 equal null true
   110 set .STATE true
-    * op xor .ON .INVERTED :setState:newState
+  111 op xor .ON .INVERTED true
   112 jump *label26 equal .ON false
   113 set *tmp20 "\nCurrently active:[green]"
   114 jump *label27 always
 
   150 jump *label36 equal .STATE true
   151 set .STATE true
   152 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED :setState.1:newState
+  153 op xor .ON .INVERTED true
   154 jump *label38 equal .ON false
   155 set *tmp41 "\nCurrently active:[green]"
   156 jump *label39 always
 
   168 jump *label43 equal .STATE false
   169 set .STATE false
   170 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED :setState.2:newState
+  171 op xor .ON .INVERTED false
   172 jump *label45 equal .ON false
   173 set *tmp48 "\nCurrently active:[green]"
   174 jump *label46 always

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3 (-3 instructions):
 
     5 set .STATE null
     6 set .START null
     7 set .SENSOR null
-    * set .ON .SWITCH
-    * set .MESSAGE .STATE
-    * set .MAXIMUM .START
-    * set .ACTIVE_TEXT .SENSOR
+    8 set .ON null
+    9 set .MESSAGE null
+   10 set .MAXIMUM null
+   11 set .ACTIVE_TEXT null
    12 label *label0
    13 print "Configuring regulator..."
    14 print "\n"
 
   105 label *label2
   106 sensor *tmp14 .SORTER @type
   107 op strictEqual .INVERTED *tmp14 @inverted-sorter
-    * set :setState:newState true
   108 jump *label24 equal null true
   109 set .STATE true
   110 op xor .ON .INVERTED true
 
   145 op mul *tmp33 100 :amount
   146 op idiv :pct *tmp33 :max
   147 jump *label33 greaterThan :pct PCT_LOW
-    * set :setState.1:newState true
   148 jump *label36 equal .STATE true
   149 set .STATE true
   150 op add .CYCLES .CYCLES 1
 
   162 jump *label34 always
   163 label *label33
   164 jump *label40 lessThan :pct PCT_HIGH
-    * set :setState.2:newState false
   165 jump *label43 equal .STATE false
   166 set .STATE false
   167 op add .CYCLES .CYCLES 1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-3 instructions):
 
     2 set .CONTAINER null
     3 set .SORTER null
     4 set .SWITCH null
-    * set .STATE null
     5 set .START null
     6 set .SENSOR null
-    * set .ON null
     7 set .MESSAGE null
     8 set .MAXIMUM null
-    * set .ACTIVE_TEXT null
     9 label *label0
    10 print "Configuring regulator..."
    11 print "\n"

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
    12 set :n @links
    13 label *label3
    14 jump *label5 lessThanEq :n 0
+   15 label *label52
    16 op sub :n :n 1
    17 getlink :block :n
    18 print "Found: "
 
    78 label *label19
    79 label *label6
    80 label *label4
-    * jump *label3 always
+   81 jump *label52 greaterThan :n 0
    82 label *label5
    83 print "Message: "
    84 print .MESSAGE
 
   210 set :n .START
   211 label *label49
   212 jump *label51 greaterThanEq :n @links
+  213 label *label53
   214 getlink :block :n
   215 control enabled :block .ON
   216 print "\n    "
   217 print :block
   218 op add :n :n 1
   219 label *label50
-    * jump *label49 always
+  220 jump *label53 lessThan :n @links
   221 label *label51
   222 print "[]"
   223 print "\n"

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-9 instructions):
 
   106 jump *label24 equal null true
   107 set .STATE true
   108 op xor .ON .INVERTED true
-    * jump *label26 equal .ON false
-    * set *tmp20 "\nCurrently active:[green]"
-    * jump *label27 always
+  109 select *tmp20 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   110 label *label26
-    * set *tmp20 "\nCurrently inactive:[salmon]"
   111 label *label27
   112 set .ACTIVE_TEXT *tmp20
   113 label *label24
 
   144 set .STATE true
   145 op add .CYCLES .CYCLES 1
   146 op xor .ON .INVERTED true
-    * jump *label38 equal .ON false
-    * set *tmp41 "\nCurrently active:[green]"
-    * jump *label39 always
+  147 select *tmp41 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   148 label *label38
-    * set *tmp41 "\nCurrently inactive:[salmon]"
   149 label *label39
   150 set .ACTIVE_TEXT *tmp41
   151 label *label36
 
   158 set .STATE false
   159 op add .CYCLES .CYCLES 1
   160 op xor .ON .INVERTED false
-    * jump *label45 equal .ON false
-    * set *tmp48 "\nCurrently active:[green]"
-    * jump *label46 always
+  161 select *tmp48 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   162 label *label45
-    * set *tmp48 "\nCurrently inactive:[salmon]"
   163 label *label46
   164 set .ACTIVE_TEXT *tmp48
   165 label *label43

Modifications by Replicate loop condition at line 72:1 (+1 instructions):
 
   118 label *label28
   119 sensor *tmp23 .SWITCH @enabled
   120 jump *label30 notEqual *tmp23 0
+  121 label *label54
   122 set :start @time
   123 sensor :item .SORTER @config
   124 op equal *tmp27 :item null
 
   224 print "ms"
   225 printflush .MESSAGE
   226 label *label29
-    * jump *label28 always
+  227 sensor *tmp23 .SWITCH @enabled
+  228 jump *label54 equal *tmp23 0
   229 label *label30
   230 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   201 print .ACTIVE_TEXT
   202 set :n .START
   203 label *label49
-    * jump *label51 greaterThanEq :n @links
+  204 jump *label51 greaterThanEq .START @links
   205 label *label53
   206 getlink :block :n
   207 control enabled :block .ON

Modifications by Convert case at line 25:9 (segments: 1, padded low) (+131 instructions):
 
    19 print :block
    20 print "\n"
    21 sensor *tmp5 :block @type
-    * jump *label7 notEqual *tmp5 @message
+   22 sensor *tmp56 *tmp5 @id
+   23 jump *label55 greaterThanEq *tmp56 147
+   24 multijump *label56 *tmp56 0 (m:*label203)
+   25 multilabel *label56 (m:*label203)
+   26 jump *label55 always
+   27 multilabel *label57 (m:*label203)
+   28 jump *label55 always
+   29 multilabel *label58 (m:*label203)
+   30 jump *label55 always
+   31 multilabel *label59 (m:*label203)
+   32 jump *label55 always
+   33 multilabel *label60 (m:*label203)
+   34 jump *label55 always
+   35 multilabel *label61 (m:*label203)
+   36 jump *label55 always
+   37 multilabel *label62 (m:*label203)
+   38 jump *label55 always
+   39 multilabel *label63 (m:*label203)
+   40 jump *label55 always
+   41 multilabel *label64 (m:*label203)
+   42 jump *label55 always
+   43 multilabel *label65 (m:*label203)
+   44 jump *label55 always
+   45 multilabel *label66 (m:*label203)
+   46 jump *label55 always
+   47 multilabel *label67 (m:*label203)
+   48 jump *label55 always
+   49 multilabel *label68 (m:*label203)
+   50 jump *label55 always
+   51 multilabel *label69 (m:*label203)
+   52 jump *label55 always
+   53 multilabel *label70 (m:*label203)
+   54 jump *label55 always
+   55 multilabel *label71 (m:*label203)
+   56 jump *label55 always
+   57 multilabel *label72 (m:*label203)
+   58 jump *label55 always
+   59 multilabel *label73 (m:*label203)
+   60 jump *label55 always
+   61 multilabel *label74 (m:*label203)
+   62 jump *label55 always
+   63 multilabel *label75 (m:*label203)
+   64 jump *label55 always
+   65 multilabel *label76 (m:*label203)
+   66 jump *label55 always
+   67 multilabel *label77 (m:*label203)
+   68 jump *label55 always
+   69 multilabel *label78 (m:*label203)
+   70 jump *label55 always
+   71 multilabel *label79 (m:*label203)
+   72 jump *label55 always
+   73 multilabel *label80 (m:*label203)
+   74 jump *label55 always
+   75 multilabel *label81 (m:*label203)
+   76 jump *label55 always
+   77 multilabel *label82 (m:*label203)
+   78 jump *label55 always
+   79 multilabel *label83 (m:*label203)
+   80 jump *label55 always
+   81 multilabel *label84 (m:*label203)
+   82 jump *label55 always
+   83 multilabel *label85 (m:*label203)
+   84 jump *label55 always
+   85 multilabel *label86 (m:*label203)
+   86 jump *label55 always
+   87 multilabel *label87 (m:*label203)
+   88 jump *label55 always
+   89 multilabel *label88 (m:*label203)
+   90 jump *label55 always
+   91 multilabel *label89 (m:*label203)
+   92 jump *label55 always
+   93 multilabel *label90 (m:*label203)
+   94 jump *label55 always
+   95 multilabel *label91 (m:*label203)
+   96 jump *label55 always
+   97 multilabel *label92 (m:*label203)
+   98 jump *label55 always
+   99 multilabel *label93 (m:*label203)
+  100 jump *label55 always
+  101 multilabel *label94 (m:*label203)
+  102 jump *label55 always
+  103 multilabel *label95 (m:*label203)
+  104 jump *label55 always
+  105 multilabel *label96 (m:*label203)
+  106 jump *label55 always
+  107 multilabel *label97 (m:*label203)
+  108 jump *label55 always
+  109 multilabel *label98 (m:*label203)
+  110 jump *label55 always
+  111 multilabel *label99 (m:*label203)
+  112 jump *label55 always
+  113 multilabel *label100 (m:*label203)
+  114 jump *label55 always
+  115 multilabel *label101 (m:*label203)
+  116 jump *label55 always
+  117 multilabel *label102 (m:*label203)
+  118 jump *label55 always
+  119 multilabel *label103 (m:*label203)
+  120 jump *label55 always
+  121 multilabel *label104 (m:*label203)
+  122 jump *label12 always
+  123 multilabel *label105 (m:*label203)
+  124 jump *label12 always
+  125 multilabel *label106 (m:*label203)
+  126 jump *label55 always
+  127 multilabel *label107 (m:*label203)
+  128 jump *label55 always
+  129 multilabel *label108 (m:*label203)
+  130 jump *label55 always
+  131 multilabel *label109 (m:*label203)
+  132 jump *label55 always
+  133 multilabel *label110 (m:*label203)
+  134 jump *label55 always
+  135 multilabel *label111 (m:*label203)
+  136 jump *label55 always
+  137 multilabel *label112 (m:*label203)
+  138 jump *label55 always
+  139 multilabel *label113 (m:*label203)
+  140 jump *label55 always
+  141 multilabel *label114 (m:*label203)
+  142 jump *label55 always
+  143 multilabel *label115 (m:*label203)
+  144 jump *label55 always
+  145 multilabel *label116 (m:*label203)
+  146 jump *label55 always
+  147 multilabel *label117 (m:*label203)
+  148 jump *label55 always
+  149 multilabel *label118 (m:*label203)
+  150 jump *label55 always
+  151 multilabel *label119 (m:*label203)
+  152 jump *label16 always
+  153 multilabel *label120 (m:*label203)
+  154 jump *label16 always
+  155 multilabel *label121 (m:*label203)
+  156 jump *label55 always
+  157 multilabel *label122 (m:*label203)
+  158 jump *label55 always
+  159 multilabel *label123 (m:*label203)
+  160 jump *label55 always
+  161 multilabel *label124 (m:*label203)
+  162 jump *label20 always
+  163 multilabel *label125 (m:*label203)
+  164 jump *label20 always
+  165 multilabel *label126 (m:*label203)
+  166 jump *label20 always
+  167 multilabel *label127 (m:*label203)
+  168 jump *label55 always
+  169 multilabel *label128 (m:*label203)
+  170 jump *label18 always
+  171 multilabel *label129 (m:*label203)
+  172 jump *label18 always
+  173 multilabel *label130 (m:*label203)
+  174 jump *label55 always
+  175 multilabel *label131 (m:*label203)
+  176 jump *label55 always
+  177 multilabel *label132 (m:*label203)
+  178 jump *label55 always
+  179 multilabel *label133 (m:*label203)
+  180 jump *label55 always
+  181 multilabel *label134 (m:*label203)
+  182 jump *label55 always
+  183 multilabel *label135 (m:*label203)
+  184 jump *label55 always
+  185 multilabel *label136 (m:*label203)
+  186 jump *label55 always
+  187 multilabel *label137 (m:*label203)
+  188 jump *label55 always
+  189 multilabel *label138 (m:*label203)
+  190 jump *label55 always
+  191 multilabel *label139 (m:*label203)
+  192 jump *label55 always
+  193 multilabel *label140 (m:*label203)
+  194 jump *label55 always
+  195 multilabel *label141 (m:*label203)
+  196 jump *label55 always
+  197 multilabel *label142 (m:*label203)
+  198 jump *label55 always
+  199 multilabel *label143 (m:*label203)
+  200 jump *label55 always
+  201 multilabel *label144 (m:*label203)
+  202 jump *label55 always
+  203 multilabel *label145 (m:*label203)
+  204 jump *label55 always
+  205 multilabel *label146 (m:*label203)
+  206 jump *label14 always
+  207 multilabel *label147 (m:*label203)
+  208 jump *label14 always
+  209 multilabel *label148 (m:*label203)
+  210 jump *label14 always
+  211 multilabel *label149 (m:*label203)
+  212 jump *label14 always
+  213 multilabel *label150 (m:*label203)
+  214 jump *label14 always
+  215 multilabel *label151 (m:*label203)
+  216 jump *label12 always
+  217 multilabel *label152 (m:*label203)
+  218 jump *label55 always
+  219 multilabel *label153 (m:*label203)
+  220 jump *label55 always
+  221 multilabel *label154 (m:*label203)
+  222 jump *label55 always
+  223 multilabel *label155 (m:*label203)
+  224 jump *label55 always
+  225 multilabel *label156 (m:*label203)
+  226 jump *label55 always
+  227 multilabel *label157 (m:*label203)
+  228 jump *label55 always
+  229 multilabel *label158 (m:*label203)
+  230 jump *label55 always
+  231 multilabel *label159 (m:*label203)
+  232 jump *label55 always
+  233 multilabel *label160 (m:*label203)
+  234 jump *label55 always
+  235 multilabel *label161 (m:*label203)
+  236 jump *label55 always
+  237 multilabel *label162 (m:*label203)
+  238 jump *label55 always
+  239 multilabel *label163 (m:*label203)
+  240 jump *label55 always
+  241 multilabel *label164 (m:*label203)
+  242 jump *label55 always
+  243 multilabel *label165 (m:*label203)
+  244 jump *label55 always
+  245 multilabel *label166 (m:*label203)
+  246 jump *label55 always
+  247 multilabel *label167 (m:*label203)
+  248 jump *label55 always
+  249 multilabel *label168 (m:*label203)
+  250 jump *label55 always
+  251 multilabel *label169 (m:*label203)
+  252 jump *label55 always
+  253 multilabel *label170 (m:*label203)
+  254 jump *label55 always
+  255 multilabel *label171 (m:*label203)
+  256 jump *label55 always
+  257 multilabel *label172 (m:*label203)
+  258 jump *label55 always
+  259 multilabel *label173 (m:*label203)
+  260 jump *label55 always
+  261 multilabel *label174 (m:*label203)
+  262 jump *label55 always
+  263 multilabel *label175 (m:*label203)
+  264 jump *label55 always
+  265 multilabel *label176 (m:*label203)
+  266 jump *label55 always
+  267 multilabel *label177 (m:*label203)
+  268 jump *label55 always
+  269 multilabel *label178 (m:*label203)
+  270 jump *label55 always
+  271 multilabel *label179 (m:*label203)
+  272 jump *label55 always
+  273 multilabel *label180 (m:*label203)
+  274 jump *label55 always
+  275 multilabel *label181 (m:*label203)
+  276 jump *label55 always
+  277 multilabel *label182 (m:*label203)
+  278 jump *label55 always
+  279 multilabel *label183 (m:*label203)
+  280 jump *label55 always
+  281 multilabel *label184 (m:*label203)
+  282 jump *label55 always
+  283 multilabel *label185 (m:*label203)
+  284 jump *label55 always
+  285 multilabel *label186 (m:*label203)
+  286 jump *label55 always
+  287 multilabel *label187 (m:*label203)
+  288 jump *label55 always
+  289 multilabel *label188 (m:*label203)
+  290 jump *label55 always
+  291 multilabel *label189 (m:*label203)
+  292 jump *label55 always
+  293 multilabel *label190 (m:*label203)
+  294 jump *label55 always
+  295 multilabel *label191 (m:*label203)
+  296 jump *label55 always
+  297 multilabel *label192 (m:*label203)
+  298 jump *label55 always
+  299 multilabel *label193 (m:*label203)
+  300 jump *label8 always
+  301 multilabel *label194 (m:*label203)
+  302 jump *label10 always
+  303 multilabel *label195 (m:*label203)
+  304 jump *label55 always
+  305 multilabel *label196 (m:*label203)
+  306 jump *label55 always
+  307 multilabel *label197 (m:*label203)
+  308 jump *label55 always
+  309 multilabel *label198 (m:*label203)
+  310 jump *label55 always
+  311 multilabel *label199 (m:*label203)
+  312 jump *label55 always
+  313 multilabel *label200 (m:*label203)
+  314 jump *label55 always
+  315 multilabel *label201 (m:*label203)
+  316 jump *label55 always
+  317 multilabel *label202 (m:*label203)
+  318 label *label16
+  319 set .CONTAINER :block
+  320 set .SENSOR @totalLiquids
+  321 set .MAXIMUM @liquidCapacity
+  322 op add .START :n 1
+  323 jump *label6 always
   324 label *label8
   325 set .MESSAGE :block
   326 jump *label6 always
   327 label *label7
-    * jump *label9 notEqual *tmp5 @switch
   328 label *label10
   329 set .SWITCH :block
   330 jump *label6 always
   331 label *label9
-    * jump *label12 equal *tmp5 @sorter
-    * jump *label12 equal *tmp5 @inverted-sorter
-    * jump *label11 notEqual *tmp5 @unloader
   332 label *label12
   333 set .SORTER :block
   334 jump *label6 always
   335 label *label11
-    * jump *label14 equal *tmp5 @vault
-    * jump *label14 equal *tmp5 @container
-    * jump *label14 equal *tmp5 @core-shard
-    * jump *label14 equal *tmp5 @core-foundation
-    * jump *label13 notEqual *tmp5 @core-nucleus
   336 label *label14
   337 set .CONTAINER :block
   338 set .SENSOR @totalItems
 
   340 op add .START :n 1
   341 jump *label6 always
   342 label *label13
-    * jump *label16 equal *tmp5 @liquid-tank
-    * jump *label16 equal *tmp5 @liquid-container
-    * jump *label15 notEqual *tmp5 @liquid-router
-    * label *label16
-    * set .CONTAINER :block
-    * set .SENSOR @totalLiquids
-    * set .MAXIMUM @liquidCapacity
-    * op add .START :n 1
-    * jump *label6 always
   343 label *label15
-    * jump *label18 equal *tmp5 @battery
-    * jump *label17 notEqual *tmp5 @battery-large
   344 label *label18
   345 set .CONTAINER :block
   346 set .SENSOR @totalPower
 
   348 op add .START :n 1
   349 jump *label6 always
   350 label *label17
-    * jump *label20 equal *tmp5 @power-node
-    * jump *label20 equal *tmp5 @power-node-large
-    * jump *label19 notEqual *tmp5 @surge-tower
   351 label *label20
   352 set .CONTAINER :block
   353 set .SENSOR @powerNetStored
   354 set .MAXIMUM @powerNetCapacity
   355 op add .START :n 1
   356 label *label19
+  357 label *label55
   358 label *label6
   359 label *label4
   360 jump *label52 greaterThan :n 0

Modifications by Iterated phase, Jump Normalization, pass 2, iteration 1 (-1 instructions):
 
   382 label *label2
   383 sensor *tmp14 .SORTER @type
   384 op strictEqual .INVERTED *tmp14 @inverted-sorter
-    * jump *label24 equal null true
   385 set .STATE true
   386 op xor .ON .INVERTED true
   387 select *tmp20 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"

Modifications by Iterated phase, Expression Optimization, pass 2, iteration 1:
 
   436 jump *label43 equal .STATE false
   437 set .STATE false
   438 op add .CYCLES .CYCLES 1
-    * op xor .ON .INVERTED false
+  439 set .ON .INVERTED
   440 select *tmp48 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   441 label *label45
   442 label *label46

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
   437 set .STATE false
   438 op add .CYCLES .CYCLES 1
   439 set .ON .INVERTED
-    * select *tmp48 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
+  440 select *tmp48 notEqual .INVERTED false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   441 label *label45
   442 label *label46
   443 set .ACTIVE_TEXT *tmp48

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
 
    10 print "Configuring regulator..."
    11 print "\n"
    12 set :n @links
-    * label *label3
    13 jump *label5 lessThanEq :n 0
    14 label *label52
    15 op sub :n :n 1
 
   323 label *label8
   324 set .MESSAGE :block
   325 jump *label6 always
-    * label *label7
   326 label *label10
   327 set .SWITCH :block
   328 jump *label6 always
-    * label *label9
   329 label *label12
   330 set .SORTER :block
   331 jump *label6 always
-    * label *label11
   332 label *label14
   333 set .CONTAINER :block
   334 set .SENSOR @totalItems
   335 set .MAXIMUM @itemCapacity
   336 op add .START :n 1
   337 jump *label6 always
-    * label *label13
-    * label *label15
   338 label *label18
   339 set .CONTAINER :block
   340 set .SENSOR @totalPower
   341 set .MAXIMUM @powerCapacity
   342 op add .START :n 1
   343 jump *label6 always
-    * label *label17
   344 label *label20
   345 set .CONTAINER :block
   346 set .SENSOR @powerNetStored
   347 set .MAXIMUM @powerNetCapacity
   348 op add .START :n 1
-    * label *label19
   349 label *label55
   350 label *label6
-    * label *label4
   351 jump *label52 greaterThan :n 0
   352 label *label5
   353 print "Message: "
 
   366 print "No container."
   367 print "\n"
   368 label *label21
-    * label *label22
   369 printflush .MESSAGE
-    * label *label1
   370 jump *label0 equal .CONTAINER null
-    * label *label2
   371 sensor *tmp14 .SORTER @type
   372 op strictEqual .INVERTED *tmp14 @inverted-sorter
   373 set .STATE true
   374 op xor .ON .INVERTED true
   375 select *tmp20 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
-    * label *label26
-    * label *label27
   376 set .ACTIVE_TEXT *tmp20
-    * label *label24
-    * label *label25
-    * label *label23
   377 set .CYCLES 0
   378 control enabled .SWITCH 0
-    * label *label28
   379 sensor *tmp23 .SWITCH @enabled
   380 jump *label30 notEqual *tmp23 0
   381 label *label54
 
   406 op add .CYCLES .CYCLES 1
   407 op xor .ON .INVERTED true
   408 select *tmp41 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
-    * label *label38
-    * label *label39
   409 set .ACTIVE_TEXT *tmp41
   410 label *label36
-    * label *label37
-    * label *label35
   411 jump *label34 always
   412 label *label33
   413 jump *label40 lessThan :pct PCT_HIGH
 
   416 op add .CYCLES .CYCLES 1
   417 set .ON .INVERTED
   418 select *tmp48 notEqual .INVERTED false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
-    * label *label45
-    * label *label46
   419 set .ACTIVE_TEXT *tmp48
   420 label *label43
-    * label *label44
-    * label *label42
   421 label *label40
-    * label *label41
   422 label *label34
   423 print "\n"
   424 print "Level: [gold]"
 
   451 label *label48
   452 print .ACTIVE_TEXT
   453 set :n .START
-    * label *label49
   454 jump *label51 greaterThanEq .START @links
   455 label *label53
   456 getlink :block :n
 
   458 print "\n    "
   459 print :block
   460 op add :n :n 1
-    * label *label50
   461 jump *label53 lessThan :n @links
   462 label *label51
   463 print "[]"
 
   472 print " "
   473 print "ms"
   474 printflush .MESSAGE
-    * label *label29
   475 sensor *tmp23 .SWITCH @enabled
   476 jump *label54 equal *tmp23 0
   477 label *label30

Modifications by Jumps phase, Jump Threading, pass 4, iteration 1:
+    0 label __start__
     1 set PCT_LOW 60
     2 set PCT_HIGH 80
     3 set .CONTAINER null
 
   378 set .CYCLES 0
   379 control enabled .SWITCH 0
   380 sensor *tmp23 .SWITCH @enabled
-    * jump *label30 notEqual *tmp23 0
+  381 jump __start__ notEqual *tmp23 0
   382 label *label54
   383 set :start @time
   384 sensor :item .SORTER @config
 
   402 op mul *tmp33 100 :amount
   403 op idiv :pct *tmp33 :max
   404 jump *label33 greaterThan :pct PCT_LOW
-    * jump *label36 equal .STATE true
+  405 jump *label34 equal .STATE true
   406 set .STATE true
   407 op add .CYCLES .CYCLES 1
   408 op xor .ON .INVERTED true

Modifications by Jumps phase, Unreachable Code Elimination, pass 4, iteration 1:
 
   408 op xor .ON .INVERTED true
   409 select *tmp41 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
   410 set .ACTIVE_TEXT *tmp41
-    * label *label36
   411 jump *label34 always
   412 label *label33
   413 jump *label40 lessThan :pct PCT_HIGH
 
   474 printflush .MESSAGE
   475 sensor *tmp23 .SWITCH @enabled
   476 jump *label54 equal *tmp23 0
-    * label *label30
   477 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   474 printflush .MESSAGE
   475 sensor *tmp23 .SWITCH @enabled
   476 jump *label54 equal *tmp23 0
-    * end

Modifications by Final phase, Print Merging, iteration 1 (-35 instructions):
 
     8 set .MESSAGE null
     9 set .MAXIMUM null
    10 label *label0
-    * print "Configuring regulator..."
-    * print "\n"
+   11 print "Configuring regulator...\n"
    12 set :n @links
    13 jump *label5 lessThanEq :n 0
    14 label *label52
    15 op sub :n :n 1
    16 getlink :block :n
-    * print "Found: "
-    * print :block
-    * print "\n"
+   17 print "Found: {0}\n"
+   18 format :block
    19 sensor *tmp5 :block @type
    20 sensor *tmp56 *tmp5 @id
    21 jump *label55 greaterThanEq *tmp56 147
 
   349 label *label6
   350 jump *label52 greaterThan :n 0
   351 label *label5
-    * print "Message: "
-    * print .MESSAGE
-    * print "\n"
-    * print "Switch: "
-    * print .SWITCH
-    * print "\n"
-    * print "Sorter: "
-    * print .SORTER
-    * print "\n"
-    * print "Container: "
-    * print .CONTAINER
-    * print "\n"
+  352 print "Message: {0}\nSwitch: {0}\nSorter: {0}\nContainer: {0}\n"
+  353 format .MESSAGE
+  354 format .SWITCH
+  355 format .SORTER
+  356 format .CONTAINER
   357 jump *label21 notEqual .CONTAINER null
-    * print "No container."
-    * print "\n"
+  358 print "No container.\n"
   359 label *label21
   360 printflush .MESSAGE
   361 jump *label0 equal .CONTAINER null
 
   381 print .CONTAINER
   382 jump *label32 always
   383 label *label31
-    * print "Measuring [gold]"
-    * print :item
-    * print "["
-    * print "] in "
+  384 print "Measuring [gold]{0}[] in "
+  385 format :item
   386 print .CONTAINER
   387 label *label32
   388 sensor :max .CONTAINER .MAXIMUM
 
   408 label *label43
   409 label *label40
   410 label *label34
-    * print "\n"
-    * print "Level: [gold]"
-    * print :pct
-    * print "%"
-    * print "[]"
+  411 print "\nLevel: [gold]{0}%[]"
+  412 format :pct
   413 jump *label47 equal .INVERTED false
-    * print "\n"
-    * print "Activate above [green]"
-    * print PCT_HIGH
-    * print "%"
-    * print "[]"
-    * print "\n"
-    * print "Deactivate below [salmon]"
-    * print PCT_LOW
-    * print "%"
-    * print "[]"
+  414 print "\nActivate above [green]{0}%[]\nDeactivate below [salmon]{0}%[]"
+  415 format PCT_HIGH
+  416 format PCT_LOW
   417 jump *label48 always
   418 label *label47
-    * print "\n"
-    * print "Activate below [green]"
-    * print PCT_LOW
-    * print "%"
-    * print "[]"
-    * print "\n"
-    * print "Deactivate above [salmon]"
-    * print PCT_HIGH
-    * print "%"
-    * print "[]"
+  419 print "\nActivate below [green]{0}%[]\nDeactivate above [salmon]{0}%[]"
+  420 format PCT_LOW
+  421 format PCT_HIGH
   422 label *label48
   423 print .ACTIVE_TEXT
   424 set :n .START
 
   431 op add :n :n 1
   432 jump *label53 lessThan :n @links
   433 label *label51
-    * print "[]"
-    * print "\n"
-    * print "# of cycles: "
-    * print .CYCLES
+  434 print "[]\n# of cycles: {0}\n[lightgray]Loop: {0} ms"
+  435 format .CYCLES
   436 op sub *tmp54 @time :start
   437 op floor *tmp55 *tmp54
-    * print "\n"
-    * print "[lightgray]Loop: "
-    * print *tmp55
-    * print " "
-    * print "ms"
+  438 format *tmp55
   439 printflush .MESSAGE
   440 sensor *tmp23 .SWITCH @enabled
   441 jump *label54 equal *tmp23 0

Final code before resolving virtual instructions:

label __start__
set PCT_LOW 60
set PCT_HIGH 80
set .CONTAINER null
set .SORTER null
set .SWITCH null
set .START null
set .SENSOR null
set .MESSAGE null
set .MAXIMUM null
label *label0
print "Configuring regulator...\n"
set :n @links
jump *label5 lessThanEq :n 0
label *label52
op sub :n :n 1
getlink :block :n
print "Found: {0}\n"
format :block
sensor *tmp5 :block @type
sensor *tmp56 *tmp5 @id
jump *label55 greaterThanEq *tmp56 147
multijump *label56 *tmp56 0
multilabel *label56
jump *label55 always
multilabel *label57
jump *label55 always
multilabel *label58
jump *label55 always
multilabel *label59
jump *label55 always
multilabel *label60
jump *label55 always
multilabel *label61
jump *label55 always
multilabel *label62
jump *label55 always
multilabel *label63
jump *label55 always
multilabel *label64
jump *label55 always
multilabel *label65
jump *label55 always
multilabel *label66
jump *label55 always
multilabel *label67
jump *label55 always
multilabel *label68
jump *label55 always
multilabel *label69
jump *label55 always
multilabel *label70
jump *label55 always
multilabel *label71
jump *label55 always
multilabel *label72
jump *label55 always
multilabel *label73
jump *label55 always
multilabel *label74
jump *label55 always
multilabel *label75
jump *label55 always
multilabel *label76
jump *label55 always
multilabel *label77
jump *label55 always
multilabel *label78
jump *label55 always
multilabel *label79
jump *label55 always
multilabel *label80
jump *label55 always
multilabel *label81
jump *label55 always
multilabel *label82
jump *label55 always
multilabel *label83
jump *label55 always
multilabel *label84
jump *label55 always
multilabel *label85
jump *label55 always
multilabel *label86
jump *label55 always
multilabel *label87
jump *label55 always
multilabel *label88
jump *label55 always
multilabel *label89
jump *label55 always
multilabel *label90
jump *label55 always
multilabel *label91
jump *label55 always
multilabel *label92
jump *label55 always
multilabel *label93
jump *label55 always
multilabel *label94
jump *label55 always
multilabel *label95
jump *label55 always
multilabel *label96
jump *label55 always
multilabel *label97
jump *label55 always
multilabel *label98
jump *label55 always
multilabel *label99
jump *label55 always
multilabel *label100
jump *label55 always
multilabel *label101
jump *label55 always
multilabel *label102
jump *label55 always
multilabel *label103
jump *label55 always
multilabel *label104
jump *label12 always
multilabel *label105
jump *label12 always
multilabel *label106
jump *label55 always
multilabel *label107
jump *label55 always
multilabel *label108
jump *label55 always
multilabel *label109
jump *label55 always
multilabel *label110
jump *label55 always
multilabel *label111
jump *label55 always
multilabel *label112
jump *label55 always
multilabel *label113
jump *label55 always
multilabel *label114
jump *label55 always
multilabel *label115
jump *label55 always
multilabel *label116
jump *label55 always
multilabel *label117
jump *label55 always
multilabel *label118
jump *label55 always
multilabel *label119
jump *label16 always
multilabel *label120
jump *label16 always
multilabel *label121
jump *label55 always
multilabel *label122
jump *label55 always
multilabel *label123
jump *label55 always
multilabel *label124
jump *label20 always
multilabel *label125
jump *label20 always
multilabel *label126
jump *label20 always
multilabel *label127
jump *label55 always
multilabel *label128
jump *label18 always
multilabel *label129
jump *label18 always
multilabel *label130
jump *label55 always
multilabel *label131
jump *label55 always
multilabel *label132
jump *label55 always
multilabel *label133
jump *label55 always
multilabel *label134
jump *label55 always
multilabel *label135
jump *label55 always
multilabel *label136
jump *label55 always
multilabel *label137
jump *label55 always
multilabel *label138
jump *label55 always
multilabel *label139
jump *label55 always
multilabel *label140
jump *label55 always
multilabel *label141
jump *label55 always
multilabel *label142
jump *label55 always
multilabel *label143
jump *label55 always
multilabel *label144
jump *label55 always
multilabel *label145
jump *label55 always
multilabel *label146
jump *label14 always
multilabel *label147
jump *label14 always
multilabel *label148
jump *label14 always
multilabel *label149
jump *label14 always
multilabel *label150
jump *label14 always
multilabel *label151
jump *label12 always
multilabel *label152
jump *label55 always
multilabel *label153
jump *label55 always
multilabel *label154
jump *label55 always
multilabel *label155
jump *label55 always
multilabel *label156
jump *label55 always
multilabel *label157
jump *label55 always
multilabel *label158
jump *label55 always
multilabel *label159
jump *label55 always
multilabel *label160
jump *label55 always
multilabel *label161
jump *label55 always
multilabel *label162
jump *label55 always
multilabel *label163
jump *label55 always
multilabel *label164
jump *label55 always
multilabel *label165
jump *label55 always
multilabel *label166
jump *label55 always
multilabel *label167
jump *label55 always
multilabel *label168
jump *label55 always
multilabel *label169
jump *label55 always
multilabel *label170
jump *label55 always
multilabel *label171
jump *label55 always
multilabel *label172
jump *label55 always
multilabel *label173
jump *label55 always
multilabel *label174
jump *label55 always
multilabel *label175
jump *label55 always
multilabel *label176
jump *label55 always
multilabel *label177
jump *label55 always
multilabel *label178
jump *label55 always
multilabel *label179
jump *label55 always
multilabel *label180
jump *label55 always
multilabel *label181
jump *label55 always
multilabel *label182
jump *label55 always
multilabel *label183
jump *label55 always
multilabel *label184
jump *label55 always
multilabel *label185
jump *label55 always
multilabel *label186
jump *label55 always
multilabel *label187
jump *label55 always
multilabel *label188
jump *label55 always
multilabel *label189
jump *label55 always
multilabel *label190
jump *label55 always
multilabel *label191
jump *label55 always
multilabel *label192
jump *label55 always
multilabel *label193
jump *label8 always
multilabel *label194
jump *label10 always
multilabel *label195
jump *label55 always
multilabel *label196
jump *label55 always
multilabel *label197
jump *label55 always
multilabel *label198
jump *label55 always
multilabel *label199
jump *label55 always
multilabel *label200
jump *label55 always
multilabel *label201
jump *label55 always
multilabel *label202
label *label16
set .CONTAINER :block
set .SENSOR @totalLiquids
set .MAXIMUM @liquidCapacity
op add .START :n 1
jump *label6 always
label *label8
set .MESSAGE :block
jump *label6 always
label *label10
set .SWITCH :block
jump *label6 always
label *label12
set .SORTER :block
jump *label6 always
label *label14
set .CONTAINER :block
set .SENSOR @totalItems
set .MAXIMUM @itemCapacity
op add .START :n 1
jump *label6 always
label *label18
set .CONTAINER :block
set .SENSOR @totalPower
set .MAXIMUM @powerCapacity
op add .START :n 1
jump *label6 always
label *label20
set .CONTAINER :block
set .SENSOR @powerNetStored
set .MAXIMUM @powerNetCapacity
op add .START :n 1
label *label55
label *label6
jump *label52 greaterThan :n 0
label *label5
print "Message: {0}\nSwitch: {0}\nSorter: {0}\nContainer: {0}\n"
format .MESSAGE
format .SWITCH
format .SORTER
format .CONTAINER
jump *label21 notEqual .CONTAINER null
print "No container.\n"
label *label21
printflush .MESSAGE
jump *label0 equal .CONTAINER null
sensor *tmp14 .SORTER @type
op strictEqual .INVERTED *tmp14 @inverted-sorter
set .STATE true
op xor .ON .INVERTED true
select *tmp20 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
set .ACTIVE_TEXT *tmp20
set .CYCLES 0
control enabled .SWITCH 0
sensor *tmp23 .SWITCH @enabled
jump __start__ notEqual *tmp23 0
label *label54
set :start @time
sensor :item .SORTER @config
op equal *tmp27 :item null
op notEqual *tmp28 .SENSOR @totalItems
op or *tmp29 *tmp27 *tmp28
jump *label31 equal *tmp29 false
set :item .SENSOR
print "Measuring [gold]total[] in "
print .CONTAINER
jump *label32 always
label *label31
print "Measuring [gold]{0}[] in "
format :item
print .CONTAINER
label *label32
sensor :max .CONTAINER .MAXIMUM
sensor :amount .CONTAINER :item
op mul *tmp33 100 :amount
op idiv :pct *tmp33 :max
jump *label33 greaterThan :pct PCT_LOW
jump *label34 equal .STATE true
set .STATE true
op add .CYCLES .CYCLES 1
op xor .ON .INVERTED true
select *tmp41 notEqual .ON false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
set .ACTIVE_TEXT *tmp41
jump *label34 always
label *label33
jump *label40 lessThan :pct PCT_HIGH
jump *label43 equal .STATE false
set .STATE false
op add .CYCLES .CYCLES 1
set .ON .INVERTED
select *tmp48 notEqual .INVERTED false "\nCurrently active:[green]" "\nCurrently inactive:[salmon]"
set .ACTIVE_TEXT *tmp48
label *label43
label *label40
label *label34
print "\nLevel: [gold]{0}%[]"
format :pct
jump *label47 equal .INVERTED false
print "\nActivate above [green]{0}%[]\nDeactivate below [salmon]{0}%[]"
format PCT_HIGH
format PCT_LOW
jump *label48 always
label *label47
print "\nActivate below [green]{0}%[]\nDeactivate above [salmon]{0}%[]"
format PCT_LOW
format PCT_HIGH
label *label48
print .ACTIVE_TEXT
set :n .START
jump *label51 greaterThanEq .START @links
label *label53
getlink :block :n
control enabled :block .ON
print "\n    "
print :block
op add :n :n 1
jump *label53 lessThan :n @links
label *label51
print "[]\n# of cycles: {0}\n[lightgray]Loop: {0} ms"
format .CYCLES
op sub *tmp54 @time :start
op floor *tmp55 *tmp54
format *tmp55
printflush .MESSAGE
sensor *tmp23 .SWITCH @enabled
jump *label54 equal *tmp23 0
