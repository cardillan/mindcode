   140 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Single Step Elimination (4 iterations).
     2 instructions modified by Expression Optimization (2 iterations).
    77 instructions eliminated by Data Flow Optimization (2 passes, 7 iterations).
    11 instructions added by Function Inlining (3 iterations).
     6 function calls inlined by Function Inlining.
    71 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 897):
  * Inline function 'assertEqualsRound' defined at line 3:1      cost    19, benefit       27.0, efficiency        1.4 (-31 instructions)
    Inline function call at line 71:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 72:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 73:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 75:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 76:1                            cost     4, benefit        4.5, efficiency        1.1
    Inline function call at line 77:1                            cost     4, benefit        4.5, efficiency        1.1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
   135 stop
   136 end
   137 label *label3
-    * op mul *tmp88 :fn3:actual 100000000
-    * set :fn29:x *tmp88
+  138 op mul :fn29:x :fn3:actual 100000000
   139 op add *tmp90 :fn29:x 0.5
-    * op floor *tmp91 *tmp90
-    * set *tmp89 *tmp91
+  140 op floor *tmp89 *tmp90
   141 label *label72
   142 op div *tmp92 *tmp89 100000000
   143 assertequals :fn3:expected *tmp92 :fn3:title

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1:
 
   123 op xor :a :a 2
   124 assertequals 1 :a "^="
   125 set :a 1
-    * op land :a :a 0
+  126 set :a false
   127 assertequals false :a "&&="
   128 set :a 1
   129 op land :a :a 2
   130 assertequals true :a "&&="
   131 set :a 0
-    * op or *tmp3 :a 2
+  132 set *tmp3 true
   133 op notEqual :a *tmp3 false
   134 assertequals true :a "||="
   135 stop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1 (-2 instructions):
 
    31 assertequals -1 -1 "not 1"
    32 assertequals -65536 -65536 "not 2"
    33 set :a 0xabcdefabcdef
-    * op add *tmp0 :a 1
-    * op sub *tmp1 0 *tmp0
-    * op not *tmp2 :a
-    * assertequals *tmp1 *tmp2 "not 3"
+   34 op add *tmp0 0xabcdefabcdef 1
+   35 op sub *tmp1 0 188900977659376
+   36 op not *tmp2 0xabcdefabcdef
+   37 assertequals -188900977659376 -188900977659376 "not 3"
    38 assertequals 4 4 "max"
    39 assertequals 2 2 "min"
    40 assertequals 2 2 "abs"
 
    87 assertequals 0 false "boolean negation 2"
    88 assertequals 0 false "boolean negation 3"
    89 set :a 2
-    * op pow :a :a 4
-    * assertequals 16 :a "**="
+   90 op pow :a 2 4
+   91 assertequals 16 16 "**="
    92 set :a 2
-    * op mul :a :a 4
-    * assertequals 8 :a "*="
+   93 op mul :a 2 4
+   94 assertequals 8 8 "*="
    95 set :a 6
-    * op div :a :a 4
-    * assertequals 1.5 :a "/="
+   96 op div :a 6 4
+   97 assertequals 1.5 1.5 "/="
    98 set :a 6
-    * op idiv :a :a 4
-    * assertequals 1 :a "\="
+   99 op idiv :a 6 4
+  100 assertequals 1 1 "\="
   101 set :a 6
-    * op mod :a :a 4
-    * assertequals 2 :a "%="
+  102 op mod :a 6 4
+  103 assertequals 2 2 "%="
   104 set :a 4
-    * op add :a :a 2
-    * assertequals 6 :a "+="
+  105 op add :a 4 2
+  106 assertequals 6 6 "+="
   107 set :a 4
-    * op sub :a :a 2
-    * assertequals 2 :a "-="
+  108 op sub :a 4 2
+  109 assertequals 2 2 "-="
   110 set :a 1
-    * op shl :a :a 2
-    * assertequals 4 :a "<<="
+  111 op shl :a 1 2
+  112 assertequals 4 4 "<<="
   113 set :a 9
-    * op shr :a :a 2
-    * assertequals 2 :a ">>="
+  114 op shr :a 9 2
+  115 assertequals 2 2 ">>="
   116 set :a 1
-    * op or :a :a 2
-    * assertequals 3 :a "|="
+  117 op or :a 1 2
+  118 assertequals 3 3 "|="
   119 set :a 3
-    * op and :a :a 2
-    * assertequals 2 :a "&="
+  120 op and :a 3 2
+  121 assertequals 2 2 "&="
   122 set :a 3
-    * op xor :a :a 2
-    * assertequals 1 :a "^="
-    * set :a 1
+  123 op xor :a 3 2
+  124 assertequals 1 1 "^="
   125 set :a false
-    * assertequals false :a "&&="
+  126 assertequals false false "&&="
   127 set :a 1
-    * op land :a :a 2
-    * assertequals true :a "&&="
-    * set :a 0
+  128 op land :a 1 2
+  129 assertequals true true "&&="
   130 set *tmp3 true
-    * op notEqual :a *tmp3 false
-    * assertequals true :a "||="
+  131 op notEqual :a true false
+  132 assertequals true true "||="
   133 stop
   134 end
   135 label *label3

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-33 instructions):
 
    30 assertequals 1 1 "xor"
    31 assertequals -1 -1 "not 1"
    32 assertequals -65536 -65536 "not 2"
-    * set :a 0xabcdefabcdef
-    * op add *tmp0 0xabcdefabcdef 1
-    * op sub *tmp1 0 188900977659376
-    * op not *tmp2 0xabcdefabcdef
    33 assertequals -188900977659376 -188900977659376 "not 3"
    34 assertequals 4 4 "max"
    35 assertequals 2 2 "min"
 
    82 assertequals 1 true "boolean negation 1"
    83 assertequals 0 false "boolean negation 2"
    84 assertequals 0 false "boolean negation 3"
-    * set :a 2
-    * op pow :a 2 4
    85 assertequals 16 16 "**="
-    * set :a 2
-    * op mul :a 2 4
    86 assertequals 8 8 "*="
-    * set :a 6
-    * op div :a 6 4
    87 assertequals 1.5 1.5 "/="
-    * set :a 6
-    * op idiv :a 6 4
    88 assertequals 1 1 "\="
-    * set :a 6
-    * op mod :a 6 4
    89 assertequals 2 2 "%="
-    * set :a 4
-    * op add :a 4 2
    90 assertequals 6 6 "+="
-    * set :a 4
-    * op sub :a 4 2
    91 assertequals 2 2 "-="
-    * set :a 1
-    * op shl :a 1 2
    92 assertequals 4 4 "<<="
-    * set :a 9
-    * op shr :a 9 2
    93 assertequals 2 2 ">>="
-    * set :a 1
-    * op or :a 1 2
    94 assertequals 3 3 "|="
-    * set :a 3
-    * op and :a 3 2
    95 assertequals 2 2 "&="
-    * set :a 3
-    * op xor :a 3 2
    96 assertequals 1 1 "^="
-    * set :a false
    97 assertequals false false "&&="
-    * set :a 1
-    * op land :a 1 2
    98 assertequals true true "&&="
-    * set *tmp3 true
-    * op notEqual :a true false
    99 assertequals true true "||="
   100 stop
   101 end

Modifications by Inline function 'assertEqualsRound' defined at line 3:1 (+11 instructions):
 
    45 set :fn3:expected 1
    46 set :fn3:actual 1
    47 set :fn3:title "sin"
-    * setaddr :fn3*retaddr *label4
-    * call *label3 :fn3*retval
-    * label *label4
+   48 label *label73
+   49 op mul :fn29:x :fn3:actual 100000000
+   50 op add *tmp90 :fn29:x 0.5
+   51 op floor *tmp89 *tmp90
+   52 label *label74
+   53 op div *tmp92 *tmp89 100000000
+   54 assertequals :fn3:expected *tmp92 :fn3:title
+   55 label *label75
    56 set :fn3:expected -1
    57 set :fn3:actual -1
    58 set :fn3:title "cos"
-    * setaddr :fn3*retaddr *label5
-    * call *label3 :fn3*retval
-    * label *label5
+   59 label *label76
+   60 op mul :fn29:x :fn3:actual 100000000
+   61 op add *tmp90 :fn29:x 0.5
+   62 op floor *tmp89 *tmp90
+   63 label *label77
+   64 op div *tmp92 *tmp89 100000000
+   65 assertequals :fn3:expected *tmp92 :fn3:title
+   66 label *label78
    67 set :fn3:expected 1
    68 set :fn3:actual 0.9999999999999999
    69 set :fn3:title "tan"
-    * setaddr :fn3*retaddr *label6
-    * call *label3 :fn3*retval
-    * label *label6
+   70 label *label79
+   71 op mul :fn29:x :fn3:actual 100000000
+   72 op add *tmp90 :fn29:x 0.5
+   73 op floor *tmp89 *tmp90
+   74 label *label80
+   75 op div *tmp92 *tmp89 100000000
+   76 assertequals :fn3:expected *tmp92 :fn3:title
+   77 label *label81
    78 set :fn3:expected 90
    79 set :fn3:actual 90
    80 set :fn3:title "asin"
-    * setaddr :fn3*retaddr *label7
-    * call *label3 :fn3*retval
-    * label *label7
+   81 label *label82
+   82 op mul :fn29:x :fn3:actual 100000000
+   83 op add *tmp90 :fn29:x 0.5
+   84 op floor *tmp89 *tmp90
+   85 label *label83
+   86 op div *tmp92 *tmp89 100000000
+   87 assertequals :fn3:expected *tmp92 :fn3:title
+   88 label *label84
    89 set :fn3:expected 0
    90 set :fn3:actual 0
    91 set :fn3:title "acos"
-    * setaddr :fn3*retaddr *label8
-    * call *label3 :fn3*retval
-    * label *label8
+   92 label *label85
+   93 op mul :fn29:x :fn3:actual 100000000
+   94 op add *tmp90 :fn29:x 0.5
+   95 op floor *tmp89 *tmp90
+   96 label *label86
+   97 op div *tmp92 *tmp89 100000000
+   98 assertequals :fn3:expected *tmp92 :fn3:title
+   99 label *label87
   100 set :fn3:expected 45
   101 set :fn3:actual 45
   102 set :fn3:title "atan"
-    * setaddr :fn3*retaddr *label9
-    * call *label3 :fn3*retval
-    * label *label9
+  103 label *label88
+  104 op mul :fn29:x :fn3:actual 100000000
+  105 op add *tmp90 :fn29:x 0.5
+  106 op floor *tmp89 *tmp90
+  107 label *label89
+  108 op div *tmp92 *tmp89 100000000
+  109 assertequals :fn3:expected *tmp92 :fn3:title
+  110 label *label90
   111 assertequals -8 -8 "unary minus"
   112 assertequals 1 true "boolean negation 1"
   113 assertequals 0 false "boolean negation 2"
 
   129 assertequals true true "||="
   130 stop
   131 end
-    * label *label3
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
-    * label *label72
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
-    * label *label71
-    * return :fn3*retaddr
-    * end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    46 set :fn3:actual 1
    47 set :fn3:title "sin"
    48 label *label73
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+   49 op mul :fn29:x 1 100000000
+   50 op add *tmp90 100000000 0.5
+   51 op floor *tmp89 100000000.5
    52 label *label74
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+   53 op div *tmp92 100000000 100000000
+   54 assertequals 1 1 "sin"
    55 label *label75
    56 set :fn3:expected -1
    57 set :fn3:actual -1
    58 set :fn3:title "cos"
    59 label *label76
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+   60 op mul :fn29:x -1 100000000
+   61 op add *tmp90 -100000000 0.5
+   62 op floor *tmp89 -99999999.5
    63 label *label77
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+   64 op div *tmp92 -100000000 100000000
+   65 assertequals -1 -1 "cos"
    66 label *label78
    67 set :fn3:expected 1
    68 set :fn3:actual 0.9999999999999999
    69 set :fn3:title "tan"
    70 label *label79
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+   71 op mul :fn29:x 0.9999999999999999 100000000
+   72 op add *tmp90 99999999.99999999 0.5
+   73 op floor *tmp89 100000000.49999999
    74 label *label80
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+   75 op div *tmp92 100000000 100000000
+   76 assertequals 1 1 "tan"
    77 label *label81
    78 set :fn3:expected 90
    79 set :fn3:actual 90
    80 set :fn3:title "asin"
    81 label *label82
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+   82 op mul :fn29:x 90 100000000
+   83 op add *tmp90 9000000000 0.5
+   84 op floor *tmp89 9000000000.5
    85 label *label83
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+   86 op div *tmp92 9000000000 100000000
+   87 assertequals 90 90 "asin"
    88 label *label84
    89 set :fn3:expected 0
    90 set :fn3:actual 0
    91 set :fn3:title "acos"
    92 label *label85
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+   93 op mul :fn29:x 0 100000000
+   94 op add *tmp90 0 0.5
+   95 op floor *tmp89 0.5
    96 label *label86
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+   97 op div *tmp92 0 100000000
+   98 assertequals 0 0 "acos"
    99 label *label87
   100 set :fn3:expected 45
   101 set :fn3:actual 45
   102 set :fn3:title "atan"
   103 label *label88
-    * op mul :fn29:x :fn3:actual 100000000
-    * op add *tmp90 :fn29:x 0.5
-    * op floor *tmp89 *tmp90
+  104 op mul :fn29:x 45 100000000
+  105 op add *tmp90 4500000000 0.5
+  106 op floor *tmp89 4500000000.5
   107 label *label89
-    * op div *tmp92 *tmp89 100000000
-    * assertequals :fn3:expected *tmp92 :fn3:title
+  108 op div *tmp92 4500000000 100000000
+  109 assertequals 45 45 "atan"
   110 label *label90
   111 assertequals -8 -8 "unary minus"
   112 assertequals 1 true "boolean negation 1"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-42 instructions):
 
    42 assertequals 45 45 "angle"
    43 assertequals 90 90 "angleDiff"
    44 assertequals 5 5 "len"
-    * set :fn3:expected 1
-    * set :fn3:actual 1
-    * set :fn3:title "sin"
    45 label *label73
-    * op mul :fn29:x 1 100000000
-    * op add *tmp90 100000000 0.5
-    * op floor *tmp89 100000000.5
    46 label *label74
-    * op div *tmp92 100000000 100000000
    47 assertequals 1 1 "sin"
    48 label *label75
-    * set :fn3:expected -1
-    * set :fn3:actual -1
-    * set :fn3:title "cos"
    49 label *label76
-    * op mul :fn29:x -1 100000000
-    * op add *tmp90 -100000000 0.5
-    * op floor *tmp89 -99999999.5
    50 label *label77
-    * op div *tmp92 -100000000 100000000
    51 assertequals -1 -1 "cos"
    52 label *label78
-    * set :fn3:expected 1
-    * set :fn3:actual 0.9999999999999999
-    * set :fn3:title "tan"
    53 label *label79
-    * op mul :fn29:x 0.9999999999999999 100000000
-    * op add *tmp90 99999999.99999999 0.5
-    * op floor *tmp89 100000000.49999999
    54 label *label80
-    * op div *tmp92 100000000 100000000
    55 assertequals 1 1 "tan"
    56 label *label81
-    * set :fn3:expected 90
-    * set :fn3:actual 90
-    * set :fn3:title "asin"
    57 label *label82
-    * op mul :fn29:x 90 100000000
-    * op add *tmp90 9000000000 0.5
-    * op floor *tmp89 9000000000.5
    58 label *label83
-    * op div *tmp92 9000000000 100000000
    59 assertequals 90 90 "asin"
    60 label *label84
-    * set :fn3:expected 0
-    * set :fn3:actual 0
-    * set :fn3:title "acos"
    61 label *label85
-    * op mul :fn29:x 0 100000000
-    * op add *tmp90 0 0.5
-    * op floor *tmp89 0.5
    62 label *label86
-    * op div *tmp92 0 100000000
    63 assertequals 0 0 "acos"
    64 label *label87
-    * set :fn3:expected 45
-    * set :fn3:actual 45
-    * set :fn3:title "atan"
    65 label *label88
-    * op mul :fn29:x 45 100000000
-    * op add *tmp90 4500000000 0.5
-    * op floor *tmp89 4500000000.5
    66 label *label89
-    * op div *tmp92 4500000000 100000000
    67 assertequals 45 45 "atan"
    68 label *label90
    69 assertequals -8 -8 "unary minus"

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
    86 assertequals true true "&&="
    87 assertequals true true "||="
    88 stop
-    * end

Final code before resolving virtual instructions:

assertequals 5 5 "add"
assertequals 1 1 "sub"
assertequals 6 6 "mul"
assertequals 1.5 1.5 "div"
assertequals 0.00001 0.00001 "div exp"
assertequals 1 1 "idiv"
assertequals 2 2 "mod"
assertequals 16 16 "pow"
assertequals true true "equal 1"
assertequals false false "equal 2"
assertequals true true "equal null"
assertequals false false "notEqual 1"
assertequals true true "notEqual 2"
assertequals false false "notEqual null"
assertequals false false "land 1"
assertequals true true "land 2"
assertequals true true "lessThan 1"
assertequals false false "lessThan 2"
assertequals true true "lessThanEq 1"
assertequals false false "lessThanEq 2"
assertequals true true "greaterThan 1"
assertequals false false "greaterThan 2"
assertequals true true "greaterThanEq 1"
assertequals false false "greaterThanEq 2"
assertequals false false "strictEqual 1"
assertequals true true "strictEqual 2"
assertequals 4 4 "shl"
assertequals 2 2 "shr"
assertequals 3 3 "or"
assertequals 2 2 "and"
assertequals 1 1 "xor"
assertequals -1 -1 "not 1"
assertequals -65536 -65536 "not 2"
assertequals -188900977659376 -188900977659376 "not 3"
assertequals 4 4 "max"
assertequals 2 2 "min"
assertequals 2 2 "abs"
assertequals 1 1 "log"
assertequals 1 1 "log10"
assertequals 2 2 "floor"
assertequals 3 3 "ceil"
assertequals 4 4 "sqrt"
assertequals 45 45 "angle"
assertequals 90 90 "angleDiff"
assertequals 5 5 "len"
assertequals 1 1 "sin"
assertequals -1 -1 "cos"
assertequals 1 1 "tan"
assertequals 90 90 "asin"
assertequals 0 0 "acos"
assertequals 45 45 "atan"
assertequals -8 -8 "unary minus"
assertequals 1 true "boolean negation 1"
assertequals 0 false "boolean negation 2"
assertequals 0 false "boolean negation 3"
assertequals 16 16 "**="
assertequals 8 8 "*="
assertequals 1.5 1.5 "/="
assertequals 1 1 "\="
assertequals 2 2 "%="
assertequals 6 6 "+="
assertequals 2 2 "-="
assertequals 4 4 "<<="
assertequals 2 2 ">>="
assertequals 3 3 "|="
assertequals 2 2 "&="
assertequals 1 1 "^="
assertequals false false "&&="
assertequals true true "&&="
assertequals true true "||="
stop
