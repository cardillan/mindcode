    50 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
     2 instructions eliminated by Dead Code Elimination (4 iterations).
     3 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
     2 instructions eliminated by Data Flow Optimization (6 iterations).
     1 instructions eliminated by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
    47 instructions added by Case Switching (4 iterations).
     1 case expressions converted to switched jumps Case Switching.
     1 instructions eliminated by Jump Straightening (5 iterations).
    85 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 60):
  o Convert case at line 6:5 (#135, segments: 5)                 size    -7, benefit      474.3, efficiency   Infinity
  o Convert case at line 6:5 (#206, segments: 5)                 size    -6, benefit      477.2, efficiency   Infinity
  o Convert case at line 6:5 (#563, segments: 6)                 size    +7, benefit      477.7, efficiency     68.242
  o Convert case at line 6:5 (#560, segments: 5)                 size   +10, benefit      478.7, efficiency     47.865
  o Convert case at line 6:5 (#253, segments: 4)                 size   +15, benefit      481.1, efficiency     32.071
  o Convert case at line 6:5 (#1639, segments: 5)                size   +28, benefit      481.5, efficiency     17.198
  o Convert case at line 6:5 (#1558, segments: 4)                size   +31, benefit      482.5, efficiency     15.565
  * Convert case at line 6:5 (#1559, segments: 4, padded low)    size   +47, benefit      482.6, efficiency     10.268 (+47 instructions)
  ! Convert case at line 6:5 (#4, segments: 1, padded both)      size  +238, benefit      498.5, efficiency      2.094

Modifications by Initial phase, Case Expression Optimization, iteration 1 (-1 instructions):
 
     4 lookup block *tmp0 :i
     5 set :block *tmp0
     6 set :isWall:block :block
-    * set *tmp3 :isWall:block
-    * jump *label6 equal *tmp3 @copper-wall
-    * jump *label6 equal *tmp3 @copper-wall-large
-    * jump *label6 equal *tmp3 @titanium-wall
-    * jump *label6 equal *tmp3 @titanium-wall-large
-    * jump *label6 equal *tmp3 @plastanium-wall
-    * jump *label6 equal *tmp3 @plastanium-wall-large
-    * jump *label6 equal *tmp3 @thorium-wall
-    * jump *label6 equal *tmp3 @thorium-wall-large
-    * jump *label6 equal *tmp3 @phase-wall
-    * jump *label6 equal *tmp3 @phase-wall-large
-    * jump *label6 equal *tmp3 @surge-wall
-    * jump *label6 equal *tmp3 @surge-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall
-    * jump *label6 equal *tmp3 @scrap-wall-large
-    * jump *label6 equal *tmp3 @scrap-wall-huge
-    * jump *label6 equal *tmp3 @scrap-wall-gigantic
-    * jump *label6 equal *tmp3 @beryllium-wall
-    * jump *label6 equal *tmp3 @beryllium-wall-large
-    * jump *label6 equal *tmp3 @tungsten-wall
-    * jump *label6 equal *tmp3 @tungsten-wall-large
-    * jump *label6 equal *tmp3 @reinforced-surge-wall
-    * jump *label6 equal *tmp3 @reinforced-surge-wall-large
-    * jump *label6 equal *tmp3 @carbide-wall
-    * jump *label6 equal *tmp3 @carbide-wall-large
+    7 jump *label6 equal :isWall:block @copper-wall
+    8 jump *label6 equal :isWall:block @copper-wall-large
+    9 jump *label6 equal :isWall:block @titanium-wall
+   10 jump *label6 equal :isWall:block @titanium-wall-large
+   11 jump *label6 equal :isWall:block @plastanium-wall
+   12 jump *label6 equal :isWall:block @plastanium-wall-large
+   13 jump *label6 equal :isWall:block @thorium-wall
+   14 jump *label6 equal :isWall:block @thorium-wall-large
+   15 jump *label6 equal :isWall:block @phase-wall
+   16 jump *label6 equal :isWall:block @phase-wall-large
+   17 jump *label6 equal :isWall:block @surge-wall
+   18 jump *label6 equal :isWall:block @surge-wall-large
+   19 jump *label6 equal :isWall:block @scrap-wall
+   20 jump *label6 equal :isWall:block @scrap-wall-large
+   21 jump *label6 equal :isWall:block @scrap-wall-huge
+   22 jump *label6 equal :isWall:block @scrap-wall-gigantic
+   23 jump *label6 equal :isWall:block @beryllium-wall
+   24 jump *label6 equal :isWall:block @beryllium-wall-large
+   25 jump *label6 equal :isWall:block @tungsten-wall
+   26 jump *label6 equal :isWall:block @tungsten-wall-large
+   27 jump *label6 equal :isWall:block @reinforced-surge-wall
+   28 jump *label6 equal :isWall:block @reinforced-surge-wall-large
+   29 jump *label6 equal :isWall:block @carbide-wall
+   30 jump *label6 equal :isWall:block @carbide-wall-large
    31 jump *label5 always
    32 label *label6
    33 set *tmp2 true

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    43 op add *tmp7 *tmp6 251
    44 op and *tmp8 *tmp7 0xFFFFFFFF
    45 set :hash *tmp8
-    * set *tmp4 :hash
    46 jump *label8 always
    47 label *label7
-    * set *tmp4 null
    48 label *label8
    49 label *label1
    50 op add :i :i 1

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-2 instructions):
 
     1 set :i -1
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
-    * lookup block *tmp0 :i
-    * set :block *tmp0
+    4 lookup block :block :i
     5 set :isWall:block :block
     6 jump *label6 equal :isWall:block @copper-wall
     7 jump *label6 equal :isWall:block @copper-wall-large
 
    40 op mul *tmp5 :hash 31
    41 op add *tmp6 *tmp5 :i
    42 op add *tmp7 *tmp6 251
-    * op and *tmp8 *tmp7 0xFFFFFFFF
-    * set :hash *tmp8
+   43 op and :hash *tmp7 0xFFFFFFFF
    44 jump *label8 always
    45 label *label7
    46 label *label8

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-1 instructions):
 
    26 jump *label6 equal :isWall:block @reinforced-surge-wall
    27 jump *label6 equal :isWall:block @reinforced-surge-wall-large
    28 jump *label6 equal :isWall:block @carbide-wall
-    * jump *label6 equal :isWall:block @carbide-wall-large
-    * jump *label5 always
+   29 jump *label5 notEqual :isWall:block @carbide-wall-large
    30 label *label6
    31 set *tmp2 true
    32 jump *label4 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    40 op add *tmp6 *tmp5 :i
    41 op add *tmp7 *tmp6 251
    42 op and :hash *tmp7 0xFFFFFFFF
-    * jump *label8 always
    43 label *label7
    44 label *label8
    45 label *label1

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
     5 set :isWall:block :block
-    * jump *label6 equal :isWall:block @copper-wall
-    * jump *label6 equal :isWall:block @copper-wall-large
-    * jump *label6 equal :isWall:block @titanium-wall
-    * jump *label6 equal :isWall:block @titanium-wall-large
-    * jump *label6 equal :isWall:block @plastanium-wall
-    * jump *label6 equal :isWall:block @plastanium-wall-large
-    * jump *label6 equal :isWall:block @thorium-wall
-    * jump *label6 equal :isWall:block @thorium-wall-large
-    * jump *label6 equal :isWall:block @phase-wall
-    * jump *label6 equal :isWall:block @phase-wall-large
-    * jump *label6 equal :isWall:block @surge-wall
-    * jump *label6 equal :isWall:block @surge-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall
-    * jump *label6 equal :isWall:block @scrap-wall-large
-    * jump *label6 equal :isWall:block @scrap-wall-huge
-    * jump *label6 equal :isWall:block @scrap-wall-gigantic
-    * jump *label6 equal :isWall:block @beryllium-wall
-    * jump *label6 equal :isWall:block @beryllium-wall-large
-    * jump *label6 equal :isWall:block @tungsten-wall
-    * jump *label6 equal :isWall:block @tungsten-wall-large
-    * jump *label6 equal :isWall:block @reinforced-surge-wall
-    * jump *label6 equal :isWall:block @reinforced-surge-wall-large
-    * jump *label6 equal :isWall:block @carbide-wall
-    * jump *label5 notEqual :isWall:block @carbide-wall-large
+    6 jump *label6 equal :block @copper-wall
+    7 jump *label6 equal :block @copper-wall-large
+    8 jump *label6 equal :block @titanium-wall
+    9 jump *label6 equal :block @titanium-wall-large
+   10 jump *label6 equal :block @plastanium-wall
+   11 jump *label6 equal :block @plastanium-wall-large
+   12 jump *label6 equal :block @thorium-wall
+   13 jump *label6 equal :block @thorium-wall-large
+   14 jump *label6 equal :block @phase-wall
+   15 jump *label6 equal :block @phase-wall-large
+   16 jump *label6 equal :block @surge-wall
+   17 jump *label6 equal :block @surge-wall-large
+   18 jump *label6 equal :block @scrap-wall
+   19 jump *label6 equal :block @scrap-wall-large
+   20 jump *label6 equal :block @scrap-wall-huge
+   21 jump *label6 equal :block @scrap-wall-gigantic
+   22 jump *label6 equal :block @beryllium-wall
+   23 jump *label6 equal :block @beryllium-wall-large
+   24 jump *label6 equal :block @tungsten-wall
+   25 jump *label6 equal :block @tungsten-wall-large
+   26 jump *label6 equal :block @reinforced-surge-wall
+   27 jump *label6 equal :block @reinforced-surge-wall-large
+   28 jump *label6 equal :block @carbide-wall
+   29 jump *label5 notEqual :block @carbide-wall-large
    30 label *label6
    31 set *tmp2 true
    32 jump *label4 always
 
    35 label *label4
    36 set *tmp1 *tmp2
    37 label *label3
-    * jump *label7 equal *tmp1 false
+   38 jump *label7 equal *tmp2 false
    39 op mul *tmp5 :hash 31
    40 op add *tmp6 *tmp5 :i
    41 op add *tmp7 *tmp6 251

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     2 label *label0
     3 jump *label2 greaterThanEq :i 240
     4 lookup block :block :i
-    * set :isWall:block :block
     5 jump *label6 equal :block @copper-wall
     6 jump *label6 equal :block @copper-wall-large
     7 jump *label6 equal :block @titanium-wall
 
    32 label *label5
    33 set *tmp2 false
    34 label *label4
-    * set *tmp1 *tmp2
    35 label *label3
    36 jump *label7 equal *tmp2 false
    37 op mul *tmp5 :hash 31

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
     0 set :hash 0
     1 set :i -1
     2 label *label0
-    * jump *label2 greaterThanEq :i 240
+    3 label *label9
     4 lookup block :block :i
     5 jump *label6 equal :block @copper-wall
     6 jump *label6 equal :block @copper-wall-large
 
    42 label *label8
    43 label *label1
    44 op add :i :i 1
-    * jump *label0 always
+   45 jump *label9 lessThan :i 240
    46 label *label2
    47 print :hash
    48 assertequals 2750008148 :hash "Test selected blocks"

Modifications by Convert case at line 6:5 (#1559, segments: 4, padded low) (+47 instructions):
 
     2 label *label0
     3 label *label9
     4 lookup block :block :i
-    * jump *label6 equal :block @copper-wall
-    * jump *label6 equal :block @copper-wall-large
-    * jump *label6 equal :block @titanium-wall
-    * jump *label6 equal :block @titanium-wall-large
-    * jump *label6 equal :block @plastanium-wall
-    * jump *label6 equal :block @plastanium-wall-large
-    * jump *label6 equal :block @thorium-wall
-    * jump *label6 equal :block @thorium-wall-large
-    * jump *label6 equal :block @phase-wall
-    * jump *label6 equal :block @phase-wall-large
-    * jump *label6 equal :block @surge-wall
-    * jump *label6 equal :block @surge-wall-large
-    * jump *label6 equal :block @scrap-wall
-    * jump *label6 equal :block @scrap-wall-large
-    * jump *label6 equal :block @scrap-wall-huge
-    * jump *label6 equal :block @scrap-wall-gigantic
-    * jump *label6 equal :block @beryllium-wall
-    * jump *label6 equal :block @beryllium-wall-large
-    * jump *label6 equal :block @tungsten-wall
-    * jump *label6 equal :block @tungsten-wall-large
-    * jump *label6 equal :block @reinforced-surge-wall
-    * jump *label6 equal :block @reinforced-surge-wall-large
-    * jump *label6 equal :block @carbide-wall
-    * jump *label5 notEqual :block @carbide-wall-large
+    5 sensor *tmp9 :block @id
+    6 jump *label11 greaterThanEq *tmp9 203
+    7 jump *label10 greaterThanEq *tmp9 35
+    8 multijump *label12 *tmp9 0 (m:*label47)
+    9 multilabel *label12 (m:*label47)
+   10 jump *label10 always
+   11 multilabel *label13 (m:*label47)
+   12 jump *label10 always
+   13 multilabel *label14 (m:*label47)
+   14 jump *label10 always
+   15 multilabel *label15 (m:*label47)
+   16 jump *label10 always
+   17 multilabel *label16 (m:*label47)
+   18 jump *label10 always
+   19 multilabel *label17 (m:*label47)
+   20 jump *label10 always
+   21 multilabel *label18 (m:*label47)
+   22 jump *label10 always
+   23 multilabel *label19 (m:*label47)
+   24 jump *label10 always
+   25 multilabel *label20 (m:*label47)
+   26 jump *label10 always
+   27 multilabel *label21 (m:*label47)
+   28 jump *label10 always
+   29 multilabel *label22 (m:*label47)
+   30 jump *label10 always
+   31 multilabel *label23 (m:*label47)
+   32 jump *label10 always
+   33 multilabel *label24 (m:*label47)
+   34 jump *label10 always
+   35 multilabel *label25 (m:*label47)
+   36 jump *label10 always
+   37 multilabel *label26 (m:*label47)
+   38 jump *label10 always
+   39 multilabel *label27 (m:*label47)
+   40 jump *label10 always
+   41 multilabel *label28 (m:*label47)
+   42 jump *label10 always
+   43 multilabel *label29 (m:*label47)
+   44 jump *label6 always
+   45 multilabel *label30 (m:*label47)
+   46 jump *label6 always
+   47 multilabel *label31 (m:*label47)
+   48 jump *label6 always
+   49 multilabel *label32 (m:*label47)
+   50 jump *label6 always
+   51 multilabel *label33 (m:*label47)
+   52 jump *label6 always
+   53 multilabel *label34 (m:*label47)
+   54 jump *label6 always
+   55 multilabel *label35 (m:*label47)
+   56 jump *label6 always
+   57 multilabel *label36 (m:*label47)
+   58 jump *label6 always
+   59 multilabel *label37 (m:*label47)
+   60 jump *label6 always
+   61 multilabel *label38 (m:*label47)
+   62 jump *label6 always
+   63 multilabel *label39 (m:*label47)
+   64 jump *label6 always
+   65 multilabel *label40 (m:*label47)
+   66 jump *label6 always
+   67 multilabel *label41 (m:*label47)
+   68 jump *label10 always
+   69 multilabel *label42 (m:*label47)
+   70 jump *label10 always
+   71 multilabel *label43 (m:*label47)
+   72 jump *label6 always
+   73 multilabel *label44 (m:*label47)
+   74 jump *label6 always
+   75 multilabel *label45 (m:*label47)
+   76 jump *label6 always
+   77 multilabel *label46 (m:*label47)
+   78 jump *label6 always
+   79 label *label11
+   80 jump *label10 greaterThanEq *tmp9 235
+   81 jump *label48 greaterThanEq *tmp9 208
+   82 jump *label10 equal *tmp9 205
+   83 jump *label6 always
+   84 label *label48
+   85 multijump *label49 *tmp9 208 (m:*label76)
+   86 multilabel *label49 (m:*label76)
+   87 jump *label10 always
+   88 multilabel *label50 (m:*label76)
+   89 jump *label10 always
+   90 multilabel *label51 (m:*label76)
+   91 jump *label10 always
+   92 multilabel *label52 (m:*label76)
+   93 jump *label10 always
+   94 multilabel *label53 (m:*label76)
+   95 jump *label10 always
+   96 multilabel *label54 (m:*label76)
+   97 jump *label10 always
+   98 multilabel *label55 (m:*label76)
+   99 jump *label10 always
+  100 multilabel *label56 (m:*label76)
+  101 jump *label10 always
+  102 multilabel *label57 (m:*label76)
+  103 jump *label10 always
+  104 multilabel *label58 (m:*label76)
+  105 jump *label10 always
+  106 multilabel *label59 (m:*label76)
+  107 jump *label10 always
+  108 multilabel *label60 (m:*label76)
+  109 jump *label10 always
+  110 multilabel *label61 (m:*label76)
+  111 jump *label6 always
+  112 multilabel *label62 (m:*label76)
+  113 jump *label6 always
+  114 multilabel *label63 (m:*label76)
+  115 jump *label10 always
+  116 multilabel *label64 (m:*label76)
+  117 jump *label10 always
+  118 multilabel *label65 (m:*label76)
+  119 jump *label10 always
+  120 multilabel *label66 (m:*label76)
+  121 jump *label6 always
+  122 multilabel *label67 (m:*label76)
+  123 jump *label10 always
+  124 multilabel *label68 (m:*label76)
+  125 jump *label10 always
+  126 multilabel *label69 (m:*label76)
+  127 jump *label10 always
+  128 multilabel *label70 (m:*label76)
+  129 jump *label10 always
+  130 multilabel *label71 (m:*label76)
+  131 jump *label10 always
+  132 multilabel *label72 (m:*label76)
+  133 jump *label10 always
+  134 multilabel *label73 (m:*label76)
+  135 jump *label10 always
+  136 multilabel *label74 (m:*label76)
+  137 jump *label10 always
+  138 multilabel *label75 (m:*label76)
+  139 jump *label6 always
   140 label *label6
   141 set *tmp2 true
   142 jump *label4 always
   143 label *label5
+  144 label *label10
   145 set *tmp2 false
   146 label *label4
   147 label *label3

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
   136 multilabel *label74 (m:*label76)
   137 jump *label10 always
   138 multilabel *label75 (m:*label76)
-    * jump *label6 always
   139 label *label6
   140 set *tmp2 true
   141 jump *label4 always

Modifications by Jumps phase, Jump Normalization, pass 4, iteration 1:
     0 set :hash 0
     1 set :i -1
-    * label *label0
     2 label *label9
     3 lookup block :block :i
     4 sensor *tmp9 :block @id
 
   138 label *label6
   139 set *tmp2 true
   140 jump *label4 always
-    * label *label5
   141 label *label10
   142 set *tmp2 false
   143 label *label4
-    * label *label3
   144 jump *label7 equal *tmp2 false
   145 op mul *tmp5 :hash 31
   146 op add *tmp6 *tmp5 :i
   147 op add *tmp7 *tmp6 251
   148 op and :hash *tmp7 0xFFFFFFFF
   149 label *label7
-    * label *label8
-    * label *label1
   150 op add :i :i 1
   151 jump *label9 lessThan :i 240
-    * label *label2
   152 print :hash
   153 assertequals 2750008148 :hash "Test selected blocks"
   154 end

Modifications by Jumps phase, Single Step Elimination, pass 4, iteration 1 (-1 instructions):
 
   151 jump *label9 lessThan :i 240
   152 print :hash
   153 assertequals 2750008148 :hash "Test selected blocks"
-    * end

Final code before resolving virtual instructions:

set :hash 0
set :i -1
label *label9
lookup block :block :i
sensor *tmp9 :block @id
jump *label11 greaterThanEq *tmp9 203
jump *label10 greaterThanEq *tmp9 35
multijump *label12 *tmp9 0
multilabel *label12
jump *label10 always
multilabel *label13
jump *label10 always
multilabel *label14
jump *label10 always
multilabel *label15
jump *label10 always
multilabel *label16
jump *label10 always
multilabel *label17
jump *label10 always
multilabel *label18
jump *label10 always
multilabel *label19
jump *label10 always
multilabel *label20
jump *label10 always
multilabel *label21
jump *label10 always
multilabel *label22
jump *label10 always
multilabel *label23
jump *label10 always
multilabel *label24
jump *label10 always
multilabel *label25
jump *label10 always
multilabel *label26
jump *label10 always
multilabel *label27
jump *label10 always
multilabel *label28
jump *label10 always
multilabel *label29
jump *label6 always
multilabel *label30
jump *label6 always
multilabel *label31
jump *label6 always
multilabel *label32
jump *label6 always
multilabel *label33
jump *label6 always
multilabel *label34
jump *label6 always
multilabel *label35
jump *label6 always
multilabel *label36
jump *label6 always
multilabel *label37
jump *label6 always
multilabel *label38
jump *label6 always
multilabel *label39
jump *label6 always
multilabel *label40
jump *label6 always
multilabel *label41
jump *label10 always
multilabel *label42
jump *label10 always
multilabel *label43
jump *label6 always
multilabel *label44
jump *label6 always
multilabel *label45
jump *label6 always
multilabel *label46
jump *label6 always
label *label11
jump *label10 greaterThanEq *tmp9 235
jump *label48 greaterThanEq *tmp9 208
jump *label10 equal *tmp9 205
jump *label6 always
label *label48
multijump *label49 *tmp9 208
multilabel *label49
jump *label10 always
multilabel *label50
jump *label10 always
multilabel *label51
jump *label10 always
multilabel *label52
jump *label10 always
multilabel *label53
jump *label10 always
multilabel *label54
jump *label10 always
multilabel *label55
jump *label10 always
multilabel *label56
jump *label10 always
multilabel *label57
jump *label10 always
multilabel *label58
jump *label10 always
multilabel *label59
jump *label10 always
multilabel *label60
jump *label10 always
multilabel *label61
jump *label6 always
multilabel *label62
jump *label6 always
multilabel *label63
jump *label10 always
multilabel *label64
jump *label10 always
multilabel *label65
jump *label10 always
multilabel *label66
jump *label6 always
multilabel *label67
jump *label10 always
multilabel *label68
jump *label10 always
multilabel *label69
jump *label10 always
multilabel *label70
jump *label10 always
multilabel *label71
jump *label10 always
multilabel *label72
jump *label10 always
multilabel *label73
jump *label10 always
multilabel *label74
jump *label10 always
multilabel *label75
label *label6
set *tmp2 true
jump *label4 always
label *label10
set *tmp2 false
label *label4
jump *label7 equal *tmp2 false
op mul *tmp5 :hash 31
op add *tmp6 *tmp5 :i
op add *tmp7 *tmp6 251
op and :hash *tmp7 0xFFFFFFFF
label *label7
op add :i :i 1
jump *label9 lessThan :i 240
print :hash
assertequals 2750008148 :hash "Test selected blocks"
