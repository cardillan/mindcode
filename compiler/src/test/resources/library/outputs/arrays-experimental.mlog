set p 0
assertflush
print "xxxxx"
assertprints "xxxxx" "Array fill"
set .b*9 p
set .c*0 p
op add *tmp4 p 1
set .b*8 *tmp4
set .c*1 *tmp4
op add *tmp4 p 2
set .b*7 *tmp4
set .c*2 *tmp4
op add *tmp4 p 3
set .b*6 *tmp4
set .c*3 *tmp4
op add *tmp4 p 4
set .b*5 *tmp4
set .c*4 *tmp4
op add *tmp4 p 5
set .b*4 *tmp4
set .c*5 *tmp4
op add *tmp4 p 6
set .b*3 *tmp4
set .c*6 *tmp4
op add *tmp4 p 7
set .b*2 *tmp4
set .c*7 *tmp4
op add *tmp4 p 8
set .b*1 *tmp4
set .c*8 *tmp4
op add *tmp4 p 9
set .b*0 *tmp4
set .c*9 *tmp4
assertflush
print *tmp4
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print p
assertprints "9876543210" "Array reverse"
set :bubblesort:flag true
set :bubblesort:a .b*0
op greaterThan *tmp19 .b*0 .b*1
jump 53 equal *tmp19 false
set .b*0 .b*1
set .b*1 :bubblesort:a
set :bubblesort:flag false
jump 55 always 0 0
set :bubblesort:a .b*1
jump 55 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*2
jump 61 equal *tmp19 false
set .b*1 .b*2
set .b*2 :bubblesort:a
set :bubblesort:flag false
jump 63 always 0 0
set :bubblesort:a .b*2
jump 63 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*3
jump 69 equal *tmp19 false
set .b*2 .b*3
set .b*3 :bubblesort:a
set :bubblesort:flag false
jump 71 always 0 0
set :bubblesort:a .b*3
jump 71 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*4
jump 77 equal *tmp19 false
set .b*3 .b*4
set .b*4 :bubblesort:a
set :bubblesort:flag false
jump 79 always 0 0
set :bubblesort:a .b*4
jump 79 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*5
jump 85 equal *tmp19 false
set .b*4 .b*5
set .b*5 :bubblesort:a
set :bubblesort:flag false
jump 87 always 0 0
set :bubblesort:a .b*5
jump 87 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*6
jump 93 equal *tmp19 false
set .b*5 .b*6
set .b*6 :bubblesort:a
set :bubblesort:flag false
jump 95 always 0 0
set :bubblesort:a .b*6
jump 95 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*7
jump 101 equal *tmp19 false
set .b*6 .b*7
set .b*7 :bubblesort:a
set :bubblesort:flag false
jump 103 always 0 0
set :bubblesort:a .b*7
jump 103 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*8
jump 109 equal *tmp19 false
set .b*7 .b*8
set .b*8 :bubblesort:a
set :bubblesort:flag false
jump 111 always 0 0
set :bubblesort:a .b*8
jump 111 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*9
jump 116 equal *tmp19 false
set .b*8 .b*9
set .b*9 :bubblesort:a
set :bubblesort:flag false
jump 179 notEqual :bubblesort:flag false
set :bubblesort:a .b*9
op lessThan *tmp31 .b*9 .b*8
jump 123 equal *tmp31 false
set .b*9 .b*8
set .b*8 :bubblesort:a
jump 125 always 0 0
set :bubblesort:a .b*8
jump 125 always 0 0
op lessThan *tmp31 :bubblesort:a .b*7
jump 130 equal *tmp31 false
set .b*8 .b*7
set .b*7 :bubblesort:a
jump 132 always 0 0
set :bubblesort:a .b*7
jump 132 always 0 0
op lessThan *tmp31 :bubblesort:a .b*6
jump 137 equal *tmp31 false
set .b*7 .b*6
set .b*6 :bubblesort:a
jump 139 always 0 0
set :bubblesort:a .b*6
jump 139 always 0 0
op lessThan *tmp31 :bubblesort:a .b*5
jump 144 equal *tmp31 false
set .b*6 .b*5
set .b*5 :bubblesort:a
jump 146 always 0 0
set :bubblesort:a .b*5
jump 146 always 0 0
op lessThan *tmp31 :bubblesort:a .b*4
jump 151 equal *tmp31 false
set .b*5 .b*4
set .b*4 :bubblesort:a
jump 153 always 0 0
set :bubblesort:a .b*4
jump 153 always 0 0
op lessThan *tmp31 :bubblesort:a .b*3
jump 158 equal *tmp31 false
set .b*4 .b*3
set .b*3 :bubblesort:a
jump 160 always 0 0
set :bubblesort:a .b*3
jump 160 always 0 0
op lessThan *tmp31 :bubblesort:a .b*2
jump 165 equal *tmp31 false
set .b*3 .b*2
set .b*2 :bubblesort:a
jump 167 always 0 0
set :bubblesort:a .b*2
jump 167 always 0 0
op lessThan *tmp31 :bubblesort:a .b*1
jump 172 equal *tmp31 false
set .b*2 .b*1
set .b*1 :bubblesort:a
jump 174 always 0 0
set :bubblesort:a .b*1
jump 174 always 0 0
op lessThan *tmp31 :bubblesort:a .b*0
jump 45 equal *tmp31 false
set .b*1 .b*0
set .b*0 :bubblesort:a
jump 45 always 0 0
assertflush
print .b*0
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print .b*9
assertprints "0123456789" "Array sort 1"
set :bubblesort.1:flag true
set :bubblesort.1:a .b*0
jump 201 greaterThanEq .b*0 .b*1
set .b*0 .b*1
set .b*1 :bubblesort.1:a
set :bubblesort.1:v .c*0
set .c*0 .c*1
set .c*1 :bubblesort.1:v
set :bubblesort.1:flag false
jump 202 always 0 0
set :bubblesort.1:a .b*1
jump 210 greaterThanEq :bubblesort.1:a .b*2
set .b*1 .b*2
set .b*2 :bubblesort.1:a
set :bubblesort.1:v .c*1
set .c*1 .c*2
set .c*2 :bubblesort.1:v
set :bubblesort.1:flag false
jump 211 always 0 0
set :bubblesort.1:a .b*2
jump 219 greaterThanEq :bubblesort.1:a .b*3
set .b*2 .b*3
set .b*3 :bubblesort.1:a
set :bubblesort.1:v .c*2
set .c*2 .c*3
set .c*3 :bubblesort.1:v
set :bubblesort.1:flag false
jump 220 always 0 0
set :bubblesort.1:a .b*3
jump 228 greaterThanEq :bubblesort.1:a .b*4
set .b*3 .b*4
set .b*4 :bubblesort.1:a
set :bubblesort.1:v .c*3
set .c*3 .c*4
set .c*4 :bubblesort.1:v
set :bubblesort.1:flag false
jump 229 always 0 0
set :bubblesort.1:a .b*4
jump 237 greaterThanEq :bubblesort.1:a .b*5
set .b*4 .b*5
set .b*5 :bubblesort.1:a
set :bubblesort.1:v .c*4
set .c*4 .c*5
set .c*5 :bubblesort.1:v
set :bubblesort.1:flag false
jump 238 always 0 0
set :bubblesort.1:a .b*5
jump 246 greaterThanEq :bubblesort.1:a .b*6
set .b*5 .b*6
set .b*6 :bubblesort.1:a
set :bubblesort.1:v .c*5
set .c*5 .c*6
set .c*6 :bubblesort.1:v
set :bubblesort.1:flag false
jump 247 always 0 0
set :bubblesort.1:a .b*6
jump 255 greaterThanEq :bubblesort.1:a .b*7
set .b*6 .b*7
set .b*7 :bubblesort.1:a
set :bubblesort.1:v .c*6
set .c*6 .c*7
set .c*7 :bubblesort.1:v
set :bubblesort.1:flag false
jump 256 always 0 0
set :bubblesort.1:a .b*7
jump 264 greaterThanEq :bubblesort.1:a .b*8
set .b*7 .b*8
set .b*8 :bubblesort.1:a
set :bubblesort.1:v .c*7
set .c*7 .c*8
set .c*8 :bubblesort.1:v
set :bubblesort.1:flag false
jump 265 always 0 0
set :bubblesort.1:a .b*8
jump 272 greaterThanEq :bubblesort.1:a .b*9
set .b*8 .b*9
set .b*9 :bubblesort.1:a
set :bubblesort.1:v .c*8
set .c*8 .c*9
set .c*9 :bubblesort.1:v
set :bubblesort.1:flag false
jump 354 notEqual :bubblesort.1:flag false
set :bubblesort.1:a .b*9
op greaterThan *tmp64 .b*9 .b*8
jump 282 equal *tmp64 false
set .b*9 .b*8
set .b*8 :bubblesort.1:a
set :bubblesort.1:v.1 .c*9
set .c*9 .c*8
set .c*8 :bubblesort.1:v.1
jump 283 always 0 0
set :bubblesort.1:a .b*8
op greaterThan *tmp64 :bubblesort.1:a .b*7
jump 291 equal *tmp64 false
set .b*8 .b*7
set .b*7 :bubblesort.1:a
set :bubblesort.1:v.1 .c*8
set .c*8 .c*7
set .c*7 :bubblesort.1:v.1
jump 292 always 0 0
set :bubblesort.1:a .b*7
op greaterThan *tmp64 :bubblesort.1:a .b*6
jump 300 equal *tmp64 false
set .b*7 .b*6
set .b*6 :bubblesort.1:a
set :bubblesort.1:v.1 .c*7
set .c*7 .c*6
set .c*6 :bubblesort.1:v.1
jump 301 always 0 0
set :bubblesort.1:a .b*6
op greaterThan *tmp64 :bubblesort.1:a .b*5
jump 309 equal *tmp64 false
set .b*6 .b*5
set .b*5 :bubblesort.1:a
set :bubblesort.1:v.1 .c*6
set .c*6 .c*5
set .c*5 :bubblesort.1:v.1
jump 310 always 0 0
set :bubblesort.1:a .b*5
op greaterThan *tmp64 :bubblesort.1:a .b*4
jump 318 equal *tmp64 false
set .b*5 .b*4
set .b*4 :bubblesort.1:a
set :bubblesort.1:v.1 .c*5
set .c*5 .c*4
set .c*4 :bubblesort.1:v.1
jump 319 always 0 0
set :bubblesort.1:a .b*4
op greaterThan *tmp64 :bubblesort.1:a .b*3
jump 327 equal *tmp64 false
set .b*4 .b*3
set .b*3 :bubblesort.1:a
set :bubblesort.1:v.1 .c*4
set .c*4 .c*3
set .c*3 :bubblesort.1:v.1
jump 328 always 0 0
set :bubblesort.1:a .b*3
op greaterThan *tmp64 :bubblesort.1:a .b*2
jump 336 equal *tmp64 false
set .b*3 .b*2
set .b*2 :bubblesort.1:a
set :bubblesort.1:v.1 .c*3
set .c*3 .c*2
set .c*2 :bubblesort.1:v.1
jump 337 always 0 0
set :bubblesort.1:a .b*2
op greaterThan *tmp64 :bubblesort.1:a .b*1
jump 345 equal *tmp64 false
set .b*2 .b*1
set .b*1 :bubblesort.1:a
set :bubblesort.1:v.1 .c*2
set .c*2 .c*1
set .c*1 :bubblesort.1:v.1
jump 346 always 0 0
set :bubblesort.1:a .b*1
op greaterThan *tmp64 :bubblesort.1:a .b*0
jump 191 equal *tmp64 false
set .b*1 .b*0
set .b*0 :bubblesort.1:a
set :bubblesort.1:v.1 .c*1
set .c*1 .c*0
set .c*0 :bubblesort.1:v.1
jump 191 always 0 0
assertflush
print .c*0
print .c*1
print .c*2
print .c*3
print .c*4
print .c*5
print .c*6
print .c*7
print .c*8
print .c*9
assertprints "9876543210" "Array sort 2"
