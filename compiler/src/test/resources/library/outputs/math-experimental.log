Main file: number of reported ambiguities: 15
Active optimizations:
    case-expression-optimization = experimental,
    case-switching = experimental,
    data-flow-optimization = experimental,
    dead-code-elimination = experimental,
    expression-optimization = experimental,
    function-inlining = experimental,
    if-expression-optimization = experimental,
    jump-normalization = experimental,
    jump-optimization = experimental,
    jump-straightening = experimental,
    jump-threading = experimental,
    loop-hoisting = experimental,
    loop-optimization = experimental,
    loop-unrolling = experimental,
    print-merging = experimental,
    return-optimization = experimental,
    single-step-elimination = experimental,
    stack-optimization = experimental,
    temp-variables-elimination = experimental,
    unreachable-code-elimination = experimental

  1652 instructions before optimizations.
   121 instructions eliminated by Temp Variables Elimination.
   124 instructions eliminated by Dead Code Elimination (4 iterations).
     3 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    68 instructions eliminated by Jump Optimization (6 iterations).
    67 instructions eliminated by Single Step Elimination (4 passes, 13 iterations).
     8 instructions modified by Expression Optimization (2 passes, 5 iterations).
     8 instructions eliminated by If Expression Optimization (5 iterations).
   327 instructions eliminated by Data Flow Optimization (10 passes, 35 iterations).
    49 instructions added by Loop Unrolling (14 iterations).
     8 loops unrolled by Loop Unrolling.
     5 instructions added by Function Inlining (14 iterations).
     4 function calls inlined by Function Inlining.
    32 instructions updated by JumpThreading.
     4 instructions eliminated by Unreachable Code Elimination.
   984 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:78:5                          cost     0, benefit        5.0, efficiency   Infinity (-8 instructions)
    Unroll iteration loop at *math:90:5                          cost     0, benefit        5.0, efficiency   Infinity
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'sign' defined at *math:24:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 13:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:90:5                          cost     0, benefit        5.0, efficiency   Infinity (-9 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'sign' defined at *math:24:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 13:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   241, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   151, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost     1, benefit      425.0, efficiency      425.0
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   442, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'sign' defined at *math:24:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 13:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 11):
  ! Unroll iteration loop at *math:174:5                         cost   121, benefit       17.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost     0, benefit      425.0, efficiency   Infinity (-13 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   121, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost     0, benefit      425.0, efficiency   Infinity
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
    Inline function 'sign' defined at *math:24:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 13:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 24):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   121, benefit       17.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost     0, benefit      425.0, efficiency   Infinity (-13 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
    Inline function 'sign' defined at *math:24:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 13:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:18                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 37):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2 (+13 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
    Inline function 'sign' defined at *math:24:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 13:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:18                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 24):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2 (+13 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
    Inline function 'sign' defined at *math:24:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 13:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:18                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 11):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  * Inline function 'sign' defined at *math:24:1                 cost    11, benefit       14.0, efficiency        1.3 (-11 instructions)
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 13:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 22):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2 (+13 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 9):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 3: speed optimization selection (cost limit 17):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  * Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7 (+7 instructions)
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
    Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 3: speed optimization selection (cost limit 10):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   277, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 4: speed optimization selection (cost limit 10):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   277, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 5: speed optimization selection (cost limit 10):
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   277, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost   235, benefit       17.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    13, benefit      425.0, efficiency       32.7
  ! Unroll iteration loop at *math:174:5                         cost    43, benefit       17.0, efficiency        0.4
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Unroll iteration loop at *math:174:5                         cost   433, benefit       26.0, efficiency        0.1
  ! Unroll iteration loop at *math:192:5                         cost    19, benefit      650.0, efficiency       34.2
  ! Inline function 'median' defined at *math:118:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:135:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 36:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 37:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 38:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 39:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 40:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 41:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 42:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 43:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 44:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 45:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 46:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 47:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 48:17                           cost    16, benefit        5.5, efficiency        0.3

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  assertequals 0 0 "sign(0)"
   10:  assertequals 0 0 "sign(1e-7)"
   11:  assertequals 1 1 "sign(1e-5)"
   12:  assertequals -1 -1 "sign(-5)"
   13:  assertequals 0 0 "signExact(0)"
   14:  assertequals 1 1 "signExact(1e-7)"
   15:  assertequals -1 -1 "signExact(-1e-7)"
   16:  assertequals true true "isZero(0)"
   17:  assertequals false false "isZero(1e-50)"
   18:  assertequals false false "isZero(-1e-50)"
   19:  assertequals false false "isZero(0.01,0.01)"
   20:  op add __fn19__result null 0
   21:  assertequals 0 __fn19__result "nullToZero(null)"
   22:  op add __fn20__result 1 0
   23:  assertequals 1 __fn20__result "nullToZero(1)"
   24:  assertequals 1 1 "sum(1)"
   25:  assertequals 10 10 "sum(1,2,3,4)"
   26:  assertequals 1 1 "avg(1)"
   27:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   28:  assertequals 1 1 "median(1)"
   29:  assertequals 3 3 "median(2,4)"
   30:  assertequals 3 3 "median(1,3,5)"
   31:  assertequals 1 1 "median(1,1,1)"
   32:  assertequals 1 1 "median(1,1,3)"
   33:  assertequals 3 3 "median(1,3,3)"
   34:  set __fn1__x1 2
   35:  set __fn1__x2 4
   36:  set __fn1__x3 6
   37:  set __fn1__x4 8
   38:  setaddr __fn1retaddr __label73
   39:  call __label1 __fn1retval
        gotolabel __label73 __fn1
   40:  assertequals 5 __fn1retval "median(2,4,6,8)"
   41:  set __fn1__x1 8
   42:  set __fn1__x2 6
   43:  set __fn1__x3 4
   44:  set __fn1__x4 2
   45:  setaddr __fn1retaddr __label74
   46:  call __label1 __fn1retval
        gotolabel __label74 __fn1
   47:  assertequals 5 __fn1retval "median(8,6,4,2)"
   48:  set __fn1__x1 4
   49:  set __fn1__x2 8
   50:  set __fn1__x3 2
   51:  set __fn1__x4 6
   52:  setaddr __fn1retaddr __label75
   53:  call __label1 __fn1retval
        gotolabel __label75 __fn1
   54:  assertequals 5 __fn1retval "median(4,8,2,6)"
   55:  set __fn1__x1 2
   56:  set __fn1__x2 6
   57:  set __fn1__x3 4
   58:  set __fn1__x4 8
   59:  setaddr __fn1retaddr __label76
   60:  call __label1 __fn1retval
        gotolabel __label76 __fn1
   61:  assertequals 5 __fn1retval "median(2,6,4,8)"
   62:  set __fn1__x1 6
   63:  set __fn1__x2 2
   64:  set __fn1__x3 8
   65:  set __fn1__x4 4
   66:  setaddr __fn1retaddr __label77
   67:  call __label1 __fn1retval
        gotolabel __label77 __fn1
   68:  assertequals 5 __fn1retval "median(6,2,8,4)"
   69:  set __fn2__x1 1
   70:  set __fn2__x2 2
   71:  set __fn2__x3 3
   72:  set __fn2__x4 4
   73:  set __fn2__x5 5
   74:  setaddr __fn2retaddr __label78
   75:  call __label2 __fn2retval
        gotolabel __label78 __fn2
   76:  assertequals 3 __fn2retval "median(1,2,3,4,5)"
   77:  set __fn2__x1 5
   78:  set __fn2__x2 4
   79:  set __fn2__x4 2
   80:  set __fn2__x5 1
   81:  setaddr __fn2retaddr __label79
   82:  call __label2 __fn2retval
        gotolabel __label79 __fn2
   83:  assertequals 3 __fn2retval "median(5,4,3,2,1)"
   84:  set __fn2__x1 1
   85:  set __fn2__x2 1
   86:  set __fn2__x3 1
   87:  set __fn2__x4 1
   88:  setaddr __fn2retaddr __label80
   89:  call __label2 __fn2retval
        gotolabel __label80 __fn2
   90:  assertequals 1 __fn2retval "median(1,1,1,1,1)"
   91:  set __fn2__x5 5
   92:  setaddr __fn2retaddr __label81
   93:  call __label2 __fn2retval
        gotolabel __label81 __fn2
   94:  assertequals 1 __fn2retval "median(1,1,1,1,5)"
   95:  set __fn2__x4 5
   96:  setaddr __fn2retaddr __label82
   97:  call __label2 __fn2retval
        gotolabel __label82 __fn2
   98:  assertequals 1 __fn2retval "median(1,1,1,5,5)"
   99:  set __fn2__x3 5
  100:  setaddr __fn2retaddr __label83
  101:  call __label2 __fn2retval
        gotolabel __label83 __fn2
  102:  assertequals 5 __fn2retval "median(1,1,5,5,5)"
  103:  set __fn2__x2 5
  104:  setaddr __fn2retaddr __label84
  105:  call __label2 __fn2retval
        gotolabel __label84 __fn2
  106:  assertequals 5 __fn2retval "median(1,5,5,5,5)"
  107:  set __fn2__x1 5
  108:  setaddr __fn2retaddr __label85
  109:  call __label2 __fn2retval
        gotolabel __label85 __fn2
  110:  assertequals 5 __fn2retval "median(5,5,5,5,5)"
  111:  set __fn32__bestDif 10000000000
  112:  set __fn32__best null
  113:  set __fn32__count 1
  114:  setaddr __tmp108 __label93
  115:  jump __label116 always 0 0
        gotolabel __label93 marker2
  116:  setaddr __tmp108 __label94
  117:  jump __label116 always 0 0
        gotolabel __label94 marker2
  118:  setaddr __tmp108 __label95
  119:  jump __label116 always 0 0
        gotolabel __label95 marker2
  120:  setaddr __tmp108 __label96
  121:  jump __label116 always 0 0
        gotolabel __label96 marker2
  122:  setaddr __tmp108 __label97
  123:  jump __label116 always 0 0
        gotolabel __label97 marker2
  124:  setaddr __tmp108 __label98
        label __label116
  125:  jump __label118 greaterThanEq 0 __fn32__bestDif
  126:  set __fn32__bestDif 0
  127:  set __fn32__best 1
  128:  set __fn32__count 1
  129:  goto __tmp108 marker2
        label __label118
  130:  jump __label120 greaterThan 0 __fn32__bestDif
  131:  op add __fn32__best __fn32__best 1
  132:  op add __fn32__count __fn32__count 1
        label __label120
  133:  goto __tmp108 marker2
        gotolabel __label98 marker2
  134:  op div __tmp107 __fn32__best __fn32__count
  135:  assertequals 1 __tmp107 "median(1,1,1,1,1,1)"
  136:  set __fn35__bestDif 10000000000
  137:  set __fn35__best null
  138:  set __fn35__count 1
  139:  setaddr __tmp134 __label129
  140:  set __fn35__i 1
  141:  jump __label127 always 0 0
        gotolabel __label129 marker4
  142:  setaddr __tmp134 __label130
  143:  set __fn35__i 1
  144:  jump __label127 always 0 0
        gotolabel __label130 marker4
  145:  setaddr __tmp134 __label131
  146:  set __fn35__i 1
  147:  jump __label127 always 0 0
        gotolabel __label131 marker4
  148:  setaddr __tmp134 __label132
  149:  set __fn35__i 1
  150:  jump __label127 always 0 0
        gotolabel __label132 marker4
  151:  setaddr __tmp134 __label133
  152:  set __fn35__i 1
  153:  jump __label127 always 0 0
        gotolabel __label133 marker4
  154:  setaddr __tmp134 __label134
  155:  set __fn35__i 5
        label __label127
  156:  set __fn36__gt 0
  157:  set __fn36__lt 0
  158:  jump __label927 greaterThanEq 1 __fn35__i
  159:  set __fn36__lt 1
  160:  jump __label930 always 0 0
        label __label927
  161:  jump __label928 lessThanEq 1 __fn35__i
  162:  set __fn36__gt 1
        label __label928
        label __label930
  163:  jump __label935 greaterThanEq 1 __fn35__i
  164:  op add __fn36__lt __fn36__lt 1
  165:  jump __label938 always 0 0
        label __label935
  166:  jump __label936 lessThanEq 1 __fn35__i
  167:  op add __fn36__gt __fn36__gt 1
        label __label936
        label __label938
  168:  jump __label943 greaterThanEq 1 __fn35__i
  169:  op add __fn36__lt __fn36__lt 1
  170:  jump __label946 always 0 0
        label __label943
  171:  jump __label944 lessThanEq 1 __fn35__i
  172:  op add __fn36__gt __fn36__gt 1
        label __label944
        label __label946
  173:  jump __label951 greaterThanEq 1 __fn35__i
  174:  op add __fn36__lt __fn36__lt 1
  175:  jump __label954 always 0 0
        label __label951
  176:  jump __label952 lessThanEq 1 __fn35__i
  177:  op add __fn36__gt __fn36__gt 1
        label __label952
        label __label954
  178:  jump __label959 greaterThanEq 1 __fn35__i
  179:  op add __fn36__lt __fn36__lt 1
  180:  jump __label962 always 0 0
        label __label959
  181:  jump __label960 lessThanEq 1 __fn35__i
  182:  op add __fn36__gt __fn36__gt 1
        label __label960
        label __label962
  183:  jump __label967 greaterThanEq 5 __fn35__i
  184:  op add __fn36__lt __fn36__lt 1
  185:  jump __label970 always 0 0
        label __label967
  186:  jump __label968 lessThanEq 5 __fn35__i
  187:  op add __fn36__gt __fn36__gt 1
        label __label968
        label __label970
  188:  op sub __tmp143 __fn36__gt __fn36__lt
  189:  op abs __fn36__dif __tmp143 0
  190:  set __tmp148 false
  191:  op add __tmp145 __fn36__gt __fn36__lt
  192:  jump __label151 lessThan __tmp145 5
  193:  op equal __tmp148 __fn36__gt __fn36__lt
        label __label151
  194:  jump __label152 equal __tmp148 false
  195:  set __tmp133 __fn35__i
  196:  jump __label125 always 0 0
        label __label152
  197:  jump __label154 greaterThanEq __fn36__dif __fn35__bestDif
  198:  set __fn35__bestDif __fn36__dif
  199:  set __fn35__best __fn35__i
  200:  set __fn35__count 1
  201:  goto __tmp134 marker4
        label __label154
  202:  jump __label156 greaterThan __fn36__dif __fn35__bestDif
  203:  op add __fn35__best __fn35__best __fn35__i
  204:  op add __fn35__count __fn35__count 1
        label __label156
  205:  goto __tmp134 marker4
        gotolabel __label134 marker4
  206:  op div __tmp133 __fn35__best __fn35__count
        label __label125
  207:  assertequals 1 __tmp133 "median(1,1,1,1,1,5)"
  208:  set __fn38__bestDif 10000000000
  209:  set __fn38__best null
  210:  set __fn38__count 1
  211:  setaddr __tmp160 __label165
  212:  set __fn38__i 1
  213:  jump __label163 always 0 0
        gotolabel __label165 marker6
  214:  setaddr __tmp160 __label166
  215:  set __fn38__i 1
  216:  jump __label163 always 0 0
        gotolabel __label166 marker6
  217:  setaddr __tmp160 __label167
  218:  set __fn38__i 1
  219:  jump __label163 always 0 0
        gotolabel __label167 marker6
  220:  setaddr __tmp160 __label168
  221:  set __fn38__i 1
  222:  jump __label163 always 0 0
        gotolabel __label168 marker6
  223:  setaddr __tmp160 __label169
  224:  set __fn38__i 5
  225:  jump __label163 always 0 0
        gotolabel __label169 marker6
  226:  setaddr __tmp160 __label170
  227:  set __fn38__i 5
        label __label163
  228:  set __fn39__gt 0
  229:  set __fn39__lt 0
  230:  setaddr __tmp162 __label176
  231:  set __fn39__i 1
  232:  jump __label174 always 0 0
        gotolabel __label176 marker7
  233:  setaddr __tmp162 __label177
  234:  set __fn39__i 1
  235:  jump __label174 always 0 0
        gotolabel __label177 marker7
  236:  setaddr __tmp162 __label178
  237:  set __fn39__i 1
  238:  jump __label174 always 0 0
        gotolabel __label178 marker7
  239:  setaddr __tmp162 __label179
  240:  set __fn39__i 1
  241:  jump __label174 always 0 0
        gotolabel __label179 marker7
  242:  setaddr __tmp162 __label180
  243:  set __fn39__i 5
  244:  jump __label174 always 0 0
        gotolabel __label180 marker7
  245:  setaddr __tmp162 __label181
  246:  set __fn39__i 5
        label __label174
  247:  jump __label182 greaterThanEq __fn39__i __fn38__i
  248:  op add __fn39__lt __fn39__lt 1
  249:  goto __tmp162 marker7
        label __label182
  250:  jump __label184 lessThanEq __fn39__i __fn38__i
  251:  op add __fn39__gt __fn39__gt 1
        label __label184
  252:  goto __tmp162 marker7
        gotolabel __label181 marker7
  253:  op sub __tmp169 __fn39__gt __fn39__lt
  254:  op abs __fn39__dif __tmp169 0
  255:  set __tmp174 false
  256:  op add __tmp171 __fn39__gt __fn39__lt
  257:  jump __label187 lessThan __tmp171 5
  258:  op equal __tmp174 __fn39__gt __fn39__lt
        label __label187
  259:  jump __label188 equal __tmp174 false
  260:  set __tmp159 __fn38__i
  261:  jump __label161 always 0 0
        label __label188
  262:  jump __label190 greaterThanEq __fn39__dif __fn38__bestDif
  263:  set __fn38__bestDif __fn39__dif
  264:  set __fn38__best __fn38__i
  265:  set __fn38__count 1
  266:  goto __tmp160 marker6
        label __label190
  267:  jump __label192 greaterThan __fn39__dif __fn38__bestDif
  268:  op add __fn38__best __fn38__best __fn38__i
  269:  op add __fn38__count __fn38__count 1
        label __label192
  270:  goto __tmp160 marker6
        gotolabel __label170 marker6
  271:  op div __tmp159 __fn38__best __fn38__count
        label __label161
  272:  assertequals 1 __tmp159 "median(1,1,1,1,5,5)"
  273:  set __fn41__bestDif 10000000000
  274:  set __fn41__best null
  275:  set __fn41__count 1
  276:  setaddr __tmp186 __label201
  277:  set __fn41__i 1
  278:  jump __label199 always 0 0
        gotolabel __label201 marker8
  279:  setaddr __tmp186 __label202
  280:  set __fn41__i 1
  281:  jump __label199 always 0 0
        gotolabel __label202 marker8
  282:  setaddr __tmp186 __label203
  283:  set __fn41__i 1
  284:  jump __label199 always 0 0
        gotolabel __label203 marker8
  285:  setaddr __tmp186 __label204
  286:  set __fn41__i 5
  287:  jump __label199 always 0 0
        gotolabel __label204 marker8
  288:  setaddr __tmp186 __label205
  289:  set __fn41__i 5
  290:  jump __label199 always 0 0
        gotolabel __label205 marker8
  291:  setaddr __tmp186 __label206
  292:  set __fn41__i 5
        label __label199
  293:  set __fn42__gt 0
  294:  set __fn42__lt 0
  295:  setaddr __tmp188 __label212
  296:  set __fn42__i 1
  297:  jump __label210 always 0 0
        gotolabel __label212 marker9
  298:  setaddr __tmp188 __label213
  299:  set __fn42__i 1
  300:  jump __label210 always 0 0
        gotolabel __label213 marker9
  301:  setaddr __tmp188 __label214
  302:  set __fn42__i 1
  303:  jump __label210 always 0 0
        gotolabel __label214 marker9
  304:  setaddr __tmp188 __label215
  305:  set __fn42__i 5
  306:  jump __label210 always 0 0
        gotolabel __label215 marker9
  307:  setaddr __tmp188 __label216
  308:  set __fn42__i 5
  309:  jump __label210 always 0 0
        gotolabel __label216 marker9
  310:  setaddr __tmp188 __label217
  311:  set __fn42__i 5
        label __label210
  312:  jump __label218 greaterThanEq __fn42__i __fn41__i
  313:  op add __fn42__lt __fn42__lt 1
  314:  goto __tmp188 marker9
        label __label218
  315:  jump __label220 lessThanEq __fn42__i __fn41__i
  316:  op add __fn42__gt __fn42__gt 1
        label __label220
  317:  goto __tmp188 marker9
        gotolabel __label217 marker9
  318:  op sub __tmp195 __fn42__gt __fn42__lt
  319:  op abs __fn42__dif __tmp195 0
  320:  set __tmp200 false
  321:  op add __tmp197 __fn42__gt __fn42__lt
  322:  jump __label223 lessThan __tmp197 5
  323:  op equal __tmp200 __fn42__gt __fn42__lt
        label __label223
  324:  jump __label224 equal __tmp200 false
  325:  set __tmp185 __fn41__i
  326:  jump __label197 always 0 0
        label __label224
  327:  jump __label226 greaterThanEq __fn42__dif __fn41__bestDif
  328:  set __fn41__bestDif __fn42__dif
  329:  set __fn41__best __fn41__i
  330:  set __fn41__count 1
  331:  goto __tmp186 marker8
        label __label226
  332:  jump __label228 greaterThan __fn42__dif __fn41__bestDif
  333:  op add __fn41__best __fn41__best __fn41__i
  334:  op add __fn41__count __fn41__count 1
        label __label228
  335:  goto __tmp186 marker8
        gotolabel __label206 marker8
  336:  op div __tmp185 __fn41__best __fn41__count
        label __label197
  337:  assertequals 3 __tmp185 "median(1,1,1,5,5,5)"
  338:  set __fn44__bestDif 10000000000
  339:  set __fn44__best null
  340:  set __fn44__count 1
  341:  setaddr __tmp212 __label237
  342:  set __fn44__i 1
  343:  jump __label235 always 0 0
        gotolabel __label237 marker10
  344:  setaddr __tmp212 __label238
  345:  set __fn44__i 1
  346:  jump __label235 always 0 0
        gotolabel __label238 marker10
  347:  setaddr __tmp212 __label239
  348:  set __fn44__i 5
  349:  jump __label235 always 0 0
        gotolabel __label239 marker10
  350:  setaddr __tmp212 __label240
  351:  set __fn44__i 5
  352:  jump __label235 always 0 0
        gotolabel __label240 marker10
  353:  setaddr __tmp212 __label241
  354:  set __fn44__i 5
  355:  jump __label235 always 0 0
        gotolabel __label241 marker10
  356:  setaddr __tmp212 __label242
  357:  set __fn44__i 5
        label __label235
  358:  set __fn45__gt 0
  359:  set __fn45__lt 0
  360:  setaddr __tmp214 __label248
  361:  set __fn45__i 1
  362:  jump __label246 always 0 0
        gotolabel __label248 marker11
  363:  setaddr __tmp214 __label249
  364:  set __fn45__i 1
  365:  jump __label246 always 0 0
        gotolabel __label249 marker11
  366:  setaddr __tmp214 __label250
  367:  set __fn45__i 5
  368:  jump __label246 always 0 0
        gotolabel __label250 marker11
  369:  setaddr __tmp214 __label251
  370:  set __fn45__i 5
  371:  jump __label246 always 0 0
        gotolabel __label251 marker11
  372:  setaddr __tmp214 __label252
  373:  set __fn45__i 5
  374:  jump __label246 always 0 0
        gotolabel __label252 marker11
  375:  setaddr __tmp214 __label253
  376:  set __fn45__i 5
        label __label246
  377:  jump __label254 greaterThanEq __fn45__i __fn44__i
  378:  op add __fn45__lt __fn45__lt 1
  379:  goto __tmp214 marker11
        label __label254
  380:  jump __label256 lessThanEq __fn45__i __fn44__i
  381:  op add __fn45__gt __fn45__gt 1
        label __label256
  382:  goto __tmp214 marker11
        gotolabel __label253 marker11
  383:  op sub __tmp221 __fn45__gt __fn45__lt
  384:  op abs __fn45__dif __tmp221 0
  385:  set __tmp226 false
  386:  op add __tmp223 __fn45__gt __fn45__lt
  387:  jump __label259 lessThan __tmp223 5
  388:  op equal __tmp226 __fn45__gt __fn45__lt
        label __label259
  389:  jump __label260 equal __tmp226 false
  390:  set __tmp211 __fn44__i
  391:  jump __label233 always 0 0
        label __label260
  392:  jump __label262 greaterThanEq __fn45__dif __fn44__bestDif
  393:  set __fn44__bestDif __fn45__dif
  394:  set __fn44__best __fn44__i
  395:  set __fn44__count 1
  396:  goto __tmp212 marker10
        label __label262
  397:  jump __label264 greaterThan __fn45__dif __fn44__bestDif
  398:  op add __fn44__best __fn44__best __fn44__i
  399:  op add __fn44__count __fn44__count 1
        label __label264
  400:  goto __tmp212 marker10
        gotolabel __label242 marker10
  401:  op div __tmp211 __fn44__best __fn44__count
        label __label233
  402:  assertequals 5 __tmp211 "median(1,1,5,5,5,5)"
  403:  set __fn47__bestDif 10000000000
  404:  set __fn47__best null
  405:  set __fn47__count 1
  406:  setaddr __tmp238 __label273
  407:  set __fn47__i 1
  408:  jump __label271 always 0 0
        gotolabel __label273 marker12
  409:  setaddr __tmp238 __label274
  410:  set __fn47__i 5
  411:  jump __label271 always 0 0
        gotolabel __label274 marker12
  412:  setaddr __tmp238 __label275
  413:  set __fn47__i 5
  414:  jump __label271 always 0 0
        gotolabel __label275 marker12
  415:  setaddr __tmp238 __label276
  416:  set __fn47__i 5
  417:  jump __label271 always 0 0
        gotolabel __label276 marker12
  418:  setaddr __tmp238 __label277
  419:  set __fn47__i 5
  420:  jump __label271 always 0 0
        gotolabel __label277 marker12
  421:  setaddr __tmp238 __label278
  422:  set __fn47__i 5
        label __label271
  423:  set __fn48__gt 0
  424:  set __fn48__lt 0
  425:  setaddr __tmp240 __label284
  426:  set __fn48__i 1
  427:  jump __label282 always 0 0
        gotolabel __label284 marker13
  428:  setaddr __tmp240 __label285
  429:  set __fn48__i 5
  430:  jump __label282 always 0 0
        gotolabel __label285 marker13
  431:  setaddr __tmp240 __label286
  432:  set __fn48__i 5
  433:  jump __label282 always 0 0
        gotolabel __label286 marker13
  434:  setaddr __tmp240 __label287
  435:  set __fn48__i 5
  436:  jump __label282 always 0 0
        gotolabel __label287 marker13
  437:  setaddr __tmp240 __label288
  438:  set __fn48__i 5
  439:  jump __label282 always 0 0
        gotolabel __label288 marker13
  440:  setaddr __tmp240 __label289
  441:  set __fn48__i 5
        label __label282
  442:  jump __label290 greaterThanEq __fn48__i __fn47__i
  443:  op add __fn48__lt __fn48__lt 1
  444:  goto __tmp240 marker13
        label __label290
  445:  jump __label292 lessThanEq __fn48__i __fn47__i
  446:  op add __fn48__gt __fn48__gt 1
        label __label292
  447:  goto __tmp240 marker13
        gotolabel __label289 marker13
  448:  op sub __tmp247 __fn48__gt __fn48__lt
  449:  op abs __fn48__dif __tmp247 0
  450:  set __tmp252 false
  451:  op add __tmp249 __fn48__gt __fn48__lt
  452:  jump __label295 lessThan __tmp249 5
  453:  op equal __tmp252 __fn48__gt __fn48__lt
        label __label295
  454:  jump __label296 equal __tmp252 false
  455:  set __tmp237 __fn47__i
  456:  jump __label269 always 0 0
        label __label296
  457:  jump __label298 greaterThanEq __fn48__dif __fn47__bestDif
  458:  set __fn47__bestDif __fn48__dif
  459:  set __fn47__best __fn47__i
  460:  set __fn47__count 1
  461:  goto __tmp238 marker12
        label __label298
  462:  jump __label300 greaterThan __fn48__dif __fn47__bestDif
  463:  op add __fn47__best __fn47__best __fn47__i
  464:  op add __fn47__count __fn47__count 1
        label __label300
  465:  goto __tmp238 marker12
        gotolabel __label278 marker12
  466:  op div __tmp237 __fn47__best __fn47__count
        label __label269
  467:  assertequals 5 __tmp237 "median(1,5,5,5,5,5)"
  468:  set __fn50__bestDif 10000000000
  469:  set __fn50__best null
  470:  set __fn50__count 1
  471:  setaddr __tmp264 __label309
  472:  jump __label332 always 0 0
        gotolabel __label309 marker14
  473:  setaddr __tmp264 __label310
  474:  jump __label332 always 0 0
        gotolabel __label310 marker14
  475:  setaddr __tmp264 __label311
  476:  jump __label332 always 0 0
        gotolabel __label311 marker14
  477:  setaddr __tmp264 __label312
  478:  jump __label332 always 0 0
        gotolabel __label312 marker14
  479:  setaddr __tmp264 __label313
  480:  jump __label332 always 0 0
        gotolabel __label313 marker14
  481:  setaddr __tmp264 __label314
        label __label332
  482:  jump __label334 greaterThanEq 0 __fn50__bestDif
  483:  set __fn50__bestDif 0
  484:  set __fn50__best 5
  485:  set __fn50__count 1
  486:  goto __tmp264 marker14
        label __label334
  487:  jump __label336 greaterThan 0 __fn50__bestDif
  488:  op add __fn50__best __fn50__best 5
  489:  op add __fn50__count __fn50__count 1
        label __label336
  490:  goto __tmp264 marker14
        gotolabel __label314 marker14
  491:  op div __tmp263 __fn50__best __fn50__count
  492:  assertequals 5 __tmp263 "median(5,5,5,5,5,5)"
  493:  set __fn53__bestDif 10000000000
  494:  set __fn53__best null
  495:  set __fn53__count 1
  496:  setaddr __tmp290 __label345
  497:  set __fn53__i 1
  498:  jump __label343 always 0 0
        gotolabel __label345 marker16
  499:  setaddr __tmp290 __label346
  500:  set __fn53__i 2
  501:  jump __label343 always 0 0
        gotolabel __label346 marker16
  502:  setaddr __tmp290 __label347
  503:  set __fn53__i 3
  504:  jump __label343 always 0 0
        gotolabel __label347 marker16
  505:  setaddr __tmp290 __label348
  506:  set __fn53__i 4
  507:  jump __label343 always 0 0
        gotolabel __label348 marker16
  508:  setaddr __tmp290 __label349
  509:  set __fn53__i 5
  510:  jump __label343 always 0 0
        gotolabel __label349 marker16
  511:  setaddr __tmp290 __label350
  512:  set __fn53__i 6
  513:  jump __label343 always 0 0
        gotolabel __label350 marker16
  514:  setaddr __tmp290 __label351
  515:  set __fn53__i 7
  516:  jump __label343 always 0 0
        gotolabel __label351 marker16
  517:  setaddr __tmp290 __label352
  518:  set __fn53__i 8
  519:  jump __label343 always 0 0
        gotolabel __label352 marker16
  520:  setaddr __tmp290 __label353
  521:  set __fn53__i 9
        label __label343
  522:  set __fn54__gt 0
  523:  set __fn54__lt 0
  524:  jump __label688 greaterThanEq 1 __fn53__i
  525:  set __fn54__lt 1
  526:  jump __label691 always 0 0
        label __label688
  527:  jump __label689 lessThanEq 1 __fn53__i
  528:  set __fn54__gt 1
        label __label689
        label __label691
  529:  jump __label696 greaterThanEq 2 __fn53__i
  530:  op add __fn54__lt __fn54__lt 1
  531:  jump __label699 always 0 0
        label __label696
  532:  jump __label697 lessThanEq 2 __fn53__i
  533:  op add __fn54__gt __fn54__gt 1
        label __label697
        label __label699
  534:  jump __label704 greaterThanEq 3 __fn53__i
  535:  op add __fn54__lt __fn54__lt 1
  536:  jump __label707 always 0 0
        label __label704
  537:  jump __label705 lessThanEq 3 __fn53__i
  538:  op add __fn54__gt __fn54__gt 1
        label __label705
        label __label707
  539:  jump __label712 greaterThanEq 4 __fn53__i
  540:  op add __fn54__lt __fn54__lt 1
  541:  jump __label715 always 0 0
        label __label712
  542:  jump __label713 lessThanEq 4 __fn53__i
  543:  op add __fn54__gt __fn54__gt 1
        label __label713
        label __label715
  544:  jump __label720 greaterThanEq 5 __fn53__i
  545:  op add __fn54__lt __fn54__lt 1
  546:  jump __label723 always 0 0
        label __label720
  547:  jump __label721 lessThanEq 5 __fn53__i
  548:  op add __fn54__gt __fn54__gt 1
        label __label721
        label __label723
  549:  jump __label728 greaterThanEq 6 __fn53__i
  550:  op add __fn54__lt __fn54__lt 1
  551:  jump __label731 always 0 0
        label __label728
  552:  jump __label729 lessThanEq 6 __fn53__i
  553:  op add __fn54__gt __fn54__gt 1
        label __label729
        label __label731
  554:  jump __label736 greaterThanEq 7 __fn53__i
  555:  op add __fn54__lt __fn54__lt 1
  556:  jump __label739 always 0 0
        label __label736
  557:  jump __label737 lessThanEq 7 __fn53__i
  558:  op add __fn54__gt __fn54__gt 1
        label __label737
        label __label739
  559:  jump __label744 greaterThanEq 8 __fn53__i
  560:  op add __fn54__lt __fn54__lt 1
  561:  jump __label747 always 0 0
        label __label744
  562:  jump __label745 lessThanEq 8 __fn53__i
  563:  op add __fn54__gt __fn54__gt 1
        label __label745
        label __label747
  564:  jump __label752 greaterThanEq 9 __fn53__i
  565:  op add __fn54__lt __fn54__lt 1
  566:  jump __label755 always 0 0
        label __label752
  567:  jump __label753 lessThanEq 9 __fn53__i
  568:  op add __fn54__gt __fn54__gt 1
        label __label753
        label __label755
  569:  op sub __tmp299 __fn54__gt __fn54__lt
  570:  op abs __fn54__dif __tmp299 0
  571:  set __tmp304 false
  572:  op add __tmp301 __fn54__gt __fn54__lt
  573:  jump __label373 lessThan __tmp301 8
  574:  op equal __tmp304 __fn54__gt __fn54__lt
        label __label373
  575:  jump __label374 equal __tmp304 false
  576:  set __tmp289 __fn53__i
  577:  jump __label341 always 0 0
        label __label374
  578:  jump __label376 greaterThanEq __fn54__dif __fn53__bestDif
  579:  set __fn53__bestDif __fn54__dif
  580:  set __fn53__best __fn53__i
  581:  set __fn53__count 1
  582:  goto __tmp290 marker16
        label __label376
  583:  jump __label378 greaterThan __fn54__dif __fn53__bestDif
  584:  op add __fn53__best __fn53__best __fn53__i
  585:  op add __fn53__count __fn53__count 1
        label __label378
  586:  goto __tmp290 marker16
        gotolabel __label353 marker16
  587:  op div __tmp289 __fn53__best __fn53__count
        label __label341
  588:  assertequals 5 __tmp289 "median(1,2,3,4,5,6,7,8,9)"
  589:  set __fn56__bestDif 10000000000
  590:  set __fn56__best null
  591:  set __fn56__count 1
  592:  setaddr __tmp316 __label387
  593:  set __fn56__i 9
  594:  jump __label385 always 0 0
        gotolabel __label387 marker18
  595:  setaddr __tmp316 __label388
  596:  set __fn56__i 8
  597:  jump __label385 always 0 0
        gotolabel __label388 marker18
  598:  setaddr __tmp316 __label389
  599:  set __fn56__i 7
  600:  jump __label385 always 0 0
        gotolabel __label389 marker18
  601:  setaddr __tmp316 __label390
  602:  set __fn56__i 6
  603:  jump __label385 always 0 0
        gotolabel __label390 marker18
  604:  setaddr __tmp316 __label391
  605:  set __fn56__i 5
  606:  jump __label385 always 0 0
        gotolabel __label391 marker18
  607:  setaddr __tmp316 __label392
  608:  set __fn56__i 4
  609:  jump __label385 always 0 0
        gotolabel __label392 marker18
  610:  setaddr __tmp316 __label393
  611:  set __fn56__i 3
  612:  jump __label385 always 0 0
        gotolabel __label393 marker18
  613:  setaddr __tmp316 __label394
  614:  set __fn56__i 2
  615:  jump __label385 always 0 0
        gotolabel __label394 marker18
  616:  setaddr __tmp316 __label395
  617:  set __fn56__i 1
        label __label385
  618:  set __fn57__gt 0
  619:  set __fn57__lt 0
  620:  jump __label761 greaterThanEq 9 __fn56__i
  621:  set __fn57__lt 1
  622:  jump __label764 always 0 0
        label __label761
  623:  jump __label762 lessThanEq 9 __fn56__i
  624:  set __fn57__gt 1
        label __label762
        label __label764
  625:  jump __label769 greaterThanEq 8 __fn56__i
  626:  op add __fn57__lt __fn57__lt 1
  627:  jump __label772 always 0 0
        label __label769
  628:  jump __label770 lessThanEq 8 __fn56__i
  629:  op add __fn57__gt __fn57__gt 1
        label __label770
        label __label772
  630:  jump __label777 greaterThanEq 7 __fn56__i
  631:  op add __fn57__lt __fn57__lt 1
  632:  jump __label780 always 0 0
        label __label777
  633:  jump __label778 lessThanEq 7 __fn56__i
  634:  op add __fn57__gt __fn57__gt 1
        label __label778
        label __label780
  635:  jump __label785 greaterThanEq 6 __fn56__i
  636:  op add __fn57__lt __fn57__lt 1
  637:  jump __label788 always 0 0
        label __label785
  638:  jump __label786 lessThanEq 6 __fn56__i
  639:  op add __fn57__gt __fn57__gt 1
        label __label786
        label __label788
  640:  jump __label793 greaterThanEq 5 __fn56__i
  641:  op add __fn57__lt __fn57__lt 1
  642:  jump __label796 always 0 0
        label __label793
  643:  jump __label794 lessThanEq 5 __fn56__i
  644:  op add __fn57__gt __fn57__gt 1
        label __label794
        label __label796
  645:  jump __label801 greaterThanEq 4 __fn56__i
  646:  op add __fn57__lt __fn57__lt 1
  647:  jump __label804 always 0 0
        label __label801
  648:  jump __label802 lessThanEq 4 __fn56__i
  649:  op add __fn57__gt __fn57__gt 1
        label __label802
        label __label804
  650:  jump __label809 greaterThanEq 3 __fn56__i
  651:  op add __fn57__lt __fn57__lt 1
  652:  jump __label812 always 0 0
        label __label809
  653:  jump __label810 lessThanEq 3 __fn56__i
  654:  op add __fn57__gt __fn57__gt 1
        label __label810
        label __label812
  655:  jump __label817 greaterThanEq 2 __fn56__i
  656:  op add __fn57__lt __fn57__lt 1
  657:  jump __label820 always 0 0
        label __label817
  658:  jump __label818 lessThanEq 2 __fn56__i
  659:  op add __fn57__gt __fn57__gt 1
        label __label818
        label __label820
  660:  jump __label825 greaterThanEq 1 __fn56__i
  661:  op add __fn57__lt __fn57__lt 1
  662:  jump __label828 always 0 0
        label __label825
  663:  jump __label826 lessThanEq 1 __fn56__i
  664:  op add __fn57__gt __fn57__gt 1
        label __label826
        label __label828
  665:  op sub __tmp325 __fn57__gt __fn57__lt
  666:  op abs __fn57__dif __tmp325 0
  667:  set __tmp330 false
  668:  op add __tmp327 __fn57__gt __fn57__lt
  669:  jump __label415 lessThan __tmp327 8
  670:  op equal __tmp330 __fn57__gt __fn57__lt
        label __label415
  671:  jump __label416 equal __tmp330 false
  672:  set __tmp315 __fn56__i
  673:  jump __label383 always 0 0
        label __label416
  674:  jump __label418 greaterThanEq __fn57__dif __fn56__bestDif
  675:  set __fn56__bestDif __fn57__dif
  676:  set __fn56__best __fn56__i
  677:  set __fn56__count 1
  678:  goto __tmp316 marker18
        label __label418
  679:  jump __label420 greaterThan __fn57__dif __fn56__bestDif
  680:  op add __fn56__best __fn56__best __fn56__i
  681:  op add __fn56__count __fn56__count 1
        label __label420
  682:  goto __tmp316 marker18
        gotolabel __label395 marker18
  683:  op div __tmp315 __fn56__best __fn56__count
        label __label383
  684:  assertequals 5 __tmp315 "median(9,8,7,6,5,4,3,2,1)"
  685:  set __fn59__bestDif 10000000000
  686:  set __fn59__best null
  687:  set __fn59__count 1
  688:  setaddr __tmp342 __label429
  689:  set __fn59__i 1
  690:  jump __label427 always 0 0
        gotolabel __label429 marker20
  691:  setaddr __tmp342 __label430
  692:  set __fn59__i 3
  693:  jump __label427 always 0 0
        gotolabel __label430 marker20
  694:  setaddr __tmp342 __label431
  695:  set __fn59__i 5
  696:  jump __label427 always 0 0
        gotolabel __label431 marker20
  697:  setaddr __tmp342 __label432
  698:  set __fn59__i 7
  699:  jump __label427 always 0 0
        gotolabel __label432 marker20
  700:  setaddr __tmp342 __label433
  701:  set __fn59__i 9
  702:  jump __label427 always 0 0
        gotolabel __label433 marker20
  703:  setaddr __tmp342 __label434
  704:  set __fn59__i 2
  705:  jump __label427 always 0 0
        gotolabel __label434 marker20
  706:  setaddr __tmp342 __label435
  707:  set __fn59__i 4
  708:  jump __label427 always 0 0
        gotolabel __label435 marker20
  709:  setaddr __tmp342 __label436
  710:  set __fn59__i 6
  711:  jump __label427 always 0 0
        gotolabel __label436 marker20
  712:  setaddr __tmp342 __label437
  713:  set __fn59__i 8
        label __label427
  714:  set __fn60__gt 0
  715:  set __fn60__lt 0
  716:  jump __label854 greaterThanEq 1 __fn59__i
  717:  set __fn60__lt 1
  718:  jump __label857 always 0 0
        label __label854
  719:  jump __label855 lessThanEq 1 __fn59__i
  720:  set __fn60__gt 1
        label __label855
        label __label857
  721:  jump __label862 greaterThanEq 3 __fn59__i
  722:  op add __fn60__lt __fn60__lt 1
  723:  jump __label865 always 0 0
        label __label862
  724:  jump __label863 lessThanEq 3 __fn59__i
  725:  op add __fn60__gt __fn60__gt 1
        label __label863
        label __label865
  726:  jump __label870 greaterThanEq 5 __fn59__i
  727:  op add __fn60__lt __fn60__lt 1
  728:  jump __label873 always 0 0
        label __label870
  729:  jump __label871 lessThanEq 5 __fn59__i
  730:  op add __fn60__gt __fn60__gt 1
        label __label871
        label __label873
  731:  jump __label878 greaterThanEq 7 __fn59__i
  732:  op add __fn60__lt __fn60__lt 1
  733:  jump __label881 always 0 0
        label __label878
  734:  jump __label879 lessThanEq 7 __fn59__i
  735:  op add __fn60__gt __fn60__gt 1
        label __label879
        label __label881
  736:  jump __label886 greaterThanEq 9 __fn59__i
  737:  op add __fn60__lt __fn60__lt 1
  738:  jump __label889 always 0 0
        label __label886
  739:  jump __label887 lessThanEq 9 __fn59__i
  740:  op add __fn60__gt __fn60__gt 1
        label __label887
        label __label889
  741:  jump __label894 greaterThanEq 2 __fn59__i
  742:  op add __fn60__lt __fn60__lt 1
  743:  jump __label897 always 0 0
        label __label894
  744:  jump __label895 lessThanEq 2 __fn59__i
  745:  op add __fn60__gt __fn60__gt 1
        label __label895
        label __label897
  746:  jump __label902 greaterThanEq 4 __fn59__i
  747:  op add __fn60__lt __fn60__lt 1
  748:  jump __label905 always 0 0
        label __label902
  749:  jump __label903 lessThanEq 4 __fn59__i
  750:  op add __fn60__gt __fn60__gt 1
        label __label903
        label __label905
  751:  jump __label910 greaterThanEq 6 __fn59__i
  752:  op add __fn60__lt __fn60__lt 1
  753:  jump __label913 always 0 0
        label __label910
  754:  jump __label911 lessThanEq 6 __fn59__i
  755:  op add __fn60__gt __fn60__gt 1
        label __label911
        label __label913
  756:  jump __label918 greaterThanEq 8 __fn59__i
  757:  op add __fn60__lt __fn60__lt 1
  758:  jump __label921 always 0 0
        label __label918
  759:  jump __label919 lessThanEq 8 __fn59__i
  760:  op add __fn60__gt __fn60__gt 1
        label __label919
        label __label921
  761:  op sub __tmp351 __fn60__gt __fn60__lt
  762:  op abs __fn60__dif __tmp351 0
  763:  set __tmp356 false
  764:  op add __tmp353 __fn60__gt __fn60__lt
  765:  jump __label457 lessThan __tmp353 8
  766:  op equal __tmp356 __fn60__gt __fn60__lt
        label __label457
  767:  jump __label458 equal __tmp356 false
  768:  set __tmp341 __fn59__i
  769:  jump __label425 always 0 0
        label __label458
  770:  jump __label460 greaterThanEq __fn60__dif __fn59__bestDif
  771:  set __fn59__bestDif __fn60__dif
  772:  set __fn59__best __fn59__i
  773:  set __fn59__count 1
  774:  goto __tmp342 marker20
        label __label460
  775:  jump __label462 greaterThan __fn60__dif __fn59__bestDif
  776:  op add __fn59__best __fn59__best __fn59__i
  777:  op add __fn59__count __fn59__count 1
        label __label462
  778:  goto __tmp342 marker20
        gotolabel __label437 marker20
  779:  op div __tmp341 __fn59__best __fn59__count
        label __label425
  780:  assertequals 5 __tmp341 "median(1,3,5,7,9,2,4,6,8)"
  781:  set __fn62__bestDif 10000000000
  782:  set __fn62__best null
  783:  set __fn62__count 1
  784:  setaddr __tmp368 __label471
  785:  set __fn62__i 7
  786:  jump __label469 always 0 0
        gotolabel __label471 marker22
  787:  setaddr __tmp368 __label472
  788:  set __fn62__i 4
  789:  jump __label469 always 0 0
        gotolabel __label472 marker22
  790:  setaddr __tmp368 __label473
  791:  set __fn62__i 2
  792:  jump __label469 always 0 0
        gotolabel __label473 marker22
  793:  setaddr __tmp368 __label474
  794:  set __fn62__i 8
  795:  jump __label469 always 0 0
        gotolabel __label474 marker22
  796:  setaddr __tmp368 __label475
  797:  set __fn62__i 1
  798:  jump __label469 always 0 0
        gotolabel __label475 marker22
  799:  setaddr __tmp368 __label476
  800:  set __fn62__i 5
  801:  jump __label469 always 0 0
        gotolabel __label476 marker22
  802:  setaddr __tmp368 __label477
  803:  set __fn62__i 6
  804:  jump __label469 always 0 0
        gotolabel __label477 marker22
  805:  setaddr __tmp368 __label478
  806:  set __fn62__i 9
  807:  jump __label469 always 0 0
        gotolabel __label478 marker22
  808:  setaddr __tmp368 __label479
  809:  set __fn62__i 3
        label __label469
  810:  set __fn63__gt 0
  811:  set __fn63__lt 0
  812:  setaddr __tmp370 __label485
  813:  set __fn63__i 7
  814:  jump __label483 always 0 0
        gotolabel __label485 marker23
  815:  setaddr __tmp370 __label486
  816:  set __fn63__i 4
  817:  jump __label483 always 0 0
        gotolabel __label486 marker23
  818:  setaddr __tmp370 __label487
  819:  set __fn63__i 2
  820:  jump __label483 always 0 0
        gotolabel __label487 marker23
  821:  setaddr __tmp370 __label488
  822:  set __fn63__i 8
  823:  jump __label483 always 0 0
        gotolabel __label488 marker23
  824:  setaddr __tmp370 __label489
  825:  set __fn63__i 1
  826:  jump __label483 always 0 0
        gotolabel __label489 marker23
  827:  setaddr __tmp370 __label490
  828:  set __fn63__i 5
  829:  jump __label483 always 0 0
        gotolabel __label490 marker23
  830:  setaddr __tmp370 __label491
  831:  set __fn63__i 6
  832:  jump __label483 always 0 0
        gotolabel __label491 marker23
  833:  setaddr __tmp370 __label492
  834:  set __fn63__i 9
  835:  jump __label483 always 0 0
        gotolabel __label492 marker23
  836:  setaddr __tmp370 __label493
  837:  set __fn63__i 3
        label __label483
  838:  jump __label494 greaterThanEq __fn63__i __fn62__i
  839:  op add __fn63__lt __fn63__lt 1
  840:  goto __tmp370 marker23
        label __label494
  841:  jump __label496 lessThanEq __fn63__i __fn62__i
  842:  op add __fn63__gt __fn63__gt 1
        label __label496
  843:  goto __tmp370 marker23
        gotolabel __label493 marker23
  844:  op sub __tmp377 __fn63__gt __fn63__lt
  845:  op abs __fn63__dif __tmp377 0
  846:  set __tmp382 false
  847:  op add __tmp379 __fn63__gt __fn63__lt
  848:  jump __label499 lessThan __tmp379 8
  849:  op equal __tmp382 __fn63__gt __fn63__lt
        label __label499
  850:  jump __label500 equal __tmp382 false
  851:  set __tmp367 __fn62__i
  852:  jump __label467 always 0 0
        label __label500
  853:  jump __label502 greaterThanEq __fn63__dif __fn62__bestDif
  854:  set __fn62__bestDif __fn63__dif
  855:  set __fn62__best __fn62__i
  856:  set __fn62__count 1
  857:  goto __tmp368 marker22
        label __label502
  858:  jump __label504 greaterThan __fn63__dif __fn62__bestDif
  859:  op add __fn62__best __fn62__best __fn62__i
  860:  op add __fn62__count __fn62__count 1
        label __label504
  861:  goto __tmp368 marker22
        gotolabel __label479 marker22
  862:  op div __tmp367 __fn62__best __fn62__count
        label __label467
  863:  assertequals 5 __tmp367 "median(7,4,2,8,1,5,6,9,3)"
  864:  set __fn65__bestDif 10000000000
  865:  set __fn65__best null
  866:  set __fn65__count 1
  867:  setaddr __tmp394 __label513
  868:  set __fn65__i 1
  869:  jump __label511 always 0 0
        gotolabel __label513 marker24
  870:  setaddr __tmp394 __label514
  871:  set __fn65__i 1
  872:  jump __label511 always 0 0
        gotolabel __label514 marker24
  873:  setaddr __tmp394 __label515
  874:  set __fn65__i 1
  875:  jump __label511 always 0 0
        gotolabel __label515 marker24
  876:  setaddr __tmp394 __label516
  877:  set __fn65__i 1
  878:  jump __label511 always 0 0
        gotolabel __label516 marker24
  879:  setaddr __tmp394 __label517
  880:  set __fn65__i 9
  881:  jump __label511 always 0 0
        gotolabel __label517 marker24
  882:  setaddr __tmp394 __label518
  883:  set __fn65__i 9
  884:  jump __label511 always 0 0
        gotolabel __label518 marker24
  885:  setaddr __tmp394 __label519
  886:  set __fn65__i 9
  887:  jump __label511 always 0 0
        gotolabel __label519 marker24
  888:  setaddr __tmp394 __label520
  889:  set __fn65__i 9
  890:  jump __label511 always 0 0
        gotolabel __label520 marker24
  891:  setaddr __tmp394 __label521
  892:  set __fn65__i 5
        label __label511
  893:  set __fn66__gt 0
  894:  set __fn66__lt 0
  895:  setaddr __tmp396 __label527
  896:  set __fn66__i 1
  897:  jump __label525 always 0 0
        gotolabel __label527 marker25
  898:  setaddr __tmp396 __label528
  899:  set __fn66__i 1
  900:  jump __label525 always 0 0
        gotolabel __label528 marker25
  901:  setaddr __tmp396 __label529
  902:  set __fn66__i 1
  903:  jump __label525 always 0 0
        gotolabel __label529 marker25
  904:  setaddr __tmp396 __label530
  905:  set __fn66__i 1
  906:  jump __label525 always 0 0
        gotolabel __label530 marker25
  907:  setaddr __tmp396 __label531
  908:  set __fn66__i 9
  909:  jump __label525 always 0 0
        gotolabel __label531 marker25
  910:  setaddr __tmp396 __label532
  911:  set __fn66__i 9
  912:  jump __label525 always 0 0
        gotolabel __label532 marker25
  913:  setaddr __tmp396 __label533
  914:  set __fn66__i 9
  915:  jump __label525 always 0 0
        gotolabel __label533 marker25
  916:  setaddr __tmp396 __label534
  917:  set __fn66__i 9
  918:  jump __label525 always 0 0
        gotolabel __label534 marker25
  919:  setaddr __tmp396 __label535
  920:  set __fn66__i 5
        label __label525
  921:  jump __label536 greaterThanEq __fn66__i __fn65__i
  922:  op add __fn66__lt __fn66__lt 1
  923:  goto __tmp396 marker25
        label __label536
  924:  jump __label538 lessThanEq __fn66__i __fn65__i
  925:  op add __fn66__gt __fn66__gt 1
        label __label538
  926:  goto __tmp396 marker25
        gotolabel __label535 marker25
  927:  op sub __tmp403 __fn66__gt __fn66__lt
  928:  op abs __fn66__dif __tmp403 0
  929:  set __tmp408 false
  930:  op add __tmp405 __fn66__gt __fn66__lt
  931:  jump __label541 lessThan __tmp405 8
  932:  op equal __tmp408 __fn66__gt __fn66__lt
        label __label541
  933:  jump __label542 equal __tmp408 false
  934:  set __tmp393 __fn65__i
  935:  jump __label509 always 0 0
        label __label542
  936:  jump __label544 greaterThanEq __fn66__dif __fn65__bestDif
  937:  set __fn65__bestDif __fn66__dif
  938:  set __fn65__best __fn65__i
  939:  set __fn65__count 1
  940:  goto __tmp394 marker24
        label __label544
  941:  jump __label546 greaterThan __fn66__dif __fn65__bestDif
  942:  op add __fn65__best __fn65__best __fn65__i
  943:  op add __fn65__count __fn65__count 1
        label __label546
  944:  goto __tmp394 marker24
        gotolabel __label521 marker24
  945:  op div __tmp393 __fn65__best __fn65__count
        label __label509
  946:  assertequals 5 __tmp393 "median(1,1,1,1,9,9,9,9,5)"
  947:  stop
  948:  end
        label __label1
  949:  op max __fn1__y2 __fn1__x1 __fn1__x2
  950:  op min __fn1__y3 __fn1__x3 __fn1__x4
  951:  jump __label554 greaterThan __fn1__y2 __fn1__y3
  952:  op add __tmp426 __fn1__y2 __fn1__y3
  953:  op div __fn1retval __tmp426 2
  954:  goto __fn1retaddr __fn1
        label __label554
  955:  op min __fn1__y1 __fn1__x1 __fn1__x2
  956:  op max __fn1__y4 __fn1__x3 __fn1__x4
  957:  jump __label556 lessThan __fn1__y1 __fn1__y4
  958:  op add __tmp432 __fn1__y1 __fn1__y4
  959:  op div __fn1retval __tmp432 2
  960:  goto __fn1retaddr __fn1
        label __label556
  961:  op max __tmp434 __fn1__y1 __fn1__y3
  962:  op min __tmp435 __fn1__y2 __fn1__y4
  963:  op add __tmp436 __tmp434 __tmp435
  964:  op div __fn1retval __tmp436 2
  965:  goto __fn1retaddr __fn1
        label __label2
  966:  op min __fn2__y1 __fn2__x1 __fn2__x2
  967:  op max __fn2__y2 __fn2__x1 __fn2__x2
  968:  op min __fn2__y4 __fn2__x4 __fn2__x5
  969:  op max __fn2__y5 __fn2__x4 __fn2__x5
  970:  jump __label559 greaterThanEq __fn2__y4 __fn2__y1
  971:  set __fn2__y4 __fn2__y1
  972:  set __fn68__t __fn2__y2
  973:  set __fn2__y2 __fn2__y5
  974:  set __fn2__y5 __fn68__t
        label __label559
  975:  jump __label565 lessThanEq __fn2__x3 __fn2__y2
  976:  op min __fn2retval __fn2__y2 __fn2__y5
  977:  jump __label566 greaterThanEq __fn2__y2 __fn2__y4
  978:  op min __fn2retval __fn2__x3 __fn2__y4
  979:  goto __fn2retaddr __fn2
        label __label565
  980:  op min __fn2retval __fn2__y2 __fn2__y4
  981:  jump __label570 lessThanEq __fn2__x3 __fn2__y4
  982:  op min __fn2retval __fn2__x3 __fn2__y5
        label __label570
        label __label566
  983:  goto __fn2retaddr __fn2


stop instruction encountered, dumping variable values:
@counter: 948.0
__fn19__result: 0.0
__fn1__x1: 6.0
__fn1__x2: 2.0
__fn1__x3: 8.0
__fn1__x4: 4.0
__fn1__y1: 2.0
__fn1__y2: 6.0
__fn1__y3: 4.0
__fn1__y4: 8.0
__fn1retaddr: 68.0
__fn1retval: 5.0
__fn20__result: 1.0
__fn2__x1: 5.0
__fn2__x2: 5.0
__fn2__x3: 5.0
__fn2__x4: 5.0
__fn2__x5: 5.0
__fn2__y1: 5.0
__fn2__y2: 5.0
__fn2__y4: 5.0
__fn2__y5: 5.0
__fn2retaddr: 110.0
__fn2retval: 5.0
__fn32__best: 6.0
__fn32__bestDif: 0.0
__fn32__count: 6.0
__fn35__best: 5.0
__fn35__bestDif: 1.0
__fn35__count: 5.0
__fn35__i: 5.0
__fn36__dif: 5.0
__fn36__gt: 0.0
__fn36__lt: 5.0
__fn38__best: 4.0
__fn38__bestDif: 2.0
__fn38__count: 4.0
__fn38__i: 5.0
__fn39__dif: 4.0
__fn39__gt: 0.0
__fn39__i: 5.0
__fn39__lt: 4.0
__fn41__best: 18.0
__fn41__bestDif: 3.0
__fn41__count: 6.0
__fn41__i: 5.0
__fn42__dif: 3.0
__fn42__gt: 0.0
__fn42__i: 5.0
__fn42__lt: 3.0
__fn44__best: 20.0
__fn44__bestDif: 2.0
__fn44__count: 4.0
__fn44__i: 5.0
__fn45__dif: 2.0
__fn45__gt: 0.0
__fn45__i: 5.0
__fn45__lt: 2.0
__fn47__best: 25.0
__fn47__bestDif: 1.0
__fn47__count: 5.0
__fn47__i: 5.0
__fn48__dif: 1.0
__fn48__gt: 0.0
__fn48__i: 5.0
__fn48__lt: 1.0
__fn50__best: 30.0
__fn50__bestDif: 0.0
__fn50__count: 6.0
__fn53__best: 4.0
__fn53__bestDif: 2.0
__fn53__count: 1.0
__fn53__i: 5.0
__fn54__dif: 0.0
__fn54__gt: 4.0
__fn54__lt: 4.0
__fn56__best: 6.0
__fn56__bestDif: 2.0
__fn56__count: 1.0
__fn56__i: 5.0
__fn57__dif: 0.0
__fn57__gt: 4.0
__fn57__lt: 4.0
__fn59__best: 3.0
__fn59__bestDif: 4.0
__fn59__count: 1.0
__fn59__i: 5.0
__fn60__dif: 0.0
__fn60__gt: 4.0
__fn60__lt: 4.0
__fn62__best: 4.0
__fn62__bestDif: 2.0
__fn62__count: 1.0
__fn62__i: 5.0
__fn63__dif: 0.0
__fn63__gt: 4.0
__fn63__i: 3.0
__fn63__lt: 4.0
__fn65__best: 40.0
__fn65__bestDif: 5.0
__fn65__count: 8.0
__fn65__i: 5.0
__fn66__dif: 0.0
__fn66__gt: 4.0
__fn66__i: 5.0
__fn66__lt: 4.0
__fn68__t: 5.0
__tmp107: 1.0
__tmp108: 134.0
__tmp133: 1.0
__tmp134: 206.0
__tmp143: -5.0
__tmp145: 5.0
__tmp148: 0.0
__tmp159: 1.0
__tmp160: 271.0
__tmp162: 253.0
__tmp169: -4.0
__tmp171: 4.0
__tmp174: 0.0
__tmp185: 3.0
__tmp186: 336.0
__tmp188: 318.0
__tmp195: -3.0
__tmp197: 3.0
__tmp200: 0.0
__tmp211: 5.0
__tmp212: 401.0
__tmp214: 383.0
__tmp221: -2.0
__tmp223: 2.0
__tmp226: 0.0
__tmp237: 5.0
__tmp238: 466.0
__tmp240: 448.0
__tmp247: -1.0
__tmp249: 1.0
__tmp252: 0.0
__tmp263: 5.0
__tmp264: 491.0
__tmp289: 5.0
__tmp290: 511.0
__tmp299: 0.0
__tmp301: 8.0
__tmp304: 1.0
__tmp315: 5.0
__tmp316: 607.0
__tmp325: 0.0
__tmp327: 8.0
__tmp330: 1.0
__tmp341: 5.0
__tmp342: 697.0
__tmp351: 0.0
__tmp353: 8.0
__tmp356: 1.0
__tmp367: 5.0
__tmp368: 802.0
__tmp370: 844.0
__tmp377: 0.0
__tmp379: 8.0
__tmp382: 1.0
__tmp393: 5.0
__tmp394: 945.0
__tmp396: 927.0
__tmp403: 0.0
__tmp405: 8.0
__tmp408: 1.0
__tmp426: 10.0
__tmp432: 10.0
__tmp434: 4.0
__tmp435: 6.0
__tmp436: 10.0