  1654 instructions before optimizations.
    91 instructions eliminated by Temp Variables Elimination (2 iterations).
   124 instructions eliminated by Dead Code Elimination (5 iterations).
    28 instructions modified by Jump Normalization (9 iterations).
    68 instructions eliminated by Jump Optimization (9 iterations).
    91 instructions eliminated by Single Step Elimination (3 passes, 14 iterations).
    14 instructions modified by Expression Optimization (3 passes, 7 iterations).
    14 instructions eliminated by If Expression Optimization (5 passes, 7 iterations).
   336 instructions eliminated by Data Flow Optimization (11 passes, 42 iterations).
    70 instructions added by Loop Unrolling (16 iterations).
     8 loops unrolled by Loop Unrolling.
     4 instructions eliminated by Function Inlining (16 iterations).
     3 function calls inlined by Function Inlining.
    32 instructions updated by Jump Threading.
     4 instructions eliminated by Unreachable Code Elimination (2 iterations).
   992 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:121:5                         size    -5, benefit        7.0, efficiency   Infinity (-8 instructions)
    Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +9, benefit       10.5, efficiency      1.167
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 15:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 16:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity (-9 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +9, benefit       10.5, efficiency      1.167
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 15:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 16:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +9, benefit       10.5, efficiency      1.167
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 15:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 16:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +9, benefit       10.5, efficiency      1.167
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 15:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 16:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +9, benefit       10.5, efficiency      1.167
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 15:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 16:17                           size    +5, benefit        3.5, efficiency      0.700
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 2: speed optimization selection (cost limit 25):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
    Inline function 'signInexact' defined at *math:47:1          size    +1, benefit       10.5, efficiency     10.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 14:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 15:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 16:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 12):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
    Inline function 'signInexact' defined at *math:47:1          size    +1, benefit       10.5, efficiency     10.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 14:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 15:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 16:17                           size    +1, benefit        3.5, efficiency      3.500
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +1, benefit       10.5, efficiency     10.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 14:17                           size    +1, benefit        3.5, efficiency      3.500
  ! Inline function call at line 15:17                           size    +1, benefit        3.5, efficiency      3.500
  ! Inline function call at line 16:17                           size    +1, benefit        3.5, efficiency      3.500
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 3: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  * Inline function 'signInexact' defined at *math:47:1          size    +1, benefit       10.5, efficiency     10.500 (-7 instructions)
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 14:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 15:17                           size    +1, benefit        3.5, efficiency      3.500
    Inline function call at line 16:17                           size    +1, benefit        3.5, efficiency      3.500
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 3: speed optimization selection (cost limit 8):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  * Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143 (+7 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 3: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +271, benefit       23.0, efficiency      0.085
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 4: speed optimization selection (cost limit 8):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  * Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143 (+7 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 4: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +271, benefit       23.0, efficiency      0.085
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 5: speed optimization selection (cost limit 2):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 6: speed optimization selection (cost limit 2):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 7: speed optimization selection (cost limit 2):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +265, benefit       23.0, efficiency      0.087
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  assertequals 0 0 "signInexact(0)"
   10:  assertequals 0 0 "signInexact(1e-7)"
   11:  assertequals 1 1 "signInexact(1e-5)"
   12:  assertequals -1 -1 "sign(-5)"
   13:  assertequals 0 0 "sign(0)"
   14:  assertequals 1 1 "sign(1e-7)"
   15:  assertequals -1 -1 "sign(-1e-7)"
   16:  assertequals true true "isZero(0)"
   17:  assertequals false false "isZero(1e-50)"
   18:  assertequals false false "isZero(-1e-50)"
   19:  assertequals false false "isZero(0.01,0.01)"
   20:  op add :nullToZero:result null 0
   21:  assertequals 0 :nullToZero:result "nullToZero(null)"
   22:  op add :nullToZero.1:result 1 0
   23:  assertequals 1 :nullToZero.1:result "nullToZero(1)"
   24:  assertequals 0 false "boolean(0)"
   25:  assertequals 1 true "boolean(100)"
   26:  assertequals 1 true "boolean(-100)"
   27:  assertequals 1 true "boolean(-0.001)"
   28:  assertequals 0 false "boolean(0.0000001)"
   29:  op or :integer:result 0.9 0
   30:  assertequals 0 :integer:result "integer(0.9)"
   31:  op or :integer.1:result -5.9 0
   32:  assertequals -5 :integer.1:result "integer(-5.9)"
   33:  op or :integer.2:result 100 0
   34:  assertequals 100 :integer.2:result "integer(100)"
   35:  assertequals 1 1 "sum(1)"
   36:  assertequals 10 10 "sum(1,2,3,4)"
   37:  assertequals 1 1 "avg(1)"
   38:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   39:  assertequals 2 2 "logn(25, 5)"
   40:  assertequals 4 4 "logn(10000, 10)"
   41:  assertequals 4 4 "log2(16)"
   42:  assertequals 30 30 "log2(1 << 30)"
   43:  assertequals 1 1 "lerp(1, 10, 0)"
   44:  assertequals 10 10 "lerp(1, 10, 1)"
   45:  assertequals 5.5 5.5 "lerp(1, 10, 0.5)"
   46:  assertequals 1 1 "median(1)"
   47:  assertequals 3 3 "median(2,4)"
   48:  assertequals 3 3 "median(1,3,5)"
   49:  assertequals 1 1 "median(1,1,1)"
   50:  assertequals 1 1 "median(1,1,3)"
   51:  assertequals 3 3 "median(1,3,3)"
   52:  set :median:x1 2
   53:  set :median:x2 4
   54:  set :median:x3 6
   55:  set :median:x4 8
   56:  setaddr :median*retaddr *label53
   57:  call *label1 *invalid :median*retval
        label *label53
   58:  assertequals 5 :median*retval "median(2,4,6,8)"
   59:  set :median:x1 8
   60:  set :median:x2 6
   61:  set :median:x3 4
   62:  set :median:x4 2
   63:  setaddr :median*retaddr *label54
   64:  call *label1 *invalid :median*retval
        label *label54
   65:  assertequals 5 :median*retval "median(8,6,4,2)"
   66:  set :median:x1 4
   67:  set :median:x2 8
   68:  set :median:x3 2
   69:  set :median:x4 6
   70:  setaddr :median*retaddr *label55
   71:  call *label1 *invalid :median*retval
        label *label55
   72:  assertequals 5 :median*retval "median(4,8,2,6)"
   73:  set :median:x1 2
   74:  set :median:x2 6
   75:  set :median:x3 4
   76:  set :median:x4 8
   77:  setaddr :median*retaddr *label56
   78:  call *label1 *invalid :median*retval
        label *label56
   79:  assertequals 5 :median*retval "median(2,6,4,8)"
   80:  set :median:x1 6
   81:  set :median:x2 2
   82:  set :median:x3 8
   83:  set :median:x4 4
   84:  setaddr :median*retaddr *label57
   85:  call *label1 *invalid :median*retval
        label *label57
   86:  assertequals 5 :median*retval "median(6,2,8,4)"
   87:  set :median.1:x1 1
   88:  set :median.1:x2 2
   89:  set :median.1:x3 3
   90:  set :median.1:x4 4
   91:  set :median.1:x5 5
   92:  setaddr :median.1*retaddr *label58
   93:  call *label2 *invalid :median.1*retval
        label *label58
   94:  assertequals 3 :median.1*retval "median(1,2,3,4,5)"
   95:  set :median.1:x1 5
   96:  set :median.1:x2 4
   97:  set :median.1:x4 2
   98:  set :median.1:x5 1
   99:  setaddr :median.1*retaddr *label59
  100:  call *label2 *invalid :median.1*retval
        label *label59
  101:  assertequals 3 :median.1*retval "median(5,4,3,2,1)"
  102:  set :median.1:x1 1
  103:  set :median.1:x2 1
  104:  set :median.1:x3 1
  105:  set :median.1:x4 1
  106:  setaddr :median.1*retaddr *label60
  107:  call *label2 *invalid :median.1*retval
        label *label60
  108:  assertequals 1 :median.1*retval "median(1,1,1,1,1)"
  109:  set :median.1:x5 5
  110:  setaddr :median.1*retaddr *label61
  111:  call *label2 *invalid :median.1*retval
        label *label61
  112:  assertequals 1 :median.1*retval "median(1,1,1,1,5)"
  113:  set :median.1:x4 5
  114:  setaddr :median.1*retaddr *label62
  115:  call *label2 *invalid :median.1*retval
        label *label62
  116:  assertequals 1 :median.1*retval "median(1,1,1,5,5)"
  117:  set :median.1:x3 5
  118:  setaddr :median.1*retaddr *label63
  119:  call *label2 *invalid :median.1*retval
        label *label63
  120:  assertequals 5 :median.1*retval "median(1,1,5,5,5)"
  121:  set :median.1:x2 5
  122:  setaddr :median.1*retaddr *label64
  123:  call *label2 *invalid :median.1*retval
        label *label64
  124:  assertequals 5 :median.1*retval "median(1,5,5,5,5)"
  125:  set :median.1:x1 5
  126:  setaddr :median.1*retaddr *label65
  127:  call *label2 *invalid :median.1*retval
        label *label65
  128:  assertequals 5 :median.1*retval "median(5,5,5,5,5)"
  129:  set :_median:bestDif 10000000000
  130:  set :_median:best null
  131:  set :_median:count 1
  132:  setaddr *tmp124 *label71
  133:  jump *label93 always 0 0
        multilabel *label71
  134:  setaddr *tmp124 *label72
  135:  jump *label93 always 0 0
        multilabel *label72
  136:  setaddr *tmp124 *label73
  137:  jump *label93 always 0 0
        multilabel *label73
  138:  setaddr *tmp124 *label74
  139:  jump *label93 always 0 0
        multilabel *label74
  140:  setaddr *tmp124 *label75
  141:  jump *label93 always 0 0
        multilabel *label75
  142:  setaddr *tmp124 *label76
        label *label93
  143:  jump *label95 greaterThanEq 0 :_median:bestDif
  144:  set :_median:bestDif 0
  145:  set :_median:best 1
  146:  set :_median:count 1
  147:  multijump *tmp124 0 0
        label *label95
  148:  jump *label97 greaterThan 0 :_median:bestDif
  149:  op add :_median:best :_median:best 1
  150:  op add :_median:count :_median:count 1
        label *label97
  151:  multijump *tmp124 0 0
        multilabel *label76
  152:  op div *tmp123 :_median:best :_median:count
  153:  assertequals 1 *tmp123 "median(1,1,1,1,1,1)"
  154:  set :_median.1:bestDif 10000000000
  155:  set :_median.1:best null
  156:  set :_median.1:count 1
  157:  set :_median.1:i 1
  158:  setaddr *tmp146 *label104
  159:  jump *label101 always 0 0
        multilabel *label104
  160:  set :_median.1:i 1
  161:  setaddr *tmp146 *label105
  162:  jump *label101 always 0 0
        multilabel *label105
  163:  set :_median.1:i 1
  164:  setaddr *tmp146 *label106
  165:  jump *label101 always 0 0
        multilabel *label106
  166:  set :_median.1:i 1
  167:  setaddr *tmp146 *label107
  168:  jump *label101 always 0 0
        multilabel *label107
  169:  set :_median.1:i 1
  170:  setaddr *tmp146 *label108
  171:  jump *label101 always 0 0
        multilabel *label108
  172:  set :_median.1:i 5
  173:  setaddr *tmp146 *label109
        label *label101
  174:  set :_isMedian.1:lt 0
  175:  set :_isMedian.1:gt 0
  176:  jump *label794 greaterThanEq 1 :_median.1:i
  177:  set :_isMedian.1:lt 1
  178:  jump *label797 always 0 0
        label *label794
  179:  select :_isMedian.1:gt greaterThan 1 :_median.1:i 1 0
        label *label797
  180:  jump *label802 greaterThanEq 1 :_median.1:i
  181:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  182:  jump *label805 always 0 0
        label *label802
  183:  jump *label803 lessThanEq 1 :_median.1:i
  184:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label803
        label *label805
  185:  jump *label810 greaterThanEq 1 :_median.1:i
  186:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  187:  jump *label813 always 0 0
        label *label810
  188:  jump *label811 lessThanEq 1 :_median.1:i
  189:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label811
        label *label813
  190:  jump *label818 greaterThanEq 1 :_median.1:i
  191:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  192:  jump *label821 always 0 0
        label *label818
  193:  jump *label819 lessThanEq 1 :_median.1:i
  194:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label819
        label *label821
  195:  jump *label826 greaterThanEq 1 :_median.1:i
  196:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  197:  jump *label829 always 0 0
        label *label826
  198:  jump *label827 lessThanEq 1 :_median.1:i
  199:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label827
        label *label829
  200:  jump *label834 greaterThanEq 5 :_median.1:i
  201:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  202:  jump *label837 always 0 0
        label *label834
  203:  jump *label835 lessThanEq 5 :_median.1:i
  204:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label835
        label *label837
  205:  op sub *tmp153 :_isMedian.1:gt :_isMedian.1:lt
  206:  op abs :_isMedian.1:dif *tmp153 0
  207:  set *tmp158 false
  208:  op add *tmp155 :_isMedian.1:gt :_isMedian.1:lt
  209:  jump *label125 lessThan *tmp155 5
  210:  op equal *tmp158 :_isMedian.1:gt :_isMedian.1:lt
        label *label125
  211:  jump *label126 equal *tmp158 false
  212:  set *tmp145 :_median.1:i
  213:  jump *label100 always 0 0
        label *label126
  214:  jump *label128 greaterThanEq :_isMedian.1:dif :_median.1:bestDif
  215:  set :_median.1:bestDif :_isMedian.1:dif
  216:  set :_median.1:best :_median.1:i
  217:  set :_median.1:count 1
  218:  multijump *tmp146 0 0
        label *label128
  219:  jump *label130 greaterThan :_isMedian.1:dif :_median.1:bestDif
  220:  op add :_median.1:best :_median.1:best :_median.1:i
  221:  op add :_median.1:count :_median.1:count 1
        label *label130
  222:  multijump *tmp146 0 0
        multilabel *label109
  223:  op div *tmp145 :_median.1:best :_median.1:count
        label *label100
  224:  assertequals 1 *tmp145 "median(1,1,1,1,1,5)"
  225:  set :_median.2:bestDif 10000000000
  226:  set :_median.2:best null
  227:  set :_median.2:count 1
  228:  set :_median.2:i 1
  229:  setaddr *tmp168 *label137
  230:  jump *label134 always 0 0
        multilabel *label137
  231:  set :_median.2:i 1
  232:  setaddr *tmp168 *label138
  233:  jump *label134 always 0 0
        multilabel *label138
  234:  set :_median.2:i 1
  235:  setaddr *tmp168 *label139
  236:  jump *label134 always 0 0
        multilabel *label139
  237:  set :_median.2:i 1
  238:  setaddr *tmp168 *label140
  239:  jump *label134 always 0 0
        multilabel *label140
  240:  set :_median.2:i 5
  241:  setaddr *tmp168 *label141
  242:  jump *label134 always 0 0
        multilabel *label141
  243:  set :_median.2:i 5
  244:  setaddr *tmp168 *label142
        label *label134
  245:  set :_isMedian.2:lt 0
  246:  set :_isMedian.2:gt 0
  247:  jump *label843 greaterThanEq 1 :_median.2:i
  248:  set :_isMedian.2:lt 1
  249:  jump *label846 always 0 0
        label *label843
  250:  select :_isMedian.2:gt greaterThan 1 :_median.2:i 1 0
        label *label846
  251:  jump *label851 greaterThanEq 1 :_median.2:i
  252:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  253:  jump *label854 always 0 0
        label *label851
  254:  jump *label852 lessThanEq 1 :_median.2:i
  255:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label852
        label *label854
  256:  jump *label859 greaterThanEq 1 :_median.2:i
  257:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  258:  jump *label862 always 0 0
        label *label859
  259:  jump *label860 lessThanEq 1 :_median.2:i
  260:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label860
        label *label862
  261:  jump *label867 greaterThanEq 1 :_median.2:i
  262:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  263:  jump *label870 always 0 0
        label *label867
  264:  jump *label868 lessThanEq 1 :_median.2:i
  265:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label868
        label *label870
  266:  jump *label875 greaterThanEq 5 :_median.2:i
  267:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  268:  jump *label878 always 0 0
        label *label875
  269:  jump *label876 lessThanEq 5 :_median.2:i
  270:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label876
        label *label878
  271:  jump *label883 greaterThanEq 5 :_median.2:i
  272:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  273:  jump *label886 always 0 0
        label *label883
  274:  jump *label884 lessThanEq 5 :_median.2:i
  275:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label884
        label *label886
  276:  op sub *tmp175 :_isMedian.2:gt :_isMedian.2:lt
  277:  op abs :_isMedian.2:dif *tmp175 0
  278:  set *tmp180 false
  279:  op add *tmp177 :_isMedian.2:gt :_isMedian.2:lt
  280:  jump *label158 lessThan *tmp177 5
  281:  op equal *tmp180 :_isMedian.2:gt :_isMedian.2:lt
        label *label158
  282:  jump *label159 equal *tmp180 false
  283:  set *tmp167 :_median.2:i
  284:  jump *label133 always 0 0
        label *label159
  285:  jump *label161 greaterThanEq :_isMedian.2:dif :_median.2:bestDif
  286:  set :_median.2:bestDif :_isMedian.2:dif
  287:  set :_median.2:best :_median.2:i
  288:  set :_median.2:count 1
  289:  multijump *tmp168 0 0
        label *label161
  290:  jump *label163 greaterThan :_isMedian.2:dif :_median.2:bestDif
  291:  op add :_median.2:best :_median.2:best :_median.2:i
  292:  op add :_median.2:count :_median.2:count 1
        label *label163
  293:  multijump *tmp168 0 0
        multilabel *label142
  294:  op div *tmp167 :_median.2:best :_median.2:count
        label *label133
  295:  assertequals 1 *tmp167 "median(1,1,1,1,5,5)"
  296:  set :_median.3:bestDif 10000000000
  297:  set :_median.3:best null
  298:  set :_median.3:count 1
  299:  set :_median.3:i 1
  300:  setaddr *tmp190 *label170
  301:  jump *label167 always 0 0
        multilabel *label170
  302:  set :_median.3:i 1
  303:  setaddr *tmp190 *label171
  304:  jump *label167 always 0 0
        multilabel *label171
  305:  set :_median.3:i 1
  306:  setaddr *tmp190 *label172
  307:  jump *label167 always 0 0
        multilabel *label172
  308:  set :_median.3:i 5
  309:  setaddr *tmp190 *label173
  310:  jump *label167 always 0 0
        multilabel *label173
  311:  set :_median.3:i 5
  312:  setaddr *tmp190 *label174
  313:  jump *label167 always 0 0
        multilabel *label174
  314:  set :_median.3:i 5
  315:  setaddr *tmp190 *label175
        label *label167
  316:  set :_isMedian.3:lt 0
  317:  set :_isMedian.3:gt 0
  318:  set :_isMedian.3:i 1
  319:  setaddr *tmp192 *label180
  320:  jump *label177 always 0 0
        multilabel *label180
  321:  set :_isMedian.3:i 1
  322:  setaddr *tmp192 *label181
  323:  jump *label177 always 0 0
        multilabel *label181
  324:  set :_isMedian.3:i 1
  325:  setaddr *tmp192 *label182
  326:  jump *label177 always 0 0
        multilabel *label182
  327:  set :_isMedian.3:i 5
  328:  setaddr *tmp192 *label183
  329:  jump *label177 always 0 0
        multilabel *label183
  330:  set :_isMedian.3:i 5
  331:  setaddr *tmp192 *label184
  332:  jump *label177 always 0 0
        multilabel *label184
  333:  set :_isMedian.3:i 5
  334:  setaddr *tmp192 *label185
        label *label177
  335:  jump *label186 greaterThanEq :_isMedian.3:i :_median.3:i
  336:  op add :_isMedian.3:lt :_isMedian.3:lt 1
  337:  multijump *tmp192 0 0
        label *label186
  338:  jump *label188 lessThanEq :_isMedian.3:i :_median.3:i
  339:  op add :_isMedian.3:gt :_isMedian.3:gt 1
        label *label188
  340:  multijump *tmp192 0 0
        multilabel *label185
  341:  op sub *tmp197 :_isMedian.3:gt :_isMedian.3:lt
  342:  op abs :_isMedian.3:dif *tmp197 0
  343:  set *tmp202 false
  344:  op add *tmp199 :_isMedian.3:gt :_isMedian.3:lt
  345:  jump *label191 lessThan *tmp199 5
  346:  op equal *tmp202 :_isMedian.3:gt :_isMedian.3:lt
        label *label191
  347:  jump *label192 equal *tmp202 false
  348:  set *tmp189 :_median.3:i
  349:  jump *label166 always 0 0
        label *label192
  350:  jump *label194 greaterThanEq :_isMedian.3:dif :_median.3:bestDif
  351:  set :_median.3:bestDif :_isMedian.3:dif
  352:  set :_median.3:best :_median.3:i
  353:  set :_median.3:count 1
  354:  multijump *tmp190 0 0
        label *label194
  355:  jump *label196 greaterThan :_isMedian.3:dif :_median.3:bestDif
  356:  op add :_median.3:best :_median.3:best :_median.3:i
  357:  op add :_median.3:count :_median.3:count 1
        label *label196
  358:  multijump *tmp190 0 0
        multilabel *label175
  359:  op div *tmp189 :_median.3:best :_median.3:count
        label *label166
  360:  assertequals 3 *tmp189 "median(1,1,1,5,5,5)"
  361:  set :_median.4:bestDif 10000000000
  362:  set :_median.4:best null
  363:  set :_median.4:count 1
  364:  set :_median.4:i 1
  365:  setaddr *tmp212 *label203
  366:  jump *label200 always 0 0
        multilabel *label203
  367:  set :_median.4:i 1
  368:  setaddr *tmp212 *label204
  369:  jump *label200 always 0 0
        multilabel *label204
  370:  set :_median.4:i 5
  371:  setaddr *tmp212 *label205
  372:  jump *label200 always 0 0
        multilabel *label205
  373:  set :_median.4:i 5
  374:  setaddr *tmp212 *label206
  375:  jump *label200 always 0 0
        multilabel *label206
  376:  set :_median.4:i 5
  377:  setaddr *tmp212 *label207
  378:  jump *label200 always 0 0
        multilabel *label207
  379:  set :_median.4:i 5
  380:  setaddr *tmp212 *label208
        label *label200
  381:  set :_isMedian.4:lt 0
  382:  set :_isMedian.4:gt 0
  383:  set :_isMedian.4:i 1
  384:  setaddr *tmp214 *label213
  385:  jump *label210 always 0 0
        multilabel *label213
  386:  set :_isMedian.4:i 1
  387:  setaddr *tmp214 *label214
  388:  jump *label210 always 0 0
        multilabel *label214
  389:  set :_isMedian.4:i 5
  390:  setaddr *tmp214 *label215
  391:  jump *label210 always 0 0
        multilabel *label215
  392:  set :_isMedian.4:i 5
  393:  setaddr *tmp214 *label216
  394:  jump *label210 always 0 0
        multilabel *label216
  395:  set :_isMedian.4:i 5
  396:  setaddr *tmp214 *label217
  397:  jump *label210 always 0 0
        multilabel *label217
  398:  set :_isMedian.4:i 5
  399:  setaddr *tmp214 *label218
        label *label210
  400:  jump *label219 greaterThanEq :_isMedian.4:i :_median.4:i
  401:  op add :_isMedian.4:lt :_isMedian.4:lt 1
  402:  multijump *tmp214 0 0
        label *label219
  403:  jump *label221 lessThanEq :_isMedian.4:i :_median.4:i
  404:  op add :_isMedian.4:gt :_isMedian.4:gt 1
        label *label221
  405:  multijump *tmp214 0 0
        multilabel *label218
  406:  op sub *tmp219 :_isMedian.4:gt :_isMedian.4:lt
  407:  op abs :_isMedian.4:dif *tmp219 0
  408:  set *tmp224 false
  409:  op add *tmp221 :_isMedian.4:gt :_isMedian.4:lt
  410:  jump *label224 lessThan *tmp221 5
  411:  op equal *tmp224 :_isMedian.4:gt :_isMedian.4:lt
        label *label224
  412:  jump *label225 equal *tmp224 false
  413:  set *tmp211 :_median.4:i
  414:  jump *label199 always 0 0
        label *label225
  415:  jump *label227 greaterThanEq :_isMedian.4:dif :_median.4:bestDif
  416:  set :_median.4:bestDif :_isMedian.4:dif
  417:  set :_median.4:best :_median.4:i
  418:  set :_median.4:count 1
  419:  multijump *tmp212 0 0
        label *label227
  420:  jump *label229 greaterThan :_isMedian.4:dif :_median.4:bestDif
  421:  op add :_median.4:best :_median.4:best :_median.4:i
  422:  op add :_median.4:count :_median.4:count 1
        label *label229
  423:  multijump *tmp212 0 0
        multilabel *label208
  424:  op div *tmp211 :_median.4:best :_median.4:count
        label *label199
  425:  assertequals 5 *tmp211 "median(1,1,5,5,5,5)"
  426:  set :_median.5:bestDif 10000000000
  427:  set :_median.5:best null
  428:  set :_median.5:count 1
  429:  set :_median.5:i 1
  430:  setaddr *tmp234 *label236
  431:  jump *label233 always 0 0
        multilabel *label236
  432:  set :_median.5:i 5
  433:  setaddr *tmp234 *label237
  434:  jump *label233 always 0 0
        multilabel *label237
  435:  set :_median.5:i 5
  436:  setaddr *tmp234 *label238
  437:  jump *label233 always 0 0
        multilabel *label238
  438:  set :_median.5:i 5
  439:  setaddr *tmp234 *label239
  440:  jump *label233 always 0 0
        multilabel *label239
  441:  set :_median.5:i 5
  442:  setaddr *tmp234 *label240
  443:  jump *label233 always 0 0
        multilabel *label240
  444:  set :_median.5:i 5
  445:  setaddr *tmp234 *label241
        label *label233
  446:  set :_isMedian.5:lt 0
  447:  set :_isMedian.5:gt 0
  448:  set :_isMedian.5:i 1
  449:  setaddr *tmp236 *label246
  450:  jump *label243 always 0 0
        multilabel *label246
  451:  set :_isMedian.5:i 5
  452:  setaddr *tmp236 *label247
  453:  jump *label243 always 0 0
        multilabel *label247
  454:  set :_isMedian.5:i 5
  455:  setaddr *tmp236 *label248
  456:  jump *label243 always 0 0
        multilabel *label248
  457:  set :_isMedian.5:i 5
  458:  setaddr *tmp236 *label249
  459:  jump *label243 always 0 0
        multilabel *label249
  460:  set :_isMedian.5:i 5
  461:  setaddr *tmp236 *label250
  462:  jump *label243 always 0 0
        multilabel *label250
  463:  set :_isMedian.5:i 5
  464:  setaddr *tmp236 *label251
        label *label243
  465:  jump *label252 greaterThanEq :_isMedian.5:i :_median.5:i
  466:  op add :_isMedian.5:lt :_isMedian.5:lt 1
  467:  multijump *tmp236 0 0
        label *label252
  468:  jump *label254 lessThanEq :_isMedian.5:i :_median.5:i
  469:  op add :_isMedian.5:gt :_isMedian.5:gt 1
        label *label254
  470:  multijump *tmp236 0 0
        multilabel *label251
  471:  op sub *tmp241 :_isMedian.5:gt :_isMedian.5:lt
  472:  op abs :_isMedian.5:dif *tmp241 0
  473:  set *tmp246 false
  474:  op add *tmp243 :_isMedian.5:gt :_isMedian.5:lt
  475:  jump *label257 lessThan *tmp243 5
  476:  op equal *tmp246 :_isMedian.5:gt :_isMedian.5:lt
        label *label257
  477:  jump *label258 equal *tmp246 false
  478:  set *tmp233 :_median.5:i
  479:  jump *label232 always 0 0
        label *label258
  480:  jump *label260 greaterThanEq :_isMedian.5:dif :_median.5:bestDif
  481:  set :_median.5:bestDif :_isMedian.5:dif
  482:  set :_median.5:best :_median.5:i
  483:  set :_median.5:count 1
  484:  multijump *tmp234 0 0
        label *label260
  485:  jump *label262 greaterThan :_isMedian.5:dif :_median.5:bestDif
  486:  op add :_median.5:best :_median.5:best :_median.5:i
  487:  op add :_median.5:count :_median.5:count 1
        label *label262
  488:  multijump *tmp234 0 0
        multilabel *label241
  489:  op div *tmp233 :_median.5:best :_median.5:count
        label *label232
  490:  assertequals 5 *tmp233 "median(1,5,5,5,5,5)"
  491:  set :_median.6:bestDif 10000000000
  492:  set :_median.6:best null
  493:  set :_median.6:count 1
  494:  setaddr *tmp256 *label269
  495:  jump *label291 always 0 0
        multilabel *label269
  496:  setaddr *tmp256 *label270
  497:  jump *label291 always 0 0
        multilabel *label270
  498:  setaddr *tmp256 *label271
  499:  jump *label291 always 0 0
        multilabel *label271
  500:  setaddr *tmp256 *label272
  501:  jump *label291 always 0 0
        multilabel *label272
  502:  setaddr *tmp256 *label273
  503:  jump *label291 always 0 0
        multilabel *label273
  504:  setaddr *tmp256 *label274
        label *label291
  505:  jump *label293 greaterThanEq 0 :_median.6:bestDif
  506:  set :_median.6:bestDif 0
  507:  set :_median.6:best 5
  508:  set :_median.6:count 1
  509:  multijump *tmp256 0 0
        label *label293
  510:  jump *label295 greaterThan 0 :_median.6:bestDif
  511:  op add :_median.6:best :_median.6:best 5
  512:  op add :_median.6:count :_median.6:count 1
        label *label295
  513:  multijump *tmp256 0 0
        multilabel *label274
  514:  op div *tmp255 :_median.6:best :_median.6:count
  515:  assertequals 5 *tmp255 "median(5,5,5,5,5,5)"
  516:  set :_median.7:bestDif 10000000000
  517:  set :_median.7:best null
  518:  set :_median.7:count 1
  519:  set :_median.7:i 1
  520:  setaddr *tmp278 *label302
  521:  jump *label299 always 0 0
        multilabel *label302
  522:  set :_median.7:i 2
  523:  setaddr *tmp278 *label303
  524:  jump *label299 always 0 0
        multilabel *label303
  525:  set :_median.7:i 3
  526:  setaddr *tmp278 *label304
  527:  jump *label299 always 0 0
        multilabel *label304
  528:  set :_median.7:i 4
  529:  setaddr *tmp278 *label305
  530:  jump *label299 always 0 0
        multilabel *label305
  531:  set :_median.7:i 5
  532:  setaddr *tmp278 *label306
  533:  jump *label299 always 0 0
        multilabel *label306
  534:  set :_median.7:i 6
  535:  setaddr *tmp278 *label307
  536:  jump *label299 always 0 0
        multilabel *label307
  537:  set :_median.7:i 7
  538:  setaddr *tmp278 *label308
  539:  jump *label299 always 0 0
        multilabel *label308
  540:  set :_median.7:i 8
  541:  setaddr *tmp278 *label309
  542:  jump *label299 always 0 0
        multilabel *label309
  543:  set :_median.7:i 9
  544:  setaddr *tmp278 *label310
        label *label299
  545:  set :_isMedian.7:lt 0
  546:  set :_isMedian.7:gt 0
  547:  jump *label630 greaterThanEq 1 :_median.7:i
  548:  set :_isMedian.7:lt 1
  549:  jump *label633 always 0 0
        label *label630
  550:  select :_isMedian.7:gt greaterThan 1 :_median.7:i 1 0
        label *label633
  551:  jump *label638 greaterThanEq 2 :_median.7:i
  552:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  553:  jump *label641 always 0 0
        label *label638
  554:  jump *label639 lessThanEq 2 :_median.7:i
  555:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label639
        label *label641
  556:  jump *label646 greaterThanEq 3 :_median.7:i
  557:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  558:  jump *label649 always 0 0
        label *label646
  559:  jump *label647 lessThanEq 3 :_median.7:i
  560:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label647
        label *label649
  561:  jump *label654 greaterThanEq 4 :_median.7:i
  562:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  563:  jump *label657 always 0 0
        label *label654
  564:  jump *label655 lessThanEq 4 :_median.7:i
  565:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label655
        label *label657
  566:  jump *label662 greaterThanEq 5 :_median.7:i
  567:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  568:  jump *label665 always 0 0
        label *label662
  569:  jump *label663 lessThanEq 5 :_median.7:i
  570:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label663
        label *label665
  571:  jump *label670 greaterThanEq 6 :_median.7:i
  572:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  573:  jump *label673 always 0 0
        label *label670
  574:  jump *label671 lessThanEq 6 :_median.7:i
  575:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label671
        label *label673
  576:  jump *label678 greaterThanEq 7 :_median.7:i
  577:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  578:  jump *label681 always 0 0
        label *label678
  579:  jump *label679 lessThanEq 7 :_median.7:i
  580:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label679
        label *label681
  581:  jump *label686 greaterThanEq 8 :_median.7:i
  582:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  583:  jump *label689 always 0 0
        label *label686
  584:  jump *label687 lessThanEq 8 :_median.7:i
  585:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label687
        label *label689
  586:  jump *label694 greaterThanEq 9 :_median.7:i
  587:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  588:  jump *label697 always 0 0
        label *label694
  589:  jump *label695 lessThanEq 9 :_median.7:i
  590:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label695
        label *label697
  591:  op sub *tmp285 :_isMedian.7:gt :_isMedian.7:lt
  592:  op abs :_isMedian.7:dif *tmp285 0
  593:  set *tmp290 false
  594:  op add *tmp287 :_isMedian.7:gt :_isMedian.7:lt
  595:  jump *label329 lessThan *tmp287 8
  596:  op equal *tmp290 :_isMedian.7:gt :_isMedian.7:lt
        label *label329
  597:  jump *label330 equal *tmp290 false
  598:  set *tmp277 :_median.7:i
  599:  jump *label298 always 0 0
        label *label330
  600:  jump *label332 greaterThanEq :_isMedian.7:dif :_median.7:bestDif
  601:  set :_median.7:bestDif :_isMedian.7:dif
  602:  set :_median.7:best :_median.7:i
  603:  set :_median.7:count 1
  604:  multijump *tmp278 0 0
        label *label332
  605:  jump *label334 greaterThan :_isMedian.7:dif :_median.7:bestDif
  606:  op add :_median.7:best :_median.7:best :_median.7:i
  607:  op add :_median.7:count :_median.7:count 1
        label *label334
  608:  multijump *tmp278 0 0
        multilabel *label310
  609:  op div *tmp277 :_median.7:best :_median.7:count
        label *label298
  610:  assertequals 5 *tmp277 "median(1,2,3,4,5,6,7,8,9)"
  611:  set :_median.8:bestDif 10000000000
  612:  set :_median.8:best null
  613:  set :_median.8:count 1
  614:  set :_median.8:i 9
  615:  setaddr *tmp300 *label341
  616:  jump *label338 always 0 0
        multilabel *label341
  617:  set :_median.8:i 8
  618:  setaddr *tmp300 *label342
  619:  jump *label338 always 0 0
        multilabel *label342
  620:  set :_median.8:i 7
  621:  setaddr *tmp300 *label343
  622:  jump *label338 always 0 0
        multilabel *label343
  623:  set :_median.8:i 6
  624:  setaddr *tmp300 *label344
  625:  jump *label338 always 0 0
        multilabel *label344
  626:  set :_median.8:i 5
  627:  setaddr *tmp300 *label345
  628:  jump *label338 always 0 0
        multilabel *label345
  629:  set :_median.8:i 4
  630:  setaddr *tmp300 *label346
  631:  jump *label338 always 0 0
        multilabel *label346
  632:  set :_median.8:i 3
  633:  setaddr *tmp300 *label347
  634:  jump *label338 always 0 0
        multilabel *label347
  635:  set :_median.8:i 2
  636:  setaddr *tmp300 *label348
  637:  jump *label338 always 0 0
        multilabel *label348
  638:  set :_median.8:i 1
  639:  setaddr *tmp300 *label349
        label *label338
  640:  set :_isMedian.8:lt 0
  641:  set :_isMedian.8:gt 0
  642:  jump *label703 greaterThanEq 9 :_median.8:i
  643:  set :_isMedian.8:lt 1
  644:  jump *label706 always 0 0
        label *label703
  645:  select :_isMedian.8:gt greaterThan 9 :_median.8:i 1 0
        label *label706
  646:  jump *label711 greaterThanEq 8 :_median.8:i
  647:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  648:  jump *label714 always 0 0
        label *label711
  649:  jump *label712 lessThanEq 8 :_median.8:i
  650:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label712
        label *label714
  651:  jump *label719 greaterThanEq 7 :_median.8:i
  652:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  653:  jump *label722 always 0 0
        label *label719
  654:  jump *label720 lessThanEq 7 :_median.8:i
  655:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label720
        label *label722
  656:  jump *label727 greaterThanEq 6 :_median.8:i
  657:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  658:  jump *label730 always 0 0
        label *label727
  659:  jump *label728 lessThanEq 6 :_median.8:i
  660:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label728
        label *label730
  661:  jump *label735 greaterThanEq 5 :_median.8:i
  662:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  663:  jump *label738 always 0 0
        label *label735
  664:  jump *label736 lessThanEq 5 :_median.8:i
  665:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label736
        label *label738
  666:  jump *label743 greaterThanEq 4 :_median.8:i
  667:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  668:  jump *label746 always 0 0
        label *label743
  669:  jump *label744 lessThanEq 4 :_median.8:i
  670:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label744
        label *label746
  671:  jump *label751 greaterThanEq 3 :_median.8:i
  672:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  673:  jump *label754 always 0 0
        label *label751
  674:  jump *label752 lessThanEq 3 :_median.8:i
  675:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label752
        label *label754
  676:  jump *label759 greaterThanEq 2 :_median.8:i
  677:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  678:  jump *label762 always 0 0
        label *label759
  679:  jump *label760 lessThanEq 2 :_median.8:i
  680:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label760
        label *label762
  681:  jump *label767 greaterThanEq 1 :_median.8:i
  682:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  683:  jump *label770 always 0 0
        label *label767
  684:  jump *label768 lessThanEq 1 :_median.8:i
  685:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label768
        label *label770
  686:  op sub *tmp307 :_isMedian.8:gt :_isMedian.8:lt
  687:  op abs :_isMedian.8:dif *tmp307 0
  688:  set *tmp312 false
  689:  op add *tmp309 :_isMedian.8:gt :_isMedian.8:lt
  690:  jump *label368 lessThan *tmp309 8
  691:  op equal *tmp312 :_isMedian.8:gt :_isMedian.8:lt
        label *label368
  692:  jump *label369 equal *tmp312 false
  693:  set *tmp299 :_median.8:i
  694:  jump *label337 always 0 0
        label *label369
  695:  jump *label371 greaterThanEq :_isMedian.8:dif :_median.8:bestDif
  696:  set :_median.8:bestDif :_isMedian.8:dif
  697:  set :_median.8:best :_median.8:i
  698:  set :_median.8:count 1
  699:  multijump *tmp300 0 0
        label *label371
  700:  jump *label373 greaterThan :_isMedian.8:dif :_median.8:bestDif
  701:  op add :_median.8:best :_median.8:best :_median.8:i
  702:  op add :_median.8:count :_median.8:count 1
        label *label373
  703:  multijump *tmp300 0 0
        multilabel *label349
  704:  op div *tmp299 :_median.8:best :_median.8:count
        label *label337
  705:  assertequals 5 *tmp299 "median(9,8,7,6,5,4,3,2,1)"
  706:  set :_median.9:bestDif 10000000000
  707:  set :_median.9:best null
  708:  set :_median.9:count 1
  709:  set :_median.9:i 1
  710:  setaddr *tmp322 *label380
  711:  jump *label377 always 0 0
        multilabel *label380
  712:  set :_median.9:i 3
  713:  setaddr *tmp322 *label381
  714:  jump *label377 always 0 0
        multilabel *label381
  715:  set :_median.9:i 5
  716:  setaddr *tmp322 *label382
  717:  jump *label377 always 0 0
        multilabel *label382
  718:  set :_median.9:i 7
  719:  setaddr *tmp322 *label383
  720:  jump *label377 always 0 0
        multilabel *label383
  721:  set :_median.9:i 9
  722:  setaddr *tmp322 *label384
  723:  jump *label377 always 0 0
        multilabel *label384
  724:  set :_median.9:i 2
  725:  setaddr *tmp322 *label385
  726:  jump *label377 always 0 0
        multilabel *label385
  727:  set :_median.9:i 4
  728:  setaddr *tmp322 *label386
  729:  jump *label377 always 0 0
        multilabel *label386
  730:  set :_median.9:i 6
  731:  setaddr *tmp322 *label387
  732:  jump *label377 always 0 0
        multilabel *label387
  733:  set :_median.9:i 8
  734:  setaddr *tmp322 *label388
        label *label377
  735:  set :_isMedian.9:lt 0
  736:  set :_isMedian.9:gt 0
  737:  set :_isMedian.9:i 1
  738:  setaddr *tmp324 *label393
  739:  jump *label390 always 0 0
        multilabel *label393
  740:  set :_isMedian.9:i 3
  741:  setaddr *tmp324 *label394
  742:  jump *label390 always 0 0
        multilabel *label394
  743:  set :_isMedian.9:i 5
  744:  setaddr *tmp324 *label395
  745:  jump *label390 always 0 0
        multilabel *label395
  746:  set :_isMedian.9:i 7
  747:  setaddr *tmp324 *label396
  748:  jump *label390 always 0 0
        multilabel *label396
  749:  set :_isMedian.9:i 9
  750:  setaddr *tmp324 *label397
  751:  jump *label390 always 0 0
        multilabel *label397
  752:  set :_isMedian.9:i 2
  753:  setaddr *tmp324 *label398
  754:  jump *label390 always 0 0
        multilabel *label398
  755:  set :_isMedian.9:i 4
  756:  setaddr *tmp324 *label399
  757:  jump *label390 always 0 0
        multilabel *label399
  758:  set :_isMedian.9:i 6
  759:  setaddr *tmp324 *label400
  760:  jump *label390 always 0 0
        multilabel *label400
  761:  set :_isMedian.9:i 8
  762:  setaddr *tmp324 *label401
        label *label390
  763:  jump *label402 greaterThanEq :_isMedian.9:i :_median.9:i
  764:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  765:  multijump *tmp324 0 0
        label *label402
  766:  jump *label404 lessThanEq :_isMedian.9:i :_median.9:i
  767:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label404
  768:  multijump *tmp324 0 0
        multilabel *label401
  769:  op sub *tmp329 :_isMedian.9:gt :_isMedian.9:lt
  770:  op abs :_isMedian.9:dif *tmp329 0
  771:  set *tmp334 false
  772:  op add *tmp331 :_isMedian.9:gt :_isMedian.9:lt
  773:  jump *label407 lessThan *tmp331 8
  774:  op equal *tmp334 :_isMedian.9:gt :_isMedian.9:lt
        label *label407
  775:  jump *label408 equal *tmp334 false
  776:  set *tmp321 :_median.9:i
  777:  jump *label376 always 0 0
        label *label408
  778:  jump *label410 greaterThanEq :_isMedian.9:dif :_median.9:bestDif
  779:  set :_median.9:bestDif :_isMedian.9:dif
  780:  set :_median.9:best :_median.9:i
  781:  set :_median.9:count 1
  782:  multijump *tmp322 0 0
        label *label410
  783:  jump *label412 greaterThan :_isMedian.9:dif :_median.9:bestDif
  784:  op add :_median.9:best :_median.9:best :_median.9:i
  785:  op add :_median.9:count :_median.9:count 1
        label *label412
  786:  multijump *tmp322 0 0
        multilabel *label388
  787:  op div *tmp321 :_median.9:best :_median.9:count
        label *label376
  788:  assertequals 5 *tmp321 "median(1,3,5,7,9,2,4,6,8)"
  789:  set :_median.10:bestDif 10000000000
  790:  set :_median.10:best null
  791:  set :_median.10:count 1
  792:  set :_median.10:i 7
  793:  setaddr *tmp344 *label419
  794:  jump *label416 always 0 0
        multilabel *label419
  795:  set :_median.10:i 4
  796:  setaddr *tmp344 *label420
  797:  jump *label416 always 0 0
        multilabel *label420
  798:  set :_median.10:i 2
  799:  setaddr *tmp344 *label421
  800:  jump *label416 always 0 0
        multilabel *label421
  801:  set :_median.10:i 8
  802:  setaddr *tmp344 *label422
  803:  jump *label416 always 0 0
        multilabel *label422
  804:  set :_median.10:i 1
  805:  setaddr *tmp344 *label423
  806:  jump *label416 always 0 0
        multilabel *label423
  807:  set :_median.10:i 5
  808:  setaddr *tmp344 *label424
  809:  jump *label416 always 0 0
        multilabel *label424
  810:  set :_median.10:i 6
  811:  setaddr *tmp344 *label425
  812:  jump *label416 always 0 0
        multilabel *label425
  813:  set :_median.10:i 9
  814:  setaddr *tmp344 *label426
  815:  jump *label416 always 0 0
        multilabel *label426
  816:  set :_median.10:i 3
  817:  setaddr *tmp344 *label427
        label *label416
  818:  set :_isMedian.10:lt 0
  819:  set :_isMedian.10:gt 0
  820:  set :_isMedian.10:i 7
  821:  setaddr *tmp346 *label432
  822:  jump *label429 always 0 0
        multilabel *label432
  823:  set :_isMedian.10:i 4
  824:  setaddr *tmp346 *label433
  825:  jump *label429 always 0 0
        multilabel *label433
  826:  set :_isMedian.10:i 2
  827:  setaddr *tmp346 *label434
  828:  jump *label429 always 0 0
        multilabel *label434
  829:  set :_isMedian.10:i 8
  830:  setaddr *tmp346 *label435
  831:  jump *label429 always 0 0
        multilabel *label435
  832:  set :_isMedian.10:i 1
  833:  setaddr *tmp346 *label436
  834:  jump *label429 always 0 0
        multilabel *label436
  835:  set :_isMedian.10:i 5
  836:  setaddr *tmp346 *label437
  837:  jump *label429 always 0 0
        multilabel *label437
  838:  set :_isMedian.10:i 6
  839:  setaddr *tmp346 *label438
  840:  jump *label429 always 0 0
        multilabel *label438
  841:  set :_isMedian.10:i 9
  842:  setaddr *tmp346 *label439
  843:  jump *label429 always 0 0
        multilabel *label439
  844:  set :_isMedian.10:i 3
  845:  setaddr *tmp346 *label440
        label *label429
  846:  jump *label441 greaterThanEq :_isMedian.10:i :_median.10:i
  847:  op add :_isMedian.10:lt :_isMedian.10:lt 1
  848:  multijump *tmp346 0 0
        label *label441
  849:  jump *label443 lessThanEq :_isMedian.10:i :_median.10:i
  850:  op add :_isMedian.10:gt :_isMedian.10:gt 1
        label *label443
  851:  multijump *tmp346 0 0
        multilabel *label440
  852:  op sub *tmp351 :_isMedian.10:gt :_isMedian.10:lt
  853:  op abs :_isMedian.10:dif *tmp351 0
  854:  set *tmp356 false
  855:  op add *tmp353 :_isMedian.10:gt :_isMedian.10:lt
  856:  jump *label446 lessThan *tmp353 8
  857:  op equal *tmp356 :_isMedian.10:gt :_isMedian.10:lt
        label *label446
  858:  jump *label447 equal *tmp356 false
  859:  set *tmp343 :_median.10:i
  860:  jump *label415 always 0 0
        label *label447
  861:  jump *label449 greaterThanEq :_isMedian.10:dif :_median.10:bestDif
  862:  set :_median.10:bestDif :_isMedian.10:dif
  863:  set :_median.10:best :_median.10:i
  864:  set :_median.10:count 1
  865:  multijump *tmp344 0 0
        label *label449
  866:  jump *label451 greaterThan :_isMedian.10:dif :_median.10:bestDif
  867:  op add :_median.10:best :_median.10:best :_median.10:i
  868:  op add :_median.10:count :_median.10:count 1
        label *label451
  869:  multijump *tmp344 0 0
        multilabel *label427
  870:  op div *tmp343 :_median.10:best :_median.10:count
        label *label415
  871:  assertequals 5 *tmp343 "median(7,4,2,8,1,5,6,9,3)"
  872:  set :_median.11:bestDif 10000000000
  873:  set :_median.11:best null
  874:  set :_median.11:count 1
  875:  set :_median.11:i 1
  876:  setaddr *tmp366 *label458
  877:  jump *label455 always 0 0
        multilabel *label458
  878:  set :_median.11:i 1
  879:  setaddr *tmp366 *label459
  880:  jump *label455 always 0 0
        multilabel *label459
  881:  set :_median.11:i 1
  882:  setaddr *tmp366 *label460
  883:  jump *label455 always 0 0
        multilabel *label460
  884:  set :_median.11:i 1
  885:  setaddr *tmp366 *label461
  886:  jump *label455 always 0 0
        multilabel *label461
  887:  set :_median.11:i 9
  888:  setaddr *tmp366 *label462
  889:  jump *label455 always 0 0
        multilabel *label462
  890:  set :_median.11:i 9
  891:  setaddr *tmp366 *label463
  892:  jump *label455 always 0 0
        multilabel *label463
  893:  set :_median.11:i 9
  894:  setaddr *tmp366 *label464
  895:  jump *label455 always 0 0
        multilabel *label464
  896:  set :_median.11:i 9
  897:  setaddr *tmp366 *label465
  898:  jump *label455 always 0 0
        multilabel *label465
  899:  set :_median.11:i 5
  900:  setaddr *tmp366 *label466
        label *label455
  901:  set :_isMedian.11:lt 0
  902:  set :_isMedian.11:gt 0
  903:  set :_isMedian.11:i 1
  904:  setaddr *tmp368 *label471
  905:  jump *label468 always 0 0
        multilabel *label471
  906:  set :_isMedian.11:i 1
  907:  setaddr *tmp368 *label472
  908:  jump *label468 always 0 0
        multilabel *label472
  909:  set :_isMedian.11:i 1
  910:  setaddr *tmp368 *label473
  911:  jump *label468 always 0 0
        multilabel *label473
  912:  set :_isMedian.11:i 1
  913:  setaddr *tmp368 *label474
  914:  jump *label468 always 0 0
        multilabel *label474
  915:  set :_isMedian.11:i 9
  916:  setaddr *tmp368 *label475
  917:  jump *label468 always 0 0
        multilabel *label475
  918:  set :_isMedian.11:i 9
  919:  setaddr *tmp368 *label476
  920:  jump *label468 always 0 0
        multilabel *label476
  921:  set :_isMedian.11:i 9
  922:  setaddr *tmp368 *label477
  923:  jump *label468 always 0 0
        multilabel *label477
  924:  set :_isMedian.11:i 9
  925:  setaddr *tmp368 *label478
  926:  jump *label468 always 0 0
        multilabel *label478
  927:  set :_isMedian.11:i 5
  928:  setaddr *tmp368 *label479
        label *label468
  929:  jump *label480 greaterThanEq :_isMedian.11:i :_median.11:i
  930:  op add :_isMedian.11:lt :_isMedian.11:lt 1
  931:  multijump *tmp368 0 0
        label *label480
  932:  jump *label482 lessThanEq :_isMedian.11:i :_median.11:i
  933:  op add :_isMedian.11:gt :_isMedian.11:gt 1
        label *label482
  934:  multijump *tmp368 0 0
        multilabel *label479
  935:  op sub *tmp373 :_isMedian.11:gt :_isMedian.11:lt
  936:  op abs :_isMedian.11:dif *tmp373 0
  937:  set *tmp378 false
  938:  op add *tmp375 :_isMedian.11:gt :_isMedian.11:lt
  939:  jump *label485 lessThan *tmp375 8
  940:  op equal *tmp378 :_isMedian.11:gt :_isMedian.11:lt
        label *label485
  941:  jump *label486 equal *tmp378 false
  942:  set *tmp365 :_median.11:i
  943:  jump *label454 always 0 0
        label *label486
  944:  jump *label488 greaterThanEq :_isMedian.11:dif :_median.11:bestDif
  945:  set :_median.11:bestDif :_isMedian.11:dif
  946:  set :_median.11:best :_median.11:i
  947:  set :_median.11:count 1
  948:  multijump *tmp366 0 0
        label *label488
  949:  jump *label490 greaterThan :_isMedian.11:dif :_median.11:bestDif
  950:  op add :_median.11:best :_median.11:best :_median.11:i
  951:  op add :_median.11:count :_median.11:count 1
        label *label490
  952:  multijump *tmp366 0 0
        multilabel *label466
  953:  op div *tmp365 :_median.11:best :_median.11:count
        label *label454
  954:  assertequals 5 *tmp365 "median(1,1,1,1,9,9,9,9,5)"
  955:  stop
  956:  end
        label *label1
  957:  op max :median:y2 :median:x1 :median:x2
  958:  op min :median:y3 :median:x3 :median:x4
  959:  jump *label498 greaterThan :median:y2 :median:y3
  960:  op add *tmp394 :median:y2 :median:y3
  961:  op div :median*retval *tmp394 2
  962:  return :median*retaddr
        label *label498
  963:  op min :median:y1 :median:x1 :median:x2
  964:  op max :median:y4 :median:x3 :median:x4
  965:  jump *label500 lessThan :median:y1 :median:y4
  966:  op add *tmp400 :median:y1 :median:y4
  967:  op div :median*retval *tmp400 2
  968:  return :median*retaddr
        label *label500
  969:  op max *tmp402 :median:y1 :median:y3
  970:  op min *tmp403 :median:y2 :median:y4
  971:  op add *tmp404 *tmp402 *tmp403
  972:  op div :median*retval *tmp404 2
  973:  return :median*retaddr
        label *label2
  974:  op min :median.1:y1 :median.1:x1 :median.1:x2
  975:  op max :median.1:y2 :median.1:x1 :median.1:x2
  976:  op min :median.1:y4 :median.1:x4 :median.1:x5
  977:  op max :median.1:y5 :median.1:x4 :median.1:x5
  978:  jump *label503 greaterThanEq :median.1:y4 :median.1:y1
  979:  set :median.1:y4 :median.1:y1
  980:  set :_swap.1:t :median.1:y2
  981:  set :median.1:y2 :median.1:y5
  982:  set :median.1:y5 :_swap.1:t
        label *label503
  983:  jump *label507 lessThanEq :median.1:x3 :median.1:y2
  984:  op min :median.1*retval :median.1:y2 :median.1:y5
  985:  jump *label508 greaterThanEq :median.1:y2 :median.1:y4
  986:  op min :median.1*retval :median.1:x3 :median.1:y4
  987:  return :median.1*retaddr
        label *label507
  988:  op min :median.1*retval :median.1:y2 :median.1:y4
  989:  jump *label512 lessThanEq :median.1:x3 :median.1:y4
  990:  op min :median.1*retval :median.1:x3 :median.1:y5
        label *label512
        label *label508
  991:  return :median.1*retaddr


stop instruction encountered, dumping variable values:
*tmp123: 1.0
*tmp124: 152.0
*tmp145: 1.0
*tmp146: 223.0
*tmp153: -5.0
*tmp155: 5.0
*tmp158: 0.0
*tmp167: 1.0
*tmp168: 294.0
*tmp175: -4.0
*tmp177: 4.0
*tmp180: 0.0
*tmp189: 3.0
*tmp190: 359.0
*tmp192: 341.0
*tmp197: -3.0
*tmp199: 3.0
*tmp202: 0.0
*tmp211: 5.0
*tmp212: 424.0
*tmp214: 406.0
*tmp219: -2.0
*tmp221: 2.0
*tmp224: 0.0
*tmp233: 5.0
*tmp234: 489.0
*tmp236: 471.0
*tmp241: -1.0
*tmp243: 1.0
*tmp246: 0.0
*tmp255: 5.0
*tmp256: 514.0
*tmp277: 5.0
*tmp278: 534.0
*tmp285: 0.0
*tmp287: 8.0
*tmp290: 1.0
*tmp299: 5.0
*tmp300: 629.0
*tmp307: 0.0
*tmp309: 8.0
*tmp312: 1.0
*tmp321: 5.0
*tmp322: 718.0
*tmp324: 769.0
*tmp329: 0.0
*tmp331: 8.0
*tmp334: 1.0
*tmp343: 5.0
*tmp344: 810.0
*tmp346: 852.0
*tmp351: 0.0
*tmp353: 8.0
*tmp356: 1.0
*tmp365: 5.0
*tmp366: 953.0
*tmp368: 935.0
*tmp373: 0.0
*tmp375: 8.0
*tmp378: 1.0
*tmp394: 10.0
*tmp400: 10.0
*tmp402: 4.0
*tmp403: 6.0
*tmp404: 10.0
:_isMedian.10:dif: 0.0
:_isMedian.10:gt: 4.0
:_isMedian.10:i: 3.0
:_isMedian.10:lt: 4.0
:_isMedian.11:dif: 0.0
:_isMedian.11:gt: 4.0
:_isMedian.11:i: 5.0
:_isMedian.11:lt: 4.0
:_isMedian.1:dif: 5.0
:_isMedian.1:gt: 0.0
:_isMedian.1:lt: 5.0
:_isMedian.2:dif: 4.0
:_isMedian.2:gt: 0.0
:_isMedian.2:lt: 4.0
:_isMedian.3:dif: 3.0
:_isMedian.3:gt: 0.0
:_isMedian.3:i: 5.0
:_isMedian.3:lt: 3.0
:_isMedian.4:dif: 2.0
:_isMedian.4:gt: 0.0
:_isMedian.4:i: 5.0
:_isMedian.4:lt: 2.0
:_isMedian.5:dif: 1.0
:_isMedian.5:gt: 0.0
:_isMedian.5:i: 5.0
:_isMedian.5:lt: 1.0
:_isMedian.7:dif: 0.0
:_isMedian.7:gt: 4.0
:_isMedian.7:lt: 4.0
:_isMedian.8:dif: 0.0
:_isMedian.8:gt: 4.0
:_isMedian.8:lt: 4.0
:_isMedian.9:dif: 0.0
:_isMedian.9:gt: 4.0
:_isMedian.9:i: 8.0
:_isMedian.9:lt: 4.0
:_median.10:best: 4.0
:_median.10:bestDif: 2.0
:_median.10:count: 1.0
:_median.10:i: 5.0
:_median.11:best: 40.0
:_median.11:bestDif: 5.0
:_median.11:count: 8.0
:_median.11:i: 5.0
:_median.1:best: 5.0
:_median.1:bestDif: 1.0
:_median.1:count: 5.0
:_median.1:i: 5.0
:_median.2:best: 4.0
:_median.2:bestDif: 2.0
:_median.2:count: 4.0
:_median.2:i: 5.0
:_median.3:best: 18.0
:_median.3:bestDif: 3.0
:_median.3:count: 6.0
:_median.3:i: 5.0
:_median.4:best: 20.0
:_median.4:bestDif: 2.0
:_median.4:count: 4.0
:_median.4:i: 5.0
:_median.5:best: 25.0
:_median.5:bestDif: 1.0
:_median.5:count: 5.0
:_median.5:i: 5.0
:_median.6:best: 30.0
:_median.6:bestDif: 0.0
:_median.6:count: 6.0
:_median.7:best: 4.0
:_median.7:bestDif: 2.0
:_median.7:count: 1.0
:_median.7:i: 5.0
:_median.8:best: 6.0
:_median.8:bestDif: 2.0
:_median.8:count: 1.0
:_median.8:i: 5.0
:_median.9:best: 3.0
:_median.9:bestDif: 4.0
:_median.9:count: 1.0
:_median.9:i: 5.0
:_median:best: 6.0
:_median:bestDif: 0.0
:_median:count: 6.0
:_swap.1:t: 5.0
:integer.1:result: -5.0
:integer.2:result: 100.0
:integer:result: 0.0
:median*retaddr: 86.0
:median*retval: 5.0
:median.1*retaddr: 128.0
:median.1*retval: 5.0
:median.1:x1: 5.0
:median.1:x2: 5.0
:median.1:x3: 5.0
:median.1:x4: 5.0
:median.1:x5: 5.0
:median.1:y1: 5.0
:median.1:y2: 5.0
:median.1:y4: 5.0
:median.1:y5: 5.0
:median:x1: 6.0
:median:x2: 2.0
:median:x3: 8.0
:median:x4: 4.0
:median:y1: 2.0
:median:y2: 6.0
:median:y3: 4.0
:median:y4: 8.0
:nullToZero.1:result: 1.0
:nullToZero:result: 0.0
@counter: 956.0