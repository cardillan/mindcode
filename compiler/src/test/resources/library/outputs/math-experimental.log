  1654 instructions before optimizations.
    91 instructions eliminated by Temp Variables Elimination (2 iterations).
   124 instructions eliminated by Dead Code Elimination (5 iterations).
    28 instructions modified by Jump Normalization (7 iterations).
    68 instructions eliminated by Jump Optimization (7 iterations).
    91 instructions eliminated by Single Step Elimination (3 passes, 12 iterations).
     4 instructions modified by Expression Optimization (5 iterations).
    12 instructions eliminated by If Expression Optimization (2 passes, 5 iterations).
   314 instructions eliminated by Data Flow Optimization (7 passes, 27 iterations).
    44 instructions added by Loop Unrolling (11 iterations).
     6 loops unrolled by Loop Unrolling.
    34 instructions updated by JumpThreading.
     5 instructions eliminated by Unreachable Code Elimination (2 iterations).
   993 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:121:5                         size    -5, benefit        7.0, efficiency   Infinity (-8 instructions)
    Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +5, benefit       10.5, efficiency      2.100
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 15:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 16:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity (-9 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +5, benefit       10.5, efficiency      2.100
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 15:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 16:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +5, benefit       10.5, efficiency      2.100
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 15:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 16:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +5, benefit       10.5, efficiency      2.100
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 15:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 16:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +5, benefit       10.5, efficiency      2.100
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 14:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 15:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 16:17                           size    +3, benefit        3.5, efficiency      1.167
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 2: speed optimization selection (cost limit 24):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
    Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
    Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
    Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
    Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 11):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
    Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
    Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
    Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 3: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 4: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 5: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'signInexact' defined at *math:47:1          size    +3, benefit       10.5, efficiency      3.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 14:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 15:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 16:17                           size    +2, benefit        3.5, efficiency      1.750
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  set :signInexact:x 0
   10:  setaddr :signInexact*retaddr *label7
   11:  call *label0 *invalid :signInexact*retval
        label *label7
   12:  assertequals 0 :signInexact*retval "signInexact(0)"
   13:  set :signInexact:x 0.0000001
   14:  setaddr :signInexact*retaddr *label8
   15:  call *label0 *invalid :signInexact*retval
        label *label8
   16:  assertequals 0 :signInexact*retval "signInexact(1e-7)"
   17:  set :signInexact:x 0.00001
   18:  setaddr :signInexact*retaddr *label9
   19:  call *label0 *invalid :signInexact*retval
        label *label9
   20:  assertequals 1 :signInexact*retval "signInexact(1e-5)"
   21:  assertequals -1 -1 "sign(-5)"
   22:  assertequals 0 0 "sign(0)"
   23:  assertequals 1 1 "sign(1e-7)"
   24:  assertequals -1 -1 "sign(-1e-7)"
   25:  assertequals true true "isZero(0)"
   26:  assertequals false false "isZero(1e-50)"
   27:  assertequals false false "isZero(-1e-50)"
   28:  assertequals false false "isZero(0.01,0.01)"
   29:  op add :nullToZero:result null 0
   30:  assertequals 0 :nullToZero:result "nullToZero(null)"
   31:  op add :nullToZero.1:result 1 0
   32:  assertequals 1 :nullToZero.1:result "nullToZero(1)"
   33:  assertequals 0 false "boolean(0)"
   34:  assertequals 1 true "boolean(100)"
   35:  assertequals 1 true "boolean(-100)"
   36:  assertequals 1 true "boolean(-0.001)"
   37:  assertequals 0 false "boolean(0.0000001)"
   38:  op or :integer:result 0.9 0
   39:  assertequals 0 :integer:result "integer(0.9)"
   40:  op or :integer.1:result -5.9 0
   41:  assertequals -5 :integer.1:result "integer(-5.9)"
   42:  op or :integer.2:result 100 0
   43:  assertequals 100 :integer.2:result "integer(100)"
   44:  assertequals 1 1 "sum(1)"
   45:  assertequals 10 10 "sum(1,2,3,4)"
   46:  assertequals 1 1 "avg(1)"
   47:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   48:  assertequals 2 2 "logn(25, 5)"
   49:  assertequals 4 4 "logn(10000, 10)"
   50:  assertequals 4 4 "log2(16)"
   51:  assertequals 30 30 "log2(1 << 30)"
   52:  assertequals 1 1 "lerp(1, 10, 0)"
   53:  assertequals 10 10 "lerp(1, 10, 1)"
   54:  assertequals 5.5 5.5 "lerp(1, 10, 0.5)"
   55:  assertequals 1 1 "median(1)"
   56:  assertequals 3 3 "median(2,4)"
   57:  assertequals 3 3 "median(1,3,5)"
   58:  assertequals 1 1 "median(1,1,1)"
   59:  assertequals 1 1 "median(1,1,3)"
   60:  assertequals 3 3 "median(1,3,3)"
   61:  set :median:x1 2
   62:  set :median:x2 4
   63:  set :median:x3 6
   64:  set :median:x4 8
   65:  setaddr :median*retaddr *label53
   66:  call *label1 *invalid :median*retval
        label *label53
   67:  assertequals 5 :median*retval "median(2,4,6,8)"
   68:  set :median:x1 8
   69:  set :median:x2 6
   70:  set :median:x3 4
   71:  set :median:x4 2
   72:  setaddr :median*retaddr *label54
   73:  call *label1 *invalid :median*retval
        label *label54
   74:  assertequals 5 :median*retval "median(8,6,4,2)"
   75:  set :median:x1 4
   76:  set :median:x2 8
   77:  set :median:x3 2
   78:  set :median:x4 6
   79:  setaddr :median*retaddr *label55
   80:  call *label1 *invalid :median*retval
        label *label55
   81:  assertequals 5 :median*retval "median(4,8,2,6)"
   82:  set :median:x1 2
   83:  set :median:x2 6
   84:  set :median:x3 4
   85:  set :median:x4 8
   86:  setaddr :median*retaddr *label56
   87:  call *label1 *invalid :median*retval
        label *label56
   88:  assertequals 5 :median*retval "median(2,6,4,8)"
   89:  set :median:x1 6
   90:  set :median:x2 2
   91:  set :median:x3 8
   92:  set :median:x4 4
   93:  setaddr :median*retaddr *label57
   94:  call *label1 *invalid :median*retval
        label *label57
   95:  assertequals 5 :median*retval "median(6,2,8,4)"
   96:  set :median.1:x1 1
   97:  set :median.1:x2 2
   98:  set :median.1:x3 3
   99:  set :median.1:x4 4
  100:  set :median.1:x5 5
  101:  setaddr :median.1*retaddr *label58
  102:  call *label2 *invalid :median.1*retval
        label *label58
  103:  assertequals 3 :median.1*retval "median(1,2,3,4,5)"
  104:  set :median.1:x1 5
  105:  set :median.1:x2 4
  106:  set :median.1:x4 2
  107:  set :median.1:x5 1
  108:  setaddr :median.1*retaddr *label59
  109:  call *label2 *invalid :median.1*retval
        label *label59
  110:  assertequals 3 :median.1*retval "median(5,4,3,2,1)"
  111:  set :median.1:x1 1
  112:  set :median.1:x2 1
  113:  set :median.1:x3 1
  114:  set :median.1:x4 1
  115:  setaddr :median.1*retaddr *label60
  116:  call *label2 *invalid :median.1*retval
        label *label60
  117:  assertequals 1 :median.1*retval "median(1,1,1,1,1)"
  118:  set :median.1:x5 5
  119:  setaddr :median.1*retaddr *label61
  120:  call *label2 *invalid :median.1*retval
        label *label61
  121:  assertequals 1 :median.1*retval "median(1,1,1,1,5)"
  122:  set :median.1:x4 5
  123:  setaddr :median.1*retaddr *label62
  124:  call *label2 *invalid :median.1*retval
        label *label62
  125:  assertequals 1 :median.1*retval "median(1,1,1,5,5)"
  126:  set :median.1:x3 5
  127:  setaddr :median.1*retaddr *label63
  128:  call *label2 *invalid :median.1*retval
        label *label63
  129:  assertequals 5 :median.1*retval "median(1,1,5,5,5)"
  130:  set :median.1:x2 5
  131:  setaddr :median.1*retaddr *label64
  132:  call *label2 *invalid :median.1*retval
        label *label64
  133:  assertequals 5 :median.1*retval "median(1,5,5,5,5)"
  134:  set :median.1:x1 5
  135:  setaddr :median.1*retaddr *label65
  136:  call *label2 *invalid :median.1*retval
        label *label65
  137:  assertequals 5 :median.1*retval "median(5,5,5,5,5)"
  138:  set :_median:bestDif 10000000000
  139:  set :_median:best null
  140:  set :_median:count 1
  141:  setaddr *tmp124 *label71
  142:  jump *label93 always 0 0
        multilabel *label71
  143:  setaddr *tmp124 *label72
  144:  jump *label93 always 0 0
        multilabel *label72
  145:  setaddr *tmp124 *label73
  146:  jump *label93 always 0 0
        multilabel *label73
  147:  setaddr *tmp124 *label74
  148:  jump *label93 always 0 0
        multilabel *label74
  149:  setaddr *tmp124 *label75
  150:  jump *label93 always 0 0
        multilabel *label75
  151:  setaddr *tmp124 *label76
        label *label93
  152:  jump *label95 greaterThanEq 0 :_median:bestDif
  153:  set :_median:bestDif 0
  154:  set :_median:best 1
  155:  set :_median:count 1
  156:  multijump *tmp124 0 0
        label *label95
  157:  jump *label97 greaterThan 0 :_median:bestDif
  158:  op add :_median:best :_median:best 1
  159:  op add :_median:count :_median:count 1
        label *label97
  160:  multijump *tmp124 0 0
        multilabel *label76
  161:  op div *tmp123 :_median:best :_median:count
  162:  assertequals 1 *tmp123 "median(1,1,1,1,1,1)"
  163:  set :_median.1:bestDif 10000000000
  164:  set :_median.1:best null
  165:  set :_median.1:count 1
  166:  set :_median.1:i 1
  167:  setaddr *tmp146 *label104
  168:  jump *label101 always 0 0
        multilabel *label104
  169:  set :_median.1:i 1
  170:  setaddr *tmp146 *label105
  171:  jump *label101 always 0 0
        multilabel *label105
  172:  set :_median.1:i 1
  173:  setaddr *tmp146 *label106
  174:  jump *label101 always 0 0
        multilabel *label106
  175:  set :_median.1:i 1
  176:  setaddr *tmp146 *label107
  177:  jump *label101 always 0 0
        multilabel *label107
  178:  set :_median.1:i 1
  179:  setaddr *tmp146 *label108
  180:  jump *label101 always 0 0
        multilabel *label108
  181:  set :_median.1:i 5
  182:  setaddr *tmp146 *label109
        label *label101
  183:  set :_isMedian.1:lt 0
  184:  set :_isMedian.1:gt 0
  185:  set :_isMedian.1:i 1
  186:  setaddr *tmp148 *label114
  187:  jump *label111 always 0 0
        multilabel *label114
  188:  set :_isMedian.1:i 1
  189:  setaddr *tmp148 *label115
  190:  jump *label111 always 0 0
        multilabel *label115
  191:  set :_isMedian.1:i 1
  192:  setaddr *tmp148 *label116
  193:  jump *label111 always 0 0
        multilabel *label116
  194:  set :_isMedian.1:i 1
  195:  setaddr *tmp148 *label117
  196:  jump *label111 always 0 0
        multilabel *label117
  197:  set :_isMedian.1:i 1
  198:  setaddr *tmp148 *label118
  199:  jump *label111 always 0 0
        multilabel *label118
  200:  set :_isMedian.1:i 5
  201:  setaddr *tmp148 *label119
        label *label111
  202:  jump *label120 greaterThanEq :_isMedian.1:i :_median.1:i
  203:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  204:  multijump *tmp148 0 0
        label *label120
  205:  jump *label122 lessThanEq :_isMedian.1:i :_median.1:i
  206:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label122
  207:  multijump *tmp148 0 0
        multilabel *label119
  208:  op sub *tmp153 :_isMedian.1:gt :_isMedian.1:lt
  209:  op abs :_isMedian.1:dif *tmp153 0
  210:  set *tmp158 false
  211:  op add *tmp155 :_isMedian.1:gt :_isMedian.1:lt
  212:  jump *label125 lessThan *tmp155 5
  213:  op equal *tmp158 :_isMedian.1:gt :_isMedian.1:lt
        label *label125
  214:  jump *label126 equal *tmp158 false
  215:  set *tmp145 :_median.1:i
  216:  jump *label100 always 0 0
        label *label126
  217:  jump *label128 greaterThanEq :_isMedian.1:dif :_median.1:bestDif
  218:  set :_median.1:bestDif :_isMedian.1:dif
  219:  set :_median.1:best :_median.1:i
  220:  set :_median.1:count 1
  221:  multijump *tmp146 0 0
        label *label128
  222:  jump *label130 greaterThan :_isMedian.1:dif :_median.1:bestDif
  223:  op add :_median.1:best :_median.1:best :_median.1:i
  224:  op add :_median.1:count :_median.1:count 1
        label *label130
  225:  multijump *tmp146 0 0
        multilabel *label109
  226:  op div *tmp145 :_median.1:best :_median.1:count
        label *label100
  227:  assertequals 1 *tmp145 "median(1,1,1,1,1,5)"
  228:  set :_median.2:bestDif 10000000000
  229:  set :_median.2:best null
  230:  set :_median.2:count 1
  231:  set :_median.2:i 1
  232:  setaddr *tmp168 *label137
  233:  jump *label134 always 0 0
        multilabel *label137
  234:  set :_median.2:i 1
  235:  setaddr *tmp168 *label138
  236:  jump *label134 always 0 0
        multilabel *label138
  237:  set :_median.2:i 1
  238:  setaddr *tmp168 *label139
  239:  jump *label134 always 0 0
        multilabel *label139
  240:  set :_median.2:i 1
  241:  setaddr *tmp168 *label140
  242:  jump *label134 always 0 0
        multilabel *label140
  243:  set :_median.2:i 5
  244:  setaddr *tmp168 *label141
  245:  jump *label134 always 0 0
        multilabel *label141
  246:  set :_median.2:i 5
  247:  setaddr *tmp168 *label142
        label *label134
  248:  set :_isMedian.2:lt 0
  249:  set :_isMedian.2:gt 0
  250:  set :_isMedian.2:i 1
  251:  setaddr *tmp170 *label147
  252:  jump *label144 always 0 0
        multilabel *label147
  253:  set :_isMedian.2:i 1
  254:  setaddr *tmp170 *label148
  255:  jump *label144 always 0 0
        multilabel *label148
  256:  set :_isMedian.2:i 1
  257:  setaddr *tmp170 *label149
  258:  jump *label144 always 0 0
        multilabel *label149
  259:  set :_isMedian.2:i 1
  260:  setaddr *tmp170 *label150
  261:  jump *label144 always 0 0
        multilabel *label150
  262:  set :_isMedian.2:i 5
  263:  setaddr *tmp170 *label151
  264:  jump *label144 always 0 0
        multilabel *label151
  265:  set :_isMedian.2:i 5
  266:  setaddr *tmp170 *label152
        label *label144
  267:  jump *label153 greaterThanEq :_isMedian.2:i :_median.2:i
  268:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  269:  multijump *tmp170 0 0
        label *label153
  270:  jump *label155 lessThanEq :_isMedian.2:i :_median.2:i
  271:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label155
  272:  multijump *tmp170 0 0
        multilabel *label152
  273:  op sub *tmp175 :_isMedian.2:gt :_isMedian.2:lt
  274:  op abs :_isMedian.2:dif *tmp175 0
  275:  set *tmp180 false
  276:  op add *tmp177 :_isMedian.2:gt :_isMedian.2:lt
  277:  jump *label158 lessThan *tmp177 5
  278:  op equal *tmp180 :_isMedian.2:gt :_isMedian.2:lt
        label *label158
  279:  jump *label159 equal *tmp180 false
  280:  set *tmp167 :_median.2:i
  281:  jump *label133 always 0 0
        label *label159
  282:  jump *label161 greaterThanEq :_isMedian.2:dif :_median.2:bestDif
  283:  set :_median.2:bestDif :_isMedian.2:dif
  284:  set :_median.2:best :_median.2:i
  285:  set :_median.2:count 1
  286:  multijump *tmp168 0 0
        label *label161
  287:  jump *label163 greaterThan :_isMedian.2:dif :_median.2:bestDif
  288:  op add :_median.2:best :_median.2:best :_median.2:i
  289:  op add :_median.2:count :_median.2:count 1
        label *label163
  290:  multijump *tmp168 0 0
        multilabel *label142
  291:  op div *tmp167 :_median.2:best :_median.2:count
        label *label133
  292:  assertequals 1 *tmp167 "median(1,1,1,1,5,5)"
  293:  set :_median.3:bestDif 10000000000
  294:  set :_median.3:best null
  295:  set :_median.3:count 1
  296:  set :_median.3:i 1
  297:  setaddr *tmp190 *label170
  298:  jump *label167 always 0 0
        multilabel *label170
  299:  set :_median.3:i 1
  300:  setaddr *tmp190 *label171
  301:  jump *label167 always 0 0
        multilabel *label171
  302:  set :_median.3:i 1
  303:  setaddr *tmp190 *label172
  304:  jump *label167 always 0 0
        multilabel *label172
  305:  set :_median.3:i 5
  306:  setaddr *tmp190 *label173
  307:  jump *label167 always 0 0
        multilabel *label173
  308:  set :_median.3:i 5
  309:  setaddr *tmp190 *label174
  310:  jump *label167 always 0 0
        multilabel *label174
  311:  set :_median.3:i 5
  312:  setaddr *tmp190 *label175
        label *label167
  313:  set :_isMedian.3:lt 0
  314:  set :_isMedian.3:gt 0
  315:  set :_isMedian.3:i 1
  316:  setaddr *tmp192 *label180
  317:  jump *label177 always 0 0
        multilabel *label180
  318:  set :_isMedian.3:i 1
  319:  setaddr *tmp192 *label181
  320:  jump *label177 always 0 0
        multilabel *label181
  321:  set :_isMedian.3:i 1
  322:  setaddr *tmp192 *label182
  323:  jump *label177 always 0 0
        multilabel *label182
  324:  set :_isMedian.3:i 5
  325:  setaddr *tmp192 *label183
  326:  jump *label177 always 0 0
        multilabel *label183
  327:  set :_isMedian.3:i 5
  328:  setaddr *tmp192 *label184
  329:  jump *label177 always 0 0
        multilabel *label184
  330:  set :_isMedian.3:i 5
  331:  setaddr *tmp192 *label185
        label *label177
  332:  jump *label186 greaterThanEq :_isMedian.3:i :_median.3:i
  333:  op add :_isMedian.3:lt :_isMedian.3:lt 1
  334:  multijump *tmp192 0 0
        label *label186
  335:  jump *label188 lessThanEq :_isMedian.3:i :_median.3:i
  336:  op add :_isMedian.3:gt :_isMedian.3:gt 1
        label *label188
  337:  multijump *tmp192 0 0
        multilabel *label185
  338:  op sub *tmp197 :_isMedian.3:gt :_isMedian.3:lt
  339:  op abs :_isMedian.3:dif *tmp197 0
  340:  set *tmp202 false
  341:  op add *tmp199 :_isMedian.3:gt :_isMedian.3:lt
  342:  jump *label191 lessThan *tmp199 5
  343:  op equal *tmp202 :_isMedian.3:gt :_isMedian.3:lt
        label *label191
  344:  jump *label192 equal *tmp202 false
  345:  set *tmp189 :_median.3:i
  346:  jump *label166 always 0 0
        label *label192
  347:  jump *label194 greaterThanEq :_isMedian.3:dif :_median.3:bestDif
  348:  set :_median.3:bestDif :_isMedian.3:dif
  349:  set :_median.3:best :_median.3:i
  350:  set :_median.3:count 1
  351:  multijump *tmp190 0 0
        label *label194
  352:  jump *label196 greaterThan :_isMedian.3:dif :_median.3:bestDif
  353:  op add :_median.3:best :_median.3:best :_median.3:i
  354:  op add :_median.3:count :_median.3:count 1
        label *label196
  355:  multijump *tmp190 0 0
        multilabel *label175
  356:  op div *tmp189 :_median.3:best :_median.3:count
        label *label166
  357:  assertequals 3 *tmp189 "median(1,1,1,5,5,5)"
  358:  set :_median.4:bestDif 10000000000
  359:  set :_median.4:best null
  360:  set :_median.4:count 1
  361:  set :_median.4:i 1
  362:  setaddr *tmp212 *label203
  363:  jump *label200 always 0 0
        multilabel *label203
  364:  set :_median.4:i 1
  365:  setaddr *tmp212 *label204
  366:  jump *label200 always 0 0
        multilabel *label204
  367:  set :_median.4:i 5
  368:  setaddr *tmp212 *label205
  369:  jump *label200 always 0 0
        multilabel *label205
  370:  set :_median.4:i 5
  371:  setaddr *tmp212 *label206
  372:  jump *label200 always 0 0
        multilabel *label206
  373:  set :_median.4:i 5
  374:  setaddr *tmp212 *label207
  375:  jump *label200 always 0 0
        multilabel *label207
  376:  set :_median.4:i 5
  377:  setaddr *tmp212 *label208
        label *label200
  378:  set :_isMedian.4:lt 0
  379:  set :_isMedian.4:gt 0
  380:  set :_isMedian.4:i 1
  381:  setaddr *tmp214 *label213
  382:  jump *label210 always 0 0
        multilabel *label213
  383:  set :_isMedian.4:i 1
  384:  setaddr *tmp214 *label214
  385:  jump *label210 always 0 0
        multilabel *label214
  386:  set :_isMedian.4:i 5
  387:  setaddr *tmp214 *label215
  388:  jump *label210 always 0 0
        multilabel *label215
  389:  set :_isMedian.4:i 5
  390:  setaddr *tmp214 *label216
  391:  jump *label210 always 0 0
        multilabel *label216
  392:  set :_isMedian.4:i 5
  393:  setaddr *tmp214 *label217
  394:  jump *label210 always 0 0
        multilabel *label217
  395:  set :_isMedian.4:i 5
  396:  setaddr *tmp214 *label218
        label *label210
  397:  jump *label219 greaterThanEq :_isMedian.4:i :_median.4:i
  398:  op add :_isMedian.4:lt :_isMedian.4:lt 1
  399:  multijump *tmp214 0 0
        label *label219
  400:  jump *label221 lessThanEq :_isMedian.4:i :_median.4:i
  401:  op add :_isMedian.4:gt :_isMedian.4:gt 1
        label *label221
  402:  multijump *tmp214 0 0
        multilabel *label218
  403:  op sub *tmp219 :_isMedian.4:gt :_isMedian.4:lt
  404:  op abs :_isMedian.4:dif *tmp219 0
  405:  set *tmp224 false
  406:  op add *tmp221 :_isMedian.4:gt :_isMedian.4:lt
  407:  jump *label224 lessThan *tmp221 5
  408:  op equal *tmp224 :_isMedian.4:gt :_isMedian.4:lt
        label *label224
  409:  jump *label225 equal *tmp224 false
  410:  set *tmp211 :_median.4:i
  411:  jump *label199 always 0 0
        label *label225
  412:  jump *label227 greaterThanEq :_isMedian.4:dif :_median.4:bestDif
  413:  set :_median.4:bestDif :_isMedian.4:dif
  414:  set :_median.4:best :_median.4:i
  415:  set :_median.4:count 1
  416:  multijump *tmp212 0 0
        label *label227
  417:  jump *label229 greaterThan :_isMedian.4:dif :_median.4:bestDif
  418:  op add :_median.4:best :_median.4:best :_median.4:i
  419:  op add :_median.4:count :_median.4:count 1
        label *label229
  420:  multijump *tmp212 0 0
        multilabel *label208
  421:  op div *tmp211 :_median.4:best :_median.4:count
        label *label199
  422:  assertequals 5 *tmp211 "median(1,1,5,5,5,5)"
  423:  set :_median.5:bestDif 10000000000
  424:  set :_median.5:best null
  425:  set :_median.5:count 1
  426:  set :_median.5:i 1
  427:  setaddr *tmp234 *label236
  428:  jump *label233 always 0 0
        multilabel *label236
  429:  set :_median.5:i 5
  430:  setaddr *tmp234 *label237
  431:  jump *label233 always 0 0
        multilabel *label237
  432:  set :_median.5:i 5
  433:  setaddr *tmp234 *label238
  434:  jump *label233 always 0 0
        multilabel *label238
  435:  set :_median.5:i 5
  436:  setaddr *tmp234 *label239
  437:  jump *label233 always 0 0
        multilabel *label239
  438:  set :_median.5:i 5
  439:  setaddr *tmp234 *label240
  440:  jump *label233 always 0 0
        multilabel *label240
  441:  set :_median.5:i 5
  442:  setaddr *tmp234 *label241
        label *label233
  443:  set :_isMedian.5:lt 0
  444:  set :_isMedian.5:gt 0
  445:  set :_isMedian.5:i 1
  446:  setaddr *tmp236 *label246
  447:  jump *label243 always 0 0
        multilabel *label246
  448:  set :_isMedian.5:i 5
  449:  setaddr *tmp236 *label247
  450:  jump *label243 always 0 0
        multilabel *label247
  451:  set :_isMedian.5:i 5
  452:  setaddr *tmp236 *label248
  453:  jump *label243 always 0 0
        multilabel *label248
  454:  set :_isMedian.5:i 5
  455:  setaddr *tmp236 *label249
  456:  jump *label243 always 0 0
        multilabel *label249
  457:  set :_isMedian.5:i 5
  458:  setaddr *tmp236 *label250
  459:  jump *label243 always 0 0
        multilabel *label250
  460:  set :_isMedian.5:i 5
  461:  setaddr *tmp236 *label251
        label *label243
  462:  jump *label252 greaterThanEq :_isMedian.5:i :_median.5:i
  463:  op add :_isMedian.5:lt :_isMedian.5:lt 1
  464:  multijump *tmp236 0 0
        label *label252
  465:  jump *label254 lessThanEq :_isMedian.5:i :_median.5:i
  466:  op add :_isMedian.5:gt :_isMedian.5:gt 1
        label *label254
  467:  multijump *tmp236 0 0
        multilabel *label251
  468:  op sub *tmp241 :_isMedian.5:gt :_isMedian.5:lt
  469:  op abs :_isMedian.5:dif *tmp241 0
  470:  set *tmp246 false
  471:  op add *tmp243 :_isMedian.5:gt :_isMedian.5:lt
  472:  jump *label257 lessThan *tmp243 5
  473:  op equal *tmp246 :_isMedian.5:gt :_isMedian.5:lt
        label *label257
  474:  jump *label258 equal *tmp246 false
  475:  set *tmp233 :_median.5:i
  476:  jump *label232 always 0 0
        label *label258
  477:  jump *label260 greaterThanEq :_isMedian.5:dif :_median.5:bestDif
  478:  set :_median.5:bestDif :_isMedian.5:dif
  479:  set :_median.5:best :_median.5:i
  480:  set :_median.5:count 1
  481:  multijump *tmp234 0 0
        label *label260
  482:  jump *label262 greaterThan :_isMedian.5:dif :_median.5:bestDif
  483:  op add :_median.5:best :_median.5:best :_median.5:i
  484:  op add :_median.5:count :_median.5:count 1
        label *label262
  485:  multijump *tmp234 0 0
        multilabel *label241
  486:  op div *tmp233 :_median.5:best :_median.5:count
        label *label232
  487:  assertequals 5 *tmp233 "median(1,5,5,5,5,5)"
  488:  set :_median.6:bestDif 10000000000
  489:  set :_median.6:best null
  490:  set :_median.6:count 1
  491:  setaddr *tmp256 *label269
  492:  jump *label291 always 0 0
        multilabel *label269
  493:  setaddr *tmp256 *label270
  494:  jump *label291 always 0 0
        multilabel *label270
  495:  setaddr *tmp256 *label271
  496:  jump *label291 always 0 0
        multilabel *label271
  497:  setaddr *tmp256 *label272
  498:  jump *label291 always 0 0
        multilabel *label272
  499:  setaddr *tmp256 *label273
  500:  jump *label291 always 0 0
        multilabel *label273
  501:  setaddr *tmp256 *label274
        label *label291
  502:  jump *label293 greaterThanEq 0 :_median.6:bestDif
  503:  set :_median.6:bestDif 0
  504:  set :_median.6:best 5
  505:  set :_median.6:count 1
  506:  multijump *tmp256 0 0
        label *label293
  507:  jump *label295 greaterThan 0 :_median.6:bestDif
  508:  op add :_median.6:best :_median.6:best 5
  509:  op add :_median.6:count :_median.6:count 1
        label *label295
  510:  multijump *tmp256 0 0
        multilabel *label274
  511:  op div *tmp255 :_median.6:best :_median.6:count
  512:  assertequals 5 *tmp255 "median(5,5,5,5,5,5)"
  513:  set :_median.7:bestDif 10000000000
  514:  set :_median.7:best null
  515:  set :_median.7:count 1
  516:  set :_median.7:i 1
  517:  setaddr *tmp278 *label302
  518:  jump *label299 always 0 0
        multilabel *label302
  519:  set :_median.7:i 2
  520:  setaddr *tmp278 *label303
  521:  jump *label299 always 0 0
        multilabel *label303
  522:  set :_median.7:i 3
  523:  setaddr *tmp278 *label304
  524:  jump *label299 always 0 0
        multilabel *label304
  525:  set :_median.7:i 4
  526:  setaddr *tmp278 *label305
  527:  jump *label299 always 0 0
        multilabel *label305
  528:  set :_median.7:i 5
  529:  setaddr *tmp278 *label306
  530:  jump *label299 always 0 0
        multilabel *label306
  531:  set :_median.7:i 6
  532:  setaddr *tmp278 *label307
  533:  jump *label299 always 0 0
        multilabel *label307
  534:  set :_median.7:i 7
  535:  setaddr *tmp278 *label308
  536:  jump *label299 always 0 0
        multilabel *label308
  537:  set :_median.7:i 8
  538:  setaddr *tmp278 *label309
  539:  jump *label299 always 0 0
        multilabel *label309
  540:  set :_median.7:i 9
  541:  setaddr *tmp278 *label310
        label *label299
  542:  set :_isMedian.7:lt 0
  543:  set :_isMedian.7:gt 0
  544:  jump *label630 greaterThanEq 1 :_median.7:i
  545:  set :_isMedian.7:lt 1
  546:  jump *label633 always 0 0
        label *label630
  547:  select :_isMedian.7:gt greaterThan 1 :_median.7:i 1 0
        label *label633
  548:  jump *label638 greaterThanEq 2 :_median.7:i
  549:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  550:  jump *label641 always 0 0
        label *label638
  551:  jump *label639 lessThanEq 2 :_median.7:i
  552:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label639
        label *label641
  553:  jump *label646 greaterThanEq 3 :_median.7:i
  554:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  555:  jump *label649 always 0 0
        label *label646
  556:  jump *label647 lessThanEq 3 :_median.7:i
  557:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label647
        label *label649
  558:  jump *label654 greaterThanEq 4 :_median.7:i
  559:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  560:  jump *label657 always 0 0
        label *label654
  561:  jump *label655 lessThanEq 4 :_median.7:i
  562:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label655
        label *label657
  563:  jump *label662 greaterThanEq 5 :_median.7:i
  564:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  565:  jump *label665 always 0 0
        label *label662
  566:  jump *label663 lessThanEq 5 :_median.7:i
  567:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label663
        label *label665
  568:  jump *label670 greaterThanEq 6 :_median.7:i
  569:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  570:  jump *label673 always 0 0
        label *label670
  571:  jump *label671 lessThanEq 6 :_median.7:i
  572:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label671
        label *label673
  573:  jump *label678 greaterThanEq 7 :_median.7:i
  574:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  575:  jump *label681 always 0 0
        label *label678
  576:  jump *label679 lessThanEq 7 :_median.7:i
  577:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label679
        label *label681
  578:  jump *label686 greaterThanEq 8 :_median.7:i
  579:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  580:  jump *label689 always 0 0
        label *label686
  581:  jump *label687 lessThanEq 8 :_median.7:i
  582:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label687
        label *label689
  583:  jump *label694 greaterThanEq 9 :_median.7:i
  584:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  585:  jump *label697 always 0 0
        label *label694
  586:  jump *label695 lessThanEq 9 :_median.7:i
  587:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label695
        label *label697
  588:  op sub *tmp285 :_isMedian.7:gt :_isMedian.7:lt
  589:  op abs :_isMedian.7:dif *tmp285 0
  590:  set *tmp290 false
  591:  op add *tmp287 :_isMedian.7:gt :_isMedian.7:lt
  592:  jump *label329 lessThan *tmp287 8
  593:  op equal *tmp290 :_isMedian.7:gt :_isMedian.7:lt
        label *label329
  594:  jump *label330 equal *tmp290 false
  595:  set *tmp277 :_median.7:i
  596:  jump *label298 always 0 0
        label *label330
  597:  jump *label332 greaterThanEq :_isMedian.7:dif :_median.7:bestDif
  598:  set :_median.7:bestDif :_isMedian.7:dif
  599:  set :_median.7:best :_median.7:i
  600:  set :_median.7:count 1
  601:  multijump *tmp278 0 0
        label *label332
  602:  jump *label334 greaterThan :_isMedian.7:dif :_median.7:bestDif
  603:  op add :_median.7:best :_median.7:best :_median.7:i
  604:  op add :_median.7:count :_median.7:count 1
        label *label334
  605:  multijump *tmp278 0 0
        multilabel *label310
  606:  op div *tmp277 :_median.7:best :_median.7:count
        label *label298
  607:  assertequals 5 *tmp277 "median(1,2,3,4,5,6,7,8,9)"
  608:  set :_median.8:bestDif 10000000000
  609:  set :_median.8:best null
  610:  set :_median.8:count 1
  611:  set :_median.8:i 9
  612:  setaddr *tmp300 *label341
  613:  jump *label338 always 0 0
        multilabel *label341
  614:  set :_median.8:i 8
  615:  setaddr *tmp300 *label342
  616:  jump *label338 always 0 0
        multilabel *label342
  617:  set :_median.8:i 7
  618:  setaddr *tmp300 *label343
  619:  jump *label338 always 0 0
        multilabel *label343
  620:  set :_median.8:i 6
  621:  setaddr *tmp300 *label344
  622:  jump *label338 always 0 0
        multilabel *label344
  623:  set :_median.8:i 5
  624:  setaddr *tmp300 *label345
  625:  jump *label338 always 0 0
        multilabel *label345
  626:  set :_median.8:i 4
  627:  setaddr *tmp300 *label346
  628:  jump *label338 always 0 0
        multilabel *label346
  629:  set :_median.8:i 3
  630:  setaddr *tmp300 *label347
  631:  jump *label338 always 0 0
        multilabel *label347
  632:  set :_median.8:i 2
  633:  setaddr *tmp300 *label348
  634:  jump *label338 always 0 0
        multilabel *label348
  635:  set :_median.8:i 1
  636:  setaddr *tmp300 *label349
        label *label338
  637:  set :_isMedian.8:lt 0
  638:  set :_isMedian.8:gt 0
  639:  jump *label703 greaterThanEq 9 :_median.8:i
  640:  set :_isMedian.8:lt 1
  641:  jump *label706 always 0 0
        label *label703
  642:  select :_isMedian.8:gt greaterThan 9 :_median.8:i 1 0
        label *label706
  643:  jump *label711 greaterThanEq 8 :_median.8:i
  644:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  645:  jump *label714 always 0 0
        label *label711
  646:  jump *label712 lessThanEq 8 :_median.8:i
  647:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label712
        label *label714
  648:  jump *label719 greaterThanEq 7 :_median.8:i
  649:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  650:  jump *label722 always 0 0
        label *label719
  651:  jump *label720 lessThanEq 7 :_median.8:i
  652:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label720
        label *label722
  653:  jump *label727 greaterThanEq 6 :_median.8:i
  654:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  655:  jump *label730 always 0 0
        label *label727
  656:  jump *label728 lessThanEq 6 :_median.8:i
  657:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label728
        label *label730
  658:  jump *label735 greaterThanEq 5 :_median.8:i
  659:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  660:  jump *label738 always 0 0
        label *label735
  661:  jump *label736 lessThanEq 5 :_median.8:i
  662:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label736
        label *label738
  663:  jump *label743 greaterThanEq 4 :_median.8:i
  664:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  665:  jump *label746 always 0 0
        label *label743
  666:  jump *label744 lessThanEq 4 :_median.8:i
  667:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label744
        label *label746
  668:  jump *label751 greaterThanEq 3 :_median.8:i
  669:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  670:  jump *label754 always 0 0
        label *label751
  671:  jump *label752 lessThanEq 3 :_median.8:i
  672:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label752
        label *label754
  673:  jump *label759 greaterThanEq 2 :_median.8:i
  674:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  675:  jump *label762 always 0 0
        label *label759
  676:  jump *label760 lessThanEq 2 :_median.8:i
  677:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label760
        label *label762
  678:  jump *label767 greaterThanEq 1 :_median.8:i
  679:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  680:  jump *label770 always 0 0
        label *label767
  681:  jump *label768 lessThanEq 1 :_median.8:i
  682:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label768
        label *label770
  683:  op sub *tmp307 :_isMedian.8:gt :_isMedian.8:lt
  684:  op abs :_isMedian.8:dif *tmp307 0
  685:  set *tmp312 false
  686:  op add *tmp309 :_isMedian.8:gt :_isMedian.8:lt
  687:  jump *label368 lessThan *tmp309 8
  688:  op equal *tmp312 :_isMedian.8:gt :_isMedian.8:lt
        label *label368
  689:  jump *label369 equal *tmp312 false
  690:  set *tmp299 :_median.8:i
  691:  jump *label337 always 0 0
        label *label369
  692:  jump *label371 greaterThanEq :_isMedian.8:dif :_median.8:bestDif
  693:  set :_median.8:bestDif :_isMedian.8:dif
  694:  set :_median.8:best :_median.8:i
  695:  set :_median.8:count 1
  696:  multijump *tmp300 0 0
        label *label371
  697:  jump *label373 greaterThan :_isMedian.8:dif :_median.8:bestDif
  698:  op add :_median.8:best :_median.8:best :_median.8:i
  699:  op add :_median.8:count :_median.8:count 1
        label *label373
  700:  multijump *tmp300 0 0
        multilabel *label349
  701:  op div *tmp299 :_median.8:best :_median.8:count
        label *label337
  702:  assertequals 5 *tmp299 "median(9,8,7,6,5,4,3,2,1)"
  703:  set :_median.9:bestDif 10000000000
  704:  set :_median.9:best null
  705:  set :_median.9:count 1
  706:  set :_median.9:i 1
  707:  setaddr *tmp322 *label380
  708:  jump *label377 always 0 0
        multilabel *label380
  709:  set :_median.9:i 3
  710:  setaddr *tmp322 *label381
  711:  jump *label377 always 0 0
        multilabel *label381
  712:  set :_median.9:i 5
  713:  setaddr *tmp322 *label382
  714:  jump *label377 always 0 0
        multilabel *label382
  715:  set :_median.9:i 7
  716:  setaddr *tmp322 *label383
  717:  jump *label377 always 0 0
        multilabel *label383
  718:  set :_median.9:i 9
  719:  setaddr *tmp322 *label384
  720:  jump *label377 always 0 0
        multilabel *label384
  721:  set :_median.9:i 2
  722:  setaddr *tmp322 *label385
  723:  jump *label377 always 0 0
        multilabel *label385
  724:  set :_median.9:i 4
  725:  setaddr *tmp322 *label386
  726:  jump *label377 always 0 0
        multilabel *label386
  727:  set :_median.9:i 6
  728:  setaddr *tmp322 *label387
  729:  jump *label377 always 0 0
        multilabel *label387
  730:  set :_median.9:i 8
  731:  setaddr *tmp322 *label388
        label *label377
  732:  set :_isMedian.9:lt 0
  733:  set :_isMedian.9:gt 0
  734:  set :_isMedian.9:i 1
  735:  setaddr *tmp324 *label393
  736:  jump *label390 always 0 0
        multilabel *label393
  737:  set :_isMedian.9:i 3
  738:  setaddr *tmp324 *label394
  739:  jump *label390 always 0 0
        multilabel *label394
  740:  set :_isMedian.9:i 5
  741:  setaddr *tmp324 *label395
  742:  jump *label390 always 0 0
        multilabel *label395
  743:  set :_isMedian.9:i 7
  744:  setaddr *tmp324 *label396
  745:  jump *label390 always 0 0
        multilabel *label396
  746:  set :_isMedian.9:i 9
  747:  setaddr *tmp324 *label397
  748:  jump *label390 always 0 0
        multilabel *label397
  749:  set :_isMedian.9:i 2
  750:  setaddr *tmp324 *label398
  751:  jump *label390 always 0 0
        multilabel *label398
  752:  set :_isMedian.9:i 4
  753:  setaddr *tmp324 *label399
  754:  jump *label390 always 0 0
        multilabel *label399
  755:  set :_isMedian.9:i 6
  756:  setaddr *tmp324 *label400
  757:  jump *label390 always 0 0
        multilabel *label400
  758:  set :_isMedian.9:i 8
  759:  setaddr *tmp324 *label401
        label *label390
  760:  jump *label402 greaterThanEq :_isMedian.9:i :_median.9:i
  761:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  762:  multijump *tmp324 0 0
        label *label402
  763:  jump *label404 lessThanEq :_isMedian.9:i :_median.9:i
  764:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label404
  765:  multijump *tmp324 0 0
        multilabel *label401
  766:  op sub *tmp329 :_isMedian.9:gt :_isMedian.9:lt
  767:  op abs :_isMedian.9:dif *tmp329 0
  768:  set *tmp334 false
  769:  op add *tmp331 :_isMedian.9:gt :_isMedian.9:lt
  770:  jump *label407 lessThan *tmp331 8
  771:  op equal *tmp334 :_isMedian.9:gt :_isMedian.9:lt
        label *label407
  772:  jump *label408 equal *tmp334 false
  773:  set *tmp321 :_median.9:i
  774:  jump *label376 always 0 0
        label *label408
  775:  jump *label410 greaterThanEq :_isMedian.9:dif :_median.9:bestDif
  776:  set :_median.9:bestDif :_isMedian.9:dif
  777:  set :_median.9:best :_median.9:i
  778:  set :_median.9:count 1
  779:  multijump *tmp322 0 0
        label *label410
  780:  jump *label412 greaterThan :_isMedian.9:dif :_median.9:bestDif
  781:  op add :_median.9:best :_median.9:best :_median.9:i
  782:  op add :_median.9:count :_median.9:count 1
        label *label412
  783:  multijump *tmp322 0 0
        multilabel *label388
  784:  op div *tmp321 :_median.9:best :_median.9:count
        label *label376
  785:  assertequals 5 *tmp321 "median(1,3,5,7,9,2,4,6,8)"
  786:  set :_median.10:bestDif 10000000000
  787:  set :_median.10:best null
  788:  set :_median.10:count 1
  789:  set :_median.10:i 7
  790:  setaddr *tmp344 *label419
  791:  jump *label416 always 0 0
        multilabel *label419
  792:  set :_median.10:i 4
  793:  setaddr *tmp344 *label420
  794:  jump *label416 always 0 0
        multilabel *label420
  795:  set :_median.10:i 2
  796:  setaddr *tmp344 *label421
  797:  jump *label416 always 0 0
        multilabel *label421
  798:  set :_median.10:i 8
  799:  setaddr *tmp344 *label422
  800:  jump *label416 always 0 0
        multilabel *label422
  801:  set :_median.10:i 1
  802:  setaddr *tmp344 *label423
  803:  jump *label416 always 0 0
        multilabel *label423
  804:  set :_median.10:i 5
  805:  setaddr *tmp344 *label424
  806:  jump *label416 always 0 0
        multilabel *label424
  807:  set :_median.10:i 6
  808:  setaddr *tmp344 *label425
  809:  jump *label416 always 0 0
        multilabel *label425
  810:  set :_median.10:i 9
  811:  setaddr *tmp344 *label426
  812:  jump *label416 always 0 0
        multilabel *label426
  813:  set :_median.10:i 3
  814:  setaddr *tmp344 *label427
        label *label416
  815:  set :_isMedian.10:lt 0
  816:  set :_isMedian.10:gt 0
  817:  set :_isMedian.10:i 7
  818:  setaddr *tmp346 *label432
  819:  jump *label429 always 0 0
        multilabel *label432
  820:  set :_isMedian.10:i 4
  821:  setaddr *tmp346 *label433
  822:  jump *label429 always 0 0
        multilabel *label433
  823:  set :_isMedian.10:i 2
  824:  setaddr *tmp346 *label434
  825:  jump *label429 always 0 0
        multilabel *label434
  826:  set :_isMedian.10:i 8
  827:  setaddr *tmp346 *label435
  828:  jump *label429 always 0 0
        multilabel *label435
  829:  set :_isMedian.10:i 1
  830:  setaddr *tmp346 *label436
  831:  jump *label429 always 0 0
        multilabel *label436
  832:  set :_isMedian.10:i 5
  833:  setaddr *tmp346 *label437
  834:  jump *label429 always 0 0
        multilabel *label437
  835:  set :_isMedian.10:i 6
  836:  setaddr *tmp346 *label438
  837:  jump *label429 always 0 0
        multilabel *label438
  838:  set :_isMedian.10:i 9
  839:  setaddr *tmp346 *label439
  840:  jump *label429 always 0 0
        multilabel *label439
  841:  set :_isMedian.10:i 3
  842:  setaddr *tmp346 *label440
        label *label429
  843:  jump *label441 greaterThanEq :_isMedian.10:i :_median.10:i
  844:  op add :_isMedian.10:lt :_isMedian.10:lt 1
  845:  multijump *tmp346 0 0
        label *label441
  846:  jump *label443 lessThanEq :_isMedian.10:i :_median.10:i
  847:  op add :_isMedian.10:gt :_isMedian.10:gt 1
        label *label443
  848:  multijump *tmp346 0 0
        multilabel *label440
  849:  op sub *tmp351 :_isMedian.10:gt :_isMedian.10:lt
  850:  op abs :_isMedian.10:dif *tmp351 0
  851:  set *tmp356 false
  852:  op add *tmp353 :_isMedian.10:gt :_isMedian.10:lt
  853:  jump *label446 lessThan *tmp353 8
  854:  op equal *tmp356 :_isMedian.10:gt :_isMedian.10:lt
        label *label446
  855:  jump *label447 equal *tmp356 false
  856:  set *tmp343 :_median.10:i
  857:  jump *label415 always 0 0
        label *label447
  858:  jump *label449 greaterThanEq :_isMedian.10:dif :_median.10:bestDif
  859:  set :_median.10:bestDif :_isMedian.10:dif
  860:  set :_median.10:best :_median.10:i
  861:  set :_median.10:count 1
  862:  multijump *tmp344 0 0
        label *label449
  863:  jump *label451 greaterThan :_isMedian.10:dif :_median.10:bestDif
  864:  op add :_median.10:best :_median.10:best :_median.10:i
  865:  op add :_median.10:count :_median.10:count 1
        label *label451
  866:  multijump *tmp344 0 0
        multilabel *label427
  867:  op div *tmp343 :_median.10:best :_median.10:count
        label *label415
  868:  assertequals 5 *tmp343 "median(7,4,2,8,1,5,6,9,3)"
  869:  set :_median.11:bestDif 10000000000
  870:  set :_median.11:best null
  871:  set :_median.11:count 1
  872:  set :_median.11:i 1
  873:  setaddr *tmp366 *label458
  874:  jump *label455 always 0 0
        multilabel *label458
  875:  set :_median.11:i 1
  876:  setaddr *tmp366 *label459
  877:  jump *label455 always 0 0
        multilabel *label459
  878:  set :_median.11:i 1
  879:  setaddr *tmp366 *label460
  880:  jump *label455 always 0 0
        multilabel *label460
  881:  set :_median.11:i 1
  882:  setaddr *tmp366 *label461
  883:  jump *label455 always 0 0
        multilabel *label461
  884:  set :_median.11:i 9
  885:  setaddr *tmp366 *label462
  886:  jump *label455 always 0 0
        multilabel *label462
  887:  set :_median.11:i 9
  888:  setaddr *tmp366 *label463
  889:  jump *label455 always 0 0
        multilabel *label463
  890:  set :_median.11:i 9
  891:  setaddr *tmp366 *label464
  892:  jump *label455 always 0 0
        multilabel *label464
  893:  set :_median.11:i 9
  894:  setaddr *tmp366 *label465
  895:  jump *label455 always 0 0
        multilabel *label465
  896:  set :_median.11:i 5
  897:  setaddr *tmp366 *label466
        label *label455
  898:  set :_isMedian.11:lt 0
  899:  set :_isMedian.11:gt 0
  900:  set :_isMedian.11:i 1
  901:  setaddr *tmp368 *label471
  902:  jump *label468 always 0 0
        multilabel *label471
  903:  set :_isMedian.11:i 1
  904:  setaddr *tmp368 *label472
  905:  jump *label468 always 0 0
        multilabel *label472
  906:  set :_isMedian.11:i 1
  907:  setaddr *tmp368 *label473
  908:  jump *label468 always 0 0
        multilabel *label473
  909:  set :_isMedian.11:i 1
  910:  setaddr *tmp368 *label474
  911:  jump *label468 always 0 0
        multilabel *label474
  912:  set :_isMedian.11:i 9
  913:  setaddr *tmp368 *label475
  914:  jump *label468 always 0 0
        multilabel *label475
  915:  set :_isMedian.11:i 9
  916:  setaddr *tmp368 *label476
  917:  jump *label468 always 0 0
        multilabel *label476
  918:  set :_isMedian.11:i 9
  919:  setaddr *tmp368 *label477
  920:  jump *label468 always 0 0
        multilabel *label477
  921:  set :_isMedian.11:i 9
  922:  setaddr *tmp368 *label478
  923:  jump *label468 always 0 0
        multilabel *label478
  924:  set :_isMedian.11:i 5
  925:  setaddr *tmp368 *label479
        label *label468
  926:  jump *label480 greaterThanEq :_isMedian.11:i :_median.11:i
  927:  op add :_isMedian.11:lt :_isMedian.11:lt 1
  928:  multijump *tmp368 0 0
        label *label480
  929:  jump *label482 lessThanEq :_isMedian.11:i :_median.11:i
  930:  op add :_isMedian.11:gt :_isMedian.11:gt 1
        label *label482
  931:  multijump *tmp368 0 0
        multilabel *label479
  932:  op sub *tmp373 :_isMedian.11:gt :_isMedian.11:lt
  933:  op abs :_isMedian.11:dif *tmp373 0
  934:  set *tmp378 false
  935:  op add *tmp375 :_isMedian.11:gt :_isMedian.11:lt
  936:  jump *label485 lessThan *tmp375 8
  937:  op equal *tmp378 :_isMedian.11:gt :_isMedian.11:lt
        label *label485
  938:  jump *label486 equal *tmp378 false
  939:  set *tmp365 :_median.11:i
  940:  jump *label454 always 0 0
        label *label486
  941:  jump *label488 greaterThanEq :_isMedian.11:dif :_median.11:bestDif
  942:  set :_median.11:bestDif :_isMedian.11:dif
  943:  set :_median.11:best :_median.11:i
  944:  set :_median.11:count 1
  945:  multijump *tmp366 0 0
        label *label488
  946:  jump *label490 greaterThan :_isMedian.11:dif :_median.11:bestDif
  947:  op add :_median.11:best :_median.11:best :_median.11:i
  948:  op add :_median.11:count :_median.11:count 1
        label *label490
  949:  multijump *tmp366 0 0
        multilabel *label466
  950:  op div *tmp365 :_median.11:best :_median.11:count
        label *label454
  951:  assertequals 5 *tmp365 "median(1,1,1,1,9,9,9,9,5)"
  952:  stop
  953:  end
        label *label0
  954:  set :signInexact*retval 0
  955:  jump *label494 equal :signInexact:x 0
  956:  select :signInexact*retval lessThan :signInexact:x 0 -1 1
        label *label494
  957:  return :signInexact*retaddr
        label *label1
  958:  op max :median:y2 :median:x1 :median:x2
  959:  op min :median:y3 :median:x3 :median:x4
  960:  jump *label498 greaterThan :median:y2 :median:y3
  961:  op add *tmp394 :median:y2 :median:y3
  962:  op div :median*retval *tmp394 2
  963:  return :median*retaddr
        label *label498
  964:  op min :median:y1 :median:x1 :median:x2
  965:  op max :median:y4 :median:x3 :median:x4
  966:  jump *label500 lessThan :median:y1 :median:y4
  967:  op add *tmp400 :median:y1 :median:y4
  968:  op div :median*retval *tmp400 2
  969:  return :median*retaddr
        label *label500
  970:  op max *tmp402 :median:y1 :median:y3
  971:  op min *tmp403 :median:y2 :median:y4
  972:  op add *tmp404 *tmp402 *tmp403
  973:  op div :median*retval *tmp404 2
  974:  return :median*retaddr
        label *label2
  975:  op min :median.1:y1 :median.1:x1 :median.1:x2
  976:  op max :median.1:y2 :median.1:x1 :median.1:x2
  977:  op min :median.1:y4 :median.1:x4 :median.1:x5
  978:  op max :median.1:y5 :median.1:x4 :median.1:x5
  979:  jump *label503 greaterThanEq :median.1:y4 :median.1:y1
  980:  set :median.1:y4 :median.1:y1
  981:  set :_swap.1:t :median.1:y2
  982:  set :median.1:y2 :median.1:y5
  983:  set :median.1:y5 :_swap.1:t
        label *label503
  984:  jump *label507 lessThanEq :median.1:x3 :median.1:y2
  985:  op min :median.1*retval :median.1:y2 :median.1:y5
  986:  jump *label508 greaterThanEq :median.1:y2 :median.1:y4
  987:  op min :median.1*retval :median.1:x3 :median.1:y4
  988:  return :median.1*retaddr
        label *label507
  989:  op min :median.1*retval :median.1:y2 :median.1:y4
  990:  jump *label512 lessThanEq :median.1:x3 :median.1:y4
  991:  op min :median.1*retval :median.1:x3 :median.1:y5
        label *label512
        label *label508
  992:  return :median.1*retaddr


stop instruction encountered, dumping variable values:
*tmp123: 1.0
*tmp124: 161.0
*tmp145: 1.0
*tmp146: 226.0
*tmp148: 208.0
*tmp153: -5.0
*tmp155: 5.0
*tmp158: 0.0
*tmp167: 1.0
*tmp168: 291.0
*tmp170: 273.0
*tmp175: -4.0
*tmp177: 4.0
*tmp180: 0.0
*tmp189: 3.0
*tmp190: 356.0
*tmp192: 338.0
*tmp197: -3.0
*tmp199: 3.0
*tmp202: 0.0
*tmp211: 5.0
*tmp212: 421.0
*tmp214: 403.0
*tmp219: -2.0
*tmp221: 2.0
*tmp224: 0.0
*tmp233: 5.0
*tmp234: 486.0
*tmp236: 468.0
*tmp241: -1.0
*tmp243: 1.0
*tmp246: 0.0
*tmp255: 5.0
*tmp256: 511.0
*tmp277: 5.0
*tmp278: 531.0
*tmp285: 0.0
*tmp287: 8.0
*tmp290: 1.0
*tmp299: 5.0
*tmp300: 626.0
*tmp307: 0.0
*tmp309: 8.0
*tmp312: 1.0
*tmp321: 5.0
*tmp322: 715.0
*tmp324: 766.0
*tmp329: 0.0
*tmp331: 8.0
*tmp334: 1.0
*tmp343: 5.0
*tmp344: 807.0
*tmp346: 849.0
*tmp351: 0.0
*tmp353: 8.0
*tmp356: 1.0
*tmp365: 5.0
*tmp366: 950.0
*tmp368: 932.0
*tmp373: 0.0
*tmp375: 8.0
*tmp378: 1.0
*tmp394: 10.0
*tmp400: 10.0
*tmp402: 4.0
*tmp403: 6.0
*tmp404: 10.0
:_isMedian.10:dif: 0.0
:_isMedian.10:gt: 4.0
:_isMedian.10:i: 3.0
:_isMedian.10:lt: 4.0
:_isMedian.11:dif: 0.0
:_isMedian.11:gt: 4.0
:_isMedian.11:i: 5.0
:_isMedian.11:lt: 4.0
:_isMedian.1:dif: 5.0
:_isMedian.1:gt: 0.0
:_isMedian.1:i: 5.0
:_isMedian.1:lt: 5.0
:_isMedian.2:dif: 4.0
:_isMedian.2:gt: 0.0
:_isMedian.2:i: 5.0
:_isMedian.2:lt: 4.0
:_isMedian.3:dif: 3.0
:_isMedian.3:gt: 0.0
:_isMedian.3:i: 5.0
:_isMedian.3:lt: 3.0
:_isMedian.4:dif: 2.0
:_isMedian.4:gt: 0.0
:_isMedian.4:i: 5.0
:_isMedian.4:lt: 2.0
:_isMedian.5:dif: 1.0
:_isMedian.5:gt: 0.0
:_isMedian.5:i: 5.0
:_isMedian.5:lt: 1.0
:_isMedian.7:dif: 0.0
:_isMedian.7:gt: 4.0
:_isMedian.7:lt: 4.0
:_isMedian.8:dif: 0.0
:_isMedian.8:gt: 4.0
:_isMedian.8:lt: 4.0
:_isMedian.9:dif: 0.0
:_isMedian.9:gt: 4.0
:_isMedian.9:i: 8.0
:_isMedian.9:lt: 4.0
:_median.10:best: 4.0
:_median.10:bestDif: 2.0
:_median.10:count: 1.0
:_median.10:i: 5.0
:_median.11:best: 40.0
:_median.11:bestDif: 5.0
:_median.11:count: 8.0
:_median.11:i: 5.0
:_median.1:best: 5.0
:_median.1:bestDif: 1.0
:_median.1:count: 5.0
:_median.1:i: 5.0
:_median.2:best: 4.0
:_median.2:bestDif: 2.0
:_median.2:count: 4.0
:_median.2:i: 5.0
:_median.3:best: 18.0
:_median.3:bestDif: 3.0
:_median.3:count: 6.0
:_median.3:i: 5.0
:_median.4:best: 20.0
:_median.4:bestDif: 2.0
:_median.4:count: 4.0
:_median.4:i: 5.0
:_median.5:best: 25.0
:_median.5:bestDif: 1.0
:_median.5:count: 5.0
:_median.5:i: 5.0
:_median.6:best: 30.0
:_median.6:bestDif: 0.0
:_median.6:count: 6.0
:_median.7:best: 4.0
:_median.7:bestDif: 2.0
:_median.7:count: 1.0
:_median.7:i: 5.0
:_median.8:best: 6.0
:_median.8:bestDif: 2.0
:_median.8:count: 1.0
:_median.8:i: 5.0
:_median.9:best: 3.0
:_median.9:bestDif: 4.0
:_median.9:count: 1.0
:_median.9:i: 5.0
:_median:best: 6.0
:_median:bestDif: 0.0
:_median:count: 6.0
:_swap.1:t: 5.0
:integer.1:result: -5.0
:integer.2:result: 100.0
:integer:result: 0.0
:median*retaddr: 95.0
:median*retval: 5.0
:median.1*retaddr: 137.0
:median.1*retval: 5.0
:median.1:x1: 5.0
:median.1:x2: 5.0
:median.1:x3: 5.0
:median.1:x4: 5.0
:median.1:x5: 5.0
:median.1:y1: 5.0
:median.1:y2: 5.0
:median.1:y4: 5.0
:median.1:y5: 5.0
:median:x1: 6.0
:median:x2: 2.0
:median:x3: 8.0
:median:x4: 4.0
:median:y1: 2.0
:median:y2: 6.0
:median:y3: 4.0
:median:y4: 8.0
:nullToZero.1:result: 1.0
:nullToZero:result: 0.0
:signInexact*retaddr: 20.0
:signInexact*retval: 1.0
:signInexact:x: 1.0E-5
@counter: 953.0