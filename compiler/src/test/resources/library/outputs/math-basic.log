  1540 instructions before optimizations.
    71 instructions eliminated by Temp Variables Elimination (7 iterations).
   124 instructions eliminated by Dead Code Elimination (5 iterations).
    28 instructions modified by Jump Normalization (6 iterations).
    66 instructions eliminated by Jump Optimization (6 iterations).
    91 instructions eliminated by Single Step Elimination (3 passes, 11 iterations).
     6 instructions modified by Expression Optimization (4 iterations).
     5 instructions eliminated by If Expression Optimization (4 iterations).
   250 instructions eliminated by Data Flow Optimization (7 passes, 27 iterations).
    66 instructions added by Loop Unrolling (11 iterations).
     7 loops unrolled by Loop Unrolling.
    33 instructions updated by Jump Threading.
     4 instructions eliminated by Unreachable Code Elimination (2 iterations).
   995 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
    Unroll iteration loop at *math:121:5                         size    -5, benefit        7.0, efficiency   Infinity
    Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
    Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
    Unroll iteration loop at *math:121:5                         size    -5, benefit        7.0, efficiency   Infinity
    Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +145, benefit       23.0, efficiency      0.159
  * Unroll iteration loop at *math:259:5                         size    -5, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:121:5                         size    -5, benefit        7.0, efficiency   Infinity (-8 instructions)
    Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:133:5                         size    -5, benefit        7.0, efficiency   Infinity (-9 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +235, benefit       23.0, efficiency      0.098
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +163, benefit       23.0, efficiency      0.141
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +433, benefit       35.0, efficiency      0.081
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +125, benefit       44.0, efficiency      0.352
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 58:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 59:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 60:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 61:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 62:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 63:17                           size   +18, benefit        5.5, efficiency      0.306
  ! Inline function call at line 64:17                           size   +18, benefit        5.5, efficiency      0.306

Pass 2: speed optimization selection (cost limit 38):
    Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
    Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 25):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
    Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
    Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
    Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 12):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
    Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  * Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500 (+13 instructions)
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
    Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 2: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 3: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Pass 4: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size  +229, benefit       23.0, efficiency      0.100
  ! Unroll iteration loop at *math:259:5                         size    +7, benefit      575.0, efficiency     82.143
  ! Unroll iteration loop at *math:241:5                         size   +37, benefit       23.0, efficiency      0.622
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Unroll iteration loop at *math:241:5                         size  +424, benefit       35.0, efficiency      0.083
  ! Unroll iteration loop at *math:259:5                         size   +10, benefit      875.0, efficiency     87.500
  ! Inline function 'median' defined at *math:185:1              size   +59, benefit       25.0, efficiency      0.424
  ! Inline function 'median' defined at *math:202:1              size  +111, benefit       44.0, efficiency      0.396
  ! Inline function call at line 52:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 53:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 54:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 55:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 56:17                           size   +15, benefit        5.0, efficiency      0.333
  ! Inline function call at line 57:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 58:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 59:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 60:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 61:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 62:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 63:17                           size   +16, benefit        5.5, efficiency      0.344
  ! Inline function call at line 64:17                           size   +16, benefit        5.5, efficiency      0.344

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  assertequals 0 0 "signInexact(0)"
   10:  assertequals 0 0 "signInexact(1e-7)"
   11:  assertequals 1 1 "signInexact(1e-5)"
   12:  assertequals -1 -1 "sign(-5)"
   13:  assertequals 0 0 "sign(0)"
   14:  assertequals 1 1 "sign(1e-7)"
   15:  assertequals -1 -1 "sign(-1e-7)"
   16:  assertequals true true "isZero(0)"
   17:  assertequals false false "isZero(1e-50)"
   18:  assertequals false false "isZero(-1e-50)"
   19:  assertequals false false "isZero(0.01,0.01)"
   20:  op add :nullToZero:result null 0
   21:  assertequals 0 :nullToZero:result "nullToZero(null)"
   22:  op add :nullToZero.1:result 1 0
   23:  assertequals 1 :nullToZero.1:result "nullToZero(1)"
   24:  assertequals 0 false "boolean(0)"
   25:  assertequals 1 true "boolean(100)"
   26:  assertequals 1 true "boolean(-100)"
   27:  assertequals 1 true "boolean(-0.001)"
   28:  assertequals 0 false "boolean(0.0000001)"
   29:  op or :integer:result 0.9 0
   30:  assertequals 0 :integer:result "integer(0.9)"
   31:  op or :integer.1:result -5.9 0
   32:  assertequals -5 :integer.1:result "integer(-5.9)"
   33:  op or :integer.2:result 100 0
   34:  assertequals 100 :integer.2:result "integer(100)"
   35:  assertequals 1 1 "sum(1)"
   36:  assertequals 10 10 "sum(1,2,3,4)"
   37:  assertequals 1 1 "avg(1)"
   38:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   39:  assertequals 2 2 "logn(25, 5)"
   40:  assertequals 4 4 "logn(10000, 10)"
   41:  assertequals 4 4 "log2(16)"
   42:  assertequals 30 30 "log2(1 << 30)"
   43:  assertequals 1 1 "lerp(1, 10, 0)"
   44:  assertequals 10 10 "lerp(1, 10, 1)"
   45:  assertequals 5.5 5.5 "lerp(1, 10, 0.5)"
   46:  assertequals 1 1 "median(1)"
   47:  assertequals 3 3 "median(2,4)"
   48:  assertequals 3 3 "median(1,3,5)"
   49:  assertequals 1 1 "median(1,1,1)"
   50:  assertequals 1 1 "median(1,1,3)"
   51:  assertequals 3 3 "median(1,3,3)"
   52:  set :median:x1 2
   53:  set :median:x2 4
   54:  set :median:x3 6
   55:  set :median:x4 8
   56:  setaddr :median*retaddr *label30
   57:  call *label1 *invalid :median*retval
        label *label30
   58:  assertequals 5 :median*retval "median(2,4,6,8)"
   59:  set :median:x1 8
   60:  set :median:x2 6
   61:  set :median:x3 4
   62:  set :median:x4 2
   63:  setaddr :median*retaddr *label31
   64:  call *label1 *invalid :median*retval
        label *label31
   65:  assertequals 5 :median*retval "median(8,6,4,2)"
   66:  set :median:x1 4
   67:  set :median:x2 8
   68:  set :median:x3 2
   69:  set :median:x4 6
   70:  setaddr :median*retaddr *label32
   71:  call *label1 *invalid :median*retval
        label *label32
   72:  assertequals 5 :median*retval "median(4,8,2,6)"
   73:  set :median:x1 2
   74:  set :median:x2 6
   75:  set :median:x3 4
   76:  set :median:x4 8
   77:  setaddr :median*retaddr *label33
   78:  call *label1 *invalid :median*retval
        label *label33
   79:  assertequals 5 :median*retval "median(2,6,4,8)"
   80:  set :median:x1 6
   81:  set :median:x2 2
   82:  set :median:x3 8
   83:  set :median:x4 4
   84:  setaddr :median*retaddr *label34
   85:  call *label1 *invalid :median*retval
        label *label34
   86:  assertequals 5 :median*retval "median(6,2,8,4)"
   87:  set :median.1:x1 1
   88:  set :median.1:x2 2
   89:  set :median.1:x3 3
   90:  set :median.1:x4 4
   91:  set :median.1:x5 5
   92:  setaddr :median.1*retaddr *label35
   93:  call *label2 *invalid :median.1*retval
        label *label35
   94:  assertequals 3 :median.1*retval "median(1,2,3,4,5)"
   95:  set :median.1:x1 5
   96:  set :median.1:x2 4
   97:  set :median.1:x4 2
   98:  set :median.1:x5 1
   99:  setaddr :median.1*retaddr *label36
  100:  call *label2 *invalid :median.1*retval
        label *label36
  101:  assertequals 3 :median.1*retval "median(5,4,3,2,1)"
  102:  set :median.1:x1 1
  103:  set :median.1:x2 1
  104:  set :median.1:x3 1
  105:  set :median.1:x4 1
  106:  setaddr :median.1*retaddr *label37
  107:  call *label2 *invalid :median.1*retval
        label *label37
  108:  assertequals 1 :median.1*retval "median(1,1,1,1,1)"
  109:  set :median.1:x5 5
  110:  setaddr :median.1*retaddr *label38
  111:  call *label2 *invalid :median.1*retval
        label *label38
  112:  assertequals 1 :median.1*retval "median(1,1,1,1,5)"
  113:  set :median.1:x4 5
  114:  setaddr :median.1*retaddr *label39
  115:  call *label2 *invalid :median.1*retval
        label *label39
  116:  assertequals 1 :median.1*retval "median(1,1,1,5,5)"
  117:  set :median.1:x3 5
  118:  setaddr :median.1*retaddr *label40
  119:  call *label2 *invalid :median.1*retval
        label *label40
  120:  assertequals 5 :median.1*retval "median(1,1,5,5,5)"
  121:  set :median.1:x2 5
  122:  setaddr :median.1*retaddr *label41
  123:  call *label2 *invalid :median.1*retval
        label *label41
  124:  assertequals 5 :median.1*retval "median(1,5,5,5,5)"
  125:  set :median.1:x1 5
  126:  setaddr :median.1*retaddr *label42
  127:  call *label2 *invalid :median.1*retval
        label *label42
  128:  assertequals 5 :median.1*retval "median(5,5,5,5,5)"
  129:  set :_median:bestDif 10000000000
  130:  set :_median:best null
  131:  set :_median:count 1
  132:  setaddr *tmp66 *label48
  133:  jump *label70 always 0 0
        multilabel *label48
  134:  setaddr *tmp66 *label49
  135:  jump *label70 always 0 0
        multilabel *label49
  136:  setaddr *tmp66 *label50
  137:  jump *label70 always 0 0
        multilabel *label50
  138:  setaddr *tmp66 *label51
  139:  jump *label70 always 0 0
        multilabel *label51
  140:  setaddr *tmp66 *label52
  141:  jump *label70 always 0 0
        multilabel *label52
  142:  setaddr *tmp66 *label53
        label *label70
  143:  jump *label72 greaterThanEq 0 :_median:bestDif
  144:  set :_median:bestDif 0
  145:  set :_median:best 1
  146:  set :_median:count 1
  147:  multijump *tmp66 0 0
        label *label72
  148:  jump *label74 greaterThan 0 :_median:bestDif
  149:  op add :_median:best :_median:best 1
  150:  op add :_median:count :_median:count 1
        label *label74
  151:  multijump *tmp66 0 0
        multilabel *label53
  152:  op div *tmp65 :_median:best :_median:count
  153:  assertequals 1 *tmp65 "median(1,1,1,1,1,1)"
  154:  set :_median.1:bestDif 10000000000
  155:  set :_median.1:best null
  156:  set :_median.1:count 1
  157:  set :_median.1:i 1
  158:  setaddr *tmp88 *label81
  159:  jump *label78 always 0 0
        multilabel *label81
  160:  set :_median.1:i 1
  161:  setaddr *tmp88 *label82
  162:  jump *label78 always 0 0
        multilabel *label82
  163:  set :_median.1:i 1
  164:  setaddr *tmp88 *label83
  165:  jump *label78 always 0 0
        multilabel *label83
  166:  set :_median.1:i 1
  167:  setaddr *tmp88 *label84
  168:  jump *label78 always 0 0
        multilabel *label84
  169:  set :_median.1:i 1
  170:  setaddr *tmp88 *label85
  171:  jump *label78 always 0 0
        multilabel *label85
  172:  set :_median.1:i 5
  173:  setaddr *tmp88 *label86
        label *label78
  174:  set :_isMedian.1:lt 0
  175:  set :_isMedian.1:gt 0
  176:  set :_isMedian.1:i 1
  177:  setaddr *tmp90 *label91
  178:  jump *label88 always 0 0
        multilabel *label91
  179:  set :_isMedian.1:i 1
  180:  setaddr *tmp90 *label92
  181:  jump *label88 always 0 0
        multilabel *label92
  182:  set :_isMedian.1:i 1
  183:  setaddr *tmp90 *label93
  184:  jump *label88 always 0 0
        multilabel *label93
  185:  set :_isMedian.1:i 1
  186:  setaddr *tmp90 *label94
  187:  jump *label88 always 0 0
        multilabel *label94
  188:  set :_isMedian.1:i 1
  189:  setaddr *tmp90 *label95
  190:  jump *label88 always 0 0
        multilabel *label95
  191:  set :_isMedian.1:i 5
  192:  setaddr *tmp90 *label96
        label *label88
  193:  jump *label97 greaterThanEq :_isMedian.1:i :_median.1:i
  194:  op add :_isMedian.1:lt :_isMedian.1:lt 1
  195:  multijump *tmp90 0 0
        label *label97
  196:  jump *label99 lessThanEq :_isMedian.1:i :_median.1:i
  197:  op add :_isMedian.1:gt :_isMedian.1:gt 1
        label *label99
  198:  multijump *tmp90 0 0
        multilabel *label96
  199:  op sub *tmp95 :_isMedian.1:gt :_isMedian.1:lt
  200:  op abs :_isMedian.1:dif *tmp95 0
  201:  set *tmp100 false
  202:  op add *tmp97 :_isMedian.1:gt :_isMedian.1:lt
  203:  jump *label102 lessThan *tmp97 5
  204:  op equal *tmp100 :_isMedian.1:gt :_isMedian.1:lt
        label *label102
  205:  jump *label103 equal *tmp100 false
  206:  set *tmp87 :_median.1:i
  207:  jump *label77 always 0 0
        label *label103
  208:  jump *label105 greaterThanEq :_isMedian.1:dif :_median.1:bestDif
  209:  set :_median.1:bestDif :_isMedian.1:dif
  210:  set :_median.1:best :_median.1:i
  211:  set :_median.1:count 1
  212:  multijump *tmp88 0 0
        label *label105
  213:  jump *label107 greaterThan :_isMedian.1:dif :_median.1:bestDif
  214:  op add :_median.1:best :_median.1:best :_median.1:i
  215:  op add :_median.1:count :_median.1:count 1
        label *label107
  216:  multijump *tmp88 0 0
        multilabel *label86
  217:  op div *tmp87 :_median.1:best :_median.1:count
        label *label77
  218:  assertequals 1 *tmp87 "median(1,1,1,1,1,5)"
  219:  set :_median.2:bestDif 10000000000
  220:  set :_median.2:best null
  221:  set :_median.2:count 1
  222:  set :_median.2:i 1
  223:  setaddr *tmp110 *label114
  224:  jump *label111 always 0 0
        multilabel *label114
  225:  set :_median.2:i 1
  226:  setaddr *tmp110 *label115
  227:  jump *label111 always 0 0
        multilabel *label115
  228:  set :_median.2:i 1
  229:  setaddr *tmp110 *label116
  230:  jump *label111 always 0 0
        multilabel *label116
  231:  set :_median.2:i 1
  232:  setaddr *tmp110 *label117
  233:  jump *label111 always 0 0
        multilabel *label117
  234:  set :_median.2:i 5
  235:  setaddr *tmp110 *label118
  236:  jump *label111 always 0 0
        multilabel *label118
  237:  set :_median.2:i 5
  238:  setaddr *tmp110 *label119
        label *label111
  239:  set :_isMedian.2:lt 0
  240:  set :_isMedian.2:gt 0
  241:  set :_isMedian.2:i 1
  242:  setaddr *tmp112 *label124
  243:  jump *label121 always 0 0
        multilabel *label124
  244:  set :_isMedian.2:i 1
  245:  setaddr *tmp112 *label125
  246:  jump *label121 always 0 0
        multilabel *label125
  247:  set :_isMedian.2:i 1
  248:  setaddr *tmp112 *label126
  249:  jump *label121 always 0 0
        multilabel *label126
  250:  set :_isMedian.2:i 1
  251:  setaddr *tmp112 *label127
  252:  jump *label121 always 0 0
        multilabel *label127
  253:  set :_isMedian.2:i 5
  254:  setaddr *tmp112 *label128
  255:  jump *label121 always 0 0
        multilabel *label128
  256:  set :_isMedian.2:i 5
  257:  setaddr *tmp112 *label129
        label *label121
  258:  jump *label130 greaterThanEq :_isMedian.2:i :_median.2:i
  259:  op add :_isMedian.2:lt :_isMedian.2:lt 1
  260:  multijump *tmp112 0 0
        label *label130
  261:  jump *label132 lessThanEq :_isMedian.2:i :_median.2:i
  262:  op add :_isMedian.2:gt :_isMedian.2:gt 1
        label *label132
  263:  multijump *tmp112 0 0
        multilabel *label129
  264:  op sub *tmp117 :_isMedian.2:gt :_isMedian.2:lt
  265:  op abs :_isMedian.2:dif *tmp117 0
  266:  set *tmp122 false
  267:  op add *tmp119 :_isMedian.2:gt :_isMedian.2:lt
  268:  jump *label135 lessThan *tmp119 5
  269:  op equal *tmp122 :_isMedian.2:gt :_isMedian.2:lt
        label *label135
  270:  jump *label136 equal *tmp122 false
  271:  set *tmp109 :_median.2:i
  272:  jump *label110 always 0 0
        label *label136
  273:  jump *label138 greaterThanEq :_isMedian.2:dif :_median.2:bestDif
  274:  set :_median.2:bestDif :_isMedian.2:dif
  275:  set :_median.2:best :_median.2:i
  276:  set :_median.2:count 1
  277:  multijump *tmp110 0 0
        label *label138
  278:  jump *label140 greaterThan :_isMedian.2:dif :_median.2:bestDif
  279:  op add :_median.2:best :_median.2:best :_median.2:i
  280:  op add :_median.2:count :_median.2:count 1
        label *label140
  281:  multijump *tmp110 0 0
        multilabel *label119
  282:  op div *tmp109 :_median.2:best :_median.2:count
        label *label110
  283:  assertequals 1 *tmp109 "median(1,1,1,1,5,5)"
  284:  set :_median.3:bestDif 10000000000
  285:  set :_median.3:best null
  286:  set :_median.3:count 1
  287:  set :_median.3:i 1
  288:  setaddr *tmp132 *label147
  289:  jump *label144 always 0 0
        multilabel *label147
  290:  set :_median.3:i 1
  291:  setaddr *tmp132 *label148
  292:  jump *label144 always 0 0
        multilabel *label148
  293:  set :_median.3:i 1
  294:  setaddr *tmp132 *label149
  295:  jump *label144 always 0 0
        multilabel *label149
  296:  set :_median.3:i 5
  297:  setaddr *tmp132 *label150
  298:  jump *label144 always 0 0
        multilabel *label150
  299:  set :_median.3:i 5
  300:  setaddr *tmp132 *label151
  301:  jump *label144 always 0 0
        multilabel *label151
  302:  set :_median.3:i 5
  303:  setaddr *tmp132 *label152
        label *label144
  304:  set :_isMedian.3:lt 0
  305:  set :_isMedian.3:gt 0
  306:  set :_isMedian.3:i 1
  307:  setaddr *tmp134 *label157
  308:  jump *label154 always 0 0
        multilabel *label157
  309:  set :_isMedian.3:i 1
  310:  setaddr *tmp134 *label158
  311:  jump *label154 always 0 0
        multilabel *label158
  312:  set :_isMedian.3:i 1
  313:  setaddr *tmp134 *label159
  314:  jump *label154 always 0 0
        multilabel *label159
  315:  set :_isMedian.3:i 5
  316:  setaddr *tmp134 *label160
  317:  jump *label154 always 0 0
        multilabel *label160
  318:  set :_isMedian.3:i 5
  319:  setaddr *tmp134 *label161
  320:  jump *label154 always 0 0
        multilabel *label161
  321:  set :_isMedian.3:i 5
  322:  setaddr *tmp134 *label162
        label *label154
  323:  jump *label163 greaterThanEq :_isMedian.3:i :_median.3:i
  324:  op add :_isMedian.3:lt :_isMedian.3:lt 1
  325:  multijump *tmp134 0 0
        label *label163
  326:  jump *label165 lessThanEq :_isMedian.3:i :_median.3:i
  327:  op add :_isMedian.3:gt :_isMedian.3:gt 1
        label *label165
  328:  multijump *tmp134 0 0
        multilabel *label162
  329:  op sub *tmp139 :_isMedian.3:gt :_isMedian.3:lt
  330:  op abs :_isMedian.3:dif *tmp139 0
  331:  set *tmp144 false
  332:  op add *tmp141 :_isMedian.3:gt :_isMedian.3:lt
  333:  jump *label168 lessThan *tmp141 5
  334:  op equal *tmp144 :_isMedian.3:gt :_isMedian.3:lt
        label *label168
  335:  jump *label169 equal *tmp144 false
  336:  set *tmp131 :_median.3:i
  337:  jump *label143 always 0 0
        label *label169
  338:  jump *label171 greaterThanEq :_isMedian.3:dif :_median.3:bestDif
  339:  set :_median.3:bestDif :_isMedian.3:dif
  340:  set :_median.3:best :_median.3:i
  341:  set :_median.3:count 1
  342:  multijump *tmp132 0 0
        label *label171
  343:  jump *label173 greaterThan :_isMedian.3:dif :_median.3:bestDif
  344:  op add :_median.3:best :_median.3:best :_median.3:i
  345:  op add :_median.3:count :_median.3:count 1
        label *label173
  346:  multijump *tmp132 0 0
        multilabel *label152
  347:  op div *tmp131 :_median.3:best :_median.3:count
        label *label143
  348:  assertequals 3 *tmp131 "median(1,1,1,5,5,5)"
  349:  set :_median.4:bestDif 10000000000
  350:  set :_median.4:best null
  351:  set :_median.4:count 1
  352:  set :_median.4:i 1
  353:  setaddr *tmp154 *label180
  354:  jump *label177 always 0 0
        multilabel *label180
  355:  set :_median.4:i 1
  356:  setaddr *tmp154 *label181
  357:  jump *label177 always 0 0
        multilabel *label181
  358:  set :_median.4:i 5
  359:  setaddr *tmp154 *label182
  360:  jump *label177 always 0 0
        multilabel *label182
  361:  set :_median.4:i 5
  362:  setaddr *tmp154 *label183
  363:  jump *label177 always 0 0
        multilabel *label183
  364:  set :_median.4:i 5
  365:  setaddr *tmp154 *label184
  366:  jump *label177 always 0 0
        multilabel *label184
  367:  set :_median.4:i 5
  368:  setaddr *tmp154 *label185
        label *label177
  369:  set :_isMedian.4:lt 0
  370:  set :_isMedian.4:gt 0
  371:  set :_isMedian.4:i 1
  372:  setaddr *tmp156 *label190
  373:  jump *label187 always 0 0
        multilabel *label190
  374:  set :_isMedian.4:i 1
  375:  setaddr *tmp156 *label191
  376:  jump *label187 always 0 0
        multilabel *label191
  377:  set :_isMedian.4:i 5
  378:  setaddr *tmp156 *label192
  379:  jump *label187 always 0 0
        multilabel *label192
  380:  set :_isMedian.4:i 5
  381:  setaddr *tmp156 *label193
  382:  jump *label187 always 0 0
        multilabel *label193
  383:  set :_isMedian.4:i 5
  384:  setaddr *tmp156 *label194
  385:  jump *label187 always 0 0
        multilabel *label194
  386:  set :_isMedian.4:i 5
  387:  setaddr *tmp156 *label195
        label *label187
  388:  jump *label196 greaterThanEq :_isMedian.4:i :_median.4:i
  389:  op add :_isMedian.4:lt :_isMedian.4:lt 1
  390:  multijump *tmp156 0 0
        label *label196
  391:  jump *label198 lessThanEq :_isMedian.4:i :_median.4:i
  392:  op add :_isMedian.4:gt :_isMedian.4:gt 1
        label *label198
  393:  multijump *tmp156 0 0
        multilabel *label195
  394:  op sub *tmp161 :_isMedian.4:gt :_isMedian.4:lt
  395:  op abs :_isMedian.4:dif *tmp161 0
  396:  set *tmp166 false
  397:  op add *tmp163 :_isMedian.4:gt :_isMedian.4:lt
  398:  jump *label201 lessThan *tmp163 5
  399:  op equal *tmp166 :_isMedian.4:gt :_isMedian.4:lt
        label *label201
  400:  jump *label202 equal *tmp166 false
  401:  set *tmp153 :_median.4:i
  402:  jump *label176 always 0 0
        label *label202
  403:  jump *label204 greaterThanEq :_isMedian.4:dif :_median.4:bestDif
  404:  set :_median.4:bestDif :_isMedian.4:dif
  405:  set :_median.4:best :_median.4:i
  406:  set :_median.4:count 1
  407:  multijump *tmp154 0 0
        label *label204
  408:  jump *label206 greaterThan :_isMedian.4:dif :_median.4:bestDif
  409:  op add :_median.4:best :_median.4:best :_median.4:i
  410:  op add :_median.4:count :_median.4:count 1
        label *label206
  411:  multijump *tmp154 0 0
        multilabel *label185
  412:  op div *tmp153 :_median.4:best :_median.4:count
        label *label176
  413:  assertequals 5 *tmp153 "median(1,1,5,5,5,5)"
  414:  set :_median.5:bestDif 10000000000
  415:  set :_median.5:best null
  416:  set :_median.5:count 1
  417:  set :_median.5:i 1
  418:  setaddr *tmp176 *label213
  419:  jump *label210 always 0 0
        multilabel *label213
  420:  set :_median.5:i 5
  421:  setaddr *tmp176 *label214
  422:  jump *label210 always 0 0
        multilabel *label214
  423:  set :_median.5:i 5
  424:  setaddr *tmp176 *label215
  425:  jump *label210 always 0 0
        multilabel *label215
  426:  set :_median.5:i 5
  427:  setaddr *tmp176 *label216
  428:  jump *label210 always 0 0
        multilabel *label216
  429:  set :_median.5:i 5
  430:  setaddr *tmp176 *label217
  431:  jump *label210 always 0 0
        multilabel *label217
  432:  set :_median.5:i 5
  433:  setaddr *tmp176 *label218
        label *label210
  434:  set :_isMedian.5:lt 0
  435:  set :_isMedian.5:gt 0
  436:  set :_isMedian.5:i 1
  437:  setaddr *tmp178 *label223
  438:  jump *label220 always 0 0
        multilabel *label223
  439:  set :_isMedian.5:i 5
  440:  setaddr *tmp178 *label224
  441:  jump *label220 always 0 0
        multilabel *label224
  442:  set :_isMedian.5:i 5
  443:  setaddr *tmp178 *label225
  444:  jump *label220 always 0 0
        multilabel *label225
  445:  set :_isMedian.5:i 5
  446:  setaddr *tmp178 *label226
  447:  jump *label220 always 0 0
        multilabel *label226
  448:  set :_isMedian.5:i 5
  449:  setaddr *tmp178 *label227
  450:  jump *label220 always 0 0
        multilabel *label227
  451:  set :_isMedian.5:i 5
  452:  setaddr *tmp178 *label228
        label *label220
  453:  jump *label229 greaterThanEq :_isMedian.5:i :_median.5:i
  454:  op add :_isMedian.5:lt :_isMedian.5:lt 1
  455:  multijump *tmp178 0 0
        label *label229
  456:  jump *label231 lessThanEq :_isMedian.5:i :_median.5:i
  457:  op add :_isMedian.5:gt :_isMedian.5:gt 1
        label *label231
  458:  multijump *tmp178 0 0
        multilabel *label228
  459:  op sub *tmp183 :_isMedian.5:gt :_isMedian.5:lt
  460:  op abs :_isMedian.5:dif *tmp183 0
  461:  set *tmp188 false
  462:  op add *tmp185 :_isMedian.5:gt :_isMedian.5:lt
  463:  jump *label234 lessThan *tmp185 5
  464:  op equal *tmp188 :_isMedian.5:gt :_isMedian.5:lt
        label *label234
  465:  jump *label235 equal *tmp188 false
  466:  set *tmp175 :_median.5:i
  467:  jump *label209 always 0 0
        label *label235
  468:  jump *label237 greaterThanEq :_isMedian.5:dif :_median.5:bestDif
  469:  set :_median.5:bestDif :_isMedian.5:dif
  470:  set :_median.5:best :_median.5:i
  471:  set :_median.5:count 1
  472:  multijump *tmp176 0 0
        label *label237
  473:  jump *label239 greaterThan :_isMedian.5:dif :_median.5:bestDif
  474:  op add :_median.5:best :_median.5:best :_median.5:i
  475:  op add :_median.5:count :_median.5:count 1
        label *label239
  476:  multijump *tmp176 0 0
        multilabel *label218
  477:  op div *tmp175 :_median.5:best :_median.5:count
        label *label209
  478:  assertequals 5 *tmp175 "median(1,5,5,5,5,5)"
  479:  set :_median.6:bestDif 10000000000
  480:  set :_median.6:best null
  481:  set :_median.6:count 1
  482:  setaddr *tmp198 *label246
  483:  jump *label268 always 0 0
        multilabel *label246
  484:  setaddr *tmp198 *label247
  485:  jump *label268 always 0 0
        multilabel *label247
  486:  setaddr *tmp198 *label248
  487:  jump *label268 always 0 0
        multilabel *label248
  488:  setaddr *tmp198 *label249
  489:  jump *label268 always 0 0
        multilabel *label249
  490:  setaddr *tmp198 *label250
  491:  jump *label268 always 0 0
        multilabel *label250
  492:  setaddr *tmp198 *label251
        label *label268
  493:  jump *label270 greaterThanEq 0 :_median.6:bestDif
  494:  set :_median.6:bestDif 0
  495:  set :_median.6:best 5
  496:  set :_median.6:count 1
  497:  multijump *tmp198 0 0
        label *label270
  498:  jump *label272 greaterThan 0 :_median.6:bestDif
  499:  op add :_median.6:best :_median.6:best 5
  500:  op add :_median.6:count :_median.6:count 1
        label *label272
  501:  multijump *tmp198 0 0
        multilabel *label251
  502:  op div *tmp197 :_median.6:best :_median.6:count
  503:  assertequals 5 *tmp197 "median(5,5,5,5,5,5)"
  504:  set :_median.7:bestDif 10000000000
  505:  set :_median.7:best null
  506:  set :_median.7:count 1
  507:  set :_median.7:i 1
  508:  setaddr *tmp220 *label279
  509:  jump *label276 always 0 0
        multilabel *label279
  510:  set :_median.7:i 2
  511:  setaddr *tmp220 *label280
  512:  jump *label276 always 0 0
        multilabel *label280
  513:  set :_median.7:i 3
  514:  setaddr *tmp220 *label281
  515:  jump *label276 always 0 0
        multilabel *label281
  516:  set :_median.7:i 4
  517:  setaddr *tmp220 *label282
  518:  jump *label276 always 0 0
        multilabel *label282
  519:  set :_median.7:i 5
  520:  setaddr *tmp220 *label283
  521:  jump *label276 always 0 0
        multilabel *label283
  522:  set :_median.7:i 6
  523:  setaddr *tmp220 *label284
  524:  jump *label276 always 0 0
        multilabel *label284
  525:  set :_median.7:i 7
  526:  setaddr *tmp220 *label285
  527:  jump *label276 always 0 0
        multilabel *label285
  528:  set :_median.7:i 8
  529:  setaddr *tmp220 *label286
  530:  jump *label276 always 0 0
        multilabel *label286
  531:  set :_median.7:i 9
  532:  setaddr *tmp220 *label287
        label *label276
  533:  set :_isMedian.7:lt 0
  534:  set :_isMedian.7:gt 0
  535:  jump *label602 greaterThanEq 1 :_median.7:i
  536:  set :_isMedian.7:lt 1
  537:  jump *label605 always 0 0
        label *label602
  538:  jump *label603 lessThanEq 1 :_median.7:i
  539:  set :_isMedian.7:gt 1
        label *label603
        label *label605
  540:  jump *label610 greaterThanEq 2 :_median.7:i
  541:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  542:  jump *label613 always 0 0
        label *label610
  543:  jump *label611 lessThanEq 2 :_median.7:i
  544:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label611
        label *label613
  545:  jump *label618 greaterThanEq 3 :_median.7:i
  546:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  547:  jump *label621 always 0 0
        label *label618
  548:  jump *label619 lessThanEq 3 :_median.7:i
  549:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label619
        label *label621
  550:  jump *label626 greaterThanEq 4 :_median.7:i
  551:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  552:  jump *label629 always 0 0
        label *label626
  553:  jump *label627 lessThanEq 4 :_median.7:i
  554:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label627
        label *label629
  555:  jump *label634 greaterThanEq 5 :_median.7:i
  556:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  557:  jump *label637 always 0 0
        label *label634
  558:  jump *label635 lessThanEq 5 :_median.7:i
  559:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label635
        label *label637
  560:  jump *label642 greaterThanEq 6 :_median.7:i
  561:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  562:  jump *label645 always 0 0
        label *label642
  563:  jump *label643 lessThanEq 6 :_median.7:i
  564:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label643
        label *label645
  565:  jump *label650 greaterThanEq 7 :_median.7:i
  566:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  567:  jump *label653 always 0 0
        label *label650
  568:  jump *label651 lessThanEq 7 :_median.7:i
  569:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label651
        label *label653
  570:  jump *label658 greaterThanEq 8 :_median.7:i
  571:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  572:  jump *label661 always 0 0
        label *label658
  573:  jump *label659 lessThanEq 8 :_median.7:i
  574:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label659
        label *label661
  575:  jump *label666 greaterThanEq 9 :_median.7:i
  576:  op add :_isMedian.7:lt :_isMedian.7:lt 1
  577:  jump *label669 always 0 0
        label *label666
  578:  jump *label667 lessThanEq 9 :_median.7:i
  579:  op add :_isMedian.7:gt :_isMedian.7:gt 1
        label *label667
        label *label669
  580:  op sub *tmp227 :_isMedian.7:gt :_isMedian.7:lt
  581:  op abs :_isMedian.7:dif *tmp227 0
  582:  set *tmp232 false
  583:  op add *tmp229 :_isMedian.7:gt :_isMedian.7:lt
  584:  jump *label306 lessThan *tmp229 8
  585:  op equal *tmp232 :_isMedian.7:gt :_isMedian.7:lt
        label *label306
  586:  jump *label307 equal *tmp232 false
  587:  set *tmp219 :_median.7:i
  588:  jump *label275 always 0 0
        label *label307
  589:  jump *label309 greaterThanEq :_isMedian.7:dif :_median.7:bestDif
  590:  set :_median.7:bestDif :_isMedian.7:dif
  591:  set :_median.7:best :_median.7:i
  592:  set :_median.7:count 1
  593:  multijump *tmp220 0 0
        label *label309
  594:  jump *label311 greaterThan :_isMedian.7:dif :_median.7:bestDif
  595:  op add :_median.7:best :_median.7:best :_median.7:i
  596:  op add :_median.7:count :_median.7:count 1
        label *label311
  597:  multijump *tmp220 0 0
        multilabel *label287
  598:  op div *tmp219 :_median.7:best :_median.7:count
        label *label275
  599:  assertequals 5 *tmp219 "median(1,2,3,4,5,6,7,8,9)"
  600:  set :_median.8:bestDif 10000000000
  601:  set :_median.8:best null
  602:  set :_median.8:count 1
  603:  set :_median.8:i 9
  604:  setaddr *tmp242 *label318
  605:  jump *label315 always 0 0
        multilabel *label318
  606:  set :_median.8:i 8
  607:  setaddr *tmp242 *label319
  608:  jump *label315 always 0 0
        multilabel *label319
  609:  set :_median.8:i 7
  610:  setaddr *tmp242 *label320
  611:  jump *label315 always 0 0
        multilabel *label320
  612:  set :_median.8:i 6
  613:  setaddr *tmp242 *label321
  614:  jump *label315 always 0 0
        multilabel *label321
  615:  set :_median.8:i 5
  616:  setaddr *tmp242 *label322
  617:  jump *label315 always 0 0
        multilabel *label322
  618:  set :_median.8:i 4
  619:  setaddr *tmp242 *label323
  620:  jump *label315 always 0 0
        multilabel *label323
  621:  set :_median.8:i 3
  622:  setaddr *tmp242 *label324
  623:  jump *label315 always 0 0
        multilabel *label324
  624:  set :_median.8:i 2
  625:  setaddr *tmp242 *label325
  626:  jump *label315 always 0 0
        multilabel *label325
  627:  set :_median.8:i 1
  628:  setaddr *tmp242 *label326
        label *label315
  629:  set :_isMedian.8:lt 0
  630:  set :_isMedian.8:gt 0
  631:  jump *label675 greaterThanEq 9 :_median.8:i
  632:  set :_isMedian.8:lt 1
  633:  jump *label678 always 0 0
        label *label675
  634:  jump *label676 lessThanEq 9 :_median.8:i
  635:  set :_isMedian.8:gt 1
        label *label676
        label *label678
  636:  jump *label683 greaterThanEq 8 :_median.8:i
  637:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  638:  jump *label686 always 0 0
        label *label683
  639:  jump *label684 lessThanEq 8 :_median.8:i
  640:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label684
        label *label686
  641:  jump *label691 greaterThanEq 7 :_median.8:i
  642:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  643:  jump *label694 always 0 0
        label *label691
  644:  jump *label692 lessThanEq 7 :_median.8:i
  645:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label692
        label *label694
  646:  jump *label699 greaterThanEq 6 :_median.8:i
  647:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  648:  jump *label702 always 0 0
        label *label699
  649:  jump *label700 lessThanEq 6 :_median.8:i
  650:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label700
        label *label702
  651:  jump *label707 greaterThanEq 5 :_median.8:i
  652:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  653:  jump *label710 always 0 0
        label *label707
  654:  jump *label708 lessThanEq 5 :_median.8:i
  655:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label708
        label *label710
  656:  jump *label715 greaterThanEq 4 :_median.8:i
  657:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  658:  jump *label718 always 0 0
        label *label715
  659:  jump *label716 lessThanEq 4 :_median.8:i
  660:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label716
        label *label718
  661:  jump *label723 greaterThanEq 3 :_median.8:i
  662:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  663:  jump *label726 always 0 0
        label *label723
  664:  jump *label724 lessThanEq 3 :_median.8:i
  665:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label724
        label *label726
  666:  jump *label731 greaterThanEq 2 :_median.8:i
  667:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  668:  jump *label734 always 0 0
        label *label731
  669:  jump *label732 lessThanEq 2 :_median.8:i
  670:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label732
        label *label734
  671:  jump *label739 greaterThanEq 1 :_median.8:i
  672:  op add :_isMedian.8:lt :_isMedian.8:lt 1
  673:  jump *label742 always 0 0
        label *label739
  674:  jump *label740 lessThanEq 1 :_median.8:i
  675:  op add :_isMedian.8:gt :_isMedian.8:gt 1
        label *label740
        label *label742
  676:  op sub *tmp249 :_isMedian.8:gt :_isMedian.8:lt
  677:  op abs :_isMedian.8:dif *tmp249 0
  678:  set *tmp254 false
  679:  op add *tmp251 :_isMedian.8:gt :_isMedian.8:lt
  680:  jump *label345 lessThan *tmp251 8
  681:  op equal *tmp254 :_isMedian.8:gt :_isMedian.8:lt
        label *label345
  682:  jump *label346 equal *tmp254 false
  683:  set *tmp241 :_median.8:i
  684:  jump *label314 always 0 0
        label *label346
  685:  jump *label348 greaterThanEq :_isMedian.8:dif :_median.8:bestDif
  686:  set :_median.8:bestDif :_isMedian.8:dif
  687:  set :_median.8:best :_median.8:i
  688:  set :_median.8:count 1
  689:  multijump *tmp242 0 0
        label *label348
  690:  jump *label350 greaterThan :_isMedian.8:dif :_median.8:bestDif
  691:  op add :_median.8:best :_median.8:best :_median.8:i
  692:  op add :_median.8:count :_median.8:count 1
        label *label350
  693:  multijump *tmp242 0 0
        multilabel *label326
  694:  op div *tmp241 :_median.8:best :_median.8:count
        label *label314
  695:  assertequals 5 *tmp241 "median(9,8,7,6,5,4,3,2,1)"
  696:  set :_median.9:bestDif 10000000000
  697:  set :_median.9:best null
  698:  set :_median.9:count 1
  699:  set :_median.9:i 1
  700:  setaddr *tmp264 *label357
  701:  jump *label354 always 0 0
        multilabel *label357
  702:  set :_median.9:i 3
  703:  setaddr *tmp264 *label358
  704:  jump *label354 always 0 0
        multilabel *label358
  705:  set :_median.9:i 5
  706:  setaddr *tmp264 *label359
  707:  jump *label354 always 0 0
        multilabel *label359
  708:  set :_median.9:i 7
  709:  setaddr *tmp264 *label360
  710:  jump *label354 always 0 0
        multilabel *label360
  711:  set :_median.9:i 9
  712:  setaddr *tmp264 *label361
  713:  jump *label354 always 0 0
        multilabel *label361
  714:  set :_median.9:i 2
  715:  setaddr *tmp264 *label362
  716:  jump *label354 always 0 0
        multilabel *label362
  717:  set :_median.9:i 4
  718:  setaddr *tmp264 *label363
  719:  jump *label354 always 0 0
        multilabel *label363
  720:  set :_median.9:i 6
  721:  setaddr *tmp264 *label364
  722:  jump *label354 always 0 0
        multilabel *label364
  723:  set :_median.9:i 8
  724:  setaddr *tmp264 *label365
        label *label354
  725:  set :_isMedian.9:lt 0
  726:  set :_isMedian.9:gt 0
  727:  jump *label748 greaterThanEq 1 :_median.9:i
  728:  set :_isMedian.9:lt 1
  729:  jump *label751 always 0 0
        label *label748
  730:  jump *label749 lessThanEq 1 :_median.9:i
  731:  set :_isMedian.9:gt 1
        label *label749
        label *label751
  732:  jump *label756 greaterThanEq 3 :_median.9:i
  733:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  734:  jump *label759 always 0 0
        label *label756
  735:  jump *label757 lessThanEq 3 :_median.9:i
  736:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label757
        label *label759
  737:  jump *label764 greaterThanEq 5 :_median.9:i
  738:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  739:  jump *label767 always 0 0
        label *label764
  740:  jump *label765 lessThanEq 5 :_median.9:i
  741:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label765
        label *label767
  742:  jump *label772 greaterThanEq 7 :_median.9:i
  743:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  744:  jump *label775 always 0 0
        label *label772
  745:  jump *label773 lessThanEq 7 :_median.9:i
  746:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label773
        label *label775
  747:  jump *label780 greaterThanEq 9 :_median.9:i
  748:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  749:  jump *label783 always 0 0
        label *label780
  750:  jump *label781 lessThanEq 9 :_median.9:i
  751:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label781
        label *label783
  752:  jump *label788 greaterThanEq 2 :_median.9:i
  753:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  754:  jump *label791 always 0 0
        label *label788
  755:  jump *label789 lessThanEq 2 :_median.9:i
  756:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label789
        label *label791
  757:  jump *label796 greaterThanEq 4 :_median.9:i
  758:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  759:  jump *label799 always 0 0
        label *label796
  760:  jump *label797 lessThanEq 4 :_median.9:i
  761:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label797
        label *label799
  762:  jump *label804 greaterThanEq 6 :_median.9:i
  763:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  764:  jump *label807 always 0 0
        label *label804
  765:  jump *label805 lessThanEq 6 :_median.9:i
  766:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label805
        label *label807
  767:  jump *label812 greaterThanEq 8 :_median.9:i
  768:  op add :_isMedian.9:lt :_isMedian.9:lt 1
  769:  jump *label815 always 0 0
        label *label812
  770:  jump *label813 lessThanEq 8 :_median.9:i
  771:  op add :_isMedian.9:gt :_isMedian.9:gt 1
        label *label813
        label *label815
  772:  op sub *tmp271 :_isMedian.9:gt :_isMedian.9:lt
  773:  op abs :_isMedian.9:dif *tmp271 0
  774:  set *tmp276 false
  775:  op add *tmp273 :_isMedian.9:gt :_isMedian.9:lt
  776:  jump *label384 lessThan *tmp273 8
  777:  op equal *tmp276 :_isMedian.9:gt :_isMedian.9:lt
        label *label384
  778:  jump *label385 equal *tmp276 false
  779:  set *tmp263 :_median.9:i
  780:  jump *label353 always 0 0
        label *label385
  781:  jump *label387 greaterThanEq :_isMedian.9:dif :_median.9:bestDif
  782:  set :_median.9:bestDif :_isMedian.9:dif
  783:  set :_median.9:best :_median.9:i
  784:  set :_median.9:count 1
  785:  multijump *tmp264 0 0
        label *label387
  786:  jump *label389 greaterThan :_isMedian.9:dif :_median.9:bestDif
  787:  op add :_median.9:best :_median.9:best :_median.9:i
  788:  op add :_median.9:count :_median.9:count 1
        label *label389
  789:  multijump *tmp264 0 0
        multilabel *label365
  790:  op div *tmp263 :_median.9:best :_median.9:count
        label *label353
  791:  assertequals 5 *tmp263 "median(1,3,5,7,9,2,4,6,8)"
  792:  set :_median.10:bestDif 10000000000
  793:  set :_median.10:best null
  794:  set :_median.10:count 1
  795:  set :_median.10:i 7
  796:  setaddr *tmp286 *label396
  797:  jump *label393 always 0 0
        multilabel *label396
  798:  set :_median.10:i 4
  799:  setaddr *tmp286 *label397
  800:  jump *label393 always 0 0
        multilabel *label397
  801:  set :_median.10:i 2
  802:  setaddr *tmp286 *label398
  803:  jump *label393 always 0 0
        multilabel *label398
  804:  set :_median.10:i 8
  805:  setaddr *tmp286 *label399
  806:  jump *label393 always 0 0
        multilabel *label399
  807:  set :_median.10:i 1
  808:  setaddr *tmp286 *label400
  809:  jump *label393 always 0 0
        multilabel *label400
  810:  set :_median.10:i 5
  811:  setaddr *tmp286 *label401
  812:  jump *label393 always 0 0
        multilabel *label401
  813:  set :_median.10:i 6
  814:  setaddr *tmp286 *label402
  815:  jump *label393 always 0 0
        multilabel *label402
  816:  set :_median.10:i 9
  817:  setaddr *tmp286 *label403
  818:  jump *label393 always 0 0
        multilabel *label403
  819:  set :_median.10:i 3
  820:  setaddr *tmp286 *label404
        label *label393
  821:  set :_isMedian.10:lt 0
  822:  set :_isMedian.10:gt 0
  823:  set :_isMedian.10:i 7
  824:  setaddr *tmp288 *label409
  825:  jump *label406 always 0 0
        multilabel *label409
  826:  set :_isMedian.10:i 4
  827:  setaddr *tmp288 *label410
  828:  jump *label406 always 0 0
        multilabel *label410
  829:  set :_isMedian.10:i 2
  830:  setaddr *tmp288 *label411
  831:  jump *label406 always 0 0
        multilabel *label411
  832:  set :_isMedian.10:i 8
  833:  setaddr *tmp288 *label412
  834:  jump *label406 always 0 0
        multilabel *label412
  835:  set :_isMedian.10:i 1
  836:  setaddr *tmp288 *label413
  837:  jump *label406 always 0 0
        multilabel *label413
  838:  set :_isMedian.10:i 5
  839:  setaddr *tmp288 *label414
  840:  jump *label406 always 0 0
        multilabel *label414
  841:  set :_isMedian.10:i 6
  842:  setaddr *tmp288 *label415
  843:  jump *label406 always 0 0
        multilabel *label415
  844:  set :_isMedian.10:i 9
  845:  setaddr *tmp288 *label416
  846:  jump *label406 always 0 0
        multilabel *label416
  847:  set :_isMedian.10:i 3
  848:  setaddr *tmp288 *label417
        label *label406
  849:  jump *label418 greaterThanEq :_isMedian.10:i :_median.10:i
  850:  op add :_isMedian.10:lt :_isMedian.10:lt 1
  851:  multijump *tmp288 0 0
        label *label418
  852:  jump *label420 lessThanEq :_isMedian.10:i :_median.10:i
  853:  op add :_isMedian.10:gt :_isMedian.10:gt 1
        label *label420
  854:  multijump *tmp288 0 0
        multilabel *label417
  855:  op sub *tmp293 :_isMedian.10:gt :_isMedian.10:lt
  856:  op abs :_isMedian.10:dif *tmp293 0
  857:  set *tmp298 false
  858:  op add *tmp295 :_isMedian.10:gt :_isMedian.10:lt
  859:  jump *label423 lessThan *tmp295 8
  860:  op equal *tmp298 :_isMedian.10:gt :_isMedian.10:lt
        label *label423
  861:  jump *label424 equal *tmp298 false
  862:  set *tmp285 :_median.10:i
  863:  jump *label392 always 0 0
        label *label424
  864:  jump *label426 greaterThanEq :_isMedian.10:dif :_median.10:bestDif
  865:  set :_median.10:bestDif :_isMedian.10:dif
  866:  set :_median.10:best :_median.10:i
  867:  set :_median.10:count 1
  868:  multijump *tmp286 0 0
        label *label426
  869:  jump *label428 greaterThan :_isMedian.10:dif :_median.10:bestDif
  870:  op add :_median.10:best :_median.10:best :_median.10:i
  871:  op add :_median.10:count :_median.10:count 1
        label *label428
  872:  multijump *tmp286 0 0
        multilabel *label404
  873:  op div *tmp285 :_median.10:best :_median.10:count
        label *label392
  874:  assertequals 5 *tmp285 "median(7,4,2,8,1,5,6,9,3)"
  875:  set :_median.11:bestDif 10000000000
  876:  set :_median.11:best null
  877:  set :_median.11:count 1
  878:  set :_median.11:i 1
  879:  setaddr *tmp308 *label435
  880:  jump *label432 always 0 0
        multilabel *label435
  881:  set :_median.11:i 1
  882:  setaddr *tmp308 *label436
  883:  jump *label432 always 0 0
        multilabel *label436
  884:  set :_median.11:i 1
  885:  setaddr *tmp308 *label437
  886:  jump *label432 always 0 0
        multilabel *label437
  887:  set :_median.11:i 1
  888:  setaddr *tmp308 *label438
  889:  jump *label432 always 0 0
        multilabel *label438
  890:  set :_median.11:i 9
  891:  setaddr *tmp308 *label439
  892:  jump *label432 always 0 0
        multilabel *label439
  893:  set :_median.11:i 9
  894:  setaddr *tmp308 *label440
  895:  jump *label432 always 0 0
        multilabel *label440
  896:  set :_median.11:i 9
  897:  setaddr *tmp308 *label441
  898:  jump *label432 always 0 0
        multilabel *label441
  899:  set :_median.11:i 9
  900:  setaddr *tmp308 *label442
  901:  jump *label432 always 0 0
        multilabel *label442
  902:  set :_median.11:i 5
  903:  setaddr *tmp308 *label443
        label *label432
  904:  set :_isMedian.11:lt 0
  905:  set :_isMedian.11:gt 0
  906:  set :_isMedian.11:i 1
  907:  setaddr *tmp310 *label448
  908:  jump *label445 always 0 0
        multilabel *label448
  909:  set :_isMedian.11:i 1
  910:  setaddr *tmp310 *label449
  911:  jump *label445 always 0 0
        multilabel *label449
  912:  set :_isMedian.11:i 1
  913:  setaddr *tmp310 *label450
  914:  jump *label445 always 0 0
        multilabel *label450
  915:  set :_isMedian.11:i 1
  916:  setaddr *tmp310 *label451
  917:  jump *label445 always 0 0
        multilabel *label451
  918:  set :_isMedian.11:i 9
  919:  setaddr *tmp310 *label452
  920:  jump *label445 always 0 0
        multilabel *label452
  921:  set :_isMedian.11:i 9
  922:  setaddr *tmp310 *label453
  923:  jump *label445 always 0 0
        multilabel *label453
  924:  set :_isMedian.11:i 9
  925:  setaddr *tmp310 *label454
  926:  jump *label445 always 0 0
        multilabel *label454
  927:  set :_isMedian.11:i 9
  928:  setaddr *tmp310 *label455
  929:  jump *label445 always 0 0
        multilabel *label455
  930:  set :_isMedian.11:i 5
  931:  setaddr *tmp310 *label456
        label *label445
  932:  jump *label457 greaterThanEq :_isMedian.11:i :_median.11:i
  933:  op add :_isMedian.11:lt :_isMedian.11:lt 1
  934:  multijump *tmp310 0 0
        label *label457
  935:  jump *label459 lessThanEq :_isMedian.11:i :_median.11:i
  936:  op add :_isMedian.11:gt :_isMedian.11:gt 1
        label *label459
  937:  multijump *tmp310 0 0
        multilabel *label456
  938:  op sub *tmp315 :_isMedian.11:gt :_isMedian.11:lt
  939:  op abs :_isMedian.11:dif *tmp315 0
  940:  set *tmp320 false
  941:  op add *tmp317 :_isMedian.11:gt :_isMedian.11:lt
  942:  jump *label462 lessThan *tmp317 8
  943:  op equal *tmp320 :_isMedian.11:gt :_isMedian.11:lt
        label *label462
  944:  jump *label463 equal *tmp320 false
  945:  set *tmp307 :_median.11:i
  946:  jump *label431 always 0 0
        label *label463
  947:  jump *label465 greaterThanEq :_isMedian.11:dif :_median.11:bestDif
  948:  set :_median.11:bestDif :_isMedian.11:dif
  949:  set :_median.11:best :_median.11:i
  950:  set :_median.11:count 1
  951:  multijump *tmp308 0 0
        label *label465
  952:  jump *label467 greaterThan :_isMedian.11:dif :_median.11:bestDif
  953:  op add :_median.11:best :_median.11:best :_median.11:i
  954:  op add :_median.11:count :_median.11:count 1
        label *label467
  955:  multijump *tmp308 0 0
        multilabel *label443
  956:  op div *tmp307 :_median.11:best :_median.11:count
        label *label431
  957:  assertequals 5 *tmp307 "median(1,1,1,1,9,9,9,9,5)"
  958:  stop
  959:  end
        label *label1
  960:  op max :median:y2 :median:x1 :median:x2
  961:  op min :median:y3 :median:x3 :median:x4
  962:  jump *label470 greaterThan :median:y2 :median:y3
  963:  op add *tmp332 :median:y2 :median:y3
  964:  op div :median*retval *tmp332 2
  965:  return :median*retaddr
        label *label470
  966:  op min :median:y1 :median:x1 :median:x2
  967:  op max :median:y4 :median:x3 :median:x4
  968:  jump *label472 lessThan :median:y1 :median:y4
  969:  op add *tmp338 :median:y1 :median:y4
  970:  op div :median*retval *tmp338 2
  971:  return :median*retaddr
        label *label472
  972:  op max *tmp340 :median:y1 :median:y3
  973:  op min *tmp341 :median:y2 :median:y4
  974:  op add *tmp342 *tmp340 *tmp341
  975:  op div :median*retval *tmp342 2
  976:  return :median*retaddr
        label *label2
  977:  op min :median.1:y1 :median.1:x1 :median.1:x2
  978:  op max :median.1:y2 :median.1:x1 :median.1:x2
  979:  op min :median.1:y4 :median.1:x4 :median.1:x5
  980:  op max :median.1:y5 :median.1:x4 :median.1:x5
  981:  jump *label475 greaterThanEq :median.1:y4 :median.1:y1
  982:  set :median.1:y4 :median.1:y1
  983:  set :_swap.1:t :median.1:y2
  984:  set :median.1:y2 :median.1:y5
  985:  set :median.1:y5 :_swap.1:t
        label *label475
  986:  jump *label479 lessThanEq :median.1:x3 :median.1:y2
  987:  op min :median.1*retval :median.1:y2 :median.1:y5
  988:  jump *label480 greaterThanEq :median.1:y2 :median.1:y4
  989:  op min :median.1*retval :median.1:x3 :median.1:y4
  990:  return :median.1*retaddr
        label *label479
  991:  op min :median.1*retval :median.1:y2 :median.1:y4
  992:  jump *label484 lessThanEq :median.1:x3 :median.1:y4
  993:  op min :median.1*retval :median.1:x3 :median.1:y5
        label *label484
        label *label480
  994:  return :median.1*retaddr


stop instruction encountered, dumping variable values:
*tmp100: 0.0
*tmp109: 1.0
*tmp110: 282.0
*tmp112: 264.0
*tmp117: -4.0
*tmp119: 4.0
*tmp122: 0.0
*tmp131: 3.0
*tmp132: 347.0
*tmp134: 329.0
*tmp139: -3.0
*tmp141: 3.0
*tmp144: 0.0
*tmp153: 5.0
*tmp154: 412.0
*tmp156: 394.0
*tmp161: -2.0
*tmp163: 2.0
*tmp166: 0.0
*tmp175: 5.0
*tmp176: 477.0
*tmp178: 459.0
*tmp183: -1.0
*tmp185: 1.0
*tmp188: 0.0
*tmp197: 5.0
*tmp198: 502.0
*tmp219: 5.0
*tmp220: 522.0
*tmp227: 0.0
*tmp229: 8.0
*tmp232: 1.0
*tmp241: 5.0
*tmp242: 618.0
*tmp249: 0.0
*tmp251: 8.0
*tmp254: 1.0
*tmp263: 5.0
*tmp264: 708.0
*tmp271: 0.0
*tmp273: 8.0
*tmp276: 1.0
*tmp285: 5.0
*tmp286: 813.0
*tmp288: 855.0
*tmp293: 0.0
*tmp295: 8.0
*tmp298: 1.0
*tmp307: 5.0
*tmp308: 956.0
*tmp310: 938.0
*tmp315: 0.0
*tmp317: 8.0
*tmp320: 1.0
*tmp332: 10.0
*tmp338: 10.0
*tmp340: 4.0
*tmp341: 6.0
*tmp342: 10.0
*tmp65: 1.0
*tmp66: 152.0
*tmp87: 1.0
*tmp88: 217.0
*tmp90: 199.0
*tmp95: -5.0
*tmp97: 5.0
:_isMedian.10:dif: 0.0
:_isMedian.10:gt: 4.0
:_isMedian.10:i: 3.0
:_isMedian.10:lt: 4.0
:_isMedian.11:dif: 0.0
:_isMedian.11:gt: 4.0
:_isMedian.11:i: 5.0
:_isMedian.11:lt: 4.0
:_isMedian.1:dif: 5.0
:_isMedian.1:gt: 0.0
:_isMedian.1:i: 5.0
:_isMedian.1:lt: 5.0
:_isMedian.2:dif: 4.0
:_isMedian.2:gt: 0.0
:_isMedian.2:i: 5.0
:_isMedian.2:lt: 4.0
:_isMedian.3:dif: 3.0
:_isMedian.3:gt: 0.0
:_isMedian.3:i: 5.0
:_isMedian.3:lt: 3.0
:_isMedian.4:dif: 2.0
:_isMedian.4:gt: 0.0
:_isMedian.4:i: 5.0
:_isMedian.4:lt: 2.0
:_isMedian.5:dif: 1.0
:_isMedian.5:gt: 0.0
:_isMedian.5:i: 5.0
:_isMedian.5:lt: 1.0
:_isMedian.7:dif: 0.0
:_isMedian.7:gt: 4.0
:_isMedian.7:lt: 4.0
:_isMedian.8:dif: 0.0
:_isMedian.8:gt: 4.0
:_isMedian.8:lt: 4.0
:_isMedian.9:dif: 0.0
:_isMedian.9:gt: 4.0
:_isMedian.9:lt: 4.0
:_median.10:best: 4.0
:_median.10:bestDif: 2.0
:_median.10:count: 1.0
:_median.10:i: 5.0
:_median.11:best: 40.0
:_median.11:bestDif: 5.0
:_median.11:count: 8.0
:_median.11:i: 5.0
:_median.1:best: 5.0
:_median.1:bestDif: 1.0
:_median.1:count: 5.0
:_median.1:i: 5.0
:_median.2:best: 4.0
:_median.2:bestDif: 2.0
:_median.2:count: 4.0
:_median.2:i: 5.0
:_median.3:best: 18.0
:_median.3:bestDif: 3.0
:_median.3:count: 6.0
:_median.3:i: 5.0
:_median.4:best: 20.0
:_median.4:bestDif: 2.0
:_median.4:count: 4.0
:_median.4:i: 5.0
:_median.5:best: 25.0
:_median.5:bestDif: 1.0
:_median.5:count: 5.0
:_median.5:i: 5.0
:_median.6:best: 30.0
:_median.6:bestDif: 0.0
:_median.6:count: 6.0
:_median.7:best: 4.0
:_median.7:bestDif: 2.0
:_median.7:count: 1.0
:_median.7:i: 5.0
:_median.8:best: 6.0
:_median.8:bestDif: 2.0
:_median.8:count: 1.0
:_median.8:i: 5.0
:_median.9:best: 3.0
:_median.9:bestDif: 4.0
:_median.9:count: 1.0
:_median.9:i: 5.0
:_median:best: 6.0
:_median:bestDif: 0.0
:_median:count: 6.0
:_swap.1:t: 5.0
:integer.1:result: -5.0
:integer.2:result: 100.0
:integer:result: 0.0
:median*retaddr: 86.0
:median*retval: 5.0
:median.1*retaddr: 128.0
:median.1*retval: 5.0
:median.1:x1: 5.0
:median.1:x2: 5.0
:median.1:x3: 5.0
:median.1:x4: 5.0
:median.1:x5: 5.0
:median.1:y1: 5.0
:median.1:y2: 5.0
:median.1:y4: 5.0
:median.1:y5: 5.0
:median:x1: 6.0
:median:x2: 2.0
:median:x3: 8.0
:median:x4: 4.0
:median:y1: 2.0
:median:y2: 6.0
:median:y3: 4.0
:median:y4: 8.0
:nullToZero.1:result: 1.0
:nullToZero:result: 0.0
@counter: 959.0