set p 0
assertflush
print "xxxxx"
assertprints "xxxxx" "Array fill"
set .b*0 p
set .c*0 p
op add *tmp4 p 1
set .b*1 *tmp4
set .c*1 *tmp4
op add *tmp4 p 2
set .b*2 *tmp4
set .c*2 *tmp4
op add *tmp4 p 3
set .b*3 *tmp4
set .c*3 *tmp4
op add *tmp4 p 4
set .b*4 *tmp4
set .c*4 *tmp4
op add *tmp4 p 5
set .b*5 *tmp4
set .c*5 *tmp4
op add *tmp4 p 6
set .b*6 *tmp4
set .c*6 *tmp4
op add *tmp4 p 7
set .b*7 *tmp4
set .c*7 *tmp4
op add *tmp4 p 8
set .b*8 *tmp4
set .c*8 *tmp4
op add *tmp4 p 9
set .b*9 *tmp4
set .c*9 *tmp4
set .b*0 *tmp4
set .b*9 p
set :reverse:t .b*1
set .b*1 .b*8
set .b*8 :reverse:t
set :reverse:t .b*2
set .b*2 .b*7
set .b*7 :reverse:t
set :reverse:t .b*3
set .b*3 .b*6
set .b*6 :reverse:t
set :reverse:t .b*4
set *tmp14 .b*5
set .b*4 .b*5
set .b*5 :reverse:t
assertflush
print *tmp4
print .b*1
print .b*2
print .b*3
print *tmp14
print :reverse:t
print .b*6
print .b*7
print .b*8
print p
assertprints "9876543210" "Array reverse"
set :bubblesort:flag true
set :bubblesort:a .b*0
op greaterThan *tmp19 .b*0 .b*1
jump 68 equal *tmp19 false
set .b*0 .b*1
set .b*1 :bubblesort:a
set :bubblesort:flag false
jump 70 always 0 0
set :bubblesort:a .b*1
jump 70 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*2
jump 76 equal *tmp19 false
set .b*1 .b*2
set .b*2 :bubblesort:a
set :bubblesort:flag false
jump 78 always 0 0
set :bubblesort:a .b*2
jump 78 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*3
jump 84 equal *tmp19 false
set .b*2 .b*3
set .b*3 :bubblesort:a
set :bubblesort:flag false
jump 86 always 0 0
set :bubblesort:a .b*3
jump 86 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*4
jump 92 equal *tmp19 false
set .b*3 .b*4
set .b*4 :bubblesort:a
set :bubblesort:flag false
jump 94 always 0 0
set :bubblesort:a .b*4
jump 94 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*5
jump 100 equal *tmp19 false
set .b*4 .b*5
set .b*5 :bubblesort:a
set :bubblesort:flag false
jump 102 always 0 0
set :bubblesort:a .b*5
jump 102 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*6
jump 108 equal *tmp19 false
set .b*5 .b*6
set .b*6 :bubblesort:a
set :bubblesort:flag false
jump 110 always 0 0
set :bubblesort:a .b*6
jump 110 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*7
jump 116 equal *tmp19 false
set .b*6 .b*7
set .b*7 :bubblesort:a
set :bubblesort:flag false
jump 118 always 0 0
set :bubblesort:a .b*7
jump 118 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*8
jump 124 equal *tmp19 false
set .b*7 .b*8
set .b*8 :bubblesort:a
set :bubblesort:flag false
jump 126 always 0 0
set :bubblesort:a .b*8
jump 126 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*9
jump 131 equal *tmp19 false
set .b*8 .b*9
set .b*9 :bubblesort:a
set :bubblesort:flag false
jump 194 notEqual :bubblesort:flag false
set :bubblesort:a .b*9
op lessThan *tmp31 .b*9 .b*8
jump 138 equal *tmp31 false
set .b*9 .b*8
set .b*8 :bubblesort:a
jump 140 always 0 0
set :bubblesort:a .b*8
jump 140 always 0 0
op lessThan *tmp31 :bubblesort:a .b*7
jump 145 equal *tmp31 false
set .b*8 .b*7
set .b*7 :bubblesort:a
jump 147 always 0 0
set :bubblesort:a .b*7
jump 147 always 0 0
op lessThan *tmp31 :bubblesort:a .b*6
jump 152 equal *tmp31 false
set .b*7 .b*6
set .b*6 :bubblesort:a
jump 154 always 0 0
set :bubblesort:a .b*6
jump 154 always 0 0
op lessThan *tmp31 :bubblesort:a .b*5
jump 159 equal *tmp31 false
set .b*6 .b*5
set .b*5 :bubblesort:a
jump 161 always 0 0
set :bubblesort:a .b*5
jump 161 always 0 0
op lessThan *tmp31 :bubblesort:a .b*4
jump 166 equal *tmp31 false
set .b*5 .b*4
set .b*4 :bubblesort:a
jump 168 always 0 0
set :bubblesort:a .b*4
jump 168 always 0 0
op lessThan *tmp31 :bubblesort:a .b*3
jump 173 equal *tmp31 false
set .b*4 .b*3
set .b*3 :bubblesort:a
jump 175 always 0 0
set :bubblesort:a .b*3
jump 175 always 0 0
op lessThan *tmp31 :bubblesort:a .b*2
jump 180 equal *tmp31 false
set .b*3 .b*2
set .b*2 :bubblesort:a
jump 182 always 0 0
set :bubblesort:a .b*2
jump 182 always 0 0
op lessThan *tmp31 :bubblesort:a .b*1
jump 187 equal *tmp31 false
set .b*2 .b*1
set .b*1 :bubblesort:a
jump 189 always 0 0
set :bubblesort:a .b*1
jump 189 always 0 0
op lessThan *tmp31 :bubblesort:a .b*0
jump 60 equal *tmp31 false
set .b*1 .b*0
set .b*0 :bubblesort:a
jump 60 always 0 0
assertflush
print .b*0
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print .b*9
assertprints "0123456789" "Array sort 1"
set :bubblesort.1:flag true
set :bubblesort.1:a .b*0
jump 216 greaterThanEq .b*0 .b*1
set .b*0 .b*1
set .b*1 :bubblesort.1:a
set :bubblesort.1:v .c*0
set .c*0 .c*1
set .c*1 :bubblesort.1:v
set :bubblesort.1:flag false
jump 217 always 0 0
set :bubblesort.1:a .b*1
jump 225 greaterThanEq :bubblesort.1:a .b*2
set .b*1 .b*2
set .b*2 :bubblesort.1:a
set :bubblesort.1:v .c*1
set .c*1 .c*2
set .c*2 :bubblesort.1:v
set :bubblesort.1:flag false
jump 226 always 0 0
set :bubblesort.1:a .b*2
jump 234 greaterThanEq :bubblesort.1:a .b*3
set .b*2 .b*3
set .b*3 :bubblesort.1:a
set :bubblesort.1:v .c*2
set .c*2 .c*3
set .c*3 :bubblesort.1:v
set :bubblesort.1:flag false
jump 235 always 0 0
set :bubblesort.1:a .b*3
jump 243 greaterThanEq :bubblesort.1:a .b*4
set .b*3 .b*4
set .b*4 :bubblesort.1:a
set :bubblesort.1:v .c*3
set .c*3 .c*4
set .c*4 :bubblesort.1:v
set :bubblesort.1:flag false
jump 244 always 0 0
set :bubblesort.1:a .b*4
jump 252 greaterThanEq :bubblesort.1:a .b*5
set .b*4 .b*5
set .b*5 :bubblesort.1:a
set :bubblesort.1:v .c*4
set .c*4 .c*5
set .c*5 :bubblesort.1:v
set :bubblesort.1:flag false
jump 253 always 0 0
set :bubblesort.1:a .b*5
jump 261 greaterThanEq :bubblesort.1:a .b*6
set .b*5 .b*6
set .b*6 :bubblesort.1:a
set :bubblesort.1:v .c*5
set .c*5 .c*6
set .c*6 :bubblesort.1:v
set :bubblesort.1:flag false
jump 262 always 0 0
set :bubblesort.1:a .b*6
jump 270 greaterThanEq :bubblesort.1:a .b*7
set .b*6 .b*7
set .b*7 :bubblesort.1:a
set :bubblesort.1:v .c*6
set .c*6 .c*7
set .c*7 :bubblesort.1:v
set :bubblesort.1:flag false
jump 271 always 0 0
set :bubblesort.1:a .b*7
jump 279 greaterThanEq :bubblesort.1:a .b*8
set .b*7 .b*8
set .b*8 :bubblesort.1:a
set :bubblesort.1:v .c*7
set .c*7 .c*8
set .c*8 :bubblesort.1:v
set :bubblesort.1:flag false
jump 280 always 0 0
set :bubblesort.1:a .b*8
jump 287 greaterThanEq :bubblesort.1:a .b*9
set .b*8 .b*9
set .b*9 :bubblesort.1:a
set :bubblesort.1:v .c*8
set .c*8 .c*9
set .c*9 :bubblesort.1:v
set :bubblesort.1:flag false
jump 369 notEqual :bubblesort.1:flag false
set :bubblesort.1:a .b*9
op greaterThan *tmp64 .b*9 .b*8
jump 297 equal *tmp64 false
set .b*9 .b*8
set .b*8 :bubblesort.1:a
set :bubblesort.1:v.1 .c*9
set .c*9 .c*8
set .c*8 :bubblesort.1:v.1
jump 298 always 0 0
set :bubblesort.1:a .b*8
op greaterThan *tmp64 :bubblesort.1:a .b*7
jump 306 equal *tmp64 false
set .b*8 .b*7
set .b*7 :bubblesort.1:a
set :bubblesort.1:v.1 .c*8
set .c*8 .c*7
set .c*7 :bubblesort.1:v.1
jump 307 always 0 0
set :bubblesort.1:a .b*7
op greaterThan *tmp64 :bubblesort.1:a .b*6
jump 315 equal *tmp64 false
set .b*7 .b*6
set .b*6 :bubblesort.1:a
set :bubblesort.1:v.1 .c*7
set .c*7 .c*6
set .c*6 :bubblesort.1:v.1
jump 316 always 0 0
set :bubblesort.1:a .b*6
op greaterThan *tmp64 :bubblesort.1:a .b*5
jump 324 equal *tmp64 false
set .b*6 .b*5
set .b*5 :bubblesort.1:a
set :bubblesort.1:v.1 .c*6
set .c*6 .c*5
set .c*5 :bubblesort.1:v.1
jump 325 always 0 0
set :bubblesort.1:a .b*5
op greaterThan *tmp64 :bubblesort.1:a .b*4
jump 333 equal *tmp64 false
set .b*5 .b*4
set .b*4 :bubblesort.1:a
set :bubblesort.1:v.1 .c*5
set .c*5 .c*4
set .c*4 :bubblesort.1:v.1
jump 334 always 0 0
set :bubblesort.1:a .b*4
op greaterThan *tmp64 :bubblesort.1:a .b*3
jump 342 equal *tmp64 false
set .b*4 .b*3
set .b*3 :bubblesort.1:a
set :bubblesort.1:v.1 .c*4
set .c*4 .c*3
set .c*3 :bubblesort.1:v.1
jump 343 always 0 0
set :bubblesort.1:a .b*3
op greaterThan *tmp64 :bubblesort.1:a .b*2
jump 351 equal *tmp64 false
set .b*3 .b*2
set .b*2 :bubblesort.1:a
set :bubblesort.1:v.1 .c*3
set .c*3 .c*2
set .c*2 :bubblesort.1:v.1
jump 352 always 0 0
set :bubblesort.1:a .b*2
op greaterThan *tmp64 :bubblesort.1:a .b*1
jump 360 equal *tmp64 false
set .b*2 .b*1
set .b*1 :bubblesort.1:a
set :bubblesort.1:v.1 .c*2
set .c*2 .c*1
set .c*1 :bubblesort.1:v.1
jump 361 always 0 0
set :bubblesort.1:a .b*1
op greaterThan *tmp64 :bubblesort.1:a .b*0
jump 206 equal *tmp64 false
set .b*1 .b*0
set .b*0 :bubblesort.1:a
set :bubblesort.1:v.1 .c*1
set .c*1 .c*0
set .c*0 :bubblesort.1:v.1
jump 206 always 0 0
assertflush
print .c*0
print .c*1
print .c*2
print .c*3
print .c*4
print .c*5
print .c*6
print .c*7
print .c*8
print .c*9
assertprints "9876543210" "Array sort 2"
