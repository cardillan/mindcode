set p 0
assertflush
print "xxxxx"
assertprints "xxxxx" "Array fill"
set .c*0 p
op add *tmp4 p 1
set .b*1 *tmp4
set .c*1 *tmp4
op add *tmp4 p 2
set .b*2 *tmp4
set .c*2 *tmp4
op add *tmp4 p 3
set .b*3 *tmp4
set .c*3 *tmp4
op add *tmp4 p 4
set .b*4 *tmp4
set .c*4 *tmp4
op add *tmp4 p 5
set .b*5 *tmp4
set .c*5 *tmp4
op add *tmp4 p 6
set .b*6 *tmp4
set .c*6 *tmp4
op add *tmp4 p 7
set .b*7 *tmp4
set .c*7 *tmp4
op add *tmp4 p 8
set .b*8 *tmp4
set .c*8 *tmp4
op add *tmp4 p 9
set .c*9 *tmp4
set .b*0 *tmp4
set .b*9 p
set :reverse:t .b*1
set .b*1 .b*8
set .b*8 :reverse:t
set :reverse:t .b*2
set .b*2 .b*7
set .b*7 :reverse:t
set :reverse:t .b*3
set .b*3 .b*6
set .b*6 :reverse:t
set :reverse:t .b*4
set *tmp14 .b*5
set .b*4 .b*5
set .b*5 :reverse:t
assertflush
print *tmp4
print .b*1
print .b*2
print .b*3
print *tmp14
print :reverse:t
print .b*6
print .b*7
print .b*8
print p
assertprints "9876543210" "Array reverse"
set :bubblesort:flag false
set :bubblesort:a .b*0
op greaterThan *tmp19 .b*0 .b*1
jump 66 equal *tmp19 false
set .b*0 .b*1
set .b*1 :bubblesort:a
set :bubblesort:flag true
jump 68 always 0 0
set :bubblesort:a .b*1
jump 68 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*2
jump 74 equal *tmp19 false
set .b*1 .b*2
set .b*2 :bubblesort:a
set :bubblesort:flag true
jump 76 always 0 0
set :bubblesort:a .b*2
jump 76 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*3
jump 82 equal *tmp19 false
set .b*2 .b*3
set .b*3 :bubblesort:a
set :bubblesort:flag true
jump 84 always 0 0
set :bubblesort:a .b*3
jump 84 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*4
jump 90 equal *tmp19 false
set .b*3 .b*4
set .b*4 :bubblesort:a
set :bubblesort:flag true
jump 92 always 0 0
set :bubblesort:a .b*4
jump 92 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*5
jump 98 equal *tmp19 false
set .b*4 .b*5
set .b*5 :bubblesort:a
set :bubblesort:flag true
jump 100 always 0 0
set :bubblesort:a .b*5
jump 100 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*6
jump 106 equal *tmp19 false
set .b*5 .b*6
set .b*6 :bubblesort:a
set :bubblesort:flag true
jump 108 always 0 0
set :bubblesort:a .b*6
jump 108 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*7
jump 114 equal *tmp19 false
set .b*6 .b*7
set .b*7 :bubblesort:a
set :bubblesort:flag true
jump 116 always 0 0
set :bubblesort:a .b*7
jump 116 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*8
jump 122 equal *tmp19 false
set .b*7 .b*8
set .b*8 :bubblesort:a
set :bubblesort:flag true
jump 124 always 0 0
set :bubblesort:a .b*8
jump 124 always 0 0
op greaterThan *tmp19 :bubblesort:a .b*9
jump 129 equal *tmp19 false
set .b*8 .b*9
set .b*9 :bubblesort:a
set :bubblesort:flag true
jump 201 equal :bubblesort:flag false
set :bubblesort:a .b*9
op lessThan *tmp32 .b*9 .b*8
jump 137 equal *tmp32 false
set .b*9 .b*8
set .b*8 :bubblesort:a
set :bubblesort:flag true
jump 139 always 0 0
set :bubblesort:a .b*8
jump 139 always 0 0
op lessThan *tmp32 :bubblesort:a .b*7
jump 145 equal *tmp32 false
set .b*8 .b*7
set .b*7 :bubblesort:a
set :bubblesort:flag true
jump 147 always 0 0
set :bubblesort:a .b*7
jump 147 always 0 0
op lessThan *tmp32 :bubblesort:a .b*6
jump 153 equal *tmp32 false
set .b*7 .b*6
set .b*6 :bubblesort:a
set :bubblesort:flag true
jump 155 always 0 0
set :bubblesort:a .b*6
jump 155 always 0 0
op lessThan *tmp32 :bubblesort:a .b*5
jump 161 equal *tmp32 false
set .b*6 .b*5
set .b*5 :bubblesort:a
set :bubblesort:flag true
jump 163 always 0 0
set :bubblesort:a .b*5
jump 163 always 0 0
op lessThan *tmp32 :bubblesort:a .b*4
jump 169 equal *tmp32 false
set .b*5 .b*4
set .b*4 :bubblesort:a
set :bubblesort:flag true
jump 171 always 0 0
set :bubblesort:a .b*4
jump 171 always 0 0
op lessThan *tmp32 :bubblesort:a .b*3
jump 177 equal *tmp32 false
set .b*4 .b*3
set .b*3 :bubblesort:a
set :bubblesort:flag true
jump 179 always 0 0
set :bubblesort:a .b*3
jump 179 always 0 0
op lessThan *tmp32 :bubblesort:a .b*2
jump 185 equal *tmp32 false
set .b*3 .b*2
set .b*2 :bubblesort:a
set :bubblesort:flag true
jump 187 always 0 0
set :bubblesort:a .b*2
jump 187 always 0 0
op lessThan *tmp32 :bubblesort:a .b*1
jump 193 equal *tmp32 false
set .b*2 .b*1
set .b*1 :bubblesort:a
set :bubblesort:flag true
jump 195 always 0 0
set :bubblesort:a .b*1
jump 195 always 0 0
op lessThan *tmp32 :bubblesort:a .b*0
jump 200 equal *tmp32 false
set .b*1 .b*0
set .b*0 :bubblesort:a
set :bubblesort:flag true
jump 58 notEqual :bubblesort:flag false
assertflush
print .b*0
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print .b*9
assertprints "0123456789" "Array sort 1"
set :bubblesort.1:flag false
set :bubblesort.1:a .b*0
set :bubblesort.1:i 1
op mul *tmp85 :bubblesort.1:i 2
op add @counter *tmp85 218
set :bubblesort.1:b .b*0
jump 237 always 0 0
set :bubblesort.1:b .b*1
jump 237 always 0 0
set :bubblesort.1:b .b*2
jump 237 always 0 0
set :bubblesort.1:b .b*3
jump 237 always 0 0
set :bubblesort.1:b .b*4
jump 237 always 0 0
set :bubblesort.1:b .b*5
jump 237 always 0 0
set :bubblesort.1:b .b*6
jump 237 always 0 0
set :bubblesort.1:b .b*7
jump 237 always 0 0
set :bubblesort.1:b .b*8
jump 237 always 0 0
set :bubblesort.1:b .b*9
jump 362 greaterThanEq :bubblesort.1:a :bubblesort.1:b
op sub *tmp47 :bubblesort.1:i 1
op mul *tmp86 *tmp47 2
op add @counter *tmp86 241
set .b*0 :bubblesort.1:b
op add @counter *tmp85 261
set .b*1 :bubblesort.1:b
op add @counter *tmp85 261
set .b*2 :bubblesort.1:b
op add @counter *tmp85 261
set .b*3 :bubblesort.1:b
op add @counter *tmp85 261
set .b*4 :bubblesort.1:b
op add @counter *tmp85 261
set .b*5 :bubblesort.1:b
op add @counter *tmp85 261
set .b*6 :bubblesort.1:b
op add @counter *tmp85 261
set .b*7 :bubblesort.1:b
op add @counter *tmp85 261
set .b*8 :bubblesort.1:b
op add @counter *tmp85 261
set .b*9 :bubblesort.1:b
op add @counter *tmp85 261
set .b*0 :bubblesort.1:a
op add @counter *tmp86 281
set .b*1 :bubblesort.1:a
op add @counter *tmp86 281
set .b*2 :bubblesort.1:a
op add @counter *tmp86 281
set .b*3 :bubblesort.1:a
op add @counter *tmp86 281
set .b*4 :bubblesort.1:a
op add @counter *tmp86 281
set .b*5 :bubblesort.1:a
op add @counter *tmp86 281
set .b*6 :bubblesort.1:a
op add @counter *tmp86 281
set .b*7 :bubblesort.1:a
op add @counter *tmp86 281
set .b*8 :bubblesort.1:a
op add @counter *tmp86 281
set .b*9 :bubblesort.1:a
op add @counter *tmp86 281
set :bubblesort.1:v .c*0
op add @counter *tmp85 301
set :bubblesort.1:v .c*1
op add @counter *tmp85 301
set :bubblesort.1:v .c*2
op add @counter *tmp85 301
set :bubblesort.1:v .c*3
op add @counter *tmp85 301
set :bubblesort.1:v .c*4
op add @counter *tmp85 301
set :bubblesort.1:v .c*5
op add @counter *tmp85 301
set :bubblesort.1:v .c*6
op add @counter *tmp85 301
set :bubblesort.1:v .c*7
op add @counter *tmp85 301
set :bubblesort.1:v .c*8
op add @counter *tmp85 301
set :bubblesort.1:v .c*9
op add @counter *tmp85 301
set *tmp59 .c*0
op add @counter *tmp86 321
set *tmp59 .c*1
op add @counter *tmp86 321
set *tmp59 .c*2
op add @counter *tmp86 321
set *tmp59 .c*3
op add @counter *tmp86 321
set *tmp59 .c*4
op add @counter *tmp86 321
set *tmp59 .c*5
op add @counter *tmp86 321
set *tmp59 .c*6
op add @counter *tmp86 321
set *tmp59 .c*7
op add @counter *tmp86 321
set *tmp59 .c*8
op add @counter *tmp86 321
set *tmp59 .c*9
op add @counter *tmp86 321
set .c*0 *tmp59
op add @counter *tmp85 341
set .c*1 *tmp59
op add @counter *tmp85 341
set .c*2 *tmp59
op add @counter *tmp85 341
set .c*3 *tmp59
op add @counter *tmp85 341
set .c*4 *tmp59
op add @counter *tmp85 341
set .c*5 *tmp59
op add @counter *tmp85 341
set .c*6 *tmp59
op add @counter *tmp85 341
set .c*7 *tmp59
op add @counter *tmp85 341
set .c*8 *tmp59
op add @counter *tmp85 341
set .c*9 *tmp59
op add @counter *tmp85 341
set .c*0 :bubblesort.1:v
jump 360 always 0 0
set .c*1 :bubblesort.1:v
jump 360 always 0 0
set .c*2 :bubblesort.1:v
jump 360 always 0 0
set .c*3 :bubblesort.1:v
jump 360 always 0 0
set .c*4 :bubblesort.1:v
jump 360 always 0 0
set .c*5 :bubblesort.1:v
jump 360 always 0 0
set .c*6 :bubblesort.1:v
jump 360 always 0 0
set .c*7 :bubblesort.1:v
jump 360 always 0 0
set .c*8 :bubblesort.1:v
jump 360 always 0 0
set .c*9 :bubblesort.1:v
set :bubblesort.1:flag true
jump 363 always 0 0
set :bubblesort.1:a :bubblesort.1:b
op add :bubblesort.1:i :bubblesort.1:i 1
jump 216 lessThan :bubblesort.1:i 10
jump 518 equal :bubblesort.1:flag false
set :bubblesort.1:a .b*9
op sub :bubblesort.1:i.1 9 1
op mul *tmp92 :bubblesort.1:i.1 2
op add @counter *tmp92 370
set :bubblesort.1:b.1 .b*0
jump 389 always 0 0
set :bubblesort.1:b.1 .b*1
jump 389 always 0 0
set :bubblesort.1:b.1 .b*2
jump 389 always 0 0
set :bubblesort.1:b.1 .b*3
jump 389 always 0 0
set :bubblesort.1:b.1 .b*4
jump 389 always 0 0
set :bubblesort.1:b.1 .b*5
jump 389 always 0 0
set :bubblesort.1:b.1 .b*6
jump 389 always 0 0
set :bubblesort.1:b.1 .b*7
jump 389 always 0 0
set :bubblesort.1:b.1 .b*8
jump 389 always 0 0
set :bubblesort.1:b.1 .b*9
jump 514 lessThanEq :bubblesort.1:a :bubblesort.1:b.1
op add *tmp70 :bubblesort.1:i.1 1
op mul *tmp93 *tmp70 2
op add @counter *tmp93 393
set .b*0 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*1 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*2 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*3 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*4 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*5 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*6 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*7 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*8 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*9 :bubblesort.1:b.1
op add @counter *tmp92 413
set .b*0 :bubblesort.1:a
op add @counter *tmp93 433
set .b*1 :bubblesort.1:a
op add @counter *tmp93 433
set .b*2 :bubblesort.1:a
op add @counter *tmp93 433
set .b*3 :bubblesort.1:a
op add @counter *tmp93 433
set .b*4 :bubblesort.1:a
op add @counter *tmp93 433
set .b*5 :bubblesort.1:a
op add @counter *tmp93 433
set .b*6 :bubblesort.1:a
op add @counter *tmp93 433
set .b*7 :bubblesort.1:a
op add @counter *tmp93 433
set .b*8 :bubblesort.1:a
op add @counter *tmp93 433
set .b*9 :bubblesort.1:a
op add @counter *tmp93 433
set :bubblesort.1:v.1 .c*0
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*1
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*2
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*3
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*4
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*5
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*6
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*7
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*8
op add @counter *tmp92 453
set :bubblesort.1:v.1 .c*9
op add @counter *tmp92 453
set *tmp82 .c*0
op add @counter *tmp93 473
set *tmp82 .c*1
op add @counter *tmp93 473
set *tmp82 .c*2
op add @counter *tmp93 473
set *tmp82 .c*3
op add @counter *tmp93 473
set *tmp82 .c*4
op add @counter *tmp93 473
set *tmp82 .c*5
op add @counter *tmp93 473
set *tmp82 .c*6
op add @counter *tmp93 473
set *tmp82 .c*7
op add @counter *tmp93 473
set *tmp82 .c*8
op add @counter *tmp93 473
set *tmp82 .c*9
op add @counter *tmp93 473
set .c*0 *tmp82
op add @counter *tmp92 493
set .c*1 *tmp82
op add @counter *tmp92 493
set .c*2 *tmp82
op add @counter *tmp92 493
set .c*3 *tmp82
op add @counter *tmp92 493
set .c*4 *tmp82
op add @counter *tmp92 493
set .c*5 *tmp82
op add @counter *tmp92 493
set .c*6 *tmp82
op add @counter *tmp92 493
set .c*7 *tmp82
op add @counter *tmp92 493
set .c*8 *tmp82
op add @counter *tmp92 493
set .c*9 *tmp82
op add @counter *tmp92 493
set .c*0 :bubblesort.1:v.1
jump 512 always 0 0
set .c*1 :bubblesort.1:v.1
jump 512 always 0 0
set .c*2 :bubblesort.1:v.1
jump 512 always 0 0
set .c*3 :bubblesort.1:v.1
jump 512 always 0 0
set .c*4 :bubblesort.1:v.1
jump 512 always 0 0
set .c*5 :bubblesort.1:v.1
jump 512 always 0 0
set .c*6 :bubblesort.1:v.1
jump 512 always 0 0
set .c*7 :bubblesort.1:v.1
jump 512 always 0 0
set .c*8 :bubblesort.1:v.1
jump 512 always 0 0
set .c*9 :bubblesort.1:v.1
set :bubblesort.1:flag true
jump 515 always 0 0
set :bubblesort.1:a :bubblesort.1:b.1
op sub :bubblesort.1:i.1 :bubblesort.1:i.1 1
jump 368 greaterThanEq :bubblesort.1:i.1 0
jump 213 notEqual :bubblesort.1:flag false
assertflush
print .c*0
print .c*1
print .c*2
print .c*3
print .c*4
print .c*5
print .c*6
print .c*7
print .c*8
print .c*9
assertprints "9876543210" "Array sort 2"
