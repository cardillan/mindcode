   329 instructions before optimizations.
    40 instructions eliminated by Temp Variables Elimination (6 iterations).
    12 instructions eliminated by Dead Code Elimination (4 iterations).
    18 instructions eliminated by Jump Normalization (5 iterations).
     2 instructions eliminated by Jump Optimization (5 iterations).
    27 instructions eliminated by Single Step Elimination (3 passes, 8 iterations).
   450 instructions eliminated by Expression Optimization (3 iterations).
   194 instructions eliminated by Data Flow Optimization (9 passes, 30 iterations).
     7 instructions eliminated by Loop Optimization (3 iterations).
     7 loops improved by Loop Optimization.
   905 instructions added by Loop Unrolling (10 iterations).
     7 loops unrolled by Loop Unrolling.
    27 instructions eliminated by Array Optimization (10 iterations).
     2 instructions eliminated by Jump Straightening (5 iterations).
    16 instructions updated by Jump Threading.
    18 instructions eliminated by Unreachable Code Elimination (2 iterations).
     4 instructions eliminated by Print Merging.
   406 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 806):
  * Unroll loop at *arrays:23:5                                  size    -1, benefit      250.0, efficiency   Infinity (+9 instructions)
    Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621
    Unroll loop at *arrays:63:9                                  size   +97, benefit    11250.0, efficiency    115.979
    Unroll loop at *arrays:78:9                                  size   +97, benefit    11250.0, efficiency    115.979
    Unroll loop at *arrays:109:9                                 size  +157, benefit    11250.0, efficiency     71.656
    Unroll loop at *arrays:127:9                                 size  +157, benefit    11250.0, efficiency     71.656

Pass 1: speed optimization selection (cost limit 797):
    Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621
  * Unroll loop at *arrays:63:9                                  size   +97, benefit    11250.0, efficiency    115.979 (+123 instructions)
    Unroll loop at *arrays:78:9                                  size   +97, benefit    11250.0, efficiency    115.979
    Unroll loop at *arrays:109:9                                 size  +157, benefit    11250.0, efficiency     71.656
    Unroll loop at *arrays:127:9                                 size  +157, benefit    11250.0, efficiency     71.656

Pass 1: speed optimization selection (cost limit 674):
    Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621
  * Unroll loop at *arrays:78:9                                  size   +97, benefit    11250.0, efficiency    115.979 (+123 instructions)
    Unroll loop at *arrays:109:9                                 size  +157, benefit    11250.0, efficiency     71.656
    Unroll loop at *arrays:127:9                                 size  +157, benefit    11250.0, efficiency     71.656

Pass 1: speed optimization selection (cost limit 551):
    Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621
  * Unroll loop at *arrays:109:9                                 size  +157, benefit    11250.0, efficiency     71.656 (+219 instructions)
    Unroll loop at *arrays:127:9                                 size  +157, benefit    11250.0, efficiency     71.656

Pass 1: speed optimization selection (cost limit 332):
    Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621
  * Unroll loop at *arrays:127:9                                 size  +157, benefit    11250.0, efficiency     71.656 (+219 instructions)

Pass 1: speed optimization selection (cost limit 113):
  * Unroll loop at line 12:5                                     size   +20, benefit      500.0, efficiency     25.000 (+60 instructions)
    Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621

Pass 1: speed optimization selection (cost limit 53):
  * Unroll loop at *arrays:39:5                                  size   +29, benefit      250.0, efficiency      8.621 (+44 instructions)

Final code before resolving virtual instructions:

    0:  set p 0
    1:  assertflush
    2:  print "xxxxx"
    3:  assertprints "xxxxx" "Array fill"
    4:  set .c*0 p
    5:  op add *tmp4 p 1
    6:  set .b*1 *tmp4
    7:  set .c*1 *tmp4
    8:  op add *tmp4 p 2
    9:  set .b*2 *tmp4
   10:  set .c*2 *tmp4
   11:  op add *tmp4 p 3
   12:  set .b*3 *tmp4
   13:  set .c*3 *tmp4
   14:  op add *tmp4 p 4
   15:  set .b*4 *tmp4
   16:  set .c*4 *tmp4
   17:  op add *tmp4 p 5
   18:  set .b*5 *tmp4
   19:  set .c*5 *tmp4
   20:  op add *tmp4 p 6
   21:  set .b*6 *tmp4
   22:  set .c*6 *tmp4
   23:  op add *tmp4 p 7
   24:  set .b*7 *tmp4
   25:  set .c*7 *tmp4
   26:  op add *tmp4 p 8
   27:  set .b*8 *tmp4
   28:  set .c*8 *tmp4
   29:  op add *tmp4 p 9
   30:  set .c*9 *tmp4
   31:  set .b*0 *tmp4
   32:  set .b*9 p
   33:  set :reverse:t .b*1
   34:  set .b*1 .b*8
   35:  set .b*8 :reverse:t
   36:  set :reverse:t .b*2
   37:  set .b*2 .b*7
   38:  set .b*7 :reverse:t
   39:  set :reverse:t .b*3
   40:  set .b*3 .b*6
   41:  set .b*6 :reverse:t
   42:  set :reverse:t .b*4
   43:  set *tmp14 .b*5
   44:  set .b*4 .b*5
   45:  set .b*5 :reverse:t
   46:  assertflush
   47:  print *tmp4
   48:  print .b*1
   49:  print .b*2
   50:  print .b*3
   51:  print *tmp14
   52:  print :reverse:t
   53:  print .b*6
   54:  print .b*7
   55:  print .b*8
   56:  print p
   57:  assertprints "9876543210" "Array reverse"
        label *label12
   58:  set :bubblesort:flag false
   59:  set :bubblesort:a .b*0
   60:  op greaterThan *tmp19 .b*0 .b*1
   61:  jump *label73 equal *tmp19 false
   62:  set .b*0 .b*1
   63:  set .b*1 :bubblesort:a
   64:  set :bubblesort:flag true
   65:  jump *label77 always 0 0
        label *label73
   66:  set :bubblesort:a .b*1
   67:  jump *label77 always 0 0
        label *label77
   68:  op greaterThan *tmp19 :bubblesort:a .b*2
   69:  jump *label79 equal *tmp19 false
   70:  set .b*1 .b*2
   71:  set .b*2 :bubblesort:a
   72:  set :bubblesort:flag true
   73:  jump *label83 always 0 0
        label *label79
   74:  set :bubblesort:a .b*2
   75:  jump *label83 always 0 0
        label *label83
   76:  op greaterThan *tmp19 :bubblesort:a .b*3
   77:  jump *label85 equal *tmp19 false
   78:  set .b*2 .b*3
   79:  set .b*3 :bubblesort:a
   80:  set :bubblesort:flag true
   81:  jump *label89 always 0 0
        label *label85
   82:  set :bubblesort:a .b*3
   83:  jump *label89 always 0 0
        label *label89
   84:  op greaterThan *tmp19 :bubblesort:a .b*4
   85:  jump *label91 equal *tmp19 false
   86:  set .b*3 .b*4
   87:  set .b*4 :bubblesort:a
   88:  set :bubblesort:flag true
   89:  jump *label95 always 0 0
        label *label91
   90:  set :bubblesort:a .b*4
   91:  jump *label95 always 0 0
        label *label95
   92:  op greaterThan *tmp19 :bubblesort:a .b*5
   93:  jump *label97 equal *tmp19 false
   94:  set .b*4 .b*5
   95:  set .b*5 :bubblesort:a
   96:  set :bubblesort:flag true
   97:  jump *label101 always 0 0
        label *label97
   98:  set :bubblesort:a .b*5
   99:  jump *label101 always 0 0
        label *label101
  100:  op greaterThan *tmp19 :bubblesort:a .b*6
  101:  jump *label103 equal *tmp19 false
  102:  set .b*5 .b*6
  103:  set .b*6 :bubblesort:a
  104:  set :bubblesort:flag true
  105:  jump *label107 always 0 0
        label *label103
  106:  set :bubblesort:a .b*6
  107:  jump *label107 always 0 0
        label *label107
  108:  op greaterThan *tmp19 :bubblesort:a .b*7
  109:  jump *label109 equal *tmp19 false
  110:  set .b*6 .b*7
  111:  set .b*7 :bubblesort:a
  112:  set :bubblesort:flag true
  113:  jump *label113 always 0 0
        label *label109
  114:  set :bubblesort:a .b*7
  115:  jump *label113 always 0 0
        label *label113
  116:  op greaterThan *tmp19 :bubblesort:a .b*8
  117:  jump *label115 equal *tmp19 false
  118:  set .b*7 .b*8
  119:  set .b*8 :bubblesort:a
  120:  set :bubblesort:flag true
  121:  jump *label119 always 0 0
        label *label115
  122:  set :bubblesort:a .b*8
  123:  jump *label119 always 0 0
        label *label119
  124:  op greaterThan *tmp19 :bubblesort:a .b*9
  125:  jump *label121 equal *tmp19 false
  126:  set .b*8 .b*9
  127:  set .b*9 :bubblesort:a
  128:  set :bubblesort:flag true
        label *label121
  129:  jump *label11 equal :bubblesort:flag false
  130:  set :bubblesort:a .b*9
  131:  op lessThan *tmp32 .b*9 .b*8
  132:  jump *label128 equal *tmp32 false
  133:  set .b*9 .b*8
  134:  set .b*8 :bubblesort:a
  135:  set :bubblesort:flag true
  136:  jump *label132 always 0 0
        label *label128
  137:  set :bubblesort:a .b*8
  138:  jump *label132 always 0 0
        label *label132
  139:  op lessThan *tmp32 :bubblesort:a .b*7
  140:  jump *label134 equal *tmp32 false
  141:  set .b*8 .b*7
  142:  set .b*7 :bubblesort:a
  143:  set :bubblesort:flag true
  144:  jump *label138 always 0 0
        label *label134
  145:  set :bubblesort:a .b*7
  146:  jump *label138 always 0 0
        label *label138
  147:  op lessThan *tmp32 :bubblesort:a .b*6
  148:  jump *label140 equal *tmp32 false
  149:  set .b*7 .b*6
  150:  set .b*6 :bubblesort:a
  151:  set :bubblesort:flag true
  152:  jump *label144 always 0 0
        label *label140
  153:  set :bubblesort:a .b*6
  154:  jump *label144 always 0 0
        label *label144
  155:  op lessThan *tmp32 :bubblesort:a .b*5
  156:  jump *label146 equal *tmp32 false
  157:  set .b*6 .b*5
  158:  set .b*5 :bubblesort:a
  159:  set :bubblesort:flag true
  160:  jump *label150 always 0 0
        label *label146
  161:  set :bubblesort:a .b*5
  162:  jump *label150 always 0 0
        label *label150
  163:  op lessThan *tmp32 :bubblesort:a .b*4
  164:  jump *label152 equal *tmp32 false
  165:  set .b*5 .b*4
  166:  set .b*4 :bubblesort:a
  167:  set :bubblesort:flag true
  168:  jump *label156 always 0 0
        label *label152
  169:  set :bubblesort:a .b*4
  170:  jump *label156 always 0 0
        label *label156
  171:  op lessThan *tmp32 :bubblesort:a .b*3
  172:  jump *label158 equal *tmp32 false
  173:  set .b*4 .b*3
  174:  set .b*3 :bubblesort:a
  175:  set :bubblesort:flag true
  176:  jump *label162 always 0 0
        label *label158
  177:  set :bubblesort:a .b*3
  178:  jump *label162 always 0 0
        label *label162
  179:  op lessThan *tmp32 :bubblesort:a .b*2
  180:  jump *label164 equal *tmp32 false
  181:  set .b*3 .b*2
  182:  set .b*2 :bubblesort:a
  183:  set :bubblesort:flag true
  184:  jump *label168 always 0 0
        label *label164
  185:  set :bubblesort:a .b*2
  186:  jump *label168 always 0 0
        label *label168
  187:  op lessThan *tmp32 :bubblesort:a .b*1
  188:  jump *label170 equal *tmp32 false
  189:  set .b*2 .b*1
  190:  set .b*1 :bubblesort:a
  191:  set :bubblesort:flag true
  192:  jump *label174 always 0 0
        label *label170
  193:  set :bubblesort:a .b*1
  194:  jump *label174 always 0 0
        label *label174
  195:  op lessThan *tmp32 :bubblesort:a .b*0
  196:  jump *label176 equal *tmp32 false
  197:  set .b*1 .b*0
  198:  set .b*0 :bubblesort:a
  199:  set :bubblesort:flag true
        label *label176
  200:  jump *label12 notEqual :bubblesort:flag false
        label *label11
  201:  assertflush
  202:  print .b*0
  203:  print .b*1
  204:  print .b*2
  205:  print .b*3
  206:  print .b*4
  207:  print .b*5
  208:  print .b*6
  209:  print .b*7
  210:  print .b*8
  211:  print .b*9
  212:  assertprints "0123456789" "Array sort 1"
        label *label32
  213:  set :bubblesort.1:flag false
  214:  set :bubblesort.1:a .b*0
  215:  op lessThan *tmp43 .b*0 .b*1
  216:  jump *label183 equal *tmp43 false
  217:  set .b*0 .b*1
  218:  set .b*1 :bubblesort.1:a
  219:  set :bubblesort.1:v .c*0
  220:  set .c*0 .c*1
  221:  set .c*1 :bubblesort.1:v
  222:  set :bubblesort.1:flag true
  223:  jump *label184 always 0 0
        label *label183
  224:  set :bubblesort.1:a .b*1
        label *label184
  225:  op lessThan *tmp43 :bubblesort.1:a .b*2
  226:  jump *label189 equal *tmp43 false
  227:  set .b*1 .b*2
  228:  set .b*2 :bubblesort.1:a
  229:  set :bubblesort.1:v .c*1
  230:  set .c*1 .c*2
  231:  set .c*2 :bubblesort.1:v
  232:  set :bubblesort.1:flag true
  233:  jump *label190 always 0 0
        label *label189
  234:  set :bubblesort.1:a .b*2
        label *label190
  235:  op lessThan *tmp43 :bubblesort.1:a .b*3
  236:  jump *label195 equal *tmp43 false
  237:  set .b*2 .b*3
  238:  set .b*3 :bubblesort.1:a
  239:  set :bubblesort.1:v .c*2
  240:  set .c*2 .c*3
  241:  set .c*3 :bubblesort.1:v
  242:  set :bubblesort.1:flag true
  243:  jump *label196 always 0 0
        label *label195
  244:  set :bubblesort.1:a .b*3
        label *label196
  245:  op lessThan *tmp43 :bubblesort.1:a .b*4
  246:  jump *label201 equal *tmp43 false
  247:  set .b*3 .b*4
  248:  set .b*4 :bubblesort.1:a
  249:  set :bubblesort.1:v .c*3
  250:  set .c*3 .c*4
  251:  set .c*4 :bubblesort.1:v
  252:  set :bubblesort.1:flag true
  253:  jump *label202 always 0 0
        label *label201
  254:  set :bubblesort.1:a .b*4
        label *label202
  255:  op lessThan *tmp43 :bubblesort.1:a .b*5
  256:  jump *label207 equal *tmp43 false
  257:  set .b*4 .b*5
  258:  set .b*5 :bubblesort.1:a
  259:  set :bubblesort.1:v .c*4
  260:  set .c*4 .c*5
  261:  set .c*5 :bubblesort.1:v
  262:  set :bubblesort.1:flag true
  263:  jump *label208 always 0 0
        label *label207
  264:  set :bubblesort.1:a .b*5
        label *label208
  265:  op lessThan *tmp43 :bubblesort.1:a .b*6
  266:  jump *label213 equal *tmp43 false
  267:  set .b*5 .b*6
  268:  set .b*6 :bubblesort.1:a
  269:  set :bubblesort.1:v .c*5
  270:  set .c*5 .c*6
  271:  set .c*6 :bubblesort.1:v
  272:  set :bubblesort.1:flag true
  273:  jump *label214 always 0 0
        label *label213
  274:  set :bubblesort.1:a .b*6
        label *label214
  275:  op lessThan *tmp43 :bubblesort.1:a .b*7
  276:  jump *label219 equal *tmp43 false
  277:  set .b*6 .b*7
  278:  set .b*7 :bubblesort.1:a
  279:  set :bubblesort.1:v .c*6
  280:  set .c*6 .c*7
  281:  set .c*7 :bubblesort.1:v
  282:  set :bubblesort.1:flag true
  283:  jump *label220 always 0 0
        label *label219
  284:  set :bubblesort.1:a .b*7
        label *label220
  285:  op lessThan *tmp43 :bubblesort.1:a .b*8
  286:  jump *label225 equal *tmp43 false
  287:  set .b*7 .b*8
  288:  set .b*8 :bubblesort.1:a
  289:  set :bubblesort.1:v .c*7
  290:  set .c*7 .c*8
  291:  set .c*8 :bubblesort.1:v
  292:  set :bubblesort.1:flag true
  293:  jump *label226 always 0 0
        label *label225
  294:  set :bubblesort.1:a .b*8
        label *label226
  295:  op lessThan *tmp43 :bubblesort.1:a .b*9
  296:  jump *label231 equal *tmp43 false
  297:  set .b*8 .b*9
  298:  set .b*9 :bubblesort.1:a
  299:  set :bubblesort.1:v .c*8
  300:  set .c*8 .c*9
  301:  set .c*9 :bubblesort.1:v
  302:  set :bubblesort.1:flag true
        label *label231
  303:  jump *label31 equal :bubblesort.1:flag false
  304:  set :bubblesort.1:a .b*9
  305:  op greaterThan *tmp66 .b*9 .b*8
  306:  jump *label238 equal *tmp66 false
  307:  set .b*9 .b*8
  308:  set .b*8 :bubblesort.1:a
  309:  set :bubblesort.1:v.1 .c*9
  310:  set .c*9 .c*8
  311:  set .c*8 :bubblesort.1:v.1
  312:  set :bubblesort.1:flag true
  313:  jump *label239 always 0 0
        label *label238
  314:  set :bubblesort.1:a .b*8
        label *label239
  315:  op greaterThan *tmp66 :bubblesort.1:a .b*7
  316:  jump *label244 equal *tmp66 false
  317:  set .b*8 .b*7
  318:  set .b*7 :bubblesort.1:a
  319:  set :bubblesort.1:v.1 .c*8
  320:  set .c*8 .c*7
  321:  set .c*7 :bubblesort.1:v.1
  322:  set :bubblesort.1:flag true
  323:  jump *label245 always 0 0
        label *label244
  324:  set :bubblesort.1:a .b*7
        label *label245
  325:  op greaterThan *tmp66 :bubblesort.1:a .b*6
  326:  jump *label250 equal *tmp66 false
  327:  set .b*7 .b*6
  328:  set .b*6 :bubblesort.1:a
  329:  set :bubblesort.1:v.1 .c*7
  330:  set .c*7 .c*6
  331:  set .c*6 :bubblesort.1:v.1
  332:  set :bubblesort.1:flag true
  333:  jump *label251 always 0 0
        label *label250
  334:  set :bubblesort.1:a .b*6
        label *label251
  335:  op greaterThan *tmp66 :bubblesort.1:a .b*5
  336:  jump *label256 equal *tmp66 false
  337:  set .b*6 .b*5
  338:  set .b*5 :bubblesort.1:a
  339:  set :bubblesort.1:v.1 .c*6
  340:  set .c*6 .c*5
  341:  set .c*5 :bubblesort.1:v.1
  342:  set :bubblesort.1:flag true
  343:  jump *label257 always 0 0
        label *label256
  344:  set :bubblesort.1:a .b*5
        label *label257
  345:  op greaterThan *tmp66 :bubblesort.1:a .b*4
  346:  jump *label262 equal *tmp66 false
  347:  set .b*5 .b*4
  348:  set .b*4 :bubblesort.1:a
  349:  set :bubblesort.1:v.1 .c*5
  350:  set .c*5 .c*4
  351:  set .c*4 :bubblesort.1:v.1
  352:  set :bubblesort.1:flag true
  353:  jump *label263 always 0 0
        label *label262
  354:  set :bubblesort.1:a .b*4
        label *label263
  355:  op greaterThan *tmp66 :bubblesort.1:a .b*3
  356:  jump *label268 equal *tmp66 false
  357:  set .b*4 .b*3
  358:  set .b*3 :bubblesort.1:a
  359:  set :bubblesort.1:v.1 .c*4
  360:  set .c*4 .c*3
  361:  set .c*3 :bubblesort.1:v.1
  362:  set :bubblesort.1:flag true
  363:  jump *label269 always 0 0
        label *label268
  364:  set :bubblesort.1:a .b*3
        label *label269
  365:  op greaterThan *tmp66 :bubblesort.1:a .b*2
  366:  jump *label274 equal *tmp66 false
  367:  set .b*3 .b*2
  368:  set .b*2 :bubblesort.1:a
  369:  set :bubblesort.1:v.1 .c*3
  370:  set .c*3 .c*2
  371:  set .c*2 :bubblesort.1:v.1
  372:  set :bubblesort.1:flag true
  373:  jump *label275 always 0 0
        label *label274
  374:  set :bubblesort.1:a .b*2
        label *label275
  375:  op greaterThan *tmp66 :bubblesort.1:a .b*1
  376:  jump *label280 equal *tmp66 false
  377:  set .b*2 .b*1
  378:  set .b*1 :bubblesort.1:a
  379:  set :bubblesort.1:v.1 .c*2
  380:  set .c*2 .c*1
  381:  set .c*1 :bubblesort.1:v.1
  382:  set :bubblesort.1:flag true
  383:  jump *label281 always 0 0
        label *label280
  384:  set :bubblesort.1:a .b*1
        label *label281
  385:  op greaterThan *tmp66 :bubblesort.1:a .b*0
  386:  jump *label286 equal *tmp66 false
  387:  set .b*1 .b*0
  388:  set .b*0 :bubblesort.1:a
  389:  set :bubblesort.1:v.1 .c*1
  390:  set .c*1 .c*0
  391:  set .c*0 :bubblesort.1:v.1
  392:  set :bubblesort.1:flag true
        label *label286
  393:  jump *label32 notEqual :bubblesort.1:flag false
        label *label31
  394:  assertflush
  395:  print .c*0
  396:  print .c*1
  397:  print .c*2
  398:  print .c*3
  399:  print .c*4
  400:  print .c*5
  401:  print .c*6
  402:  print .c*7
  403:  print .c*8
  404:  print .c*9
  405:  assertprints "9876543210" "Array sort 2"
