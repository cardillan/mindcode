   503 instructions before optimizations.
    27 instructions eliminated by Temp Variables Elimination (2 iterations).
     1 instructions eliminated by Case Expression Optimization.
    42 instructions eliminated by Dead Code Elimination (6 iterations).
    88 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    23 instructions eliminated by Jump Optimization (6 iterations).
    47 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
     2 instructions eliminated by If Expression Optimization (4 iterations).
   312 instructions eliminated by Data Flow Optimization (17 passes, 58 iterations).
     4 instructions eliminated by Loop Optimization (4 iterations).
     7 loops improved by Loop Optimization.
   320 instructions added by Loop Unrolling (23 iterations).
     6 loops unrolled by Loop Unrolling.
   653 instructions added by Function Inlining (23 iterations).
    20 function calls inlined by Function Inlining.
     4 case expressions converted to switched jumps Case Switching.
     6 instructions eliminated by Jump Straightening (6 iterations).
    45 instructions updated by JumpThreading.
   254 instructions eliminated by Unreachable Code Elimination (2 iterations).
    36 instructions eliminated by Print Merging.
   634 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 623):
  * Unroll iteration loop at *printing:23:5                      size    -5, benefit       11.0, efficiency   Infinity (-5 instructions)
    Unroll iteration loop at *printing:344:5                     size    +5, benefit        7.0, efficiency      1.400
    Unroll loop at *printing:345:9                               size   +90, benefit    40000.0, efficiency    444.444
    Unroll iteration loop at *printing:369:5                     size   +13, benefit        7.0, efficiency      0.538
    Unroll loop at *printing:370:9                               size   +46, benefit    10000.0, efficiency    217.391
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
    Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
    Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 628):
    Unroll iteration loop at *printing:344:5                     size    +5, benefit        7.0, efficiency      1.400
  * Unroll loop at *printing:345:9                               size   +90, benefit    40000.0, efficiency    444.444 (+90 instructions)
    Unroll iteration loop at *printing:369:5                     size   +13, benefit        7.0, efficiency      0.538
    Unroll loop at *printing:370:9                               size   +46, benefit    10000.0, efficiency    217.391
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 538):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +13, benefit        7.0, efficiency      0.538
  * Unroll loop at *printing:370:9                               size   +46, benefit    10000.0, efficiency    217.391 (+38 instructions)
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 500):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
  * Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755 (+53 instructions)
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 447):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079
  * Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944 (+27 instructions)
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 420):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
  * Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364 (+17 instructions)
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 403):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079
  * Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243 (+78 instructions)
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 325):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079
  * Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142 (+93 instructions)
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       87.5, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 232):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  * Unroll iteration loop at *printing:369:5                     size   +89, benefit        7.0, efficiency      0.079 (-22 instructions)
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 254):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
  * Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049 (+50 instructions)
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 204):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +575, benefit       31.5, efficiency      0.055
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
  * Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049 (+49 instructions)
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 155):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +503, benefit       28.0, efficiency      0.056
  * Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049 (+58 instructions)
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 97):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +431, benefit       24.5, efficiency      0.057
  * Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049 (+52 instructions)
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 2: speed optimization selection (cost limit 122):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  * Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049 (+49 instructions)
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 2: speed optimization selection (cost limit 73):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +287, benefit       17.5, efficiency      0.061
  * Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049 (+49 instructions)
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 2: speed optimization selection (cost limit 24):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +215, benefit       14.0, efficiency      0.065
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 3: speed optimization selection (cost limit 48):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +215, benefit       14.0, efficiency      0.065
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 4: speed optimization selection (cost limit 48):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +215, benefit       14.0, efficiency      0.065
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Final code before resolving virtual instructions:

    0:  assertflush
    1:  print "1\n2\n3\n"
    2:  assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
    3:  assertflush
    4:  print "{2}"
    5:  op floor :formatNumber:n 0 0
    6:  format :formatNumber:n
    7:  assertprints "0" "printNumber(null)"
    8:  assertflush
    9:  print "{2}"
   10:  op floor :formatNumber:n 1 0
   11:  format :formatNumber:n
   12:  assertprints "1" "printNumber(1)"
   13:  assertflush
   14:  print "{2}"
   15:  op floor :formatNumber:n 1.5 0
   16:  format :formatNumber:n
   17:  assertprints "1" "printNumber(1.5)"
   18:  assertflush
   19:  print "{2}"
   20:  op floor :formatNumber:n 1.5 0
   21:  format "-{2}"
   22:  format :formatNumber:n
   23:  assertprints "-1" "printNumber(-1.5)"
   24:  assertflush
   25:  print "{2}"
   26:  op floor :formatNumber:n 1234567 0
        label *label443
   27:  op mod :formatNumber:mod :formatNumber:n 1000
   28:  jump *label444 lessThan :formatNumber:mod 100
   29:  format "{2},{1}"
   30:  jump *label447 always 0 0
        label *label444
   31:  jump *label445 lessThan :formatNumber:mod 10
   32:  format "{2},0{1}"
   33:  jump *label446 always 0 0
        label *label445
   34:  format "{2},00{1}"
        label *label446
        label *label447
   35:  format :formatNumber:mod
   36:  op idiv :formatNumber:n :formatNumber:n 1000
   37:  jump *label443 greaterThan :formatNumber:n 999
   38:  format :formatNumber:n
   39:  assertprints "1,234,567" "printNumber(1234567)"
   40:  assertflush
   41:  print "{2}"
   42:  op floor :formatNumber:n 1234567 0
   43:  format "-{2}"
        label *label456
   44:  op mod :formatNumber:mod :formatNumber:n 1000
   45:  jump *label457 lessThan :formatNumber:mod 100
   46:  format "{2},{1}"
   47:  jump *label460 always 0 0
        label *label457
   48:  jump *label458 lessThan :formatNumber:mod 10
   49:  format "{2},0{1}"
   50:  jump *label459 always 0 0
        label *label458
   51:  format "{2},00{1}"
        label *label459
        label *label460
   52:  format :formatNumber:mod
   53:  op idiv :formatNumber:n :formatNumber:n 1000
   54:  jump *label456 greaterThan :formatNumber:n 999
   55:  format :formatNumber:n
   56:  assertprints "-1,234,567" "printNumber(-1234567)"
   57:  assertflush
   58:  print "{2}"
   59:  op floor :formatNumber:n 9009099999 0
        label *label469
   60:  op mod :formatNumber:mod :formatNumber:n 1000
   61:  jump *label470 lessThan :formatNumber:mod 100
   62:  format "{2},{1}"
   63:  jump *label473 always 0 0
        label *label470
   64:  jump *label471 lessThan :formatNumber:mod 10
   65:  format "{2},0{1}"
   66:  jump *label472 always 0 0
        label *label471
   67:  format "{2},00{1}"
        label *label472
        label *label473
   68:  format :formatNumber:mod
   69:  op idiv :formatNumber:n :formatNumber:n 1000
   70:  jump *label469 greaterThan :formatNumber:n 999
   71:  format :formatNumber:n
   72:  assertprints "9,009,099,999" "printNumber(9009099999)"
   73:  assertflush
   74:  print "{2}"
   75:  set :formatBinaryNumber:digits 0
   76:  op floor :formatBinaryNumber:n 0b1001 0
        label *label354
   77:  op and *tmp29 :formatBinaryNumber:n 1
   78:  format "{2}{1}"
   79:  format *tmp29
   80:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
   81:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   82:  jump *label354 greaterThan :formatBinaryNumber:n 0
   83:  jump *label360 lessThanEq :formatBinaryNumber:digits 0
        label *label358
   84:  format "{2}0"
   85:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   86:  jump *label358 greaterThan :formatBinaryNumber:digits 0
        label *label360
   87:  format "0b"
   88:  assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
   89:  assertflush
   90:  print "{2}"
   91:  set :formatBinaryNumber:digits 6
   92:  op floor :formatBinaryNumber:n 0b1010 0
        label *label366
   93:  op and *tmp29 :formatBinaryNumber:n 1
   94:  format "{2}{1}"
   95:  format *tmp29
   96:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
   97:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   98:  jump *label366 greaterThan :formatBinaryNumber:n 0
   99:  jump *label372 lessThanEq :formatBinaryNumber:digits 0
        label *label370
  100:  format "{2}0"
  101:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  102:  jump *label370 greaterThan :formatBinaryNumber:digits 0
        label *label372
  103:  format "0b"
  104:  assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
  105:  assertflush
  106:  print "{2}"
  107:  set :formatBinaryNumber:digits 6
  108:  format "-{2}"
  109:  op floor :formatBinaryNumber:n 10 0
        label *label378
  110:  op and *tmp29 :formatBinaryNumber:n 1
  111:  format "{2}{1}"
  112:  format *tmp29
  113:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
  114:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  115:  jump *label378 greaterThan :formatBinaryNumber:n 0
  116:  jump *label384 lessThanEq :formatBinaryNumber:digits 0
        label *label382
  117:  format "{2}0"
  118:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  119:  jump *label382 greaterThan :formatBinaryNumber:digits 0
        label *label384
  120:  format "0b"
  121:  assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
  122:  assertflush
  123:  print "{2}"
  124:  set :formatHexNumber:digits 0
  125:  op floor :formatHexNumber:n 0xABCDEF 0
        label *label481
  126:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  127:  jump *label864 greaterThanEq :formatHexNumber:digit 10
  128:  jump *label863 lessThan :formatHexNumber:digit 0
  129:  format "{2}{1}"
  130:  format :formatHexNumber:digit
  131:  jump *label497 always 0 0
        label *label864
  132:  jump *label865 greaterThanEq :formatHexNumber:digit 13
  133:  jump *label485 lessThan :formatHexNumber:digit 11
  134:  jump *label489 greaterThanEq :formatHexNumber:digit 12
  135:  format "{2}B"
  136:  jump *label497 always 0 0
        label *label865
  137:  jump *label866 greaterThanEq :formatHexNumber:digit 15
  138:  jump *label493 greaterThanEq :formatHexNumber:digit 14
  139:  format "{2}D"
  140:  jump *label497 always 0 0
        label *label866
  141:  jump *label495 lessThan :formatHexNumber:digit 16
  142:  jump *label863 always 0 0
        label *label485
  143:  format "{2}A"
  144:  jump *label497 always 0 0
        label *label489
  145:  format "{2}C"
  146:  jump *label497 always 0 0
        label *label493
  147:  format "{2}E"
  148:  jump *label497 always 0 0
        label *label495
  149:  format "{2}F"
        label *label863
        label *label497
  150:  op shr :formatHexNumber:n :formatHexNumber:n 4
  151:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  152:  jump *label481 greaterThan :formatHexNumber:n 0
  153:  jump *label503 lessThanEq :formatHexNumber:digits 0
        label *label501
  154:  format "{2}0"
  155:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  156:  jump *label501 greaterThan :formatHexNumber:digits 0
        label *label503
  157:  format "0x"
  158:  assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
  159:  assertflush
  160:  print "{2}"
  161:  set :formatHexNumber:digits 0
  162:  op floor :formatHexNumber:n 0x1234567890 0
        label *label509
  163:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  164:  jump *label868 greaterThanEq :formatHexNumber:digit 10
  165:  jump *label867 lessThan :formatHexNumber:digit 0
  166:  format "{2}{1}"
  167:  format :formatHexNumber:digit
  168:  jump *label525 always 0 0
        label *label868
  169:  jump *label869 greaterThanEq :formatHexNumber:digit 13
  170:  jump *label513 lessThan :formatHexNumber:digit 11
  171:  jump *label517 greaterThanEq :formatHexNumber:digit 12
  172:  format "{2}B"
  173:  jump *label525 always 0 0
        label *label869
  174:  jump *label870 greaterThanEq :formatHexNumber:digit 15
  175:  jump *label521 greaterThanEq :formatHexNumber:digit 14
  176:  format "{2}D"
  177:  jump *label525 always 0 0
        label *label870
  178:  jump *label523 lessThan :formatHexNumber:digit 16
  179:  jump *label867 always 0 0
        label *label513
  180:  format "{2}A"
  181:  jump *label525 always 0 0
        label *label517
  182:  format "{2}C"
  183:  jump *label525 always 0 0
        label *label521
  184:  format "{2}E"
  185:  jump *label525 always 0 0
        label *label523
  186:  format "{2}F"
        label *label867
        label *label525
  187:  op shr :formatHexNumber:n :formatHexNumber:n 4
  188:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  189:  jump *label509 greaterThan :formatHexNumber:n 0
  190:  jump *label531 lessThanEq :formatHexNumber:digits 0
        label *label529
  191:  format "{2}0"
  192:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  193:  jump *label529 greaterThan :formatHexNumber:digits 0
        label *label531
  194:  format "0x"
  195:  assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
  196:  assertflush
  197:  print "{2}"
  198:  set :formatHexNumber:digits 8
  199:  op floor :formatHexNumber:n 0xAABBCC 0
        label *label537
  200:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  201:  jump *label872 greaterThanEq :formatHexNumber:digit 10
  202:  jump *label871 lessThan :formatHexNumber:digit 0
  203:  format "{2}{1}"
  204:  format :formatHexNumber:digit
  205:  jump *label553 always 0 0
        label *label872
  206:  jump *label873 greaterThanEq :formatHexNumber:digit 13
  207:  jump *label541 lessThan :formatHexNumber:digit 11
  208:  jump *label545 greaterThanEq :formatHexNumber:digit 12
  209:  format "{2}B"
  210:  jump *label553 always 0 0
        label *label873
  211:  jump *label874 greaterThanEq :formatHexNumber:digit 15
  212:  jump *label549 greaterThanEq :formatHexNumber:digit 14
  213:  format "{2}D"
  214:  jump *label553 always 0 0
        label *label874
  215:  jump *label551 lessThan :formatHexNumber:digit 16
  216:  jump *label871 always 0 0
        label *label541
  217:  format "{2}A"
  218:  jump *label553 always 0 0
        label *label545
  219:  format "{2}C"
  220:  jump *label553 always 0 0
        label *label549
  221:  format "{2}E"
  222:  jump *label553 always 0 0
        label *label551
  223:  format "{2}F"
        label *label871
        label *label553
  224:  op shr :formatHexNumber:n :formatHexNumber:n 4
  225:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  226:  jump *label537 greaterThan :formatHexNumber:n 0
  227:  jump *label559 lessThanEq :formatHexNumber:digits 0
        label *label557
  228:  format "{2}0"
  229:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  230:  jump *label557 greaterThan :formatHexNumber:digits 0
        label *label559
  231:  format "0x"
  232:  assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
  233:  assertflush
  234:  print "{2}"
  235:  set :formatHexNumber:digits 8
  236:  format "-{2}"
  237:  op floor :formatHexNumber:n 11189196 0
        label *label565
  238:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  239:  jump *label876 greaterThanEq :formatHexNumber:digit 10
  240:  jump *label875 lessThan :formatHexNumber:digit 0
  241:  format "{2}{1}"
  242:  format :formatHexNumber:digit
  243:  jump *label581 always 0 0
        label *label876
  244:  jump *label877 greaterThanEq :formatHexNumber:digit 13
  245:  jump *label569 lessThan :formatHexNumber:digit 11
  246:  jump *label573 greaterThanEq :formatHexNumber:digit 12
  247:  format "{2}B"
  248:  jump *label581 always 0 0
        label *label877
  249:  jump *label878 greaterThanEq :formatHexNumber:digit 15
  250:  jump *label577 greaterThanEq :formatHexNumber:digit 14
  251:  format "{2}D"
  252:  jump *label581 always 0 0
        label *label878
  253:  jump *label579 lessThan :formatHexNumber:digit 16
  254:  jump *label875 always 0 0
        label *label569
  255:  format "{2}A"
  256:  jump *label581 always 0 0
        label *label573
  257:  format "{2}C"
  258:  jump *label581 always 0 0
        label *label577
  259:  format "{2}E"
  260:  jump *label581 always 0 0
        label *label579
  261:  format "{2}F"
        label *label875
        label *label581
  262:  op shr :formatHexNumber:n :formatHexNumber:n 4
  263:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  264:  jump *label565 greaterThan :formatHexNumber:n 0
  265:  jump *label587 lessThanEq :formatHexNumber:digits 0
        label *label585
  266:  format "{2}0"
  267:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  268:  jump *label585 greaterThan :formatHexNumber:digits 0
        label *label587
  269:  format "0x"
  270:  assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
  271:  assertflush
  272:  print null
  273:  assertprints "null" "printExactFast(null)"
  274:  assertflush
  275:  print 0
  276:  assertprints "0" "printExactFast(0)"
  277:  assertflush
  278:  print 1
  279:  assertprints "1" "printExactFast(1)"
  280:  assertflush
  281:  print "1.000000100000000"
  282:  assertprints "1.000000100000000" "printExactFast(1.0000001)"
  283:  assertflush
  284:  op floor *tmp64 3.00000007 0
  285:  print "3.000000070000000"
  286:  op mod *tmp65 700.0000001866624 1
  287:  op floor :printExactFast:t 0.018666241885512136 0
  288:  assertprints "3.000000070000000" "printExactFast(3.00000007)"
  289:  assertflush
  290:  op abs *tmp44 3E50 0
  291:  op log10 *tmp50 3E50 0
  292:  op floor :printExactFast:exp 50.47712125471966 0
  293:  op sub *tmp52 0 50
  294:  op pow *tmp53 10 -50
  295:  op mul :printExactFast:base 3E50 1E-50
  296:  op add *tmp56 3 0.5
  297:  op floor *tmp55 3.5 0
  298:  op sub *tmp58 3 3
  299:  op abs :printExactFast:cmp 0 0
  300:  print "3E50"
  301:  assertprints "3E50" "printExactFast(3e50)"
  302:  assertflush
  303:  set :printExactFast:n 1.0123456789
  304:  setaddr :printExactFast*retaddr *label35
  305:  call *label6 *invalid :printExactFast*retval
        label *label35
  306:  assertprints "1.0123456789" "printExactFast(1.0123456789)"
  307:  assertflush
  308:  set :printExactFast:n 10000001E13
  309:  setaddr :printExactFast*retaddr *label36
  310:  call *label6 *invalid :printExactFast*retval
        label *label36
  311:  assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
  312:  assertflush
  313:  set :printExactFast:n 12345E-54
  314:  setaddr :printExactFast*retaddr *label37
  315:  call *label6 *invalid :printExactFast*retval
        label *label37
  316:  assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
  317:  assertflush
  318:  set :printExactFast:n -12345E-54
  319:  setaddr :printExactFast*retaddr *label38
  320:  call *label6 *invalid :printExactFast*retval
        label *label38
  321:  assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
  322:  assertflush
  323:  set :printExactSlow:n null
  324:  setaddr :printExactSlow*retaddr *label39
  325:  call *label7 *invalid :printExactSlow*retval
        label *label39
  326:  assertprints "null" "printExactSlow(null)"
  327:  assertflush
  328:  set :printExactSlow:n 0
  329:  setaddr :printExactSlow*retaddr *label40
  330:  call *label7 *invalid :printExactSlow*retval
        label *label40
  331:  assertprints "0" "printExactSlow(0)"
  332:  assertflush
  333:  set :printExactSlow:n 1
  334:  setaddr :printExactSlow*retaddr *label41
  335:  call *label7 *invalid :printExactSlow*retval
        label *label41
  336:  assertprints "1.000000000000000" "printExactSlow(1)"
  337:  assertflush
  338:  set :printExactSlow:n 1.0000001
  339:  setaddr :printExactSlow*retaddr *label42
  340:  call *label7 *invalid :printExactSlow*retval
        label *label42
  341:  assertprints "1.000000100000000" "printExactSlow(1.0000001)"
  342:  assertflush
  343:  set :printExactSlow:n 3.00000007
  344:  setaddr :printExactSlow*retaddr *label43
  345:  call *label7 *invalid :printExactSlow*retval
        label *label43
  346:  assertprints "3.000000070000000" "printExactSlow(3.00000007)"
  347:  assertflush
  348:  set :printExactSlow:n 3E50
  349:  setaddr :printExactSlow*retaddr *label44
  350:  call *label7 *invalid :printExactSlow*retval
        label *label44
  351:  assertprints "3.000000000000000E50" "printExactSlow(3e50)"
  352:  assertflush
  353:  set :printExactSlow:n 1.0123456789
  354:  setaddr :printExactSlow*retaddr *label45
  355:  call *label7 *invalid :printExactSlow*retval
        label *label45
  356:  assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
  357:  assertflush
  358:  set :printExactSlow:n 10000001E13
  359:  setaddr :printExactSlow*retaddr *label46
  360:  call *label7 *invalid :printExactSlow*retval
        label *label46
  361:  assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
  362:  assertflush
  363:  set :printExactSlow:n 12345E-54
  364:  setaddr :printExactSlow*retaddr *label47
  365:  call *label7 *invalid :printExactSlow*retval
        label *label47
  366:  assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
  367:  assertflush
  368:  set :printExactSlow:n -12345E-54
  369:  setaddr :printExactSlow*retaddr *label48
  370:  call *label7 *invalid :printExactSlow*retval
        label *label48
  371:  assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
  372:  assertflush
  373:  op shr :printExactBinary:t -1035087118336 32
  374:  setaddr *tmp1 *label53
  375:  jump *label50 always 0 0
        multilabel *label53
  376:  op and :printExactBinary:t -1035087118336 0xFFFFFFFF
  377:  setaddr *tmp1 *label54
        label *label50
  378:  op shr *tmp4 :printExactBinary:t 31
  379:  op and *tmp5 *tmp4 1
  380:  print *tmp5
  381:  op shr *tmp4 :printExactBinary:t 30
  382:  op and *tmp5 *tmp4 1
  383:  print *tmp5
  384:  op shr *tmp4 :printExactBinary:t 29
  385:  op and *tmp5 *tmp4 1
  386:  print *tmp5
  387:  op shr *tmp4 :printExactBinary:t 28
  388:  op and *tmp5 *tmp4 1
  389:  print *tmp5
  390:  op shr *tmp4 :printExactBinary:t 27
  391:  op and *tmp5 *tmp4 1
  392:  print *tmp5
  393:  op shr *tmp4 :printExactBinary:t 26
  394:  op and *tmp5 *tmp4 1
  395:  print *tmp5
  396:  op shr *tmp4 :printExactBinary:t 25
  397:  op and *tmp5 *tmp4 1
  398:  print *tmp5
  399:  op shr *tmp4 :printExactBinary:t 24
  400:  op and *tmp5 *tmp4 1
  401:  print *tmp5
  402:  op shr *tmp4 :printExactBinary:t 23
  403:  op and *tmp5 *tmp4 1
  404:  print *tmp5
  405:  op shr *tmp4 :printExactBinary:t 22
  406:  op and *tmp5 *tmp4 1
  407:  print *tmp5
  408:  op shr *tmp4 :printExactBinary:t 21
  409:  op and *tmp5 *tmp4 1
  410:  print *tmp5
  411:  op shr *tmp4 :printExactBinary:t 20
  412:  op and *tmp5 *tmp4 1
  413:  print *tmp5
  414:  op shr *tmp4 :printExactBinary:t 19
  415:  op and *tmp5 *tmp4 1
  416:  print *tmp5
  417:  op shr *tmp4 :printExactBinary:t 18
  418:  op and *tmp5 *tmp4 1
  419:  print *tmp5
  420:  op shr *tmp4 :printExactBinary:t 17
  421:  op and *tmp5 *tmp4 1
  422:  print *tmp5
  423:  op shr *tmp4 :printExactBinary:t 16
  424:  op and *tmp5 *tmp4 1
  425:  print *tmp5
  426:  op shr *tmp4 :printExactBinary:t 15
  427:  op and *tmp5 *tmp4 1
  428:  print *tmp5
  429:  op shr *tmp4 :printExactBinary:t 14
  430:  op and *tmp5 *tmp4 1
  431:  print *tmp5
  432:  op shr *tmp4 :printExactBinary:t 13
  433:  op and *tmp5 *tmp4 1
  434:  print *tmp5
  435:  op shr *tmp4 :printExactBinary:t 12
  436:  op and *tmp5 *tmp4 1
  437:  print *tmp5
  438:  op shr *tmp4 :printExactBinary:t 11
  439:  op and *tmp5 *tmp4 1
  440:  print *tmp5
  441:  op shr *tmp4 :printExactBinary:t 10
  442:  op and *tmp5 *tmp4 1
  443:  print *tmp5
  444:  op shr *tmp4 :printExactBinary:t 9
  445:  op and *tmp5 *tmp4 1
  446:  print *tmp5
  447:  op shr *tmp4 :printExactBinary:t 8
  448:  op and *tmp5 *tmp4 1
  449:  print *tmp5
  450:  op shr *tmp4 :printExactBinary:t 7
  451:  op and *tmp5 *tmp4 1
  452:  print *tmp5
  453:  op shr *tmp4 :printExactBinary:t 6
  454:  op and *tmp5 *tmp4 1
  455:  print *tmp5
  456:  op shr *tmp4 :printExactBinary:t 5
  457:  op and *tmp5 *tmp4 1
  458:  print *tmp5
  459:  op shr *tmp4 :printExactBinary:t 4
  460:  op and *tmp5 *tmp4 1
  461:  print *tmp5
  462:  op shr *tmp4 :printExactBinary:t 3
  463:  op and *tmp5 *tmp4 1
  464:  print *tmp5
  465:  op shr *tmp4 :printExactBinary:t 2
  466:  op and *tmp5 *tmp4 1
  467:  print *tmp5
  468:  op shr *tmp4 :printExactBinary:t 1
  469:  op and *tmp5 *tmp4 1
  470:  print *tmp5
  471:  op shr *tmp4 :printExactBinary:t 0
  472:  op and *tmp5 *tmp4 1
  473:  print *tmp5
  474:  multijump *tmp1 0 0
        multilabel *label54
  475:  assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
  476:  assertflush
  477:  print "FFFFFF0F00000000"
  478:  assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
  479:  stop
  480:  end
        label *label6
  481:  op abs *tmp44 :printExactFast:n 0
  482:  jump *label118 greaterThan *tmp44 0
  483:  print :printExactFast:n
  484:  return :printExactFast*retaddr
        label *label118
  485:  jump *label120 greaterThanEq :printExactFast:n 0
  486:  print "-"
  487:  op abs :printExactFast:n :printExactFast:n 0
        label *label120
  488:  op log10 *tmp50 :printExactFast:n 0
  489:  op floor :printExactFast:exp *tmp50 0
  490:  op sub *tmp52 0 :printExactFast:exp
  491:  op pow *tmp53 10 *tmp52
  492:  op mul :printExactFast:base :printExactFast:n *tmp53
  493:  op add *tmp56 :printExactFast:base 0.5
  494:  op floor *tmp55 *tmp56 0
  495:  op sub *tmp58 :printExactFast:base *tmp55
  496:  op abs :printExactFast:cmp *tmp58 0
  497:  jump *label123 greaterThan :printExactFast:cmp 0
  498:  print :printExactFast:base
  499:  jump *label124 always 0 0
        label *label123
  500:  jump *label125 lessThanEq :printExactFast:cmp 0.00001
  501:  print :printExactFast:base
  502:  jump *label126 always 0 0
        label *label125
  503:  op floor *tmp64 :printExactFast:base 0
  504:  print *tmp64
  505:  print "."
  506:  op mod *tmp65 :printExactFast:base 1
  507:  op mul :printExactFast:base *tmp65 100000
  508:  op floor :printExactFast:t :printExactFast:base 0
  509:  jump *label322 greaterThanEq :printExactFast:t 100
  510:  jump *label320 greaterThanEq :printExactFast:t 10
  511:  print "0000"
  512:  jump *label327 always 0 0
        label *label320
  513:  print "000"
  514:  jump *label327 always 0 0
        label *label322
  515:  jump *label323 greaterThanEq :printExactFast:t 1000
  516:  print "00"
  517:  jump *label326 always 0 0
        label *label323
  518:  jump *label324 greaterThanEq :printExactFast:t 10000
  519:  print "0"
        label *label324
        label *label326
        label *label327
  520:  print :printExactFast:t
  521:  op mod *tmp65 :printExactFast:base 1
  522:  op mul :printExactFast:base *tmp65 100000
  523:  op floor :printExactFast:t :printExactFast:base 0
  524:  jump *label333 greaterThanEq :printExactFast:t 100
  525:  jump *label331 greaterThanEq :printExactFast:t 10
  526:  print "0000"
  527:  jump *label338 always 0 0
        label *label331
  528:  print "000"
  529:  jump *label338 always 0 0
        label *label333
  530:  jump *label334 greaterThanEq :printExactFast:t 1000
  531:  print "00"
  532:  jump *label337 always 0 0
        label *label334
  533:  jump *label335 greaterThanEq :printExactFast:t 10000
  534:  print "0"
        label *label335
        label *label337
        label *label338
  535:  print :printExactFast:t
  536:  op mod *tmp65 :printExactFast:base 1
  537:  op mul :printExactFast:base *tmp65 100000
  538:  op floor :printExactFast:t :printExactFast:base 0
  539:  jump *label344 greaterThanEq :printExactFast:t 100
  540:  jump *label342 greaterThanEq :printExactFast:t 10
  541:  print "0000"
  542:  jump *label349 always 0 0
        label *label342
  543:  print "000"
  544:  jump *label349 always 0 0
        label *label344
  545:  jump *label345 greaterThanEq :printExactFast:t 1000
  546:  print "00"
  547:  jump *label348 always 0 0
        label *label345
  548:  jump *label346 greaterThanEq :printExactFast:t 10000
  549:  print "0"
        label *label346
        label *label348
        label *label349
  550:  print :printExactFast:t
        label *label126
        label *label124
  551:  jump *label139 equal :printExactFast:exp 0
  552:  print "E"
  553:  print :printExactFast:exp
        label *label139
  554:  return :printExactFast*retaddr
        label *label7
  555:  op abs *tmp80 :printExactSlow:n 0
  556:  jump *label143 greaterThan *tmp80 0
  557:  print :printExactSlow:n
  558:  return :printExactSlow*retaddr
        label *label143
  559:  jump *label145 greaterThanEq :printExactSlow:n 0
  560:  print "-"
  561:  op abs :printExactSlow:n :printExactSlow:n 0
        label *label145
  562:  op log10 *tmp86 :printExactSlow:n 0
  563:  op floor :printExactSlow:exp *tmp86 0
  564:  op sub *tmp88 0 :printExactSlow:exp
  565:  op pow *tmp89 10 *tmp88
  566:  op mul :printExactSlow:base :printExactSlow:n *tmp89
  567:  op floor *tmp91 :printExactSlow:base 0
  568:  print *tmp91
  569:  print "."
  570:  op mod *tmp92 :printExactSlow:base 1
  571:  op mul :printExactSlow:base *tmp92 10
  572:  op floor *tmp95 :printExactSlow:base 0
  573:  print *tmp95
  574:  op mod *tmp92 :printExactSlow:base 1
  575:  op mul :printExactSlow:base *tmp92 10
  576:  op floor *tmp95 :printExactSlow:base 0
  577:  print *tmp95
  578:  op mod *tmp92 :printExactSlow:base 1
  579:  op mul :printExactSlow:base *tmp92 10
  580:  op floor *tmp95 :printExactSlow:base 0
  581:  print *tmp95
  582:  op mod *tmp92 :printExactSlow:base 1
  583:  op mul :printExactSlow:base *tmp92 10
  584:  op floor *tmp95 :printExactSlow:base 0
  585:  print *tmp95
  586:  op mod *tmp92 :printExactSlow:base 1
  587:  op mul :printExactSlow:base *tmp92 10
  588:  op floor *tmp95 :printExactSlow:base 0
  589:  print *tmp95
  590:  op mod *tmp92 :printExactSlow:base 1
  591:  op mul :printExactSlow:base *tmp92 10
  592:  op floor *tmp95 :printExactSlow:base 0
  593:  print *tmp95
  594:  op mod *tmp92 :printExactSlow:base 1
  595:  op mul :printExactSlow:base *tmp92 10
  596:  op floor *tmp95 :printExactSlow:base 0
  597:  print *tmp95
  598:  op mod *tmp92 :printExactSlow:base 1
  599:  op mul :printExactSlow:base *tmp92 10
  600:  op floor *tmp95 :printExactSlow:base 0
  601:  print *tmp95
  602:  op mod *tmp92 :printExactSlow:base 1
  603:  op mul :printExactSlow:base *tmp92 10
  604:  op floor *tmp95 :printExactSlow:base 0
  605:  print *tmp95
  606:  op mod *tmp92 :printExactSlow:base 1
  607:  op mul :printExactSlow:base *tmp92 10
  608:  op floor *tmp95 :printExactSlow:base 0
  609:  print *tmp95
  610:  op mod *tmp92 :printExactSlow:base 1
  611:  op mul :printExactSlow:base *tmp92 10
  612:  op floor *tmp95 :printExactSlow:base 0
  613:  print *tmp95
  614:  op mod *tmp92 :printExactSlow:base 1
  615:  op mul :printExactSlow:base *tmp92 10
  616:  op floor *tmp95 :printExactSlow:base 0
  617:  print *tmp95
  618:  op mod *tmp92 :printExactSlow:base 1
  619:  op mul :printExactSlow:base *tmp92 10
  620:  op floor *tmp95 :printExactSlow:base 0
  621:  print *tmp95
  622:  op mod *tmp92 :printExactSlow:base 1
  623:  op mul :printExactSlow:base *tmp92 10
  624:  op floor *tmp95 :printExactSlow:base 0
  625:  print *tmp95
  626:  op mod *tmp92 :printExactSlow:base 1
  627:  op mul :printExactSlow:base *tmp92 10
  628:  op floor *tmp95 :printExactSlow:base 0
  629:  print *tmp95
  630:  jump *label151 equal :printExactSlow:exp 0
  631:  print "E"
  632:  print :printExactSlow:exp
        label *label151
  633:  return :printExactSlow*retaddr


stop instruction encountered, dumping variable values:
*tmp1: 475.0
*tmp29: 1.0
*tmp4: 0.0
*tmp44: 1.2345E-50
*tmp5: 0.0
*tmp50: -49.90850890573205
*tmp52: 50.0
*tmp53: 1.0E50
*tmp55: 1.0
*tmp56: 1.7345000000000002
*tmp58: 0.23450000000000015
*tmp64: 1.0
*tmp65: 0.9999983634211276
*tmp80: 1.2345E-50
*tmp86: -49.90850890573205
*tmp88: 50.0
*tmp89: 1.0E50
*tmp91: 1.0
*tmp92: 0.015276668818842154
*tmp95: 0.0
:formatBinaryNumber:digits: 0.0
:formatBinaryNumber:n: 0.0
:formatHexNumber:digit: 10.0
:formatHexNumber:digits: 0.0
:formatHexNumber:n: 0.0
:formatNumber:mod: 9.0
:formatNumber:n: 9.0
:printExactBinary:t: 0.0
:printExactFast*retaddr: 321.0
:printExactFast:base: 1.2345000000000002
:printExactFast:cmp: 0.23450000000000015
:printExactFast:exp: -50.0
:printExactFast:n: 1.2345E-50
:printExactFast:t: 99999.0
:printExactSlow*retaddr: 371.0
:printExactSlow:base: 0.15276668818842154
:printExactSlow:exp: -50.0
:printExactSlow:n: 1.2345E-50
@counter: 480.0