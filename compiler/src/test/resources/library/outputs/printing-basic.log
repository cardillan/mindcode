Main file: number of reported ambiguities: 4
Active optimizations:
    case-expression-optimization = basic,
    case-switching = basic,
    data-flow-optimization = basic,
    dead-code-elimination = basic,
    expression-optimization = basic,
    function-inlining = basic,
    if-expression-optimization = basic,
    jump-normalization = basic,
    jump-optimization = basic,
    jump-straightening = basic,
    jump-threading = basic,
    loop-hoisting = basic,
    loop-optimization = basic,
    loop-unrolling = basic,
    print-merging = basic,
    return-optimization = basic,
    single-step-elimination = basic,
    stack-optimization = basic,
    temp-variables-elimination = basic,
    unreachable-code-elimination = basic

   307 instructions before optimizations.
    18 instructions eliminated by Temp Variables Elimination.
    26 instructions eliminated by Dead Code Elimination (6 iterations).
   113 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    16 instructions eliminated by Jump Optimization (6 iterations).
    56 instructions eliminated by Single Step Elimination (4 passes, 11 iterations).
     2 instructions eliminated by If Expression Optimization (5 iterations).
   276 instructions eliminated by Data Flow Optimization (6 passes, 20 iterations).
     2 instructions eliminated by Loop Optimization (5 iterations).
     3 loops improved by Loop Optimization.
   100 instructions added by Loop Unrolling (9 iterations).
     2 loops unrolled by Loop Unrolling.
   727 instructions added by Function Inlining (9 iterations).
    17 function calls inlined by Function Inlining.
    48 instructions updated by JumpThreading.
   368 instructions eliminated by Unreachable Code Elimination.
     3 instructions eliminated by Print Merging.
   254 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 769):
    Loop Unrolling: unroll loop at line 108                      cost    27, benefit      187.5, efficiency        6.9
  * Loop Unrolling: unroll loop at line 153                      cost    53, benefit     3750.0, efficiency       70.8 (+53 instructions)
    Function Inlining: inline function printNumber               cost   101, benefit       24.5, efficiency        0.2
    Function Inlining: inline function printExactFast            cost   404, benefit       35.0, efficiency        0.1
    Function Inlining: inline function printExactSlow            cost   215, benefit       35.0, efficiency        0.2

Pass 1: speed optimization selection (cost limit 716):
  * Loop Unrolling: unroll loop at line 108                      cost    27, benefit      187.5, efficiency        6.9 (+27 instructions)
    Function Inlining: inline function printNumber               cost   101, benefit       24.5, efficiency        0.2
    Function Inlining: inline function printExactFast            cost   404, benefit       35.0, efficiency        0.1
    Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 689):
  * Function Inlining: inline function printNumber               cost   101, benefit       24.5, efficiency        0.2 (+78 instructions)
    Function Inlining: inline function printExactFast            cost   647, benefit       35.0, efficiency        0.1
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 611):
  ! Function Inlining: inline function printExactFast            cost   647, benefit       35.0, efficiency        0.1
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 2: speed optimization selection (cost limit 639):
  ! Function Inlining: inline function printExactFast            cost   647, benefit       35.0, efficiency        0.1
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 3: speed optimization selection (cost limit 647):
  * Function Inlining: inline function printExactFast            cost   647, benefit       35.0, efficiency        0.1 (+415 instructions)
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 3: speed optimization selection (cost limit 232):
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 4: speed optimization selection (cost limit 340):
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Pass 5: speed optimization selection (cost limit 340):
  ! Function Inlining: inline function printExactSlow            cost   692, benefit       35.0, efficiency        0.1

Final code before resolving virtual instructions:

    0:  assertflush
    1:  print "{2}"
    2:  op floor __fn6__n 0 0
    3:  format __fn6__n
    4:  assertprints "0" "printNumber(null)"
    5:  assertflush
    6:  print "{2}"
    7:  op floor __fn6__n 1 0
    8:  format __fn6__n
    9:  assertprints "1" "printNumber(1)"
   10:  assertflush
   11:  print "{2}"
   12:  op floor __fn6__n 1.5 0
   13:  format __fn6__n
   14:  assertprints "1" "printNumber(1.5)"
   15:  assertflush
   16:  print "{2}"
   17:  op floor __fn6__n 1.5 0
   18:  format "-{2}"
   19:  format __fn6__n
   20:  assertprints "-1" "printNumber(-1.5)"
   21:  assertflush
   22:  print "{2}"
   23:  op floor __fn6__n 1234567 0
        label __label245
   24:  op mod __fn6__mod __fn6__n 1000
   25:  set __tmp7 "{2},00{1}"
   26:  jump __label248 lessThan __fn6__mod 10
   27:  set __tmp7 "{2},{1}"
   28:  jump __label247 greaterThanEq __fn6__mod 100
   29:  set __tmp7 "{2},0{1}"
        label __label247
        label __label248
   30:  format __tmp7
   31:  format __fn6__mod
   32:  op idiv __fn6__n __fn6__n 1000
   33:  jump __label245 greaterThan __fn6__n 999
   34:  format __fn6__n
   35:  assertprints "1,234,567" "printNumber(1234567)"
   36:  assertflush
   37:  print "{2}"
   38:  op floor __fn6__n 1234567 0
   39:  format "-{2}"
        label __label258
   40:  op mod __fn6__mod __fn6__n 1000
   41:  set __tmp7 "{2},00{1}"
   42:  jump __label261 lessThan __fn6__mod 10
   43:  set __tmp7 "{2},{1}"
   44:  jump __label260 greaterThanEq __fn6__mod 100
   45:  set __tmp7 "{2},0{1}"
        label __label260
        label __label261
   46:  format __tmp7
   47:  format __fn6__mod
   48:  op idiv __fn6__n __fn6__n 1000
   49:  jump __label258 greaterThan __fn6__n 999
   50:  format __fn6__n
   51:  assertprints "-1,234,567" "printNumber(-1234567)"
   52:  assertflush
   53:  print "{2}"
   54:  op floor __fn6__n 9009099 0
        label __label271
   55:  op mod __fn6__mod __fn6__n 1000
   56:  set __tmp7 "{2},00{1}"
   57:  jump __label274 lessThan __fn6__mod 10
   58:  set __tmp7 "{2},{1}"
   59:  jump __label273 greaterThanEq __fn6__mod 100
   60:  set __tmp7 "{2},0{1}"
        label __label273
        label __label274
   61:  format __tmp7
   62:  format __fn6__mod
   63:  op idiv __fn6__n __fn6__n 1000
   64:  jump __label271 greaterThan __fn6__n 999
   65:  format __fn6__n
   66:  assertprints "9,009,099" "printNumber(9009099)"
   67:  assertflush
   68:  print null
   69:  assertprints "null" "printExactFast(null)"
   70:  assertflush
   71:  print 0
   72:  assertprints "0" "printExactFast(0)"
   73:  assertflush
   74:  print 1
   75:  assertprints "1" "printExactFast(1)"
   76:  assertflush
   77:  print 1
   78:  print ".0000"
   79:  print 0
   80:  print "0"
   81:  print 1000
   82:  print "0000"
   83:  print 0
   84:  assertprints "1.000000100000000" "printExactFast(1.0000001)"
   85:  assertflush
   86:  print 3
   87:  print ".0000"
   88:  print 0
   89:  print "00"
   90:  print 700
   91:  print "0000"
   92:  print 0
   93:  assertprints "3.000000070000000" "printExactFast(3.00000007)"
   94:  assertflush
   95:  print 3
   96:  print "E"
   97:  print 50
   98:  assertprints "3E50" "printExactFast(3e50)"
   99:  assertflush
  100:  print 1.0123456789
  101:  assertprints "1.0123456789" "printExactFast(1.0123456789)"
  102:  assertflush
  103:  print 1
  104:  print ".0000"
  105:  print 0
  106:  print "00"
  107:  print 999
  108:  print 99999
  109:  print "E"
  110:  print 20
  111:  assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
  112:  assertflush
  113:  print 1.2345000000000002
  114:  print "E"
  115:  print -50
  116:  assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
  117:  assertflush
  118:  print "-"
  119:  print 1.2345000000000002
  120:  print "E"
  121:  print -50
  122:  assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
  123:  assertflush
  124:  set __fn5__n null
  125:  setaddr __fn5retaddr __label23
  126:  call __label5 __fn5retval
        gotolabel __label23 __fn5
  127:  assertprints "null" "printExactSlow(null)"
  128:  assertflush
  129:  set __fn5__n 0
  130:  setaddr __fn5retaddr __label24
  131:  call __label5 __fn5retval
        gotolabel __label24 __fn5
  132:  assertprints "0" "printExactSlow(0)"
  133:  assertflush
  134:  set __fn5__n 1
  135:  setaddr __fn5retaddr __label25
  136:  call __label5 __fn5retval
        gotolabel __label25 __fn5
  137:  assertprints "1.000000000000000" "printExactSlow(1)"
  138:  assertflush
  139:  set __fn5__n 1.0000001
  140:  setaddr __fn5retaddr __label26
  141:  call __label5 __fn5retval
        gotolabel __label26 __fn5
  142:  assertprints "1.000000100000000" "printExactSlow(1.0000001)"
  143:  assertflush
  144:  set __fn5__n 3.00000007
  145:  setaddr __fn5retaddr __label27
  146:  call __label5 __fn5retval
        gotolabel __label27 __fn5
  147:  assertprints "3.000000070000000" "printExactSlow(3.00000007)"
  148:  assertflush
  149:  set __fn5__n 3E50
  150:  setaddr __fn5retaddr __label28
  151:  call __label5 __fn5retval
        gotolabel __label28 __fn5
  152:  assertprints "3.000000000000000E50" "printExactSlow(3e50)"
  153:  assertflush
  154:  set __fn5__n 1.0123456789
  155:  setaddr __fn5retaddr __label29
  156:  call __label5 __fn5retval
        gotolabel __label29 __fn5
  157:  assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
  158:  assertflush
  159:  set __fn5__n 10000000999999999E4
  160:  setaddr __fn5retaddr __label30
  161:  call __label5 __fn5retval
        gotolabel __label30 __fn5
  162:  assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
  163:  assertflush
  164:  set __fn5__n 12345E-54
  165:  setaddr __fn5retaddr __label31
  166:  call __label5 __fn5retval
        gotolabel __label31 __fn5
  167:  assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
  168:  assertflush
  169:  set __fn5__n -12345E-54
  170:  setaddr __fn5retaddr __label32
  171:  call __label5 __fn5retval
        gotolabel __label32 __fn5
  172:  assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
  173:  end
        label __label5
  174:  op abs __tmp48 __fn5__n 0
  175:  jump __label76 greaterThan __tmp48 0
  176:  print __fn5__n
  177:  jump __label77 always 0 0
        label __label76
  178:  jump __label78 greaterThanEq __fn5__n 0
  179:  print "-"
  180:  op abs __fn5__n __fn5__n 0
        label __label78
  181:  op log10 __tmp54 __fn5__n 0
  182:  op floor __fn5__exp __tmp54 0
  183:  op mul __tmp56 -1 __fn5__exp
  184:  op pow __tmp57 10 __tmp56
  185:  op mul __fn5__base __fn5__n __tmp57
  186:  op floor __tmp59 __fn5__base 0
  187:  print __tmp59
  188:  print "."
  189:  op mod __tmp60 __fn5__base 1
  190:  op mul __fn5__base __tmp60 10
  191:  op floor __tmp63 __fn5__base 0
  192:  print __tmp63
  193:  op mod __tmp60 __fn5__base 1
  194:  op mul __fn5__base __tmp60 10
  195:  op floor __tmp63 __fn5__base 0
  196:  print __tmp63
  197:  op mod __tmp60 __fn5__base 1
  198:  op mul __fn5__base __tmp60 10
  199:  op floor __tmp63 __fn5__base 0
  200:  print __tmp63
  201:  op mod __tmp60 __fn5__base 1
  202:  op mul __fn5__base __tmp60 10
  203:  op floor __tmp63 __fn5__base 0
  204:  print __tmp63
  205:  op mod __tmp60 __fn5__base 1
  206:  op mul __fn5__base __tmp60 10
  207:  op floor __tmp63 __fn5__base 0
  208:  print __tmp63
  209:  op mod __tmp60 __fn5__base 1
  210:  op mul __fn5__base __tmp60 10
  211:  op floor __tmp63 __fn5__base 0
  212:  print __tmp63
  213:  op mod __tmp60 __fn5__base 1
  214:  op mul __fn5__base __tmp60 10
  215:  op floor __tmp63 __fn5__base 0
  216:  print __tmp63
  217:  op mod __tmp60 __fn5__base 1
  218:  op mul __fn5__base __tmp60 10
  219:  op floor __tmp63 __fn5__base 0
  220:  print __tmp63
  221:  op mod __tmp60 __fn5__base 1
  222:  op mul __fn5__base __tmp60 10
  223:  op floor __tmp63 __fn5__base 0
  224:  print __tmp63
  225:  op mod __tmp60 __fn5__base 1
  226:  op mul __fn5__base __tmp60 10
  227:  op floor __tmp63 __fn5__base 0
  228:  print __tmp63
  229:  op mod __tmp60 __fn5__base 1
  230:  op mul __fn5__base __tmp60 10
  231:  op floor __tmp63 __fn5__base 0
  232:  print __tmp63
  233:  op mod __tmp60 __fn5__base 1
  234:  op mul __fn5__base __tmp60 10
  235:  op floor __tmp63 __fn5__base 0
  236:  print __tmp63
  237:  op mod __tmp60 __fn5__base 1
  238:  op mul __fn5__base __tmp60 10
  239:  op floor __tmp63 __fn5__base 0
  240:  print __tmp63
  241:  op mod __tmp60 __fn5__base 1
  242:  op mul __fn5__base __tmp60 10
  243:  op floor __tmp63 __fn5__base 0
  244:  print __tmp63
  245:  op mod __tmp60 __fn5__base 1
  246:  op mul __fn5__base __tmp60 10
  247:  op floor __tmp63 __fn5__base 0
  248:  print __tmp63
  249:  jump __label85 equal __fn5__exp 0
  250:  print "E"
  251:  print __fn5__exp
        label __label85
        label __label77
  252:  goto __fn5retaddr __fn5
  253:  end
