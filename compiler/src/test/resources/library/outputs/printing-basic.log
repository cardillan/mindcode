   497 instructions before optimizations.
    27 instructions eliminated by Temp Variables Elimination (7 iterations).
     1 instructions eliminated by Case Expression Optimization.
    40 instructions eliminated by Dead Code Elimination (6 iterations).
    67 instructions eliminated by Jump Normalization (2 passes, 6 iterations).
    22 instructions eliminated by Jump Optimization (6 iterations).
    36 instructions eliminated by Single Step Elimination (2 passes, 8 iterations).
     2 instructions eliminated by If Expression Optimization (4 iterations).
   258 instructions eliminated by Data Flow Optimization (16 passes, 55 iterations).
     4 instructions eliminated by Loop Optimization (4 iterations).
     7 loops improved by Loop Optimization.
   290 instructions added by Loop Unrolling (22 iterations).
     6 loops unrolled by Loop Unrolling.
   582 instructions added by Function Inlining (22 iterations).
    19 function calls inlined by Function Inlining.
     4 case expressions converted to switched jumps Case Switching.
     6 instructions eliminated by Jump Straightening (6 iterations).
    40 instructions updated by Jump Threading.
   220 instructions eliminated by Unreachable Code Elimination (2 iterations).
    19 instructions eliminated by Print Merging.
   667 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 625):
  * Unroll iteration loop at *printing:23:5                      size    -5, benefit       11.0, efficiency   Infinity (-5 instructions)
    Unroll iteration loop at *printing:344:5                     size    +5, benefit        7.0, efficiency      1.400
    Unroll loop at *printing:345:9                               size   +90, benefit    40000.0, efficiency    444.444
    Unroll iteration loop at *printing:369:5                     size    +9, benefit        7.0, efficiency      0.778
    Unroll loop at *printing:370:9                               size   +32, benefit    10000.0, efficiency    312.500
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
    Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 630):
    Unroll iteration loop at *printing:344:5                     size    +5, benefit        7.0, efficiency      1.400
  * Unroll loop at *printing:345:9                               size   +90, benefit    40000.0, efficiency    444.444 (+90 instructions)
    Unroll iteration loop at *printing:369:5                     size    +9, benefit        7.0, efficiency      0.778
    Unroll loop at *printing:370:9                               size   +32, benefit    10000.0, efficiency    312.500
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 540):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size    +9, benefit        7.0, efficiency      0.778
  * Unroll loop at *printing:370:9                               size   +32, benefit    10000.0, efficiency    312.500 (+24 instructions)
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
    Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 516):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123
    Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944
  * Unroll loop at *printing:317:9                               size   +53, benefit     3750.0, efficiency     70.755 (+53 instructions)
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
    Inline function 'printExactSlow' defined at *printing:304:1  size  +215, benefit       35.0, efficiency      0.163
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 31:19                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 32:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 33:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 34:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 35:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 36:35                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 37:38                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 38:39                           size   +24, benefit        3.5, efficiency      0.146
    Inline function call at line 39:40                           size   +24, benefit        3.5, efficiency      0.146
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 463):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123
  * Unroll loop at *printing:267:13                              size   +27, benefit      187.5, efficiency      6.944 (+27 instructions)
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
    Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
    Inline function 'printExactFast' defined at *printing:243:1  size  +404, benefit       35.0, efficiency      0.087
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 21:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 22:19                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 23:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 24:35                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 25:22                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 26:30                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 27:38                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 28:40                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 29:41                           size   +45, benefit        3.5, efficiency      0.078
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 436):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123
    Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243
  * Inline function 'printBinaryNumber' defined at *printing:141:1 size   +33, benefit       12.0, efficiency      0.364 (+17 instructions)
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 13:24                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 14:26                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 15:27                           size   +17, benefit        4.0, efficiency      0.235
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 419):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123
  * Inline function 'printNumber' defined at *printing:78:1      size  +101, benefit       24.5, efficiency      0.243 (+78 instructions)
    Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 6:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 7:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 8:19                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 9:20                            size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 10:27                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 11:28                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 12:31                           size   +17, benefit        3.5, efficiency      0.206
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 341):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
    Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123
  * Inline function 'printHexNumber' defined at *printing:213:1  size  +113, benefit       16.0, efficiency      0.142 (+93 instructions)
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 16:26                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 17:30                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 18:28                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 19:29                           size   +38, benefit        4.0, efficiency      0.105
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       68.8, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit      100.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 248):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  * Unroll iteration loop at *printing:369:5                     size   +57, benefit        7.0, efficiency      0.123 (-6 instructions)
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
    Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 254):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +647, benefit       35.0, efficiency      0.054
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
  * Inline function call at line 20:22                           size   +72, benefit        3.5, efficiency      0.049 (+50 instructions)
    Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 204):
    Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +575, benefit       31.5, efficiency      0.055
  ! Inline function 'printExactSlow' defined at *printing:304:1  size  +692, benefit       35.0, efficiency      0.051
  * Inline function call at line 21:19                           size   +72, benefit        3.5, efficiency      0.049 (+49 instructions)
    Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 155):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +503, benefit       28.0, efficiency      0.056
  * Inline function call at line 22:19                           size   +72, benefit        3.5, efficiency      0.049 (+58 instructions)
    Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 97):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +431, benefit       24.5, efficiency      0.057
  * Inline function call at line 23:35                           size   +72, benefit        3.5, efficiency      0.049 (+52 instructions)
    Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 5)                size    -1, benefit       21.9, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  o Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045
  o Convert case at *printing:172:9 (segments: 1)                size    -6, benefit       17.2, efficiency   Infinity
  * Convert case at *printing:172:9 (segments: 7)                size    +0, benefit       25.0, efficiency   Infinity (+0 instructions)

Pass 1: speed optimization selection (cost limit 45):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  ! Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 2: speed optimization selection (cost limit 106):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +359, benefit       21.0, efficiency      0.058
  * Inline function call at line 24:35                           size   +72, benefit        3.5, efficiency      0.049 (+49 instructions)
    Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
    Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
    Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 2: speed optimization selection (cost limit 57):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +287, benefit       17.5, efficiency      0.061
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 3: speed optimization selection (cost limit 67):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +287, benefit       17.5, efficiency      0.061
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Pass 4: speed optimization selection (cost limit 67):
  ! Unroll iteration loop at *printing:344:5                     size  +185, benefit        7.0, efficiency      0.038
  ! Inline function 'printExactFast' defined at *printing:243:1  size  +287, benefit       17.5, efficiency      0.061
  ! Inline function call at line 25:22                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 26:30                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 27:38                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 28:40                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 29:41                           size   +72, benefit        3.5, efficiency      0.049
  ! Inline function call at line 30:22                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 31:19                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 32:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 33:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 34:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 35:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 36:35                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 37:38                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 38:39                           size   +77, benefit        3.5, efficiency      0.045
  ! Inline function call at line 39:40                           size   +77, benefit        3.5, efficiency      0.045

Final code before resolving virtual instructions:

    0:  assertflush
    1:  print "1\n2\n3\n"
    2:  assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
    3:  assertflush
    4:  print "{2}"
    5:  op floor :formatNumber:n 0 0
    6:  format :formatNumber:n
    7:  assertprints "0" "printNumber(null)"
    8:  assertflush
    9:  print "{2}"
   10:  op floor :formatNumber:n 1 0
   11:  format :formatNumber:n
   12:  assertprints "1" "printNumber(1)"
   13:  assertflush
   14:  print "{2}"
   15:  op floor :formatNumber:n 1.5 0
   16:  format :formatNumber:n
   17:  assertprints "1" "printNumber(1.5)"
   18:  assertflush
   19:  print "{2}"
   20:  op floor :formatNumber:n 1.5 0
   21:  format "-{2}"
   22:  format :formatNumber:n
   23:  assertprints "-1" "printNumber(-1.5)"
   24:  assertflush
   25:  print "{2}"
   26:  op floor :formatNumber:n 1234567 0
        label *label425
   27:  op mod :formatNumber:mod :formatNumber:n 1000
   28:  jump *label426 lessThan :formatNumber:mod 100
   29:  format "{2},{1}"
   30:  jump *label429 always 0 0
        label *label426
   31:  jump *label427 lessThan :formatNumber:mod 10
   32:  format "{2},0{1}"
   33:  jump *label428 always 0 0
        label *label427
   34:  format "{2},00{1}"
        label *label428
        label *label429
   35:  format :formatNumber:mod
   36:  op idiv :formatNumber:n :formatNumber:n 1000
   37:  jump *label425 greaterThan :formatNumber:n 999
   38:  format :formatNumber:n
   39:  assertprints "1,234,567" "printNumber(1234567)"
   40:  assertflush
   41:  print "{2}"
   42:  op floor :formatNumber:n 1234567 0
   43:  format "-{2}"
        label *label438
   44:  op mod :formatNumber:mod :formatNumber:n 1000
   45:  jump *label439 lessThan :formatNumber:mod 100
   46:  format "{2},{1}"
   47:  jump *label442 always 0 0
        label *label439
   48:  jump *label440 lessThan :formatNumber:mod 10
   49:  format "{2},0{1}"
   50:  jump *label441 always 0 0
        label *label440
   51:  format "{2},00{1}"
        label *label441
        label *label442
   52:  format :formatNumber:mod
   53:  op idiv :formatNumber:n :formatNumber:n 1000
   54:  jump *label438 greaterThan :formatNumber:n 999
   55:  format :formatNumber:n
   56:  assertprints "-1,234,567" "printNumber(-1234567)"
   57:  assertflush
   58:  print "{2}"
   59:  op floor :formatNumber:n 9009099999 0
        label *label451
   60:  op mod :formatNumber:mod :formatNumber:n 1000
   61:  jump *label452 lessThan :formatNumber:mod 100
   62:  format "{2},{1}"
   63:  jump *label455 always 0 0
        label *label452
   64:  jump *label453 lessThan :formatNumber:mod 10
   65:  format "{2},0{1}"
   66:  jump *label454 always 0 0
        label *label453
   67:  format "{2},00{1}"
        label *label454
        label *label455
   68:  format :formatNumber:mod
   69:  op idiv :formatNumber:n :formatNumber:n 1000
   70:  jump *label451 greaterThan :formatNumber:n 999
   71:  format :formatNumber:n
   72:  assertprints "9,009,099,999" "printNumber(9009099999)"
   73:  assertflush
   74:  print "{2}"
   75:  set :formatBinaryNumber:digits 0
   76:  op floor :formatBinaryNumber:n 0b1001 0
        label *label336
   77:  op and *tmp27 :formatBinaryNumber:n 1
   78:  format "{2}{1}"
   79:  format *tmp27
   80:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
   81:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   82:  jump *label336 greaterThan :formatBinaryNumber:n 0
   83:  jump *label342 lessThanEq :formatBinaryNumber:digits 0
        label *label340
   84:  format "{2}0"
   85:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   86:  jump *label340 greaterThan :formatBinaryNumber:digits 0
        label *label342
   87:  format "0b"
   88:  assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
   89:  assertflush
   90:  print "{2}"
   91:  set :formatBinaryNumber:digits 6
   92:  op floor :formatBinaryNumber:n 0b1010 0
        label *label348
   93:  op and *tmp27 :formatBinaryNumber:n 1
   94:  format "{2}{1}"
   95:  format *tmp27
   96:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
   97:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
   98:  jump *label348 greaterThan :formatBinaryNumber:n 0
   99:  jump *label354 lessThanEq :formatBinaryNumber:digits 0
        label *label352
  100:  format "{2}0"
  101:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  102:  jump *label352 greaterThan :formatBinaryNumber:digits 0
        label *label354
  103:  format "0b"
  104:  assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
  105:  assertflush
  106:  print "{2}"
  107:  set :formatBinaryNumber:digits 6
  108:  format "-{2}"
  109:  op floor :formatBinaryNumber:n 10 0
        label *label360
  110:  op and *tmp27 :formatBinaryNumber:n 1
  111:  format "{2}{1}"
  112:  format *tmp27
  113:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
  114:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  115:  jump *label360 greaterThan :formatBinaryNumber:n 0
  116:  jump *label366 lessThanEq :formatBinaryNumber:digits 0
        label *label364
  117:  format "{2}0"
  118:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
  119:  jump *label364 greaterThan :formatBinaryNumber:digits 0
        label *label366
  120:  format "0b"
  121:  assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
  122:  assertflush
  123:  print "{2}"
  124:  set :formatHexNumber:digits 0
  125:  op floor :formatHexNumber:n 0xABCDEF 0
        label *label463
  126:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  127:  jump *label814 greaterThanEq :formatHexNumber:digit 10
  128:  jump *label813 lessThan :formatHexNumber:digit 0
  129:  format "{2}{1}"
  130:  format :formatHexNumber:digit
  131:  jump *label479 always 0 0
        label *label814
  132:  jump *label815 greaterThanEq :formatHexNumber:digit 13
  133:  jump *label467 lessThan :formatHexNumber:digit 11
  134:  jump *label471 greaterThanEq :formatHexNumber:digit 12
  135:  format "{2}B"
  136:  jump *label479 always 0 0
        label *label815
  137:  jump *label816 greaterThanEq :formatHexNumber:digit 15
  138:  jump *label475 greaterThanEq :formatHexNumber:digit 14
  139:  format "{2}D"
  140:  jump *label479 always 0 0
        label *label816
  141:  jump *label477 lessThan :formatHexNumber:digit 16
  142:  jump *label813 always 0 0
        label *label467
  143:  format "{2}A"
  144:  jump *label479 always 0 0
        label *label471
  145:  format "{2}C"
  146:  jump *label479 always 0 0
        label *label475
  147:  format "{2}E"
  148:  jump *label479 always 0 0
        label *label477
  149:  format "{2}F"
        label *label813
        label *label479
  150:  op shr :formatHexNumber:n :formatHexNumber:n 4
  151:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  152:  jump *label463 greaterThan :formatHexNumber:n 0
  153:  jump *label485 lessThanEq :formatHexNumber:digits 0
        label *label483
  154:  format "{2}0"
  155:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  156:  jump *label483 greaterThan :formatHexNumber:digits 0
        label *label485
  157:  format "0x"
  158:  assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
  159:  assertflush
  160:  print "{2}"
  161:  set :formatHexNumber:digits 0
  162:  op floor :formatHexNumber:n 0x1234567890 0
        label *label491
  163:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  164:  jump *label818 greaterThanEq :formatHexNumber:digit 10
  165:  jump *label817 lessThan :formatHexNumber:digit 0
  166:  format "{2}{1}"
  167:  format :formatHexNumber:digit
  168:  jump *label507 always 0 0
        label *label818
  169:  jump *label819 greaterThanEq :formatHexNumber:digit 13
  170:  jump *label495 lessThan :formatHexNumber:digit 11
  171:  jump *label499 greaterThanEq :formatHexNumber:digit 12
  172:  format "{2}B"
  173:  jump *label507 always 0 0
        label *label819
  174:  jump *label820 greaterThanEq :formatHexNumber:digit 15
  175:  jump *label503 greaterThanEq :formatHexNumber:digit 14
  176:  format "{2}D"
  177:  jump *label507 always 0 0
        label *label820
  178:  jump *label505 lessThan :formatHexNumber:digit 16
  179:  jump *label817 always 0 0
        label *label495
  180:  format "{2}A"
  181:  jump *label507 always 0 0
        label *label499
  182:  format "{2}C"
  183:  jump *label507 always 0 0
        label *label503
  184:  format "{2}E"
  185:  jump *label507 always 0 0
        label *label505
  186:  format "{2}F"
        label *label817
        label *label507
  187:  op shr :formatHexNumber:n :formatHexNumber:n 4
  188:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  189:  jump *label491 greaterThan :formatHexNumber:n 0
  190:  jump *label513 lessThanEq :formatHexNumber:digits 0
        label *label511
  191:  format "{2}0"
  192:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  193:  jump *label511 greaterThan :formatHexNumber:digits 0
        label *label513
  194:  format "0x"
  195:  assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
  196:  assertflush
  197:  print "{2}"
  198:  set :formatHexNumber:digits 8
  199:  op floor :formatHexNumber:n 0xAABBCC 0
        label *label519
  200:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  201:  jump *label822 greaterThanEq :formatHexNumber:digit 10
  202:  jump *label821 lessThan :formatHexNumber:digit 0
  203:  format "{2}{1}"
  204:  format :formatHexNumber:digit
  205:  jump *label535 always 0 0
        label *label822
  206:  jump *label823 greaterThanEq :formatHexNumber:digit 13
  207:  jump *label523 lessThan :formatHexNumber:digit 11
  208:  jump *label527 greaterThanEq :formatHexNumber:digit 12
  209:  format "{2}B"
  210:  jump *label535 always 0 0
        label *label823
  211:  jump *label824 greaterThanEq :formatHexNumber:digit 15
  212:  jump *label531 greaterThanEq :formatHexNumber:digit 14
  213:  format "{2}D"
  214:  jump *label535 always 0 0
        label *label824
  215:  jump *label533 lessThan :formatHexNumber:digit 16
  216:  jump *label821 always 0 0
        label *label523
  217:  format "{2}A"
  218:  jump *label535 always 0 0
        label *label527
  219:  format "{2}C"
  220:  jump *label535 always 0 0
        label *label531
  221:  format "{2}E"
  222:  jump *label535 always 0 0
        label *label533
  223:  format "{2}F"
        label *label821
        label *label535
  224:  op shr :formatHexNumber:n :formatHexNumber:n 4
  225:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  226:  jump *label519 greaterThan :formatHexNumber:n 0
  227:  jump *label541 lessThanEq :formatHexNumber:digits 0
        label *label539
  228:  format "{2}0"
  229:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  230:  jump *label539 greaterThan :formatHexNumber:digits 0
        label *label541
  231:  format "0x"
  232:  assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
  233:  assertflush
  234:  print "{2}"
  235:  set :formatHexNumber:digits 8
  236:  format "-{2}"
  237:  op floor :formatHexNumber:n 11189196 0
        label *label547
  238:  op mod :formatHexNumber:digit :formatHexNumber:n 16
  239:  jump *label826 greaterThanEq :formatHexNumber:digit 10
  240:  jump *label825 lessThan :formatHexNumber:digit 0
  241:  format "{2}{1}"
  242:  format :formatHexNumber:digit
  243:  jump *label563 always 0 0
        label *label826
  244:  jump *label827 greaterThanEq :formatHexNumber:digit 13
  245:  jump *label551 lessThan :formatHexNumber:digit 11
  246:  jump *label555 greaterThanEq :formatHexNumber:digit 12
  247:  format "{2}B"
  248:  jump *label563 always 0 0
        label *label827
  249:  jump *label828 greaterThanEq :formatHexNumber:digit 15
  250:  jump *label559 greaterThanEq :formatHexNumber:digit 14
  251:  format "{2}D"
  252:  jump *label563 always 0 0
        label *label828
  253:  jump *label561 lessThan :formatHexNumber:digit 16
  254:  jump *label825 always 0 0
        label *label551
  255:  format "{2}A"
  256:  jump *label563 always 0 0
        label *label555
  257:  format "{2}C"
  258:  jump *label563 always 0 0
        label *label559
  259:  format "{2}E"
  260:  jump *label563 always 0 0
        label *label561
  261:  format "{2}F"
        label *label825
        label *label563
  262:  op shr :formatHexNumber:n :formatHexNumber:n 4
  263:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  264:  jump *label547 greaterThan :formatHexNumber:n 0
  265:  jump *label569 lessThanEq :formatHexNumber:digits 0
        label *label567
  266:  format "{2}0"
  267:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
  268:  jump *label567 greaterThan :formatHexNumber:digits 0
        label *label569
  269:  format "0x"
  270:  assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
  271:  assertflush
  272:  print null
  273:  assertprints "null" "printExactFast(null)"
  274:  assertflush
  275:  print 0
  276:  assertprints "0" "printExactFast(0)"
  277:  assertflush
  278:  print 1
  279:  assertprints "1" "printExactFast(1)"
  280:  assertflush
  281:  print "1.000000100000000"
  282:  assertprints "1.000000100000000" "printExactFast(1.0000001)"
  283:  assertflush
  284:  op abs *tmp42 3.00000007 0
  285:  op log10 *tmp48 3.00000007 0
  286:  op floor :printExactFast:exp 0.4771212648532002 0
  287:  op sub *tmp50 0 0
  288:  op pow *tmp51 10 0
  289:  op add *tmp54 3.00000007 0.5
  290:  op floor *tmp53 3.50000007 0
  291:  op sub *tmp56 3.00000007 3
  292:  op abs :printExactFast:cmp 0.00000007000000001866624 0
  293:  op floor *tmp62 3.00000007 0
  294:  print "3.000000070000000"
  295:  op mod *tmp63 700.0000001866624 1
  296:  op mul :printExactFast:base 0.00000018666241885512136 100000
  297:  op floor :printExactFast:t 0.018666241885512136 0
  298:  assertprints "3.000000070000000" "printExactFast(3.00000007)"
  299:  assertflush
  300:  set :printExactFast:n 3E50
  301:  setaddr :printExactFast*retaddr *label34
  302:  call *label6 *invalid :printExactFast*retval
        label *label34
  303:  assertprints "3E50" "printExactFast(3e50)"
  304:  assertflush
  305:  set :printExactFast:n 1.0123456789
  306:  setaddr :printExactFast*retaddr *label35
  307:  call *label6 *invalid :printExactFast*retval
        label *label35
  308:  assertprints "1.0123456789" "printExactFast(1.0123456789)"
  309:  assertflush
  310:  set :printExactFast:n 10000001E13
  311:  setaddr :printExactFast*retaddr *label36
  312:  call *label6 *invalid :printExactFast*retval
        label *label36
  313:  assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
  314:  assertflush
  315:  set :printExactFast:n 12345E-54
  316:  setaddr :printExactFast*retaddr *label37
  317:  call *label6 *invalid :printExactFast*retval
        label *label37
  318:  assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
  319:  assertflush
  320:  set :printExactFast:n -12345E-54
  321:  setaddr :printExactFast*retaddr *label38
  322:  call *label6 *invalid :printExactFast*retval
        label *label38
  323:  assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
  324:  assertflush
  325:  set :printExactSlow:n null
  326:  setaddr :printExactSlow*retaddr *label39
  327:  call *label7 *invalid :printExactSlow*retval
        label *label39
  328:  assertprints "null" "printExactSlow(null)"
  329:  assertflush
  330:  set :printExactSlow:n 0
  331:  setaddr :printExactSlow*retaddr *label40
  332:  call *label7 *invalid :printExactSlow*retval
        label *label40
  333:  assertprints "0" "printExactSlow(0)"
  334:  assertflush
  335:  set :printExactSlow:n 1
  336:  setaddr :printExactSlow*retaddr *label41
  337:  call *label7 *invalid :printExactSlow*retval
        label *label41
  338:  assertprints "1.000000000000000" "printExactSlow(1)"
  339:  assertflush
  340:  set :printExactSlow:n 1.0000001
  341:  setaddr :printExactSlow*retaddr *label42
  342:  call *label7 *invalid :printExactSlow*retval
        label *label42
  343:  assertprints "1.000000100000000" "printExactSlow(1.0000001)"
  344:  assertflush
  345:  set :printExactSlow:n 3.00000007
  346:  setaddr :printExactSlow*retaddr *label43
  347:  call *label7 *invalid :printExactSlow*retval
        label *label43
  348:  assertprints "3.000000070000000" "printExactSlow(3.00000007)"
  349:  assertflush
  350:  set :printExactSlow:n 3E50
  351:  setaddr :printExactSlow*retaddr *label44
  352:  call *label7 *invalid :printExactSlow*retval
        label *label44
  353:  assertprints "3.000000000000000E50" "printExactSlow(3e50)"
  354:  assertflush
  355:  set :printExactSlow:n 1.0123456789
  356:  setaddr :printExactSlow*retaddr *label45
  357:  call *label7 *invalid :printExactSlow*retval
        label *label45
  358:  assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
  359:  assertflush
  360:  set :printExactSlow:n 10000001E13
  361:  setaddr :printExactSlow*retaddr *label46
  362:  call *label7 *invalid :printExactSlow*retval
        label *label46
  363:  assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
  364:  assertflush
  365:  set :printExactSlow:n 12345E-54
  366:  setaddr :printExactSlow*retaddr *label47
  367:  call *label7 *invalid :printExactSlow*retval
        label *label47
  368:  assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
  369:  assertflush
  370:  set :printExactSlow:n -12345E-54
  371:  setaddr :printExactSlow*retaddr *label48
  372:  call *label7 *invalid :printExactSlow*retval
        label *label48
  373:  assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
  374:  assertflush
  375:  op shr :printExactBinary:t -1035087118336 32
  376:  setaddr *tmp1 *label53
  377:  jump *label50 always 0 0
        multilabel *label53
  378:  op and :printExactBinary:t -1035087118336 0xFFFFFFFF
  379:  setaddr *tmp1 *label54
        label *label50
  380:  op shr *tmp4 :printExactBinary:t 31
  381:  op and *tmp5 *tmp4 1
  382:  print *tmp5
  383:  op shr *tmp4 :printExactBinary:t 30
  384:  op and *tmp5 *tmp4 1
  385:  print *tmp5
  386:  op shr *tmp4 :printExactBinary:t 29
  387:  op and *tmp5 *tmp4 1
  388:  print *tmp5
  389:  op shr *tmp4 :printExactBinary:t 28
  390:  op and *tmp5 *tmp4 1
  391:  print *tmp5
  392:  op shr *tmp4 :printExactBinary:t 27
  393:  op and *tmp5 *tmp4 1
  394:  print *tmp5
  395:  op shr *tmp4 :printExactBinary:t 26
  396:  op and *tmp5 *tmp4 1
  397:  print *tmp5
  398:  op shr *tmp4 :printExactBinary:t 25
  399:  op and *tmp5 *tmp4 1
  400:  print *tmp5
  401:  op shr *tmp4 :printExactBinary:t 24
  402:  op and *tmp5 *tmp4 1
  403:  print *tmp5
  404:  op shr *tmp4 :printExactBinary:t 23
  405:  op and *tmp5 *tmp4 1
  406:  print *tmp5
  407:  op shr *tmp4 :printExactBinary:t 22
  408:  op and *tmp5 *tmp4 1
  409:  print *tmp5
  410:  op shr *tmp4 :printExactBinary:t 21
  411:  op and *tmp5 *tmp4 1
  412:  print *tmp5
  413:  op shr *tmp4 :printExactBinary:t 20
  414:  op and *tmp5 *tmp4 1
  415:  print *tmp5
  416:  op shr *tmp4 :printExactBinary:t 19
  417:  op and *tmp5 *tmp4 1
  418:  print *tmp5
  419:  op shr *tmp4 :printExactBinary:t 18
  420:  op and *tmp5 *tmp4 1
  421:  print *tmp5
  422:  op shr *tmp4 :printExactBinary:t 17
  423:  op and *tmp5 *tmp4 1
  424:  print *tmp5
  425:  op shr *tmp4 :printExactBinary:t 16
  426:  op and *tmp5 *tmp4 1
  427:  print *tmp5
  428:  op shr *tmp4 :printExactBinary:t 15
  429:  op and *tmp5 *tmp4 1
  430:  print *tmp5
  431:  op shr *tmp4 :printExactBinary:t 14
  432:  op and *tmp5 *tmp4 1
  433:  print *tmp5
  434:  op shr *tmp4 :printExactBinary:t 13
  435:  op and *tmp5 *tmp4 1
  436:  print *tmp5
  437:  op shr *tmp4 :printExactBinary:t 12
  438:  op and *tmp5 *tmp4 1
  439:  print *tmp5
  440:  op shr *tmp4 :printExactBinary:t 11
  441:  op and *tmp5 *tmp4 1
  442:  print *tmp5
  443:  op shr *tmp4 :printExactBinary:t 10
  444:  op and *tmp5 *tmp4 1
  445:  print *tmp5
  446:  op shr *tmp4 :printExactBinary:t 9
  447:  op and *tmp5 *tmp4 1
  448:  print *tmp5
  449:  op shr *tmp4 :printExactBinary:t 8
  450:  op and *tmp5 *tmp4 1
  451:  print *tmp5
  452:  op shr *tmp4 :printExactBinary:t 7
  453:  op and *tmp5 *tmp4 1
  454:  print *tmp5
  455:  op shr *tmp4 :printExactBinary:t 6
  456:  op and *tmp5 *tmp4 1
  457:  print *tmp5
  458:  op shr *tmp4 :printExactBinary:t 5
  459:  op and *tmp5 *tmp4 1
  460:  print *tmp5
  461:  op shr *tmp4 :printExactBinary:t 4
  462:  op and *tmp5 *tmp4 1
  463:  print *tmp5
  464:  op shr *tmp4 :printExactBinary:t 3
  465:  op and *tmp5 *tmp4 1
  466:  print *tmp5
  467:  op shr *tmp4 :printExactBinary:t 2
  468:  op and *tmp5 *tmp4 1
  469:  print *tmp5
  470:  op shr *tmp4 :printExactBinary:t 1
  471:  op and *tmp5 *tmp4 1
  472:  print *tmp5
  473:  op shr *tmp4 :printExactBinary:t 0
  474:  op and *tmp5 *tmp4 1
  475:  print *tmp5
  476:  multijump *tmp1 0 0
        multilabel *label54
  477:  assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
  478:  assertflush
  479:  read *tmp12 "0123456789ABCDEF" 15
  480:  printchar *tmp12
  481:  read *tmp12 "0123456789ABCDEF" 15
  482:  printchar *tmp12
  483:  read *tmp12 "0123456789ABCDEF" 15
  484:  printchar *tmp12
  485:  read *tmp12 "0123456789ABCDEF" 15
  486:  printchar *tmp12
  487:  read *tmp12 "0123456789ABCDEF" 15
  488:  printchar *tmp12
  489:  read *tmp12 "0123456789ABCDEF" 15
  490:  printchar *tmp12
  491:  read *tmp12 "0123456789ABCDEF" 0
  492:  printchar *tmp12
  493:  read *tmp12 "0123456789ABCDEF" 15
  494:  printchar *tmp12
  495:  read *tmp12 "0123456789ABCDEF" 0
  496:  printchar *tmp12
  497:  read *tmp12 "0123456789ABCDEF" 0
  498:  printchar *tmp12
  499:  read *tmp12 "0123456789ABCDEF" 0
  500:  printchar *tmp12
  501:  read *tmp12 "0123456789ABCDEF" 0
  502:  printchar *tmp12
  503:  read *tmp12 "0123456789ABCDEF" 0
  504:  printchar *tmp12
  505:  read *tmp12 "0123456789ABCDEF" 0
  506:  printchar *tmp12
  507:  read *tmp12 "0123456789ABCDEF" 0
  508:  printchar *tmp12
  509:  read *tmp12 "0123456789ABCDEF" 0
  510:  printchar *tmp12
  511:  assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
  512:  stop
  513:  end
        label *label6
  514:  op abs *tmp42 :printExactFast:n 0
  515:  jump *label116 greaterThan *tmp42 0
  516:  print :printExactFast:n
  517:  return :printExactFast*retaddr
        label *label116
  518:  jump *label118 greaterThanEq :printExactFast:n 0
  519:  print "-"
  520:  op abs :printExactFast:n :printExactFast:n 0
        label *label118
  521:  op log10 *tmp48 :printExactFast:n 0
  522:  op floor :printExactFast:exp *tmp48 0
  523:  op sub *tmp50 0 :printExactFast:exp
  524:  op pow *tmp51 10 *tmp50
  525:  op mul :printExactFast:base :printExactFast:n *tmp51
  526:  op add *tmp54 :printExactFast:base 0.5
  527:  op floor *tmp53 *tmp54 0
  528:  op sub *tmp56 :printExactFast:base *tmp53
  529:  op abs :printExactFast:cmp *tmp56 0
  530:  jump *label121 greaterThan :printExactFast:cmp 0
  531:  print :printExactFast:base
  532:  jump *label122 always 0 0
        label *label121
  533:  jump *label123 lessThanEq :printExactFast:cmp 0.00001
  534:  print :printExactFast:base
  535:  jump *label124 always 0 0
        label *label123
  536:  op floor *tmp62 :printExactFast:base 0
  537:  print *tmp62
  538:  print "."
  539:  op mod *tmp63 :printExactFast:base 1
  540:  op mul :printExactFast:base *tmp63 100000
  541:  op floor :printExactFast:t :printExactFast:base 0
  542:  jump *label304 greaterThanEq :printExactFast:t 100
  543:  jump *label302 greaterThanEq :printExactFast:t 10
  544:  print "0000"
  545:  jump *label309 always 0 0
        label *label302
  546:  print "000"
  547:  jump *label309 always 0 0
        label *label304
  548:  jump *label305 greaterThanEq :printExactFast:t 1000
  549:  print "00"
  550:  jump *label308 always 0 0
        label *label305
  551:  jump *label306 greaterThanEq :printExactFast:t 10000
  552:  print "0"
        label *label306
        label *label308
        label *label309
  553:  print :printExactFast:t
  554:  op mod *tmp63 :printExactFast:base 1
  555:  op mul :printExactFast:base *tmp63 100000
  556:  op floor :printExactFast:t :printExactFast:base 0
  557:  jump *label315 greaterThanEq :printExactFast:t 100
  558:  jump *label313 greaterThanEq :printExactFast:t 10
  559:  print "0000"
  560:  jump *label320 always 0 0
        label *label313
  561:  print "000"
  562:  jump *label320 always 0 0
        label *label315
  563:  jump *label316 greaterThanEq :printExactFast:t 1000
  564:  print "00"
  565:  jump *label319 always 0 0
        label *label316
  566:  jump *label317 greaterThanEq :printExactFast:t 10000
  567:  print "0"
        label *label317
        label *label319
        label *label320
  568:  print :printExactFast:t
  569:  op mod *tmp63 :printExactFast:base 1
  570:  op mul :printExactFast:base *tmp63 100000
  571:  op floor :printExactFast:t :printExactFast:base 0
  572:  jump *label326 greaterThanEq :printExactFast:t 100
  573:  jump *label324 greaterThanEq :printExactFast:t 10
  574:  print "0000"
  575:  jump *label331 always 0 0
        label *label324
  576:  print "000"
  577:  jump *label331 always 0 0
        label *label326
  578:  jump *label327 greaterThanEq :printExactFast:t 1000
  579:  print "00"
  580:  jump *label330 always 0 0
        label *label327
  581:  jump *label328 greaterThanEq :printExactFast:t 10000
  582:  print "0"
        label *label328
        label *label330
        label *label331
  583:  print :printExactFast:t
        label *label124
        label *label122
  584:  jump *label137 equal :printExactFast:exp 0
  585:  print "E"
  586:  print :printExactFast:exp
        label *label137
  587:  return :printExactFast*retaddr
        label *label7
  588:  op abs *tmp78 :printExactSlow:n 0
  589:  jump *label141 greaterThan *tmp78 0
  590:  print :printExactSlow:n
  591:  return :printExactSlow*retaddr
        label *label141
  592:  jump *label143 greaterThanEq :printExactSlow:n 0
  593:  print "-"
  594:  op abs :printExactSlow:n :printExactSlow:n 0
        label *label143
  595:  op log10 *tmp84 :printExactSlow:n 0
  596:  op floor :printExactSlow:exp *tmp84 0
  597:  op sub *tmp86 0 :printExactSlow:exp
  598:  op pow *tmp87 10 *tmp86
  599:  op mul :printExactSlow:base :printExactSlow:n *tmp87
  600:  op floor *tmp89 :printExactSlow:base 0
  601:  print *tmp89
  602:  print "."
  603:  op mod *tmp90 :printExactSlow:base 1
  604:  op mul :printExactSlow:base *tmp90 10
  605:  op floor *tmp93 :printExactSlow:base 0
  606:  print *tmp93
  607:  op mod *tmp90 :printExactSlow:base 1
  608:  op mul :printExactSlow:base *tmp90 10
  609:  op floor *tmp93 :printExactSlow:base 0
  610:  print *tmp93
  611:  op mod *tmp90 :printExactSlow:base 1
  612:  op mul :printExactSlow:base *tmp90 10
  613:  op floor *tmp93 :printExactSlow:base 0
  614:  print *tmp93
  615:  op mod *tmp90 :printExactSlow:base 1
  616:  op mul :printExactSlow:base *tmp90 10
  617:  op floor *tmp93 :printExactSlow:base 0
  618:  print *tmp93
  619:  op mod *tmp90 :printExactSlow:base 1
  620:  op mul :printExactSlow:base *tmp90 10
  621:  op floor *tmp93 :printExactSlow:base 0
  622:  print *tmp93
  623:  op mod *tmp90 :printExactSlow:base 1
  624:  op mul :printExactSlow:base *tmp90 10
  625:  op floor *tmp93 :printExactSlow:base 0
  626:  print *tmp93
  627:  op mod *tmp90 :printExactSlow:base 1
  628:  op mul :printExactSlow:base *tmp90 10
  629:  op floor *tmp93 :printExactSlow:base 0
  630:  print *tmp93
  631:  op mod *tmp90 :printExactSlow:base 1
  632:  op mul :printExactSlow:base *tmp90 10
  633:  op floor *tmp93 :printExactSlow:base 0
  634:  print *tmp93
  635:  op mod *tmp90 :printExactSlow:base 1
  636:  op mul :printExactSlow:base *tmp90 10
  637:  op floor *tmp93 :printExactSlow:base 0
  638:  print *tmp93
  639:  op mod *tmp90 :printExactSlow:base 1
  640:  op mul :printExactSlow:base *tmp90 10
  641:  op floor *tmp93 :printExactSlow:base 0
  642:  print *tmp93
  643:  op mod *tmp90 :printExactSlow:base 1
  644:  op mul :printExactSlow:base *tmp90 10
  645:  op floor *tmp93 :printExactSlow:base 0
  646:  print *tmp93
  647:  op mod *tmp90 :printExactSlow:base 1
  648:  op mul :printExactSlow:base *tmp90 10
  649:  op floor *tmp93 :printExactSlow:base 0
  650:  print *tmp93
  651:  op mod *tmp90 :printExactSlow:base 1
  652:  op mul :printExactSlow:base *tmp90 10
  653:  op floor *tmp93 :printExactSlow:base 0
  654:  print *tmp93
  655:  op mod *tmp90 :printExactSlow:base 1
  656:  op mul :printExactSlow:base *tmp90 10
  657:  op floor *tmp93 :printExactSlow:base 0
  658:  print *tmp93
  659:  op mod *tmp90 :printExactSlow:base 1
  660:  op mul :printExactSlow:base *tmp90 10
  661:  op floor *tmp93 :printExactSlow:base 0
  662:  print *tmp93
  663:  jump *label149 equal :printExactSlow:exp 0
  664:  print "E"
  665:  print :printExactSlow:exp
        label *label149
  666:  return :printExactSlow*retaddr


stop instruction encountered, dumping variable values:
*tmp1: 477.0
*tmp12: 48.0
*tmp27: 1.0
*tmp4: 0.0
*tmp42: 1.2345E-50
*tmp48: -49.90850890573205
*tmp5: 0.0
*tmp50: 50.0
*tmp51: 1.0E50
*tmp53: 1.0
*tmp54: 1.7345000000000002
*tmp56: 0.23450000000000015
*tmp62: 1.0
*tmp63: 0.9999983634211276
*tmp78: 1.2345E-50
*tmp84: -49.90850890573205
*tmp86: 50.0
*tmp87: 1.0E50
*tmp89: 1.0
*tmp90: 0.015276668818842154
*tmp93: 0.0
:formatBinaryNumber:digits: 0.0
:formatBinaryNumber:n: 0.0
:formatHexNumber:digit: 10.0
:formatHexNumber:digits: 0.0
:formatHexNumber:n: 0.0
:formatNumber:mod: 9.0
:formatNumber:n: 9.0
:printExactBinary:t: 0.0
:printExactFast*retaddr: 323.0
:printExactFast:base: 1.2345000000000002
:printExactFast:cmp: 0.23450000000000015
:printExactFast:exp: -50.0
:printExactFast:n: 1.2345E-50
:printExactFast:t: 99999.0
:printExactSlow*retaddr: 373.0
:printExactSlow:base: 0.15276668818842154
:printExactSlow:exp: -50.0
:printExactSlow:n: 1.2345E-50
@counter: 513.0