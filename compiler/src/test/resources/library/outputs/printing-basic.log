   417 instructions before optimizations.
    20 instructions eliminated by Temp Variables Elimination.
     1 instructions eliminated by Case Expression Optimization.
    36 instructions eliminated by Dead Code Elimination (6 iterations).
     5 instructions eliminated by Jump Normalization (5 iterations).
    20 instructions eliminated by Jump Optimization (5 iterations).
    29 instructions eliminated by Single Step Elimination (3 passes, 11 iterations).
     1 instructions eliminated by If Expression Optimization (4 iterations).
    68 instructions eliminated by Data Flow Optimization (7 passes, 22 iterations).
     2 instructions eliminated by Loop Optimization (4 iterations).
     5 loops improved by Loop Optimization.
   100 instructions added by Loop Unrolling (9 iterations).
     2 loops unrolled by Loop Unrolling.
   168 instructions added by Function Inlining (9 iterations).
    12 function calls inlined by Function Inlining.
     6 instructions eliminated by Jump Straightening (5 iterations).
     6 instructions updated by JumpThreading.
    24 instructions eliminated by Unreachable Code Elimination.
   473 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 685):
    Unroll loop at *printing:240:13                              cost    27, benefit      187.5, efficiency        6.9
  * Unroll loop at *printing:285:9                               cost    53, benefit     3750.0, efficiency       70.8 (+53 instructions)
    Inline function 'printNumber' defined at *printing:67:1      cost   107, benefit       24.5, efficiency        0.2
    Inline function 'printBinaryNumber' defined at *printing:124:1 cost    12, benefit        8.0, efficiency        0.7
    Inline function 'printHexNumber' defined at *printing:190:1  cost    67, benefit       12.0, efficiency        0.2
    Inline function 'printExactFast' defined at *printing:216:1  cost   404, benefit       35.0, efficiency        0.1
    Inline function 'printExactSlow' defined at *printing:272:1  cost   215, benefit       35.0, efficiency        0.2

Pass 1: speed optimization selection (cost limit 632):
  * Unroll loop at *printing:240:13                              cost    27, benefit      187.5, efficiency        6.9 (+27 instructions)
    Inline function 'printNumber' defined at *printing:67:1      cost   107, benefit       24.5, efficiency        0.2
    Inline function 'printBinaryNumber' defined at *printing:124:1 cost    12, benefit        8.0, efficiency        0.7
    Inline function 'printHexNumber' defined at *printing:190:1  cost    67, benefit       12.0, efficiency        0.2
    Inline function 'printExactFast' defined at *printing:216:1  cost   404, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 605):
    Inline function 'printNumber' defined at *printing:67:1      cost   107, benefit       24.5, efficiency        0.2
  * Inline function 'printBinaryNumber' defined at *printing:124:1 cost    12, benefit        8.0, efficiency        0.7 (+4 instructions)
    Inline function 'printHexNumber' defined at *printing:190:1  cost    67, benefit       12.0, efficiency        0.2
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 601):
  * Inline function 'printNumber' defined at *printing:67:1      cost   107, benefit       24.5, efficiency        0.2 (+84 instructions)
    Inline function 'printHexNumber' defined at *printing:190:1  cost    67, benefit       12.0, efficiency        0.2
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 517):
  * Inline function 'printHexNumber' defined at *printing:190:1  cost    67, benefit       12.0, efficiency        0.2 (+57 instructions)
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 1: speed optimization selection (cost limit 460):
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 2: speed optimization selection (cost limit 481):
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 3: speed optimization selection (cost limit 497):
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Pass 4: speed optimization selection (cost limit 497):
  ! Inline function 'printExactFast' defined at *printing:216:1  cost   647, benefit       35.0, efficiency        0.1
  ! Inline function 'printExactSlow' defined at *printing:272:1  cost   692, benefit       35.0, efficiency        0.1

Final code before resolving virtual instructions:

    0:  assertflush
    1:  print "{2}"
    2:  op floor :fn8:n 0 0
    3:  format :fn8:n
    4:  assertprints "0" "printNumber(null)"
    5:  assertflush
    6:  print "{2}"
    7:  op floor :fn8:n 1 0
    8:  format :fn8:n
    9:  assertprints "1" "printNumber(1)"
   10:  assertflush
   11:  print "{2}"
   12:  op floor :fn8:n 1.5 0
   13:  format :fn8:n
   14:  assertprints "1" "printNumber(1.5)"
   15:  assertflush
   16:  print "{2}"
   17:  op floor :fn8:n 1.5 0
   18:  format "-{2}"
   19:  format :fn8:n
   20:  assertprints "-1" "printNumber(-1.5)"
   21:  assertflush
   22:  print "{2}"
   23:  op floor :fn8:n 1234567 0
        label *label281
   24:  op mod :fn8:mod :fn8:n 1000
   25:  jump *label282 greaterThanEq :fn8:mod 10
   26:  set *tmp7 "{2},00{1}"
   27:  jump *label285 always 0 0
        label *label282
   28:  jump *label283 greaterThanEq :fn8:mod 100
   29:  set *tmp7 "{2},0{1}"
   30:  jump *label284 always 0 0
        label *label283
   31:  set *tmp7 "{2},{1}"
        label *label284
        label *label285
   32:  format *tmp7
   33:  format :fn8:mod
   34:  op idiv :fn8:n :fn8:n 1000
   35:  jump *label281 greaterThan :fn8:n 999
   36:  format :fn8:n
   37:  assertprints "1,234,567" "printNumber(1234567)"
   38:  assertflush
   39:  print "{2}"
   40:  op floor :fn8:n 1234567 0
   41:  format "-{2}"
        label *label294
   42:  op mod :fn8:mod :fn8:n 1000
   43:  jump *label295 greaterThanEq :fn8:mod 10
   44:  set *tmp7 "{2},00{1}"
   45:  jump *label298 always 0 0
        label *label295
   46:  jump *label296 greaterThanEq :fn8:mod 100
   47:  set *tmp7 "{2},0{1}"
   48:  jump *label297 always 0 0
        label *label296
   49:  set *tmp7 "{2},{1}"
        label *label297
        label *label298
   50:  format *tmp7
   51:  format :fn8:mod
   52:  op idiv :fn8:n :fn8:n 1000
   53:  jump *label294 greaterThan :fn8:n 999
   54:  format :fn8:n
   55:  assertprints "-1,234,567" "printNumber(-1234567)"
   56:  assertflush
   57:  print "{2}"
   58:  op floor :fn8:n 9009099 0
        label *label307
   59:  op mod :fn8:mod :fn8:n 1000
   60:  jump *label308 greaterThanEq :fn8:mod 10
   61:  set *tmp7 "{2},00{1}"
   62:  jump *label311 always 0 0
        label *label308
   63:  jump *label309 greaterThanEq :fn8:mod 100
   64:  set *tmp7 "{2},0{1}"
   65:  jump *label310 always 0 0
        label *label309
   66:  set *tmp7 "{2},{1}"
        label *label310
        label *label311
   67:  format *tmp7
   68:  format :fn8:mod
   69:  op idiv :fn8:n :fn8:n 1000
   70:  jump *label307 greaterThan :fn8:n 999
   71:  format :fn8:n
   72:  assertprints "9,009,099" "printNumber(9009099)"
   73:  assertflush
   74:  print "{2}"
   75:  set :fn9:digits 0
   76:  op floor :fn9:n 0b1001 0
        label *label206
   77:  op and *tmp11 :fn9:n 1
   78:  format "{2}{1}"
   79:  format *tmp11
   80:  op shr :fn9:n :fn9:n 1
   81:  op sub :fn9:digits :fn9:digits 1
   82:  jump *label206 greaterThan :fn9:n 0
   83:  jump *label212 lessThanEq :fn9:digits 0
        label *label210
   84:  format "{2}0"
   85:  op sub :fn9:digits :fn9:digits 1
   86:  jump *label210 greaterThan :fn9:digits 0
        label *label212
   87:  format "0b"
   88:  assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
   89:  assertflush
   90:  print "{2}"
   91:  set :fn9:digits 6
   92:  op floor :fn9:n 0b1010 0
        label *label216
   93:  op and *tmp11 :fn9:n 1
   94:  format "{2}{1}"
   95:  format *tmp11
   96:  op shr :fn9:n :fn9:n 1
   97:  op sub :fn9:digits :fn9:digits 1
   98:  jump *label216 greaterThan :fn9:n 0
   99:  jump *label222 lessThanEq :fn9:digits 0
        label *label220
  100:  format "{2}0"
  101:  op sub :fn9:digits :fn9:digits 1
  102:  jump *label220 greaterThan :fn9:digits 0
        label *label222
  103:  format "0b"
  104:  assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
  105:  assertflush
  106:  print "{2}"
  107:  set :fn10:digits 0
  108:  op floor :fn10:n 0xABCDEF 0
        label *label317
  109:  op mod :fn10:digit :fn10:n 16
  110:  jump *label320 lessThan :fn10:digit 0
  111:  jump *label319 lessThanEq :fn10:digit 9
  112:  jump *label320 always 0 0
        label *label319
  113:  format "{2}{1}"
  114:  format :fn10:digit
  115:  jump *label333 always 0 0
        label *label320
  116:  jump *label322 notEqual :fn10:digit 10
  117:  format "{2}A"
  118:  jump *label333 always 0 0
        label *label322
  119:  jump *label324 notEqual :fn10:digit 11
  120:  format "{2}B"
  121:  jump *label333 always 0 0
        label *label324
  122:  jump *label326 notEqual :fn10:digit 12
  123:  format "{2}C"
  124:  jump *label333 always 0 0
        label *label326
  125:  jump *label328 notEqual :fn10:digit 13
  126:  format "{2}D"
  127:  jump *label333 always 0 0
        label *label328
  128:  jump *label330 notEqual :fn10:digit 14
  129:  format "{2}E"
  130:  jump *label333 always 0 0
        label *label330
  131:  jump *label332 notEqual :fn10:digit 15
  132:  format "{2}F"
        label *label332
        label *label333
  133:  op shr :fn10:n :fn10:n 4
  134:  op sub :fn10:digits :fn10:digits 1
  135:  jump *label317 greaterThan :fn10:n 0
  136:  jump *label339 lessThanEq :fn10:digits 0
        label *label337
  137:  format "{2}0"
  138:  op sub :fn10:digits :fn10:digits 1
  139:  jump *label337 greaterThan :fn10:digits 0
        label *label339
  140:  format "0x"
  141:  assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
  142:  assertflush
  143:  print "{2}"
  144:  set :fn10:digits 0
  145:  op floor :fn10:n 0x1234567890 0
        label *label343
  146:  op mod :fn10:digit :fn10:n 16
  147:  jump *label346 lessThan :fn10:digit 0
  148:  jump *label345 lessThanEq :fn10:digit 9
  149:  jump *label346 always 0 0
        label *label345
  150:  format "{2}{1}"
  151:  format :fn10:digit
  152:  jump *label359 always 0 0
        label *label346
  153:  jump *label348 notEqual :fn10:digit 10
  154:  format "{2}A"
  155:  jump *label359 always 0 0
        label *label348
  156:  jump *label350 notEqual :fn10:digit 11
  157:  format "{2}B"
  158:  jump *label359 always 0 0
        label *label350
  159:  jump *label352 notEqual :fn10:digit 12
  160:  format "{2}C"
  161:  jump *label359 always 0 0
        label *label352
  162:  jump *label354 notEqual :fn10:digit 13
  163:  format "{2}D"
  164:  jump *label359 always 0 0
        label *label354
  165:  jump *label356 notEqual :fn10:digit 14
  166:  format "{2}E"
  167:  jump *label359 always 0 0
        label *label356
  168:  jump *label358 notEqual :fn10:digit 15
  169:  format "{2}F"
        label *label358
        label *label359
  170:  op shr :fn10:n :fn10:n 4
  171:  op sub :fn10:digits :fn10:digits 1
  172:  jump *label343 greaterThan :fn10:n 0
  173:  jump *label365 lessThanEq :fn10:digits 0
        label *label363
  174:  format "{2}0"
  175:  op sub :fn10:digits :fn10:digits 1
  176:  jump *label363 greaterThan :fn10:digits 0
        label *label365
  177:  format "0x"
  178:  assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
  179:  assertflush
  180:  print "{2}"
  181:  set :fn10:digits 8
  182:  op floor :fn10:n 0xAABBCC 0
        label *label369
  183:  op mod :fn10:digit :fn10:n 16
  184:  jump *label372 lessThan :fn10:digit 0
  185:  jump *label371 lessThanEq :fn10:digit 9
  186:  jump *label372 always 0 0
        label *label371
  187:  format "{2}{1}"
  188:  format :fn10:digit
  189:  jump *label385 always 0 0
        label *label372
  190:  jump *label374 notEqual :fn10:digit 10
  191:  format "{2}A"
  192:  jump *label385 always 0 0
        label *label374
  193:  jump *label376 notEqual :fn10:digit 11
  194:  format "{2}B"
  195:  jump *label385 always 0 0
        label *label376
  196:  jump *label378 notEqual :fn10:digit 12
  197:  format "{2}C"
  198:  jump *label385 always 0 0
        label *label378
  199:  jump *label380 notEqual :fn10:digit 13
  200:  format "{2}D"
  201:  jump *label385 always 0 0
        label *label380
  202:  jump *label382 notEqual :fn10:digit 14
  203:  format "{2}E"
  204:  jump *label385 always 0 0
        label *label382
  205:  jump *label384 notEqual :fn10:digit 15
  206:  format "{2}F"
        label *label384
        label *label385
  207:  op shr :fn10:n :fn10:n 4
  208:  op sub :fn10:digits :fn10:digits 1
  209:  jump *label369 greaterThan :fn10:n 0
  210:  jump *label391 lessThanEq :fn10:digits 0
        label *label389
  211:  format "{2}0"
  212:  op sub :fn10:digits :fn10:digits 1
  213:  jump *label389 greaterThan :fn10:digits 0
        label *label391
  214:  format "0x"
  215:  assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
  216:  assertflush
  217:  set :fn6:n null
  218:  setaddr :fn6*retaddr *label20
  219:  call *label6 :fn6*retval
        label *label20
  220:  assertprints "null" "printExactFast(null)"
  221:  assertflush
  222:  set :fn6:n 0
  223:  setaddr :fn6*retaddr *label21
  224:  call *label6 :fn6*retval
        label *label21
  225:  assertprints "0" "printExactFast(0)"
  226:  assertflush
  227:  set :fn6:n 1
  228:  setaddr :fn6*retaddr *label22
  229:  call *label6 :fn6*retval
        label *label22
  230:  assertprints "1" "printExactFast(1)"
  231:  assertflush
  232:  set :fn6:n 1.0000001
  233:  setaddr :fn6*retaddr *label23
  234:  call *label6 :fn6*retval
        label *label23
  235:  assertprints "1.000000100000000" "printExactFast(1.0000001)"
  236:  assertflush
  237:  set :fn6:n 3.00000007
  238:  setaddr :fn6*retaddr *label24
  239:  call *label6 :fn6*retval
        label *label24
  240:  assertprints "3.000000070000000" "printExactFast(3.00000007)"
  241:  assertflush
  242:  set :fn6:n 3E50
  243:  setaddr :fn6*retaddr *label25
  244:  call *label6 :fn6*retval
        label *label25
  245:  assertprints "3E50" "printExactFast(3e50)"
  246:  assertflush
  247:  set :fn6:n 1.0123456789
  248:  setaddr :fn6*retaddr *label26
  249:  call *label6 :fn6*retval
        label *label26
  250:  assertprints "1.0123456789" "printExactFast(1.0123456789)"
  251:  assertflush
  252:  set :fn6:n 10000001E13
  253:  setaddr :fn6*retaddr *label27
  254:  call *label6 :fn6*retval
        label *label27
  255:  assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
  256:  assertflush
  257:  set :fn6:n 12345E-54
  258:  setaddr :fn6*retaddr *label28
  259:  call *label6 :fn6*retval
        label *label28
  260:  assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
  261:  assertflush
  262:  set :fn6:n -12345E-54
  263:  setaddr :fn6*retaddr *label29
  264:  call *label6 :fn6*retval
        label *label29
  265:  assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
  266:  assertflush
  267:  set :fn7:n null
  268:  setaddr :fn7*retaddr *label30
  269:  call *label7 :fn7*retval
        label *label30
  270:  assertprints "null" "printExactSlow(null)"
  271:  assertflush
  272:  set :fn7:n 0
  273:  setaddr :fn7*retaddr *label31
  274:  call *label7 :fn7*retval
        label *label31
  275:  assertprints "0" "printExactSlow(0)"
  276:  assertflush
  277:  set :fn7:n 1
  278:  setaddr :fn7*retaddr *label32
  279:  call *label7 :fn7*retval
        label *label32
  280:  assertprints "1.000000000000000" "printExactSlow(1)"
  281:  assertflush
  282:  set :fn7:n 1.0000001
  283:  setaddr :fn7*retaddr *label33
  284:  call *label7 :fn7*retval
        label *label33
  285:  assertprints "1.000000100000000" "printExactSlow(1.0000001)"
  286:  assertflush
  287:  set :fn7:n 3.00000007
  288:  setaddr :fn7*retaddr *label34
  289:  call *label7 :fn7*retval
        label *label34
  290:  assertprints "3.000000070000000" "printExactSlow(3.00000007)"
  291:  assertflush
  292:  set :fn7:n 3E50
  293:  setaddr :fn7*retaddr *label35
  294:  call *label7 :fn7*retval
        label *label35
  295:  assertprints "3.000000000000000E50" "printExactSlow(3e50)"
  296:  assertflush
  297:  set :fn7:n 1.0123456789
  298:  setaddr :fn7*retaddr *label36
  299:  call *label7 :fn7*retval
        label *label36
  300:  assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
  301:  assertflush
  302:  set :fn7:n 10000001E13
  303:  setaddr :fn7*retaddr *label37
  304:  call *label7 :fn7*retval
        label *label37
  305:  assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
  306:  assertflush
  307:  set :fn7:n 12345E-54
  308:  setaddr :fn7*retaddr *label38
  309:  call *label7 :fn7*retval
        label *label38
  310:  assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
  311:  assertflush
  312:  set :fn7:n -12345E-54
  313:  setaddr :fn7*retaddr *label39
  314:  call *label7 :fn7*retval
        label *label39
  315:  assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
  316:  stop
  317:  end
        label *label6
  318:  op abs *tmp23 :fn6:n 0
  319:  jump *label85 greaterThan *tmp23 0
  320:  print :fn6:n
  321:  jump *label86 always 0 0
        label *label85
  322:  jump *label87 greaterThanEq :fn6:n 0
  323:  print "-"
  324:  op abs :fn6:n :fn6:n 0
        label *label87
  325:  op log10 *tmp29 :fn6:n 0
  326:  op floor :fn6:exp *tmp29 0
  327:  op sub *tmp31 0 :fn6:exp
  328:  op pow *tmp32 10 *tmp31
  329:  op mul :fn6:base :fn6:n *tmp32
  330:  op add *tmp35 :fn6:base 0.5
  331:  op floor *tmp34 *tmp35 0
  332:  op sub *tmp37 :fn6:base *tmp34
  333:  op abs :fn6:cmp *tmp37 0
  334:  jump *label90 greaterThan :fn6:cmp 0
  335:  print :fn6:base
  336:  jump *label91 always 0 0
        label *label90
  337:  jump *label92 lessThanEq :fn6:cmp 0.00001
  338:  print :fn6:base
  339:  jump *label93 always 0 0
        label *label92
  340:  op floor *tmp43 :fn6:base 0
  341:  print *tmp43
  342:  print "."
  343:  op mod *tmp44 :fn6:base 1
  344:  op mul :fn6:base *tmp44 100000
  345:  op floor :fn6:t :fn6:base 0
  346:  jump *label174 greaterThanEq :fn6:t 10
  347:  print "0000"
  348:  jump *label181 always 0 0
        label *label174
  349:  jump *label175 greaterThanEq :fn6:t 100
  350:  print "000"
  351:  jump *label180 always 0 0
        label *label175
  352:  jump *label176 greaterThanEq :fn6:t 1000
  353:  print "00"
  354:  jump *label179 always 0 0
        label *label176
  355:  jump *label177 greaterThanEq :fn6:t 10000
  356:  print "0"
        label *label177
        label *label179
        label *label180
        label *label181
  357:  print :fn6:t
  358:  op mod *tmp44 :fn6:base 1
  359:  op mul :fn6:base *tmp44 100000
  360:  op floor :fn6:t :fn6:base 0
  361:  jump *label185 greaterThanEq :fn6:t 10
  362:  print "0000"
  363:  jump *label192 always 0 0
        label *label185
  364:  jump *label186 greaterThanEq :fn6:t 100
  365:  print "000"
  366:  jump *label191 always 0 0
        label *label186
  367:  jump *label187 greaterThanEq :fn6:t 1000
  368:  print "00"
  369:  jump *label190 always 0 0
        label *label187
  370:  jump *label188 greaterThanEq :fn6:t 10000
  371:  print "0"
        label *label188
        label *label190
        label *label191
        label *label192
  372:  print :fn6:t
  373:  op mod *tmp44 :fn6:base 1
  374:  op mul :fn6:base *tmp44 100000
  375:  op floor :fn6:t :fn6:base 0
  376:  jump *label196 greaterThanEq :fn6:t 10
  377:  print "0000"
  378:  jump *label203 always 0 0
        label *label196
  379:  jump *label197 greaterThanEq :fn6:t 100
  380:  print "000"
  381:  jump *label202 always 0 0
        label *label197
  382:  jump *label198 greaterThanEq :fn6:t 1000
  383:  print "00"
  384:  jump *label201 always 0 0
        label *label198
  385:  jump *label199 greaterThanEq :fn6:t 10000
  386:  print "0"
        label *label199
        label *label201
        label *label202
        label *label203
  387:  print :fn6:t
        label *label93
        label *label91
  388:  jump *label106 equal :fn6:exp 0
  389:  print "E"
  390:  print :fn6:exp
        label *label106
        label *label86
  391:  return :fn6*retaddr
  392:  end
        label *label7
  393:  op abs *tmp59 :fn7:n 0
  394:  jump *label110 greaterThan *tmp59 0
  395:  print :fn7:n
  396:  jump *label111 always 0 0
        label *label110
  397:  jump *label112 greaterThanEq :fn7:n 0
  398:  print "-"
  399:  op abs :fn7:n :fn7:n 0
        label *label112
  400:  op log10 *tmp65 :fn7:n 0
  401:  op floor :fn7:exp *tmp65 0
  402:  op sub *tmp67 0 :fn7:exp
  403:  op pow *tmp68 10 *tmp67
  404:  op mul :fn7:base :fn7:n *tmp68
  405:  op floor *tmp70 :fn7:base 0
  406:  print *tmp70
  407:  print "."
  408:  op mod *tmp71 :fn7:base 1
  409:  op mul :fn7:base *tmp71 10
  410:  op floor *tmp74 :fn7:base 0
  411:  print *tmp74
  412:  op mod *tmp71 :fn7:base 1
  413:  op mul :fn7:base *tmp71 10
  414:  op floor *tmp74 :fn7:base 0
  415:  print *tmp74
  416:  op mod *tmp71 :fn7:base 1
  417:  op mul :fn7:base *tmp71 10
  418:  op floor *tmp74 :fn7:base 0
  419:  print *tmp74
  420:  op mod *tmp71 :fn7:base 1
  421:  op mul :fn7:base *tmp71 10
  422:  op floor *tmp74 :fn7:base 0
  423:  print *tmp74
  424:  op mod *tmp71 :fn7:base 1
  425:  op mul :fn7:base *tmp71 10
  426:  op floor *tmp74 :fn7:base 0
  427:  print *tmp74
  428:  op mod *tmp71 :fn7:base 1
  429:  op mul :fn7:base *tmp71 10
  430:  op floor *tmp74 :fn7:base 0
  431:  print *tmp74
  432:  op mod *tmp71 :fn7:base 1
  433:  op mul :fn7:base *tmp71 10
  434:  op floor *tmp74 :fn7:base 0
  435:  print *tmp74
  436:  op mod *tmp71 :fn7:base 1
  437:  op mul :fn7:base *tmp71 10
  438:  op floor *tmp74 :fn7:base 0
  439:  print *tmp74
  440:  op mod *tmp71 :fn7:base 1
  441:  op mul :fn7:base *tmp71 10
  442:  op floor *tmp74 :fn7:base 0
  443:  print *tmp74
  444:  op mod *tmp71 :fn7:base 1
  445:  op mul :fn7:base *tmp71 10
  446:  op floor *tmp74 :fn7:base 0
  447:  print *tmp74
  448:  op mod *tmp71 :fn7:base 1
  449:  op mul :fn7:base *tmp71 10
  450:  op floor *tmp74 :fn7:base 0
  451:  print *tmp74
  452:  op mod *tmp71 :fn7:base 1
  453:  op mul :fn7:base *tmp71 10
  454:  op floor *tmp74 :fn7:base 0
  455:  print *tmp74
  456:  op mod *tmp71 :fn7:base 1
  457:  op mul :fn7:base *tmp71 10
  458:  op floor *tmp74 :fn7:base 0
  459:  print *tmp74
  460:  op mod *tmp71 :fn7:base 1
  461:  op mul :fn7:base *tmp71 10
  462:  op floor *tmp74 :fn7:base 0
  463:  print *tmp74
  464:  op mod *tmp71 :fn7:base 1
  465:  op mul :fn7:base *tmp71 10
  466:  op floor *tmp74 :fn7:base 0
  467:  print *tmp74
  468:  jump *label118 equal :fn7:exp 0
  469:  print "E"
  470:  print :fn7:exp
        label *label118
        label *label111
  471:  return :fn7*retaddr
  472:  end


stop instruction encountered, dumping variable values:
*tmp11: 1.0
*tmp23: 1.2345E-50
*tmp29: -49.90850890573205
*tmp31: 50.0
*tmp32: 1.0E50
*tmp34: 1.0
*tmp35: 1.7345000000000002
*tmp37: 0.23450000000000015
*tmp43: 1.0
*tmp44: 0.9999983634211276
*tmp59: 1.2345E-50
*tmp65: -49.90850890573205
*tmp67: 50.0
*tmp68: 1.0E50
*tmp7: {2},00{1}
*tmp70: 1.0
*tmp71: 0.015276668818842154
*tmp74: 0.0
:fn10:digit: 10.0
:fn10:digits: 0.0
:fn10:n: 0.0
:fn6*retaddr: 265.0
:fn6:base: 1.2345000000000002
:fn6:cmp: 0.23450000000000015
:fn6:exp: -50.0
:fn6:n: 1.2345E-50
:fn6:t: 99999.0
:fn7*retaddr: 315.0
:fn7:base: 0.15276668818842154
:fn7:exp: -50.0
:fn7:n: 1.2345E-50
:fn8:mod: 9.0
:fn8:n: 9.0
:fn9:digits: 0.0
:fn9:n: 0.0
@counter: 317.0