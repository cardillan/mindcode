assertflush
print "1\n2\n3\n"
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
print "{2}"
op floor :formatNumber:n 0 0
format :formatNumber:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber:n 1 0
format :formatNumber:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format :formatNumber:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format "-{2}"
format :formatNumber:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
format "-{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
format "{2},{1}"
format 999
format "{2},0{1}"
format 99
format "{2},00{1}"
format 9
format 9
assertprints "9,009,099,999" "printNumber(9009099999)"
assertflush
print "{2}"
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
format "-{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
assertflush
print "{2}"
format "{2}F"
format "{2}E"
format "{2}D"
format "{2}C"
format "{2}B"
format "{2}A"
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0x1234567890 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 112 lessThan :formatHexNumber:digit 0
jump 112 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 129 always 0 0
jump 115 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 129 always 0 0
jump 118 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 129 always 0 0
jump 121 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 129 always 0 0
jump 124 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 129 always 0 0
jump 127 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 129 always 0 0
jump 129 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 106 greaterThan :formatHexNumber:n 0
jump 136 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 133 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
format "{2}C"
format "{2}C"
format "{2}B"
format "{2}B"
format "{2}A"
format "{2}A"
format "{2}0"
format "{2}0"
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
print "{2}"
set :formatHexNumber:digits 8
format "-{2}"
op floor :formatHexNumber:n 11189196 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 161 lessThan :formatHexNumber:digit 0
jump 161 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 178 always 0 0
jump 164 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 178 always 0 0
jump 167 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 178 always 0 0
jump 170 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 178 always 0 0
jump 173 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 178 always 0 0
jump 176 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 178 always 0 0
jump 178 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 155 greaterThan :formatHexNumber:n 0
jump 185 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 182 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
assertflush
op abs *tmp44 null 0
print null
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 195
jump 394 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 200
jump 394 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 205
jump 394 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 210
jump 394 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 215
jump 394 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 220
jump 394 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 225
jump 394 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 230
jump 394 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 235
jump 394 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 240
jump 468 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 245
jump 468 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 250
jump 468 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 255
jump 468 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 260
jump 468 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 265
jump 468 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 270
jump 468 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 275
jump 468 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 280
jump 468 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 285
jump 468 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
assertflush
op shr :printExactBinary:t -1035087118336 32
set *tmp1 290
jump 292 always 0 0
op and :printExactBinary:t -1035087118336 0xFFFFFFFF
set *tmp1 388
op shr *tmp4 :printExactBinary:t 31
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 30
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 29
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 28
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 27
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 26
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 25
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 24
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 23
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 22
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 21
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 20
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 19
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 18
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 17
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 16
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 15
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 14
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 13
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 12
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 11
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 10
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 9
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 8
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 7
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 6
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 5
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 4
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 3
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 2
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 1
op and *tmp5 *tmp4 1
print *tmp5
op and *tmp5 :printExactBinary:t 1
print *tmp5
set @counter *tmp1
assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
assertflush
print "FFFFFF0F00000000"
assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
stop
end
op abs *tmp44 :printExactFast:n 0
jump 398 greaterThan *tmp44 0
print :printExactFast:n
set @counter :printExactFast*retaddr
jump 401 greaterThanEq :printExactFast:n 0
print "-"
op abs :printExactFast:n :printExactFast:n 0
op log10 *tmp50 :printExactFast:n 0
op floor :printExactFast:exp *tmp50 0
op sub *tmp52 0 :printExactFast:exp
op pow *tmp53 10 *tmp52
op mul :printExactFast:base :printExactFast:n *tmp53
op add *tmp56 :printExactFast:base 0.5
op floor *tmp55 *tmp56 0
op sub *tmp58 :printExactFast:base *tmp55
op abs :printExactFast:cmp *tmp58 0
jump 413 greaterThan :printExactFast:cmp 0
print :printExactFast:base
jump 464 always 0 0
jump 416 lessThanEq :printExactFast:cmp 0.00001
print :printExactFast:base
jump 464 always 0 0
op floor *tmp64 :printExactFast:base 0
print *tmp64
print "."
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 428 greaterThanEq :printExactFast:t 100
jump 426 greaterThanEq :printExactFast:t 10
print "0000"
jump 433 always 0 0
print "000"
jump 433 always 0 0
jump 431 greaterThanEq :printExactFast:t 1000
print "00"
jump 433 always 0 0
jump 433 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 443 greaterThanEq :printExactFast:t 100
jump 441 greaterThanEq :printExactFast:t 10
print "0000"
jump 448 always 0 0
print "000"
jump 448 always 0 0
jump 446 greaterThanEq :printExactFast:t 1000
print "00"
jump 448 always 0 0
jump 448 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 458 greaterThanEq :printExactFast:t 100
jump 456 greaterThanEq :printExactFast:t 10
print "0000"
jump 463 always 0 0
print "000"
jump 463 always 0 0
jump 461 greaterThanEq :printExactFast:t 1000
print "00"
jump 463 always 0 0
jump 463 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
jump 467 equal :printExactFast:exp 0
print "E"
print :printExactFast:exp
set @counter :printExactFast*retaddr
op abs *tmp80 :printExactSlow:n 0
jump 472 greaterThan *tmp80 0
print :printExactSlow:n
set @counter :printExactSlow*retaddr
jump 475 greaterThanEq :printExactSlow:n 0
print "-"
op abs :printExactSlow:n :printExactSlow:n 0
op log10 *tmp86 :printExactSlow:n 0
op floor :printExactSlow:exp *tmp86 0
op sub *tmp88 0 :printExactSlow:exp
op pow *tmp89 10 *tmp88
op mul :printExactSlow:base :printExactSlow:n *tmp89
op floor *tmp91 :printExactSlow:base 0
print *tmp91
print "."
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
jump 546 equal :printExactSlow:exp 0
print "E"
print :printExactSlow:exp
set @counter :printExactSlow*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
