assertflush
print "{2}"
op floor :formatNumber.0:n 0 0
format :formatNumber.0:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber.0:n 1 0
format :formatNumber.0:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber.0:n 1.5 0
format :formatNumber.0:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber.0:n 1.5 0
format "-{2}"
format :formatNumber.0:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
format "-{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
format "{2},0{1}"
format 99
format "{2},00{1}"
format 9
format 9
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
format "{2}F"
format "{2}E"
format "{2}D"
format "{2}C"
format "{2}B"
format "{2}A"
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 9
format "{2}{1}"
format 8
format "{2}{1}"
format 7
format "{2}{1}"
format 6
format "{2}{1}"
format 5
format "{2}{1}"
format 4
format "{2}{1}"
format 3
format "{2}{1}"
format 2
format "{2}{1}"
format 1
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
format "{2}C"
format "{2}C"
format "{2}B"
format "{2}B"
format "{2}A"
format "{2}A"
format "{2}0"
format "{2}0"
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
op abs *tmp23 null 0
print null
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast.0:n 0
set :printExactFast.0*retaddr 126
jump 219 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast.0:n 1
set :printExactFast.0*retaddr 131
jump 219 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast.0:n 1.0000001
set :printExactFast.0*retaddr 136
jump 219 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast.0:n 3.00000007
set :printExactFast.0*retaddr 141
jump 219 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast.0:n 3E50
set :printExactFast.0*retaddr 146
jump 219 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast.0:n 1.0123456789
set :printExactFast.0*retaddr 151
jump 219 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast.0:n 10000001E13
set :printExactFast.0*retaddr 156
jump 219 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast.0:n 12345E-54
set :printExactFast.0*retaddr 161
jump 219 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast.0:n -12345E-54
set :printExactFast.0*retaddr 166
jump 219 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow.0:n null
set :printExactSlow.0*retaddr 171
jump 293 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow.0:n 0
set :printExactSlow.0*retaddr 176
jump 293 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow.0:n 1
set :printExactSlow.0*retaddr 181
jump 293 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow.0:n 1.0000001
set :printExactSlow.0*retaddr 186
jump 293 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow.0:n 3.00000007
set :printExactSlow.0*retaddr 191
jump 293 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow.0:n 3E50
set :printExactSlow.0*retaddr 196
jump 293 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow.0:n 1.0123456789
set :printExactSlow.0*retaddr 201
jump 293 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow.0:n 10000001E13
set :printExactSlow.0*retaddr 206
jump 293 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow.0:n 12345E-54
set :printExactSlow.0*retaddr 211
jump 293 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow.0:n -12345E-54
set :printExactSlow.0*retaddr 216
jump 293 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
op abs *tmp23 :printExactFast.0:n 0
jump 223 greaterThan *tmp23 0
print :printExactFast.0:n
set @counter :printExactFast.0*retaddr
jump 226 greaterThanEq :printExactFast.0:n 0
print "-"
op abs :printExactFast.0:n :printExactFast.0:n 0
op log10 *tmp29 :printExactFast.0:n 0
op floor :printExactFast.0:exp *tmp29 0
op sub *tmp31 0 :printExactFast.0:exp
op pow *tmp32 10 *tmp31
op mul :printExactFast.0:base :printExactFast.0:n *tmp32
op add *tmp35 :printExactFast.0:base 0.5
op floor *tmp34 *tmp35 0
op sub *tmp37 :printExactFast.0:base *tmp34
op abs :printExactFast.0:cmp *tmp37 0
jump 238 greaterThan :printExactFast.0:cmp 0
print :printExactFast.0:base
jump 289 always 0 0
jump 241 lessThanEq :printExactFast.0:cmp 0.00001
print :printExactFast.0:base
jump 289 always 0 0
op floor *tmp43 :printExactFast.0:base 0
print *tmp43
print "."
op mod *tmp44 :printExactFast.0:base 1
op mul :printExactFast.0:base *tmp44 100000
op floor :printExactFast.0:t :printExactFast.0:base 0
jump 250 greaterThanEq :printExactFast.0:t 10
print "0000"
jump 258 always 0 0
jump 253 greaterThanEq :printExactFast.0:t 100
print "000"
jump 258 always 0 0
jump 256 greaterThanEq :printExactFast.0:t 1000
print "00"
jump 258 always 0 0
jump 258 greaterThanEq :printExactFast.0:t 10000
print "0"
print :printExactFast.0:t
op mod *tmp44 :printExactFast.0:base 1
op mul :printExactFast.0:base *tmp44 100000
op floor :printExactFast.0:t :printExactFast.0:base 0
jump 265 greaterThanEq :printExactFast.0:t 10
print "0000"
jump 273 always 0 0
jump 268 greaterThanEq :printExactFast.0:t 100
print "000"
jump 273 always 0 0
jump 271 greaterThanEq :printExactFast.0:t 1000
print "00"
jump 273 always 0 0
jump 273 greaterThanEq :printExactFast.0:t 10000
print "0"
print :printExactFast.0:t
op mod *tmp44 :printExactFast.0:base 1
op mul :printExactFast.0:base *tmp44 100000
op floor :printExactFast.0:t :printExactFast.0:base 0
jump 280 greaterThanEq :printExactFast.0:t 10
print "0000"
jump 288 always 0 0
jump 283 greaterThanEq :printExactFast.0:t 100
print "000"
jump 288 always 0 0
jump 286 greaterThanEq :printExactFast.0:t 1000
print "00"
jump 288 always 0 0
jump 288 greaterThanEq :printExactFast.0:t 10000
print "0"
print :printExactFast.0:t
jump 292 equal :printExactFast.0:exp 0
print "E"
print :printExactFast.0:exp
set @counter :printExactFast.0*retaddr
op abs *tmp59 :printExactSlow.0:n 0
jump 297 greaterThan *tmp59 0
print :printExactSlow.0:n
set @counter :printExactSlow.0*retaddr
jump 300 greaterThanEq :printExactSlow.0:n 0
print "-"
op abs :printExactSlow.0:n :printExactSlow.0:n 0
op log10 *tmp65 :printExactSlow.0:n 0
op floor :printExactSlow.0:exp *tmp65 0
op sub *tmp67 0 :printExactSlow.0:exp
op pow *tmp68 10 *tmp67
op mul :printExactSlow.0:base :printExactSlow.0:n *tmp68
op floor *tmp70 :printExactSlow.0:base 0
print *tmp70
print "."
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
op mod *tmp71 :printExactSlow.0:base 1
op mul :printExactSlow.0:base *tmp71 10
op floor *tmp74 :printExactSlow.0:base 0
print *tmp74
jump 371 equal :printExactSlow.0:exp 0
print "E"
print :printExactSlow.0:exp
set @counter :printExactSlow.0*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
