assertflush
print "1\n2\n3\n"
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
print "{2}"
op floor :formatNumber:n 0 0
format :formatNumber:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber:n 1 0
format :formatNumber:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format :formatNumber:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format "-{2}"
format :formatNumber:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
format "-{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
format "{2},0{1}"
format 99
format "{2},00{1}"
format 9
format 9
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
format "-{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
assertflush
print "{2}"
format "{2}F"
format "{2}E"
format "{2}D"
format "{2}C"
format "{2}B"
format "{2}A"
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0x1234567890 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 110 lessThan :formatHexNumber:digit 0
jump 110 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 127 always 0 0
jump 113 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 127 always 0 0
jump 116 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 127 always 0 0
jump 119 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 127 always 0 0
jump 122 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 127 always 0 0
jump 125 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 127 always 0 0
jump 127 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 104 greaterThan :formatHexNumber:n 0
jump 134 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 131 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
format "{2}C"
format "{2}C"
format "{2}B"
format "{2}B"
format "{2}A"
format "{2}A"
format "{2}0"
format "{2}0"
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
print "{2}"
set :formatHexNumber:digits 8
format "-{2}"
op floor :formatHexNumber:n 11189196 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 159 lessThan :formatHexNumber:digit 0
jump 159 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 176 always 0 0
jump 162 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 176 always 0 0
jump 165 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 176 always 0 0
jump 168 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 176 always 0 0
jump 171 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 176 always 0 0
jump 174 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 176 always 0 0
jump 176 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 153 greaterThan :formatHexNumber:n 0
jump 183 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 180 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
assertflush
op abs *tmp45 null 0
print null
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 193
jump 392 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 198
jump 392 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 203
jump 392 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 208
jump 392 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 213
jump 392 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 218
jump 392 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 223
jump 392 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 228
jump 392 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 233
jump 392 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 238
jump 466 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 243
jump 466 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 248
jump 466 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 253
jump 466 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 258
jump 466 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 263
jump 466 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 268
jump 466 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 273
jump 466 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 278
jump 466 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 283
jump 466 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
assertflush
op shr :printExactBinary:t -1035087118336 32
set *tmp1 288
jump 290 always 0 0
op and :printExactBinary:t -1035087118336 0xFFFFFFFF
set *tmp1 386
op shr *tmp4 :printExactBinary:t 31
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 30
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 29
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 28
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 27
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 26
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 25
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 24
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 23
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 22
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 21
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 20
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 19
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 18
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 17
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 16
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 15
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 14
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 13
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 12
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 11
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 10
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 9
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 8
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 7
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 6
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 5
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 4
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 3
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 2
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 1
op and *tmp5 *tmp4 1
print *tmp5
op and *tmp5 :printExactBinary:t 1
print *tmp5
set @counter *tmp1
assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
assertflush
print "FFFFFF0F00000000"
assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
stop
end
op abs *tmp45 :printExactFast:n 0
jump 396 greaterThan *tmp45 0
print :printExactFast:n
set @counter :printExactFast*retaddr
jump 399 greaterThanEq :printExactFast:n 0
print "-"
op abs :printExactFast:n :printExactFast:n 0
op log10 *tmp51 :printExactFast:n 0
op floor :printExactFast:exp *tmp51 0
op sub *tmp53 0 :printExactFast:exp
op pow *tmp54 10 *tmp53
op mul :printExactFast:base :printExactFast:n *tmp54
op add *tmp57 :printExactFast:base 0.5
op floor *tmp56 *tmp57 0
op sub *tmp59 :printExactFast:base *tmp56
op abs :printExactFast:cmp *tmp59 0
jump 411 greaterThan :printExactFast:cmp 0
print :printExactFast:base
jump 462 always 0 0
jump 414 lessThanEq :printExactFast:cmp 0.00001
print :printExactFast:base
jump 462 always 0 0
op floor *tmp65 :printExactFast:base 0
print *tmp65
print "."
op mod *tmp66 :printExactFast:base 1
op mul :printExactFast:base *tmp66 100000
op floor :printExactFast:t :printExactFast:base 0
jump 423 greaterThanEq :printExactFast:t 10
print "0000"
jump 431 always 0 0
jump 426 greaterThanEq :printExactFast:t 100
print "000"
jump 431 always 0 0
jump 429 greaterThanEq :printExactFast:t 1000
print "00"
jump 431 always 0 0
jump 431 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp66 :printExactFast:base 1
op mul :printExactFast:base *tmp66 100000
op floor :printExactFast:t :printExactFast:base 0
jump 438 greaterThanEq :printExactFast:t 10
print "0000"
jump 446 always 0 0
jump 441 greaterThanEq :printExactFast:t 100
print "000"
jump 446 always 0 0
jump 444 greaterThanEq :printExactFast:t 1000
print "00"
jump 446 always 0 0
jump 446 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp66 :printExactFast:base 1
op mul :printExactFast:base *tmp66 100000
op floor :printExactFast:t :printExactFast:base 0
jump 453 greaterThanEq :printExactFast:t 10
print "0000"
jump 461 always 0 0
jump 456 greaterThanEq :printExactFast:t 100
print "000"
jump 461 always 0 0
jump 459 greaterThanEq :printExactFast:t 1000
print "00"
jump 461 always 0 0
jump 461 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
jump 465 equal :printExactFast:exp 0
print "E"
print :printExactFast:exp
set @counter :printExactFast*retaddr
op abs *tmp81 :printExactSlow:n 0
jump 470 greaterThan *tmp81 0
print :printExactSlow:n
set @counter :printExactSlow*retaddr
jump 473 greaterThanEq :printExactSlow:n 0
print "-"
op abs :printExactSlow:n :printExactSlow:n 0
op log10 *tmp87 :printExactSlow:n 0
op floor :printExactSlow:exp *tmp87 0
op sub *tmp89 0 :printExactSlow:exp
op pow *tmp90 10 *tmp89
op mul :printExactSlow:base :printExactSlow:n *tmp90
op floor *tmp92 :printExactSlow:base 0
print *tmp92
print "."
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op mod *tmp93 :printExactSlow:base 1
op mul :printExactSlow:base *tmp93 10
op floor *tmp96 :printExactSlow:base 0
print *tmp96
jump 544 equal :printExactSlow:exp 0
print "E"
print :printExactSlow:exp
set @counter :printExactSlow*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
