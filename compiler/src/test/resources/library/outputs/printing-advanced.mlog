assertflush
print "1\n2\n3\n"
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
print "{2}"
op floor :formatNumber:n 0 0
format :formatNumber:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber:n 1 0
format :formatNumber:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format :formatNumber:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format "-{2}"
format :formatNumber:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
format "-{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
format "{2},0{1}"
format 99
format "{2},00{1}"
format 9
format 9
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
format "{2}F"
format "{2}E"
format "{2}D"
format "{2}C"
format "{2}B"
format "{2}A"
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 9
format "{2}{1}"
format 8
format "{2}{1}"
format 7
format "{2}{1}"
format 6
format "{2}{1}"
format 5
format "{2}{1}"
format 4
format "{2}{1}"
format 3
format "{2}{1}"
format 2
format "{2}{1}"
format 1
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
format "{2}C"
format "{2}C"
format "{2}B"
format "{2}B"
format "{2}A"
format "{2}A"
format "{2}0"
format "{2}0"
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
op abs *tmp24 null 0
print null
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 129
jump 222 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 134
jump 222 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 139
jump 222 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 144
jump 222 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 149
jump 222 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 154
jump 222 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 159
jump 222 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 164
jump 222 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 169
jump 222 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 174
jump 296 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 179
jump 296 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 184
jump 296 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 189
jump 296 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 194
jump 296 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 199
jump 296 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 204
jump 296 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 209
jump 296 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 214
jump 296 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 219
jump 296 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
op abs *tmp24 :printExactFast:n 0
jump 226 greaterThan *tmp24 0
print :printExactFast:n
set @counter :printExactFast*retaddr
jump 229 greaterThanEq :printExactFast:n 0
print "-"
op abs :printExactFast:n :printExactFast:n 0
op log10 *tmp30 :printExactFast:n 0
op floor :printExactFast:exp *tmp30 0
op sub *tmp32 0 :printExactFast:exp
op pow *tmp33 10 *tmp32
op mul :printExactFast:base :printExactFast:n *tmp33
op add *tmp36 :printExactFast:base 0.5
op floor *tmp35 *tmp36 0
op sub *tmp38 :printExactFast:base *tmp35
op abs :printExactFast:cmp *tmp38 0
jump 241 greaterThan :printExactFast:cmp 0
print :printExactFast:base
jump 292 always 0 0
jump 244 lessThanEq :printExactFast:cmp 0.00001
print :printExactFast:base
jump 292 always 0 0
op floor *tmp44 :printExactFast:base 0
print *tmp44
print "."
op mod *tmp45 :printExactFast:base 1
op mul :printExactFast:base *tmp45 100000
op floor :printExactFast:t :printExactFast:base 0
jump 253 greaterThanEq :printExactFast:t 10
print "0000"
jump 261 always 0 0
jump 256 greaterThanEq :printExactFast:t 100
print "000"
jump 261 always 0 0
jump 259 greaterThanEq :printExactFast:t 1000
print "00"
jump 261 always 0 0
jump 261 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp45 :printExactFast:base 1
op mul :printExactFast:base *tmp45 100000
op floor :printExactFast:t :printExactFast:base 0
jump 268 greaterThanEq :printExactFast:t 10
print "0000"
jump 276 always 0 0
jump 271 greaterThanEq :printExactFast:t 100
print "000"
jump 276 always 0 0
jump 274 greaterThanEq :printExactFast:t 1000
print "00"
jump 276 always 0 0
jump 276 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp45 :printExactFast:base 1
op mul :printExactFast:base *tmp45 100000
op floor :printExactFast:t :printExactFast:base 0
jump 283 greaterThanEq :printExactFast:t 10
print "0000"
jump 291 always 0 0
jump 286 greaterThanEq :printExactFast:t 100
print "000"
jump 291 always 0 0
jump 289 greaterThanEq :printExactFast:t 1000
print "00"
jump 291 always 0 0
jump 291 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
jump 295 equal :printExactFast:exp 0
print "E"
print :printExactFast:exp
set @counter :printExactFast*retaddr
op abs *tmp60 :printExactSlow:n 0
jump 300 greaterThan *tmp60 0
print :printExactSlow:n
set @counter :printExactSlow*retaddr
jump 303 greaterThanEq :printExactSlow:n 0
print "-"
op abs :printExactSlow:n :printExactSlow:n 0
op log10 *tmp66 :printExactSlow:n 0
op floor :printExactSlow:exp *tmp66 0
op sub *tmp68 0 :printExactSlow:exp
op pow *tmp69 10 *tmp68
op mul :printExactSlow:base :printExactSlow:n *tmp69
op floor *tmp71 :printExactSlow:base 0
print *tmp71
print "."
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
jump 374 equal :printExactSlow:exp 0
print "E"
print :printExactSlow:exp
set @counter :printExactSlow*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
