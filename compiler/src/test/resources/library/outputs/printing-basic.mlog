assertflush
print "1\n2\n3\n"
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
print "{2}"
op floor :formatNumber:n 0 0
format :formatNumber:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber:n 1 0
format :formatNumber:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format :formatNumber:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format "-{2}"
format :formatNumber:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1234567 0
op mod :formatNumber:mod :formatNumber:n 1000
jump 31 greaterThanEq :formatNumber:mod 10
format "{2},00{1}"
jump 35 always 0 0
jump 34 greaterThanEq :formatNumber:mod 100
format "{2},0{1}"
jump 35 always 0 0
format "{2},{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 27 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
op floor :formatNumber:n 1234567 0
format "-{2}"
op mod :formatNumber:mod :formatNumber:n 1000
jump 48 greaterThanEq :formatNumber:mod 10
format "{2},00{1}"
jump 52 always 0 0
jump 51 greaterThanEq :formatNumber:mod 100
format "{2},0{1}"
jump 52 always 0 0
format "{2},{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 44 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
op floor :formatNumber:n 9009099 0
op mod :formatNumber:mod :formatNumber:n 1000
jump 64 greaterThanEq :formatNumber:mod 10
format "{2},00{1}"
jump 68 always 0 0
jump 67 greaterThanEq :formatNumber:mod 100
format "{2},0{1}"
jump 68 always 0 0
format "{2},{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 60 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
set :formatBinaryNumber:digits 0
op floor :formatBinaryNumber:n 0b1001 0
op and *tmp12 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp12
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 77 greaterThan :formatBinaryNumber:n 0
jump 87 lessThanEq :formatBinaryNumber:digits 0
format "{2}0"
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 84 greaterThan :formatBinaryNumber:digits 0
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
set :formatBinaryNumber:digits 6
op floor :formatBinaryNumber:n 0b1010 0
op and *tmp12 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp12
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 93 greaterThan :formatBinaryNumber:n 0
jump 103 lessThanEq :formatBinaryNumber:digits 0
format "{2}0"
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 100 greaterThan :formatBinaryNumber:digits 0
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0xABCDEF 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 115 lessThan :formatHexNumber:digit 0
jump 115 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 132 always 0 0
jump 118 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 132 always 0 0
jump 121 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 132 always 0 0
jump 124 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 132 always 0 0
jump 127 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 132 always 0 0
jump 130 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 132 always 0 0
jump 132 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 109 greaterThan :formatHexNumber:n 0
jump 139 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 136 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0x1234567890 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 151 lessThan :formatHexNumber:digit 0
jump 151 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 168 always 0 0
jump 154 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 168 always 0 0
jump 157 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 168 always 0 0
jump 160 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 168 always 0 0
jump 163 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 168 always 0 0
jump 166 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 168 always 0 0
jump 168 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 145 greaterThan :formatHexNumber:n 0
jump 175 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 172 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 8
op floor :formatHexNumber:n 0xAABBCC 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 187 lessThan :formatHexNumber:digit 0
jump 187 greaterThan :formatHexNumber:digit 9
format "{2}{1}"
format :formatHexNumber:digit
jump 204 always 0 0
jump 190 notEqual :formatHexNumber:digit 10
format "{2}A"
jump 204 always 0 0
jump 193 notEqual :formatHexNumber:digit 11
format "{2}B"
jump 204 always 0 0
jump 196 notEqual :formatHexNumber:digit 12
format "{2}C"
jump 204 always 0 0
jump 199 notEqual :formatHexNumber:digit 13
format "{2}D"
jump 204 always 0 0
jump 202 notEqual :formatHexNumber:digit 14
format "{2}E"
jump 204 always 0 0
jump 204 notEqual :formatHexNumber:digit 15
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 181 greaterThan :formatHexNumber:n 0
jump 211 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 208 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
print null
assertprints "null" "printExactFast(null)"
assertflush
print 0
assertprints "0" "printExactFast(0)"
assertflush
print 1
assertprints "1" "printExactFast(1)"
assertflush
print "1.000000100000000"
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
print "3.000000070000000"
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
print "3E50"
assertprints "3E50" "printExactFast(3e50)"
assertflush
print 1.0123456789
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
print "1.000000099999999E20"
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
print "1.2345000000000002E-50"
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
print "-1.2345000000000002E-50"
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
print null
assertprints "null" "printExactSlow(null)"
assertflush
print 0
assertprints "0" "printExactSlow(0)"
assertflush
print "1.000000000000000"
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
op abs *tmp60 1.0000001 0
op log10 *tmp66 1.0000001 0
op floor :printExactSlow:exp 0.000000043429446044209946 0
op sub *tmp68 0 0
op pow *tmp69 10 0
op floor *tmp71 1.0000001 0
print "1.000000100000000"
op mod *tmp72 0.005838671768287895 1
op mul :printExactSlow:base 0.005838671768287895 10
op floor *tmp75 0.05838671768287895 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 268
jump 296 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 273
jump 296 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 278
jump 296 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 283
jump 296 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 288
jump 296 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 293
jump 296 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
op abs *tmp60 :printExactSlow:n 0
jump 300 greaterThan *tmp60 0
print :printExactSlow:n
set @counter :printExactSlow*retaddr
jump 303 greaterThanEq :printExactSlow:n 0
print "-"
op abs :printExactSlow:n :printExactSlow:n 0
op log10 *tmp66 :printExactSlow:n 0
op floor :printExactSlow:exp *tmp66 0
op sub *tmp68 0 :printExactSlow:exp
op pow *tmp69 10 *tmp68
op mul :printExactSlow:base :printExactSlow:n *tmp69
op floor *tmp71 :printExactSlow:base 0
print *tmp71
print "."
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op mod *tmp72 :printExactSlow:base 1
op mul :printExactSlow:base *tmp72 10
op floor *tmp75 :printExactSlow:base 0
print *tmp75
jump 374 equal :printExactSlow:exp 0
print "E"
print :printExactSlow:exp
set @counter :printExactSlow*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
