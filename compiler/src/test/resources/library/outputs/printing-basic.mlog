assertflush
print "1\n2\n3\n"
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
print "{2}"
op floor :formatNumber:n 0 0
format :formatNumber:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :formatNumber:n 1 0
format :formatNumber:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format :formatNumber:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1.5 0
format "-{2}"
format :formatNumber:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
op floor :formatNumber:n 1234567 0
op mod :formatNumber:mod :formatNumber:n 1000
jump 31 lessThan :formatNumber:mod 100
format "{2},{1}"
jump 35 always 0 0
jump 34 lessThan :formatNumber:mod 10
format "{2},0{1}"
jump 35 always 0 0
format "{2},00{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 27 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
op floor :formatNumber:n 1234567 0
format "-{2}"
op mod :formatNumber:mod :formatNumber:n 1000
jump 48 lessThan :formatNumber:mod 100
format "{2},{1}"
jump 52 always 0 0
jump 51 lessThan :formatNumber:mod 10
format "{2},0{1}"
jump 52 always 0 0
format "{2},00{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 44 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
op floor :formatNumber:n 9009099999 0
op mod :formatNumber:mod :formatNumber:n 1000
jump 64 lessThan :formatNumber:mod 100
format "{2},{1}"
jump 68 always 0 0
jump 67 lessThan :formatNumber:mod 10
format "{2},0{1}"
jump 68 always 0 0
format "{2},00{1}"
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 60 greaterThan :formatNumber:n 999
format :formatNumber:n
assertprints "9,009,099,999" "printNumber(9009099999)"
assertflush
print "{2}"
set :formatBinaryNumber:digits 0
op floor :formatBinaryNumber:n 0b1001 0
op and *tmp29 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp29
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 77 greaterThan :formatBinaryNumber:n 0
jump 87 lessThanEq :formatBinaryNumber:digits 0
format "{2}0"
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 84 greaterThan :formatBinaryNumber:digits 0
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
set :formatBinaryNumber:digits 6
op floor :formatBinaryNumber:n 0b1010 0
op and *tmp29 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp29
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 93 greaterThan :formatBinaryNumber:n 0
jump 103 lessThanEq :formatBinaryNumber:digits 0
format "{2}0"
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 100 greaterThan :formatBinaryNumber:digits 0
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
set :formatBinaryNumber:digits 6
format "-{2}"
op floor :formatBinaryNumber:n 10 0
op and *tmp29 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp29
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 110 greaterThan :formatBinaryNumber:n 0
jump 120 lessThanEq :formatBinaryNumber:digits 0
format "{2}0"
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 117 greaterThan :formatBinaryNumber:digits 0
format "0b"
assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0xABCDEF 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 132 greaterThanEq :formatHexNumber:digit 10
jump 150 lessThan :formatHexNumber:digit 0
format "{2}{1}"
format :formatHexNumber:digit
jump 150 always 0 0
jump 137 greaterThanEq :formatHexNumber:digit 13
jump 143 lessThan :formatHexNumber:digit 11
jump 145 greaterThanEq :formatHexNumber:digit 12
format "{2}B"
jump 150 always 0 0
jump 141 greaterThanEq :formatHexNumber:digit 15
jump 147 greaterThanEq :formatHexNumber:digit 14
format "{2}D"
jump 150 always 0 0
jump 149 lessThan :formatHexNumber:digit 16
jump 150 always 0 0
format "{2}A"
jump 150 always 0 0
format "{2}C"
jump 150 always 0 0
format "{2}E"
jump 150 always 0 0
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 126 greaterThan :formatHexNumber:n 0
jump 157 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 154 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 0
op floor :formatHexNumber:n 0x1234567890 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 169 greaterThanEq :formatHexNumber:digit 10
jump 187 lessThan :formatHexNumber:digit 0
format "{2}{1}"
format :formatHexNumber:digit
jump 187 always 0 0
jump 174 greaterThanEq :formatHexNumber:digit 13
jump 180 lessThan :formatHexNumber:digit 11
jump 182 greaterThanEq :formatHexNumber:digit 12
format "{2}B"
jump 187 always 0 0
jump 178 greaterThanEq :formatHexNumber:digit 15
jump 184 greaterThanEq :formatHexNumber:digit 14
format "{2}D"
jump 187 always 0 0
jump 186 lessThan :formatHexNumber:digit 16
jump 187 always 0 0
format "{2}A"
jump 187 always 0 0
format "{2}C"
jump 187 always 0 0
format "{2}E"
jump 187 always 0 0
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 163 greaterThan :formatHexNumber:n 0
jump 194 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 191 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
set :formatHexNumber:digits 8
op floor :formatHexNumber:n 0xAABBCC 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 206 greaterThanEq :formatHexNumber:digit 10
jump 224 lessThan :formatHexNumber:digit 0
format "{2}{1}"
format :formatHexNumber:digit
jump 224 always 0 0
jump 211 greaterThanEq :formatHexNumber:digit 13
jump 217 lessThan :formatHexNumber:digit 11
jump 219 greaterThanEq :formatHexNumber:digit 12
format "{2}B"
jump 224 always 0 0
jump 215 greaterThanEq :formatHexNumber:digit 15
jump 221 greaterThanEq :formatHexNumber:digit 14
format "{2}D"
jump 224 always 0 0
jump 223 lessThan :formatHexNumber:digit 16
jump 224 always 0 0
format "{2}A"
jump 224 always 0 0
format "{2}C"
jump 224 always 0 0
format "{2}E"
jump 224 always 0 0
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 200 greaterThan :formatHexNumber:n 0
jump 231 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 228 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
print "{2}"
set :formatHexNumber:digits 8
format "-{2}"
op floor :formatHexNumber:n 11189196 0
op mod :formatHexNumber:digit :formatHexNumber:n 16
jump 244 greaterThanEq :formatHexNumber:digit 10
jump 262 lessThan :formatHexNumber:digit 0
format "{2}{1}"
format :formatHexNumber:digit
jump 262 always 0 0
jump 249 greaterThanEq :formatHexNumber:digit 13
jump 255 lessThan :formatHexNumber:digit 11
jump 257 greaterThanEq :formatHexNumber:digit 12
format "{2}B"
jump 262 always 0 0
jump 253 greaterThanEq :formatHexNumber:digit 15
jump 259 greaterThanEq :formatHexNumber:digit 14
format "{2}D"
jump 262 always 0 0
jump 261 lessThan :formatHexNumber:digit 16
jump 262 always 0 0
format "{2}A"
jump 262 always 0 0
format "{2}C"
jump 262 always 0 0
format "{2}E"
jump 262 always 0 0
format "{2}F"
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 238 greaterThan :formatHexNumber:n 0
jump 269 lessThanEq :formatHexNumber:digits 0
format "{2}0"
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 266 greaterThan :formatHexNumber:digits 0
format "0x"
assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
assertflush
print null
assertprints "null" "printExactFast(null)"
assertflush
print 0
assertprints "0" "printExactFast(0)"
assertflush
print 1
assertprints "1" "printExactFast(1)"
assertflush
print "1.000000100000000"
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
op floor *tmp64 3.00000007 0
print "3.000000070000000"
op mod *tmp65 700.0000001866624 1
op floor :printExactFast:t 0.018666241885512136 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
op abs *tmp44 3E50 0
op log10 *tmp50 3E50 0
op floor :printExactFast:exp 50.47712125471966 0
op sub *tmp52 0 50
op pow *tmp53 10 -50
op mul :printExactFast:base 3E50 1E-50
op add *tmp56 3 0.5
op floor *tmp55 3.5 0
op sub *tmp58 3 3
op abs :printExactFast:cmp 0 0
print "3E50"
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 306
jump 481 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 311
jump 481 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 316
jump 481 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 321
jump 481 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 326
jump 555 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 331
jump 555 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 336
jump 555 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 341
jump 555 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 346
jump 555 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 351
jump 555 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 356
jump 555 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 361
jump 555 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 366
jump 555 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 371
jump 555 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
assertflush
op shr :printExactBinary:t -1035087118336 32
set *tmp1 376
jump 378 always 0 0
op and :printExactBinary:t -1035087118336 0xFFFFFFFF
set *tmp1 475
op shr *tmp4 :printExactBinary:t 31
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 30
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 29
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 28
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 27
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 26
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 25
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 24
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 23
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 22
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 21
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 20
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 19
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 18
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 17
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 16
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 15
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 14
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 13
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 12
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 11
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 10
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 9
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 8
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 7
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 6
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 5
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 4
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 3
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 2
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 1
op and *tmp5 *tmp4 1
print *tmp5
op shr *tmp4 :printExactBinary:t 0
op and *tmp5 *tmp4 1
print *tmp5
set @counter *tmp1
assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
assertflush
print "FFFFFF0F00000000"
assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
stop
end
op abs *tmp44 :printExactFast:n 0
jump 485 greaterThan *tmp44 0
print :printExactFast:n
set @counter :printExactFast*retaddr
jump 488 greaterThanEq :printExactFast:n 0
print "-"
op abs :printExactFast:n :printExactFast:n 0
op log10 *tmp50 :printExactFast:n 0
op floor :printExactFast:exp *tmp50 0
op sub *tmp52 0 :printExactFast:exp
op pow *tmp53 10 *tmp52
op mul :printExactFast:base :printExactFast:n *tmp53
op add *tmp56 :printExactFast:base 0.5
op floor *tmp55 *tmp56 0
op sub *tmp58 :printExactFast:base *tmp55
op abs :printExactFast:cmp *tmp58 0
jump 500 greaterThan :printExactFast:cmp 0
print :printExactFast:base
jump 551 always 0 0
jump 503 lessThanEq :printExactFast:cmp 0.00001
print :printExactFast:base
jump 551 always 0 0
op floor *tmp64 :printExactFast:base 0
print *tmp64
print "."
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 515 greaterThanEq :printExactFast:t 100
jump 513 greaterThanEq :printExactFast:t 10
print "0000"
jump 520 always 0 0
print "000"
jump 520 always 0 0
jump 518 greaterThanEq :printExactFast:t 1000
print "00"
jump 520 always 0 0
jump 520 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 530 greaterThanEq :printExactFast:t 100
jump 528 greaterThanEq :printExactFast:t 10
print "0000"
jump 535 always 0 0
print "000"
jump 535 always 0 0
jump 533 greaterThanEq :printExactFast:t 1000
print "00"
jump 535 always 0 0
jump 535 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
op mod *tmp65 :printExactFast:base 1
op mul :printExactFast:base *tmp65 100000
op floor :printExactFast:t :printExactFast:base 0
jump 545 greaterThanEq :printExactFast:t 100
jump 543 greaterThanEq :printExactFast:t 10
print "0000"
jump 550 always 0 0
print "000"
jump 550 always 0 0
jump 548 greaterThanEq :printExactFast:t 1000
print "00"
jump 550 always 0 0
jump 550 greaterThanEq :printExactFast:t 10000
print "0"
print :printExactFast:t
jump 554 equal :printExactFast:exp 0
print "E"
print :printExactFast:exp
set @counter :printExactFast*retaddr
op abs *tmp80 :printExactSlow:n 0
jump 559 greaterThan *tmp80 0
print :printExactSlow:n
set @counter :printExactSlow*retaddr
jump 562 greaterThanEq :printExactSlow:n 0
print "-"
op abs :printExactSlow:n :printExactSlow:n 0
op log10 *tmp86 :printExactSlow:n 0
op floor :printExactSlow:exp *tmp86 0
op sub *tmp88 0 :printExactSlow:exp
op pow *tmp89 10 *tmp88
op mul :printExactSlow:base :printExactSlow:n *tmp89
op floor *tmp91 :printExactSlow:base 0
print *tmp91
print "."
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
op mod *tmp92 :printExactSlow:base 1
op mul :printExactSlow:base *tmp92 10
op floor *tmp95 :printExactSlow:base 0
print *tmp95
jump 633 equal :printExactSlow:exp 0
print "E"
print :printExactSlow:exp
set @counter :printExactSlow*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
