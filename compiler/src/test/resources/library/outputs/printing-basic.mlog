assertflush
print "{2}"
op floor :fn8:n 0 0
format :fn8:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :fn8:n 1 0
format :fn8:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :fn8:n 1.5 0
format :fn8:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :fn8:n 1.5 0
format "-{2}"
format :fn8:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
op floor :fn8:n 1234567 0
op mod :fn8:mod :fn8:n 1000
jump 28 greaterThanEq :fn8:mod 10
format "{2},00{1}"
jump 32 always 0 0
jump 31 greaterThanEq :fn8:mod 100
format "{2},0{1}"
jump 32 always 0 0
format "{2},{1}"
format :fn8:mod
op idiv :fn8:n :fn8:n 1000
jump 24 greaterThan :fn8:n 999
format :fn8:n
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
op floor :fn8:n 1234567 0
format "-{2}"
op mod :fn8:mod :fn8:n 1000
jump 45 greaterThanEq :fn8:mod 10
format "{2},00{1}"
jump 49 always 0 0
jump 48 greaterThanEq :fn8:mod 100
format "{2},0{1}"
jump 49 always 0 0
format "{2},{1}"
format :fn8:mod
op idiv :fn8:n :fn8:n 1000
jump 41 greaterThan :fn8:n 999
format :fn8:n
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
op floor :fn8:n 9009099 0
op mod :fn8:mod :fn8:n 1000
jump 61 greaterThanEq :fn8:mod 10
format "{2},00{1}"
jump 65 always 0 0
jump 64 greaterThanEq :fn8:mod 100
format "{2},0{1}"
jump 65 always 0 0
format "{2},{1}"
format :fn8:mod
op idiv :fn8:n :fn8:n 1000
jump 57 greaterThan :fn8:n 999
format :fn8:n
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
set :fn9:digits 0
op floor :fn9:n 0b1001 0
op and *tmp11 :fn9:n 1
format "{2}{1}"
format *tmp11
op shr :fn9:n :fn9:n 1
op sub :fn9:digits :fn9:digits 1
jump 74 greaterThan :fn9:n 0
jump 84 lessThanEq :fn9:digits 0
format "{2}0"
op sub :fn9:digits :fn9:digits 1
jump 81 greaterThan :fn9:digits 0
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
set :fn9:digits 6
op floor :fn9:n 0b1010 0
op and *tmp11 :fn9:n 1
format "{2}{1}"
format *tmp11
op shr :fn9:n :fn9:n 1
op sub :fn9:digits :fn9:digits 1
jump 90 greaterThan :fn9:n 0
jump 100 lessThanEq :fn9:digits 0
format "{2}0"
op sub :fn9:digits :fn9:digits 1
jump 97 greaterThan :fn9:digits 0
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
set :fn10:digits 0
op floor :fn10:n 0xABCDEF 0
op mod :fn10:digit :fn10:n 16
jump 113 lessThan :fn10:digit 0
jump 110 lessThanEq :fn10:digit 9
jump 113 always 0 0
format "{2}{1}"
format :fn10:digit
jump 130 always 0 0
jump 116 notEqual :fn10:digit 10
format "{2}A"
jump 130 always 0 0
jump 119 notEqual :fn10:digit 11
format "{2}B"
jump 130 always 0 0
jump 122 notEqual :fn10:digit 12
format "{2}C"
jump 130 always 0 0
jump 125 notEqual :fn10:digit 13
format "{2}D"
jump 130 always 0 0
jump 128 notEqual :fn10:digit 14
format "{2}E"
jump 130 always 0 0
jump 130 notEqual :fn10:digit 15
format "{2}F"
op shr :fn10:n :fn10:n 4
op sub :fn10:digits :fn10:digits 1
jump 106 greaterThan :fn10:n 0
jump 137 lessThanEq :fn10:digits 0
format "{2}0"
op sub :fn10:digits :fn10:digits 1
jump 134 greaterThan :fn10:digits 0
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
set :fn10:digits 0
op floor :fn10:n 0x1234567890 0
op mod :fn10:digit :fn10:n 16
jump 150 lessThan :fn10:digit 0
jump 147 lessThanEq :fn10:digit 9
jump 150 always 0 0
format "{2}{1}"
format :fn10:digit
jump 167 always 0 0
jump 153 notEqual :fn10:digit 10
format "{2}A"
jump 167 always 0 0
jump 156 notEqual :fn10:digit 11
format "{2}B"
jump 167 always 0 0
jump 159 notEqual :fn10:digit 12
format "{2}C"
jump 167 always 0 0
jump 162 notEqual :fn10:digit 13
format "{2}D"
jump 167 always 0 0
jump 165 notEqual :fn10:digit 14
format "{2}E"
jump 167 always 0 0
jump 167 notEqual :fn10:digit 15
format "{2}F"
op shr :fn10:n :fn10:n 4
op sub :fn10:digits :fn10:digits 1
jump 143 greaterThan :fn10:n 0
jump 174 lessThanEq :fn10:digits 0
format "{2}0"
op sub :fn10:digits :fn10:digits 1
jump 171 greaterThan :fn10:digits 0
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
set :fn10:digits 8
op floor :fn10:n 0xAABBCC 0
op mod :fn10:digit :fn10:n 16
jump 187 lessThan :fn10:digit 0
jump 184 lessThanEq :fn10:digit 9
jump 187 always 0 0
format "{2}{1}"
format :fn10:digit
jump 204 always 0 0
jump 190 notEqual :fn10:digit 10
format "{2}A"
jump 204 always 0 0
jump 193 notEqual :fn10:digit 11
format "{2}B"
jump 204 always 0 0
jump 196 notEqual :fn10:digit 12
format "{2}C"
jump 204 always 0 0
jump 199 notEqual :fn10:digit 13
format "{2}D"
jump 204 always 0 0
jump 202 notEqual :fn10:digit 14
format "{2}E"
jump 204 always 0 0
jump 204 notEqual :fn10:digit 15
format "{2}F"
op shr :fn10:n :fn10:n 4
op sub :fn10:digits :fn10:digits 1
jump 180 greaterThan :fn10:n 0
jump 211 lessThanEq :fn10:digits 0
format "{2}0"
op sub :fn10:digits :fn10:digits 1
jump 208 greaterThan :fn10:digits 0
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
print null
assertprints "null" "printExactFast(null)"
assertflush
print 0
assertprints "0" "printExactFast(0)"
assertflush
print 1
assertprints "1" "printExactFast(1)"
assertflush
print "1.000000100000000"
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
print "3.000000070000000"
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
print "3E50"
assertprints "3E50" "printExactFast(3e50)"
assertflush
print 1.0123456789
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
print "1.000000099999999E20"
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
print "1.2345000000000002E-50"
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
print "-1.2345000000000002E-50"
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
print null
assertprints "null" "printExactSlow(null)"
assertflush
print 0
assertprints "0" "printExactSlow(0)"
assertflush
print "1.000000000000000"
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
op abs *tmp59 1.0000001 0
op log10 *tmp65 1.0000001 0
op floor :fn7:exp 0.000000043429446044209946 0
op sub *tmp67 0 0
op pow *tmp68 10 0
op floor *tmp70 1.0000001 0
print "1.000000100000000"
op mod *tmp71 0.005838671768287895 1
op mul :fn7:base 0.005838671768287895 10
op floor *tmp74 0.05838671768287895 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :fn7:n 3.00000007
set :fn7*retaddr 268
jump 296 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :fn7:n 3E50
set :fn7*retaddr 273
jump 296 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :fn7:n 1.0123456789
set :fn7*retaddr 278
jump 296 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :fn7:n 10000001E13
set :fn7*retaddr 283
jump 296 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :fn7:n 12345E-54
set :fn7*retaddr 288
jump 296 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :fn7:n -12345E-54
set :fn7*retaddr 293
jump 296 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
op abs *tmp59 :fn7:n 0
jump 300 greaterThan *tmp59 0
print :fn7:n
set @counter :fn7*retaddr
jump 303 greaterThanEq :fn7:n 0
print "-"
op abs :fn7:n :fn7:n 0
op log10 *tmp65 :fn7:n 0
op floor :fn7:exp *tmp65 0
op sub *tmp67 0 :fn7:exp
op pow *tmp68 10 *tmp67
op mul :fn7:base :fn7:n *tmp68
op floor *tmp70 :fn7:base 0
print *tmp70
print "."
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
op mod *tmp71 :fn7:base 1
op mul :fn7:base *tmp71 10
op floor *tmp74 :fn7:base 0
print *tmp74
jump 374 equal :fn7:exp 0
print "E"
print :fn7:exp
set @counter :fn7*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
