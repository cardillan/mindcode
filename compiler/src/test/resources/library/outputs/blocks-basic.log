   149 instructions before optimizations.
     2 instructions eliminated by Temp Variables Elimination.
     6 instructions eliminated by Dead Code Elimination (4 iterations).
     4 instructions eliminated by Jump Normalization (4 iterations).
     4 instructions eliminated by Jump Optimization (4 iterations).
     9 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
    18 instructions eliminated by Expression Optimization (3 iterations).
    62 instructions eliminated by Data Flow Optimization (3 passes, 12 iterations).
     1 instructions modified by Loop Optimization (3 iterations).
     1 loops improved by Loop Optimization.
    14 instructions added by Loop Unrolling (6 iterations).
     3 loops unrolled by Loop Unrolling.
    19 instructions eliminated by Print Merging.
    39 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 906):
  * Unroll iteration loop at *blocks:57:9                        cost     0, benefit      975.0, efficiency   Infinity (-10 instructions)
    Unroll iteration loop at *blocks:66:13                       cost     0, benefit    24375.0, efficiency   Infinity
    Unroll iteration loop at *blocks:75:9                        cost     0, benefit      975.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 916):
  * Unroll iteration loop at *blocks:66:13                       cost     0, benefit    24375.0, efficiency   Infinity (-3 instructions)
    Unroll iteration loop at *blocks:75:9                        cost     0, benefit      975.0, efficiency   Infinity

Pass 1: speed optimization selection (cost limit 919):
  * Unroll iteration loop at *blocks:75:9                        cost     0, benefit      975.0, efficiency   Infinity (+5 instructions)

Final code before resolving virtual instructions:

        label *label0
    0:  jump *label0 equal message1 null
    1:  set :fn0:message message1
        label *label2
    2:  set :display null
    3:  set :message null
    4:  set :switch null
    5:  set :memory null
    6:  print "Example program.\nTrying to locate linked blocks"
    7:  set :fn0:n @links
    8:  jump *label15 lessThanEq :fn0:n 0
        label *label38
    9:  op sub :fn0:n :fn0:n 1
   10:  getlink :fn0:block :fn0:n
   11:  print "\nFound: "
   12:  print :fn0:block
   13:  sensor :fn0:type :fn0:block @type
   14:  jump *label63 notEqual @large-logic-display :fn0:type
   15:  set :display :fn0:block
        label *label63
   16:  jump *label71 notEqual @message :fn0:type
   17:  set :message :fn0:block
   18:  set :fn0:message :fn0:block
        label *label71
   19:  jump *label79 notEqual @switch :fn0:type
   20:  set :switch :fn0:block
        label *label79
   21:  jump *label87 notEqual @memory-bank :fn0:type
   22:  set :memory :fn0:block
        label *label87
   23:  jump *label95 notEqual @memory-cell :fn0:type
   24:  set :memory :fn0:block
        label *label95
   25:  jump *label38 greaterThan :fn0:n 0
        label *label15
   26:  print "\nDisplay: {0}\nMessage: {0}\nSwitch: {0}\nMemory: {0}\nMemory: "
   27:  format :display
   28:  op and :fn0:foundAll 1 :display
   29:  format :message
   30:  format :switch
   31:  format :memory
   32:  op and :fn0:foundAll :fn0:foundAll :memory
   33:  print :memory
   34:  op and :fn0:foundAll :fn0:foundAll :memory
   35:  printflush :fn0:message
   36:  jump *label2 equal :fn0:foundAll false
   37:  assertequals :message message1 "Located message1 block"
   38:  end
