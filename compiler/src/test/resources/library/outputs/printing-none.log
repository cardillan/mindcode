
Final code before resolving virtual instructions:

    0:  assertflush
    1:  set :printLines:line 1
    2:  setaddr *tmp0 *label12
    3:  jump *label9 always 0 0
        multilabel *label12
    4:  set :printLines:line 2
    5:  setaddr *tmp0 *label13
    6:  jump *label9 always 0 0
        multilabel *label13
    7:  set :printLines:line 3
    8:  setaddr *tmp0 *label14
        label *label9
    9:  print :printLines:line
   10:  print "\n"
        label *label10
   11:  multijump *tmp0 0 0
        multilabel *label14
        label *label11
        label *label8
   12:  assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
   13:  assertflush
   14:  set :printNumber:number null
   15:  setaddr :printNumber*retaddr *label15
   16:  call *label3 *invalid :printNumber*retval
        label *label15
   17:  assertprints "0" "printNumber(null)"
   18:  assertflush
   19:  set :printNumber:number 1
   20:  setaddr :printNumber*retaddr *label16
   21:  call *label3 *invalid :printNumber*retval
        label *label16
   22:  assertprints "1" "printNumber(1)"
   23:  assertflush
   24:  set :printNumber:number 1.5
   25:  setaddr :printNumber*retaddr *label17
   26:  call *label3 *invalid :printNumber*retval
        label *label17
   27:  assertprints "1" "printNumber(1.5)"
   28:  assertflush
   29:  set :printNumber:number -1.5
   30:  setaddr :printNumber*retaddr *label18
   31:  call *label3 *invalid :printNumber*retval
        label *label18
   32:  assertprints "-1" "printNumber(-1.5)"
   33:  assertflush
   34:  set :printNumber:number 1234567
   35:  setaddr :printNumber*retaddr *label19
   36:  call *label3 *invalid :printNumber*retval
        label *label19
   37:  assertprints "1,234,567" "printNumber(1234567)"
   38:  assertflush
   39:  set :printNumber:number -1234567
   40:  setaddr :printNumber*retaddr *label20
   41:  call *label3 *invalid :printNumber*retval
        label *label20
   42:  assertprints "-1,234,567" "printNumber(-1234567)"
   43:  assertflush
   44:  set :printNumber:number 9009099
   45:  setaddr :printNumber*retaddr *label21
   46:  call *label3 *invalid :printNumber*retval
        label *label21
   47:  assertprints "9,009,099" "printNumber(9009099)"
   48:  assertflush
   49:  set :printBinaryNumber:number 0b1001
   50:  set :printBinaryNumber:digits 0
   51:  setaddr :printBinaryNumber*retaddr *label22
   52:  call *label4 *invalid :printBinaryNumber*retval
        label *label22
   53:  assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
   54:  assertflush
   55:  set :printBinaryNumber:number 0b1010
   56:  set :printBinaryNumber:digits 6
   57:  setaddr :printBinaryNumber*retaddr *label23
   58:  call *label4 *invalid :printBinaryNumber*retval
        label *label23
   59:  assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
   60:  assertflush
   61:  set :printBinaryNumber:number -0b1010
   62:  set :printBinaryNumber:digits 6
   63:  setaddr :printBinaryNumber*retaddr *label24
   64:  call *label4 *invalid :printBinaryNumber*retval
        label *label24
   65:  assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
   66:  assertflush
   67:  set :printHexNumber:number 0xABCDEF
   68:  set :printHexNumber:digits 0
   69:  setaddr :printHexNumber*retaddr *label25
   70:  call *label5 *invalid :printHexNumber*retval
        label *label25
   71:  assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
   72:  assertflush
   73:  set :printHexNumber:number 0x1234567890
   74:  set :printHexNumber:digits 0
   75:  setaddr :printHexNumber*retaddr *label26
   76:  call *label5 *invalid :printHexNumber*retval
        label *label26
   77:  assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
   78:  assertflush
   79:  set :printHexNumber:number 0xAABBCC
   80:  set :printHexNumber:digits 8
   81:  setaddr :printHexNumber*retaddr *label27
   82:  call *label5 *invalid :printHexNumber*retval
        label *label27
   83:  assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
   84:  assertflush
   85:  set :printHexNumber:number -0xaabbcc
   86:  set :printHexNumber:digits 8
   87:  setaddr :printHexNumber*retaddr *label28
   88:  call *label5 *invalid :printHexNumber*retval
        label *label28
   89:  assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
   90:  assertflush
   91:  set :printExactFast:n null
   92:  setaddr :printExactFast*retaddr *label29
   93:  call *label6 *invalid :printExactFast*retval
        label *label29
   94:  assertprints "null" "printExactFast(null)"
   95:  assertflush
   96:  set :printExactFast:n 0
   97:  setaddr :printExactFast*retaddr *label30
   98:  call *label6 *invalid :printExactFast*retval
        label *label30
   99:  assertprints "0" "printExactFast(0)"
  100:  assertflush
  101:  set :printExactFast:n 1
  102:  setaddr :printExactFast*retaddr *label31
  103:  call *label6 *invalid :printExactFast*retval
        label *label31
  104:  assertprints "1" "printExactFast(1)"
  105:  assertflush
  106:  set :printExactFast:n 1.0000001
  107:  setaddr :printExactFast*retaddr *label32
  108:  call *label6 *invalid :printExactFast*retval
        label *label32
  109:  assertprints "1.000000100000000" "printExactFast(1.0000001)"
  110:  assertflush
  111:  set :printExactFast:n 3.00000007
  112:  setaddr :printExactFast*retaddr *label33
  113:  call *label6 *invalid :printExactFast*retval
        label *label33
  114:  assertprints "3.000000070000000" "printExactFast(3.00000007)"
  115:  assertflush
  116:  set :printExactFast:n 3E50
  117:  setaddr :printExactFast*retaddr *label34
  118:  call *label6 *invalid :printExactFast*retval
        label *label34
  119:  assertprints "3E50" "printExactFast(3e50)"
  120:  assertflush
  121:  set :printExactFast:n 1.0123456789
  122:  setaddr :printExactFast*retaddr *label35
  123:  call *label6 *invalid :printExactFast*retval
        label *label35
  124:  assertprints "1.0123456789" "printExactFast(1.0123456789)"
  125:  assertflush
  126:  set :printExactFast:n 10000001E13
  127:  setaddr :printExactFast*retaddr *label36
  128:  call *label6 *invalid :printExactFast*retval
        label *label36
  129:  assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
  130:  assertflush
  131:  set :printExactFast:n 12345E-54
  132:  setaddr :printExactFast*retaddr *label37
  133:  call *label6 *invalid :printExactFast*retval
        label *label37
  134:  assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
  135:  assertflush
  136:  set :printExactFast:n -12345E-54
  137:  setaddr :printExactFast*retaddr *label38
  138:  call *label6 *invalid :printExactFast*retval
        label *label38
  139:  assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
  140:  assertflush
  141:  set :printExactSlow:n null
  142:  setaddr :printExactSlow*retaddr *label39
  143:  call *label7 *invalid :printExactSlow*retval
        label *label39
  144:  assertprints "null" "printExactSlow(null)"
  145:  assertflush
  146:  set :printExactSlow:n 0
  147:  setaddr :printExactSlow*retaddr *label40
  148:  call *label7 *invalid :printExactSlow*retval
        label *label40
  149:  assertprints "0" "printExactSlow(0)"
  150:  assertflush
  151:  set :printExactSlow:n 1
  152:  setaddr :printExactSlow*retaddr *label41
  153:  call *label7 *invalid :printExactSlow*retval
        label *label41
  154:  assertprints "1.000000000000000" "printExactSlow(1)"
  155:  assertflush
  156:  set :printExactSlow:n 1.0000001
  157:  setaddr :printExactSlow*retaddr *label42
  158:  call *label7 *invalid :printExactSlow*retval
        label *label42
  159:  assertprints "1.000000100000000" "printExactSlow(1.0000001)"
  160:  assertflush
  161:  set :printExactSlow:n 3.00000007
  162:  setaddr :printExactSlow*retaddr *label43
  163:  call *label7 *invalid :printExactSlow*retval
        label *label43
  164:  assertprints "3.000000070000000" "printExactSlow(3.00000007)"
  165:  assertflush
  166:  set :printExactSlow:n 3E50
  167:  setaddr :printExactSlow*retaddr *label44
  168:  call *label7 *invalid :printExactSlow*retval
        label *label44
  169:  assertprints "3.000000000000000E50" "printExactSlow(3e50)"
  170:  assertflush
  171:  set :printExactSlow:n 1.0123456789
  172:  setaddr :printExactSlow*retaddr *label45
  173:  call *label7 *invalid :printExactSlow*retval
        label *label45
  174:  assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
  175:  assertflush
  176:  set :printExactSlow:n 10000001E13
  177:  setaddr :printExactSlow*retaddr *label46
  178:  call *label7 *invalid :printExactSlow*retval
        label *label46
  179:  assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
  180:  assertflush
  181:  set :printExactSlow:n 12345E-54
  182:  setaddr :printExactSlow*retaddr *label47
  183:  call *label7 *invalid :printExactSlow*retval
        label *label47
  184:  assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
  185:  assertflush
  186:  set :printExactSlow:n -12345E-54
  187:  setaddr :printExactSlow*retaddr *label48
  188:  call *label7 *invalid :printExactSlow*retval
        label *label48
  189:  assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
  190:  assertflush
  191:  set :printExactBinary:n -1035087118336
  192:  op shr *tmp2 :printExactBinary:n 32
  193:  set :printExactBinary:t *tmp2
  194:  setaddr *tmp1 *label53
  195:  jump *label50 always 0 0
        multilabel *label53
  196:  op and *tmp3 :printExactBinary:n 0xFFFFFFFF
  197:  set :printExactBinary:t *tmp3
  198:  setaddr *tmp1 *label54
        label *label50
  199:  op sub :printExactBinary:i 32 1
        label *label55
  200:  jump *label57 lessThan :printExactBinary:i 0
  201:  op shr *tmp4 :printExactBinary:t :printExactBinary:i
  202:  op and *tmp5 *tmp4 1
  203:  print *tmp5
        label *label56
  204:  op sub :printExactBinary:i :printExactBinary:i 1
  205:  jump *label55 always 0 0
        label *label57
        label *label51
  206:  multijump *tmp1 0 0
        multilabel *label54
        label *label52
        label *label49
  207:  assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
  208:  assertflush
  209:  set :printExactHex:n -1035087118336
  210:  op shr *tmp7 :printExactHex:n 32
  211:  set :printExactHex:t *tmp7
  212:  setaddr *tmp6 *label62
  213:  jump *label59 always 0 0
        multilabel *label62
  214:  op and *tmp8 :printExactHex:n 0xFFFFFFFF
  215:  set :printExactHex:t *tmp8
  216:  setaddr *tmp6 *label63
        label *label59
  217:  op sub :printExactHex:i 8 1
        label *label64
  218:  jump *label66 lessThan :printExactHex:i 0
  219:  op mul *tmp9 4 :printExactHex:i
  220:  op shr *tmp10 :printExactHex:t *tmp9
  221:  op and *tmp11 *tmp10 0xF
  222:  set :printExactHex:digit *tmp11
  223:  op greaterThanEq *tmp12 :printExactHex:digit 10
  224:  jump *label67 equal *tmp12 false
  225:  op add :printExactHex:digit :printExactHex:digit 7
  226:  set *tmp13 :printExactHex:digit
  227:  jump *label68 always 0 0
        label *label67
  228:  set *tmp13 null
        label *label68
  229:  op add *tmp14 :printExactHex:digit 48
  230:  printchar *tmp14
        label *label65
  231:  op sub :printExactHex:i :printExactHex:i 1
  232:  jump *label64 always 0 0
        label *label66
        label *label60
  233:  multijump *tmp6 0 0
        multilabel *label63
        label *label61
        label *label58
  234:  assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
  235:  stop
  236:  end
        label *label3
  237:  print "{2}"
  238:  set :formatNumber:number :printNumber:number
  239:  op abs *tmp15 :formatNumber:number 0
  240:  op floor *tmp16 *tmp15 0
  241:  set :formatNumber:n *tmp16
  242:  op lessThan *tmp17 :formatNumber:number 0
  243:  jump *label71 equal *tmp17 false
  244:  format "-{2}"
  245:  set *tmp18 "-{2}"
  246:  jump *label72 always 0 0
        label *label71
  247:  set *tmp18 null
        label *label72
        label *label73
  248:  op greaterThan *tmp19 :formatNumber:n 999
  249:  jump *label75 equal *tmp19 false
  250:  op mod *tmp20 :formatNumber:n 1000
  251:  set :formatNumber:mod *tmp20
  252:  op lessThan *tmp21 :formatNumber:mod 10
  253:  jump *label76 equal *tmp21 false
  254:  set *tmp22 "{2},00{1}"
  255:  jump *label77 always 0 0
        label *label76
  256:  op lessThan *tmp23 :formatNumber:mod 100
  257:  jump *label78 equal *tmp23 false
  258:  set *tmp24 "{2},0{1}"
  259:  jump *label79 always 0 0
        label *label78
  260:  set *tmp24 "{2},{1}"
        label *label79
  261:  set *tmp22 *tmp24
        label *label77
  262:  format *tmp22
  263:  format :formatNumber:mod
  264:  op idiv :formatNumber:n :formatNumber:n 1000
        label *label74
  265:  jump *label73 always 0 0
        label *label75
  266:  format :formatNumber:n
        label *label70
        label *label69
  267:  return :printNumber*retaddr
  268:  end
        label *label4
  269:  print "{2}"
  270:  set :formatBinaryNumber:number :printBinaryNumber:number
  271:  set :formatBinaryNumber:digits :printBinaryNumber:digits
  272:  op lessThan *tmp25 :formatBinaryNumber:number 0
  273:  jump *label82 equal *tmp25 false
  274:  format "-{2}"
  275:  op abs *tmp27 :formatBinaryNumber:number 0
  276:  set :formatBinaryNumber:number *tmp27
  277:  set *tmp26 :formatBinaryNumber:number
  278:  jump *label83 always 0 0
        label *label82
  279:  set *tmp26 null
        label *label83
  280:  op floor *tmp28 :formatBinaryNumber:number 0
  281:  set :formatBinaryNumber:n *tmp28
        label *label84
  282:  op and *tmp29 :formatBinaryNumber:n 1
  283:  format "{2}{1}"
  284:  format *tmp29
  285:  op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
  286:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
        label *label85
  287:  op greaterThan *tmp30 :formatBinaryNumber:n 0
  288:  jump *label84 notEqual *tmp30 false
        label *label86
        label *label87
  289:  op greaterThan *tmp31 :formatBinaryNumber:digits 0
  290:  jump *label89 equal *tmp31 false
  291:  format "{2}0"
  292:  set *tmp32 :formatBinaryNumber:digits
  293:  op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
        label *label88
  294:  jump *label87 always 0 0
        label *label89
  295:  format "0b"
        label *label81
        label *label80
  296:  return :printBinaryNumber*retaddr
  297:  end
        label *label5
  298:  print "{2}"
  299:  set :formatHexNumber:number :printHexNumber:number
  300:  set :formatHexNumber:digits :printHexNumber:digits
  301:  op lessThan *tmp33 :formatHexNumber:number 0
  302:  jump *label92 equal *tmp33 false
  303:  format "-{2}"
  304:  op abs *tmp35 :formatHexNumber:number 0
  305:  set :formatHexNumber:number *tmp35
  306:  set *tmp34 :formatHexNumber:number
  307:  jump *label93 always 0 0
        label *label92
  308:  set *tmp34 null
        label *label93
  309:  op floor *tmp36 :formatHexNumber:number 0
  310:  set :formatHexNumber:n *tmp36
        label *label94
  311:  op mod *tmp37 :formatHexNumber:n 16
  312:  set :formatHexNumber:digit *tmp37
  313:  set *tmp39 :formatHexNumber:digit
  314:  jump *label100 lessThan *tmp39 0
  315:  jump *label99 lessThanEq *tmp39 9
        label *label100
  316:  jump *label98 always 0 0
        label *label99
  317:  format "{2}{1}"
  318:  format :formatHexNumber:digit
  319:  set *tmp38 :formatHexNumber:digit
  320:  jump *label97 always 0 0
        label *label98
  321:  jump *label102 equal *tmp39 10
  322:  jump *label101 always 0 0
        label *label102
  323:  format "{2}A"
  324:  set *tmp38 "{2}A"
  325:  jump *label97 always 0 0
        label *label101
  326:  jump *label104 equal *tmp39 11
  327:  jump *label103 always 0 0
        label *label104
  328:  format "{2}B"
  329:  set *tmp38 "{2}B"
  330:  jump *label97 always 0 0
        label *label103
  331:  jump *label106 equal *tmp39 12
  332:  jump *label105 always 0 0
        label *label106
  333:  format "{2}C"
  334:  set *tmp38 "{2}C"
  335:  jump *label97 always 0 0
        label *label105
  336:  jump *label108 equal *tmp39 13
  337:  jump *label107 always 0 0
        label *label108
  338:  format "{2}D"
  339:  set *tmp38 "{2}D"
  340:  jump *label97 always 0 0
        label *label107
  341:  jump *label110 equal *tmp39 14
  342:  jump *label109 always 0 0
        label *label110
  343:  format "{2}E"
  344:  set *tmp38 "{2}E"
  345:  jump *label97 always 0 0
        label *label109
  346:  jump *label112 equal *tmp39 15
  347:  jump *label111 always 0 0
        label *label112
  348:  format "{2}F"
  349:  set *tmp38 "{2}F"
  350:  jump *label97 always 0 0
        label *label111
  351:  set *tmp38 null
        label *label97
  352:  op shr :formatHexNumber:n :formatHexNumber:n 4
  353:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
        label *label95
  354:  op greaterThan *tmp40 :formatHexNumber:n 0
  355:  jump *label94 notEqual *tmp40 false
        label *label96
        label *label113
  356:  op greaterThan *tmp41 :formatHexNumber:digits 0
  357:  jump *label115 equal *tmp41 false
  358:  format "{2}0"
  359:  set *tmp42 :formatHexNumber:digits
  360:  op sub :formatHexNumber:digits :formatHexNumber:digits 1
        label *label114
  361:  jump *label113 always 0 0
        label *label115
  362:  format "0x"
        label *label91
        label *label90
  363:  return :printHexNumber*retaddr
  364:  end
        label *label6
  365:  set :isZero:x :printExactFast:n
  366:  op abs *tmp44 :isZero:x 0
  367:  op lessThanEq *tmp45 *tmp44 0
  368:  set *tmp43 *tmp45
        label *label117
  369:  jump *label118 equal *tmp43 false
  370:  print :printExactFast:n
  371:  set *tmp46 :printExactFast:n
  372:  jump *label119 always 0 0
        label *label118
  373:  op lessThan *tmp47 :printExactFast:n 0
  374:  jump *label120 equal *tmp47 false
  375:  print "-"
  376:  op abs *tmp49 :printExactFast:n 0
  377:  set :printExactFast:n *tmp49
  378:  set *tmp48 :printExactFast:n
  379:  jump *label121 always 0 0
        label *label120
  380:  set *tmp48 null
        label *label121
  381:  op log10 *tmp50 :printExactFast:n 0
  382:  op floor *tmp51 *tmp50 0
  383:  set :printExactFast:exp *tmp51
  384:  op sub *tmp52 0 :printExactFast:exp
  385:  op pow *tmp53 10 *tmp52
  386:  op mul *tmp54 :printExactFast:n *tmp53
  387:  set :printExactFast:base *tmp54
  388:  set :round:x :printExactFast:base
  389:  op add *tmp56 :round:x 0.5
  390:  op floor *tmp57 *tmp56 0
  391:  set *tmp55 *tmp57
        label *label122
  392:  op sub *tmp58 :printExactFast:base *tmp55
  393:  op abs *tmp59 *tmp58 0
  394:  set :printExactFast:cmp *tmp59
  395:  op lessThanEq *tmp60 :printExactFast:cmp 0
  396:  jump *label123 equal *tmp60 false
  397:  print :printExactFast:base
  398:  set *tmp61 :printExactFast:base
  399:  jump *label124 always 0 0
        label *label123
  400:  op greaterThan *tmp62 :printExactFast:cmp 0.00001
  401:  jump *label125 equal *tmp62 false
  402:  print :printExactFast:base
  403:  set *tmp63 :printExactFast:base
  404:  jump *label126 always 0 0
        label *label125
  405:  op floor *tmp64 :printExactFast:base 0
  406:  print *tmp64
  407:  print "."
  408:  set :printExactFast:digit 1
        label *label127
  409:  jump *label129 greaterThan :printExactFast:digit 3
  410:  set :frac:x :printExactFast:base
  411:  op mod *tmp66 :frac:x 1
  412:  set *tmp65 *tmp66
        label *label130
  413:  op mul *tmp67 *tmp65 100000
  414:  set :printExactFast:base *tmp67
  415:  op floor *tmp68 :printExactFast:base 0
  416:  set :printExactFast:t *tmp68
  417:  op lessThan *tmp69 :printExactFast:t 100
  418:  jump *label131 equal *tmp69 false
  419:  op lessThan *tmp71 :printExactFast:t 10
  420:  jump *label133 equal *tmp71 false
  421:  print "0000"
  422:  set *tmp72 "0000"
  423:  jump *label134 always 0 0
        label *label133
  424:  print "000"
  425:  set *tmp72 "000"
        label *label134
  426:  set *tmp70 *tmp72
  427:  jump *label132 always 0 0
        label *label131
  428:  op lessThan *tmp73 :printExactFast:t 1000
  429:  jump *label135 equal *tmp73 false
  430:  print "00"
  431:  set *tmp74 "00"
  432:  jump *label136 always 0 0
        label *label135
  433:  op lessThan *tmp75 :printExactFast:t 10000
  434:  jump *label137 equal *tmp75 false
  435:  print "0"
  436:  set *tmp76 "0"
  437:  jump *label138 always 0 0
        label *label137
  438:  set *tmp76 null
        label *label138
  439:  set *tmp74 *tmp76
        label *label136
  440:  set *tmp70 *tmp74
        label *label132
  441:  print :printExactFast:t
        label *label128
  442:  op add :printExactFast:digit :printExactFast:digit 1
  443:  jump *label127 always 0 0
        label *label129
  444:  set *tmp63 null
        label *label126
  445:  set *tmp61 *tmp63
        label *label124
  446:  op notEqual *tmp77 :printExactFast:exp 0
  447:  jump *label139 equal *tmp77 false
  448:  print "E"
  449:  print :printExactFast:exp
  450:  set *tmp78 :printExactFast:exp
  451:  jump *label140 always 0 0
        label *label139
  452:  set *tmp78 null
        label *label140
  453:  set *tmp46 *tmp78
        label *label119
        label *label116
  454:  return :printExactFast*retaddr
  455:  end
        label *label7
  456:  set :isZero.1:x :printExactSlow:n
  457:  op abs *tmp80 :isZero.1:x 0
  458:  op lessThanEq *tmp81 *tmp80 0
  459:  set *tmp79 *tmp81
        label *label142
  460:  jump *label143 equal *tmp79 false
  461:  print :printExactSlow:n
  462:  set *tmp82 :printExactSlow:n
  463:  jump *label144 always 0 0
        label *label143
  464:  op lessThan *tmp83 :printExactSlow:n 0
  465:  jump *label145 equal *tmp83 false
  466:  print "-"
  467:  op abs *tmp85 :printExactSlow:n 0
  468:  set :printExactSlow:n *tmp85
  469:  set *tmp84 :printExactSlow:n
  470:  jump *label146 always 0 0
        label *label145
  471:  set *tmp84 null
        label *label146
  472:  op log10 *tmp86 :printExactSlow:n 0
  473:  op floor *tmp87 *tmp86 0
  474:  set :printExactSlow:exp *tmp87
  475:  op sub *tmp88 0 :printExactSlow:exp
  476:  op pow *tmp89 10 *tmp88
  477:  op mul *tmp90 :printExactSlow:n *tmp89
  478:  set :printExactSlow:base *tmp90
  479:  op floor *tmp91 :printExactSlow:base 0
  480:  print *tmp91
  481:  print "."
  482:  set :printExactSlow:digit 1
        label *label147
  483:  jump *label149 greaterThan :printExactSlow:digit 15
  484:  set :frac.1:x :printExactSlow:base
  485:  op mod *tmp93 :frac.1:x 1
  486:  set *tmp92 *tmp93
        label *label150
  487:  op mul *tmp94 *tmp92 10
  488:  set :printExactSlow:base *tmp94
  489:  op floor *tmp95 :printExactSlow:base 0
  490:  print *tmp95
        label *label148
  491:  op add :printExactSlow:digit :printExactSlow:digit 1
  492:  jump *label147 always 0 0
        label *label149
  493:  op notEqual *tmp96 :printExactSlow:exp 0
  494:  jump *label151 equal *tmp96 false
  495:  print "E"
  496:  print :printExactSlow:exp
  497:  set *tmp97 :printExactSlow:exp
  498:  jump *label152 always 0 0
        label *label151
  499:  set *tmp97 null
        label *label152
  500:  set *tmp82 *tmp97
        label *label144
        label *label141
  501:  return :printExactSlow*retaddr
  502:  end


stop instruction encountered, dumping variable values:
*tmp0: 12.0
*tmp1: 207.0
*tmp10: 0.0
*tmp11: 0.0
*tmp12: 0.0
*tmp13: null
*tmp14: 48.0
*tmp15: 9009099.0
*tmp16: 9009099.0
*tmp17: 0.0
*tmp18: null
*tmp19: 0.0
*tmp2: -241.0
*tmp20: 9.0
*tmp21: 1.0
*tmp22: {2},00{1}
*tmp23: 1.0
*tmp24: {2},0{1}
*tmp25: 1.0
*tmp26: 10.0
*tmp27: 10.0
*tmp28: 10.0
*tmp29: 1.0
*tmp3: 0.0
*tmp30: 0.0
*tmp31: 0.0
*tmp32: 1.0
*tmp33: 1.0
*tmp34: 1.1189196E7
*tmp35: 1.1189196E7
*tmp36: 1.1189196E7
*tmp37: 10.0
*tmp38: {2}A
*tmp39: 10.0
*tmp4: 0.0
*tmp40: 0.0
*tmp41: 0.0
*tmp42: 1.0
*tmp43: 0.0
*tmp44: 1.2345E-50
*tmp45: 0.0
*tmp46: -50.0
*tmp47: 1.0
*tmp48: 1.2345E-50
*tmp49: 1.2345E-50
*tmp5: 0.0
*tmp50: -49.90850890573205
*tmp51: -50.0
*tmp52: 50.0
*tmp53: 1.0E50
*tmp54: 1.2345000000000002
*tmp55: 1.0
*tmp56: 1.7345000000000002
*tmp57: 1.0
*tmp58: 0.23450000000000015
*tmp59: 0.23450000000000015
*tmp6: 234.0
*tmp60: 0.0
*tmp61: 1.2345000000000002
*tmp62: 1.0
*tmp63: 1.2345000000000002
*tmp64: 1.0
*tmp65: 0.9999983634211276
*tmp66: 0.9999983634211276
*tmp67: 99999.83634211276
*tmp68: 99999.0
*tmp69: 0.0
*tmp7: -241.0
*tmp70: null
*tmp71: 1.0
*tmp72: 0000
*tmp73: 0.0
*tmp74: null
*tmp75: 0.0
*tmp76: null
*tmp77: 1.0
*tmp78: -50.0
*tmp79: 0.0
*tmp8: 0.0
*tmp80: 1.2345E-50
*tmp81: 0.0
*tmp82: -50.0
*tmp83: 1.0
*tmp84: 1.2345E-50
*tmp85: 1.2345E-50
*tmp86: -49.90850890573205
*tmp87: -50.0
*tmp88: 50.0
*tmp89: 1.0E50
*tmp9: 0.0
*tmp90: 1.2345000000000002
*tmp91: 1.0
*tmp92: 0.015276668818842154
*tmp93: 0.015276668818842154
*tmp94: 0.15276668818842154
*tmp95: 0.0
*tmp96: 1.0
*tmp97: -50.0
:formatBinaryNumber:digits: 0.0
:formatBinaryNumber:n: 0.0
:formatBinaryNumber:number: 10.0
:formatHexNumber:digit: 10.0
:formatHexNumber:digits: 0.0
:formatHexNumber:n: 0.0
:formatHexNumber:number: 1.1189196E7
:formatNumber:mod: 9.0
:formatNumber:n: 9.0
:formatNumber:number: 9009099.0
:frac.1:x: 0.015276668818842154
:frac:x: 999.9999983634211
:isZero.1:x: -1.2345E-50
:isZero:x: -1.2345E-50
:printBinaryNumber*retaddr: 65.0
:printBinaryNumber:digits: 6.0
:printBinaryNumber:number: -10.0
:printExactBinary:i: -1.0
:printExactBinary:n: -1.035087118336E12
:printExactBinary:t: 0.0
:printExactFast*retaddr: 139.0
:printExactFast:base: 1.2345000000000002
:printExactFast:cmp: 0.23450000000000015
:printExactFast:digit: 4.0
:printExactFast:exp: -50.0
:printExactFast:n: 1.2345E-50
:printExactFast:t: 99999.0
:printExactHex:digit: 0.0
:printExactHex:i: -1.0
:printExactHex:n: -1.035087118336E12
:printExactHex:t: 0.0
:printExactSlow*retaddr: 189.0
:printExactSlow:base: 0.15276668818842154
:printExactSlow:digit: 16.0
:printExactSlow:exp: -50.0
:printExactSlow:n: 1.2345E-50
:printHexNumber*retaddr: 89.0
:printHexNumber:digits: 8.0
:printHexNumber:number: -1.1189196E7
:printLines:line: 3.0
:printNumber*retaddr: 47.0
:printNumber:number: 9009099.0
:round:x: 1.2345000000000002
@counter: 236.0