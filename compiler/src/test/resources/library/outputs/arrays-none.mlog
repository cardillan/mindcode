set p 0
set :fill:value "x"
set :fill:i 0
jump 11 greaterThanEq :fill:i 5
set *tmp0 :fill:i
set .a*wret 9
set .a*w :fill:value
op mul *tmp83 *tmp0 2
op add @counter 300 *tmp83
op add :fill:i :fill:i 1
jump 3 always 0 0
assertflush
print .a*0
print .a*1
print .a*2
print .a*3
print .a*4
assertprints "xxxxx" "Array fill"
set :i 0
jump 34 greaterThanEq :i 10
set *tmp2 :i
op add *tmp4 p :i
set .b*wret 26
set .b*w *tmp4
op mul *tmp84 *tmp2 2
op add @counter 332 *tmp84
set *tmp5 :i
op add *tmp7 p :i
set .c*wret 32
set .c*w *tmp7
op mul *tmp85 *tmp5 2
op add @counter 374 *tmp85
op add :i :i 1
jump 19 always 0 0
set :reverse:i 0
jump 61 greaterThanEq :reverse:i 5
op sub *tmp8 9 :reverse:i
set :reverse:j *tmp8
set *tmp9 :reverse:i
set .b*rret 42
op mul *tmp86 *tmp9 2
op add @counter 311 *tmp86
set *tmp10 .b*r
set :reverse:t *tmp10
set *tmp11 :reverse:i
set *tmp13 :reverse:j
set .b*rret 49
op mul *tmp87 *tmp13 2
op add @counter 311 *tmp87
set *tmp14 .b*r
set .b*wret 54
set .b*w *tmp14
op mul *tmp88 *tmp11 2
op add @counter 332 *tmp88
set *tmp15 :reverse:j
set .b*wret 59
set .b*w :reverse:t
op mul *tmp89 *tmp15 2
op add @counter 332 *tmp89
op add :reverse:i :reverse:i 1
jump 35 always 0 0
assertflush
print .b*0
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print .b*9
assertprints "9876543210" "Array reverse"
set :bubblesort:maxToMin false
set :bubblesort:flag true
set :bubblesort:a .b*0
set :bubblesort:i 1
jump 110 greaterThanEq :bubblesort:i 10
set *tmp17 :bubblesort:i
set .b*rret 82
op mul *tmp90 *tmp17 2
op add @counter 311 *tmp90
set *tmp18 .b*r
set :bubblesort:b *tmp18
jump 88 equal :bubblesort:maxToMin false
op lessThan *tmp20 :bubblesort:a :bubblesort:b
set *tmp19 *tmp20
jump 90 always 0 0
op greaterThan *tmp21 :bubblesort:a :bubblesort:b
set *tmp19 *tmp21
set :bubblesort:condition *tmp19
jump 106 equal :bubblesort:condition false
op sub *tmp23 :bubblesort:i 1
set *tmp24 *tmp23
set .b*wret 98
set .b*w :bubblesort:b
op mul *tmp91 *tmp24 2
op add @counter 332 *tmp91
set *tmp26 :bubblesort:i
set .b*wret 103
set .b*w :bubblesort:a
op mul *tmp92 *tmp26 2
op add @counter 332 *tmp92
set :bubblesort:flag false
set *tmp22 :bubblesort:flag
jump 108 always 0 0
set :bubblesort:a :bubblesort:b
set *tmp22 :bubblesort:a
op add :bubblesort:i :bubblesort:i 1
jump 77 always 0 0
jump 114 equal :bubblesort:flag false
jump 151 always 0 0
set *tmp28 null
jump 115 always 0 0
set *tmp28 null
set :bubblesort:a .b*9
op sub :bubblesort:i.1 9 1
jump 150 lessThan :bubblesort:i.1 0
set *tmp29 :bubblesort:i.1
set .b*rret 122
op mul *tmp93 *tmp29 2
op add @counter 311 *tmp93
set *tmp30 .b*r
set :bubblesort:b.1 *tmp30
jump 128 equal :bubblesort:maxToMin false
op greaterThan *tmp32 :bubblesort:a :bubblesort:b.1
set *tmp31 *tmp32
jump 130 always 0 0
op lessThan *tmp33 :bubblesort:a :bubblesort:b.1
set *tmp31 *tmp33
set :bubblesort:condition.1 *tmp31
jump 146 equal :bubblesort:condition.1 false
op add *tmp35 :bubblesort:i.1 1
set *tmp36 *tmp35
set .b*wret 138
set .b*w :bubblesort:b.1
op mul *tmp94 *tmp36 2
op add @counter 332 *tmp94
set *tmp38 :bubblesort:i.1
set .b*wret 143
set .b*w :bubblesort:a
op mul *tmp95 *tmp38 2
op add @counter 332 *tmp95
set :bubblesort:flag true
set *tmp34 :bubblesort:flag
jump 148 always 0 0
set :bubblesort:a :bubblesort:b.1
set *tmp34 :bubblesort:a
op sub :bubblesort:i.1 :bubblesort:i.1 1
jump 117 always 0 0
jump 74 notEqual true false
assertflush
print .b*0
print .b*1
print .b*2
print .b*3
print .b*4
print .b*5
print .b*6
print .b*7
print .b*8
print .b*9
assertprints "0123456789" "Array sort 1"
set :bubblesort.1:maxToMin true
set :bubblesort.1:flag true
set :bubblesort.1:a .b*0
set :bubblesort.1:i 1
jump 223 greaterThanEq :bubblesort.1:i 10
set *tmp40 :bubblesort.1:i
set .b*rret 172
op mul *tmp96 *tmp40 2
op add @counter 311 *tmp96
set *tmp41 .b*r
set :bubblesort.1:b *tmp41
jump 178 equal :bubblesort.1:maxToMin false
op lessThan *tmp43 :bubblesort.1:a :bubblesort.1:b
set *tmp42 *tmp43
jump 180 always 0 0
op greaterThan *tmp44 :bubblesort.1:a :bubblesort.1:b
set *tmp42 *tmp44
set :bubblesort.1:condition *tmp42
jump 219 equal :bubblesort.1:condition false
op sub *tmp46 :bubblesort.1:i 1
set *tmp47 *tmp46
set .b*wret 188
set .b*w :bubblesort.1:b
op mul *tmp97 *tmp47 2
op add @counter 332 *tmp97
set *tmp49 :bubblesort.1:i
set .b*wret 193
set .b*w :bubblesort.1:a
op mul *tmp98 *tmp49 2
op add @counter 332 *tmp98
op sub *tmp51 :bubblesort.1:i 1
set *tmp52 *tmp51
set .c*rret 198
op mul *tmp99 *tmp52 2
op add @counter 353 *tmp99
set *tmp53 .c*r
set :bubblesort.1:v *tmp53
op sub *tmp54 :bubblesort.1:i 1
set *tmp55 *tmp54
set *tmp57 :bubblesort.1:i
set .c*rret 206
op mul *tmp100 *tmp57 2
op add @counter 353 *tmp100
set *tmp58 .c*r
set .c*wret 211
set .c*w *tmp58
op mul *tmp101 *tmp55 2
op add @counter 374 *tmp101
set *tmp59 :bubblesort.1:i
set .c*wret 216
set .c*w :bubblesort.1:v
op mul *tmp102 *tmp59 2
op add @counter 374 *tmp102
set :bubblesort.1:flag false
set *tmp45 :bubblesort.1:flag
jump 221 always 0 0
set :bubblesort.1:a :bubblesort.1:b
set *tmp45 :bubblesort.1:a
op add :bubblesort.1:i :bubblesort.1:i 1
jump 167 always 0 0
jump 227 equal :bubblesort.1:flag false
jump 287 always 0 0
set *tmp61 null
jump 228 always 0 0
set *tmp61 null
set :bubblesort.1:a .b*9
op sub :bubblesort.1:i.1 9 1
jump 286 lessThan :bubblesort.1:i.1 0
set *tmp62 :bubblesort.1:i.1
set .b*rret 235
op mul *tmp103 *tmp62 2
op add @counter 311 *tmp103
set *tmp63 .b*r
set :bubblesort.1:b.1 *tmp63
jump 241 equal :bubblesort.1:maxToMin false
op greaterThan *tmp65 :bubblesort.1:a :bubblesort.1:b.1
set *tmp64 *tmp65
jump 243 always 0 0
op lessThan *tmp66 :bubblesort.1:a :bubblesort.1:b.1
set *tmp64 *tmp66
set :bubblesort.1:condition.1 *tmp64
jump 282 equal :bubblesort.1:condition.1 false
op add *tmp68 :bubblesort.1:i.1 1
set *tmp69 *tmp68
set .b*wret 251
set .b*w :bubblesort.1:b.1
op mul *tmp104 *tmp69 2
op add @counter 332 *tmp104
set *tmp71 :bubblesort.1:i.1
set .b*wret 256
set .b*w :bubblesort.1:a
op mul *tmp105 *tmp71 2
op add @counter 332 *tmp105
op add *tmp73 :bubblesort.1:i.1 1
set *tmp74 *tmp73
set .c*rret 261
op mul *tmp106 *tmp74 2
op add @counter 353 *tmp106
set *tmp75 .c*r
set :bubblesort.1:v.1 *tmp75
op add *tmp76 :bubblesort.1:i.1 1
set *tmp77 *tmp76
set *tmp79 :bubblesort.1:i.1
set .c*rret 269
op mul *tmp107 *tmp79 2
op add @counter 353 *tmp107
set *tmp80 .c*r
set .c*wret 274
set .c*w *tmp80
op mul *tmp108 *tmp77 2
op add @counter 374 *tmp108
set *tmp81 :bubblesort.1:i.1
set .c*wret 279
set .c*w :bubblesort.1:v.1
op mul *tmp109 *tmp81 2
op add @counter 374 *tmp109
set :bubblesort.1:flag true
set *tmp67 :bubblesort.1:flag
jump 284 always 0 0
set :bubblesort.1:a :bubblesort.1:b.1
set *tmp67 :bubblesort.1:a
op sub :bubblesort.1:i.1 :bubblesort.1:i.1 1
jump 230 always 0 0
jump 164 notEqual true false
assertflush
print .c*0
print .c*1
print .c*2
print .c*3
print .c*4
print .c*5
print .c*6
print .c*7
print .c*8
print .c*9
assertprints "9876543210" "Array sort 2"
end
set .a*0 .a*w
set @counter .a*wret
set .a*1 .a*w
set @counter .a*wret
set .a*2 .a*w
set @counter .a*wret
set .a*3 .a*w
set @counter .a*wret
set .a*4 .a*w
set @counter .a*wret
end
set .b*r .b*0
set @counter .b*rret
set .b*r .b*1
set @counter .b*rret
set .b*r .b*2
set @counter .b*rret
set .b*r .b*3
set @counter .b*rret
set .b*r .b*4
set @counter .b*rret
set .b*r .b*5
set @counter .b*rret
set .b*r .b*6
set @counter .b*rret
set .b*r .b*7
set @counter .b*rret
set .b*r .b*8
set @counter .b*rret
set .b*r .b*9
set @counter .b*rret
end
set .b*0 .b*w
set @counter .b*wret
set .b*1 .b*w
set @counter .b*wret
set .b*2 .b*w
set @counter .b*wret
set .b*3 .b*w
set @counter .b*wret
set .b*4 .b*w
set @counter .b*wret
set .b*5 .b*w
set @counter .b*wret
set .b*6 .b*w
set @counter .b*wret
set .b*7 .b*w
set @counter .b*wret
set .b*8 .b*w
set @counter .b*wret
set .b*9 .b*w
set @counter .b*wret
end
set .c*r .c*0
set @counter .c*rret
set .c*r .c*1
set @counter .c*rret
set .c*r .c*2
set @counter .c*rret
set .c*r .c*3
set @counter .c*rret
set .c*r .c*4
set @counter .c*rret
set .c*r .c*5
set @counter .c*rret
set .c*r .c*6
set @counter .c*rret
set .c*r .c*7
set @counter .c*rret
set .c*r .c*8
set @counter .c*rret
set .c*r .c*9
set @counter .c*rret
end
set .c*0 .c*w
set @counter .c*wret
set .c*1 .c*w
set @counter .c*wret
set .c*2 .c*w
set @counter .c*wret
set .c*3 .c*w
set @counter .c*wret
set .c*4 .c*w
set @counter .c*wret
set .c*5 .c*w
set @counter .c*wret
set .c*6 .c*w
set @counter .c*wret
set .c*7 .c*w
set @counter .c*wret
set .c*8 .c*w
set @counter .c*wret
set .c*9 .c*w
set @counter .c*wret
print "Compiled by Mindcode - github.com/cardillan/mindcode"
