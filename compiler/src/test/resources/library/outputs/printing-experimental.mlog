assertflush
print "{2}"
op floor :fn32:n 0 0
format :fn32:n
assertprints "0" "printNumber(null)"
assertflush
print "{2}"
op floor :fn32:n 1 0
format :fn32:n
assertprints "1" "printNumber(1)"
assertflush
print "{2}"
op floor :fn32:n 1.5 0
format :fn32:n
assertprints "1" "printNumber(1.5)"
assertflush
print "{2}"
op floor :fn32:n 1.5 0
format "-{2}"
format :fn32:n
assertprints "-1" "printNumber(-1.5)"
assertflush
print "{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "1,234,567" "printNumber(1234567)"
assertflush
print "{2}"
format "-{2}"
format "{2},{1}"
format 567
format "{2},{1}"
format 234
format 1
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
print "{2}"
format "{2},0{1}"
format 99
format "{2},00{1}"
format 9
format 9
assertprints "9,009,099" "printNumber(9009099)"
assertflush
print "{2}"
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "0b"
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}{1}"
format 0
format "{2}{1}"
format 1
format "{2}0"
format "{2}0"
format "0b"
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
print "{2}"
format "{2}F"
format "{2}E"
format "{2}D"
format "{2}C"
format "{2}B"
format "{2}A"
format "0x"
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
print "{2}"
format "{2}{1}"
format 0
format "{2}{1}"
format 9
format "{2}{1}"
format 8
format "{2}{1}"
format 7
format "{2}{1}"
format 6
format "{2}{1}"
format 5
format "{2}{1}"
format 4
format "{2}{1}"
format 3
format "{2}{1}"
format 2
format "{2}{1}"
format 1
format "0x"
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
print "{2}"
format "{2}C"
format "{2}C"
format "{2}B"
format "{2}B"
format "{2}A"
format "{2}A"
format "{2}0"
format "{2}0"
format "0x"
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
op abs *tmp104 null 0
print null
assertprints "null" "printExactFast(null)"
assertflush
set :fn6:n 0
set :fn6*retaddr 126
jump 220 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :fn6:n 1
set :fn6*retaddr 131
jump 220 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :fn6:n 1.0000001
set :fn6*retaddr 136
jump 220 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :fn6:n 3.00000007
set :fn6*retaddr 141
jump 220 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :fn6:n 3E50
set :fn6*retaddr 146
jump 220 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :fn6:n 1.0123456789
set :fn6*retaddr 151
jump 220 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :fn6:n 10000001E13
set :fn6*retaddr 156
jump 220 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :fn6:n 12345E-54
set :fn6*retaddr 161
jump 220 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :fn6:n -12345E-54
set :fn6*retaddr 166
jump 220 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :fn7:n null
set :fn7*retaddr 171
jump 294 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :fn7:n 0
set :fn7*retaddr 176
jump 294 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :fn7:n 1
set :fn7*retaddr 181
jump 294 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :fn7:n 1.0000001
set :fn7*retaddr 186
jump 294 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :fn7:n 3.00000007
set :fn7*retaddr 191
jump 294 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :fn7:n 3E50
set :fn7*retaddr 196
jump 294 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :fn7:n 1.0123456789
set :fn7*retaddr 201
jump 294 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :fn7:n 10000001E13
set :fn7*retaddr 206
jump 294 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :fn7:n 12345E-54
set :fn7*retaddr 211
jump 294 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :fn7:n -12345E-54
set :fn7*retaddr 216
jump 294 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
printflush message1
end
op abs *tmp104 :fn6:n 0
jump 224 greaterThan *tmp104 0
print :fn6:n
set @counter :fn6*retaddr
jump 227 greaterThanEq :fn6:n 0
print "-"
op abs :fn6:n :fn6:n 0
op log10 *tmp110 :fn6:n 0
op floor :fn6:exp *tmp110 0
op sub *tmp112 0 :fn6:exp
op pow *tmp113 10 *tmp112
op mul :fn6:base :fn6:n *tmp113
op add *tmp116 :fn6:base 0.5
op floor *tmp115 *tmp116 0
op sub *tmp118 :fn6:base *tmp115
op abs :fn6:cmp *tmp118 0
jump 239 greaterThan :fn6:cmp 0
print :fn6:base
jump 290 always 0 0
jump 242 lessThanEq :fn6:cmp 0.00001
print :fn6:base
jump 290 always 0 0
op floor *tmp124 :fn6:base 0
print *tmp124
print "."
op mod *tmp125 :fn6:base 1
op mul :fn6:base *tmp125 100000
op floor :fn6:t :fn6:base 0
jump 251 greaterThanEq :fn6:t 10
print "0000"
jump 259 always 0 0
jump 254 greaterThanEq :fn6:t 100
print "000"
jump 259 always 0 0
jump 257 greaterThanEq :fn6:t 1000
print "00"
jump 259 always 0 0
jump 259 greaterThanEq :fn6:t 10000
print "0"
print :fn6:t
op mod *tmp125 :fn6:base 1
op mul :fn6:base *tmp125 100000
op floor :fn6:t :fn6:base 0
jump 266 greaterThanEq :fn6:t 10
print "0000"
jump 274 always 0 0
jump 269 greaterThanEq :fn6:t 100
print "000"
jump 274 always 0 0
jump 272 greaterThanEq :fn6:t 1000
print "00"
jump 274 always 0 0
jump 274 greaterThanEq :fn6:t 10000
print "0"
print :fn6:t
op mod *tmp125 :fn6:base 1
op mul :fn6:base *tmp125 100000
op floor :fn6:t :fn6:base 0
jump 281 greaterThanEq :fn6:t 10
print "0000"
jump 289 always 0 0
jump 284 greaterThanEq :fn6:t 100
print "000"
jump 289 always 0 0
jump 287 greaterThanEq :fn6:t 1000
print "00"
jump 289 always 0 0
jump 289 greaterThanEq :fn6:t 10000
print "0"
print :fn6:t
jump 293 equal :fn6:exp 0
print "E"
print :fn6:exp
set @counter :fn6*retaddr
op abs *tmp140 :fn7:n 0
jump 298 greaterThan *tmp140 0
print :fn7:n
set @counter :fn7*retaddr
jump 301 greaterThanEq :fn7:n 0
print "-"
op abs :fn7:n :fn7:n 0
op log10 *tmp146 :fn7:n 0
op floor :fn7:exp *tmp146 0
op sub *tmp148 0 :fn7:exp
op pow *tmp149 10 *tmp148
op mul :fn7:base :fn7:n *tmp149
op floor *tmp151 :fn7:base 0
print *tmp151
print "."
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
op mod *tmp152 :fn7:base 1
op mul :fn7:base *tmp152 10
op floor *tmp155 :fn7:base 0
print *tmp155
jump 372 equal :fn7:exp 0
print "E"
print :fn7:exp
set @counter :fn7*retaddr
print "Compiled by Mindcode - github.com/cardillan/mindcode"
