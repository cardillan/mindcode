assertflush
set :printLines:line 1
set *tmp0 4
jump 9 always 0 0
set :printLines:line 2
set *tmp0 7
jump 9 always 0 0
set :printLines:line 3
set *tmp0 12
print :printLines:line
print "\n"
set @counter *tmp0
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
set :printNumber:number null
set :printNumber*retaddr 17
jump 180 always 0 0
assertprints "0" "printNumber(null)"
assertflush
set :printNumber:number 1
set :printNumber*retaddr 22
jump 180 always 0 0
assertprints "1" "printNumber(1)"
assertflush
set :printNumber:number 1.5
set :printNumber*retaddr 27
jump 180 always 0 0
assertprints "1" "printNumber(1.5)"
assertflush
set :printNumber:number -1.5
set :printNumber*retaddr 32
jump 180 always 0 0
assertprints "-1" "printNumber(-1.5)"
assertflush
set :printNumber:number 1234567
set :printNumber*retaddr 37
jump 180 always 0 0
assertprints "1,234,567" "printNumber(1234567)"
assertflush
set :printNumber:number -1234567
set :printNumber*retaddr 42
jump 180 always 0 0
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
set :printNumber:number 9009099
set :printNumber*retaddr 47
jump 180 always 0 0
assertprints "9,009,099" "printNumber(9009099)"
assertflush
set :printBinaryNumber:number 0b1001
set :printBinaryNumber:digits 0
set :printBinaryNumber*retaddr 53
jump 212 always 0 0
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
set :printBinaryNumber:number 0b1010
set :printBinaryNumber:digits 6
set :printBinaryNumber*retaddr 59
jump 212 always 0 0
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
set :printHexNumber:number 0xABCDEF
set :printHexNumber:digits 0
set :printHexNumber*retaddr 65
jump 233 always 0 0
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
set :printHexNumber:number 0x1234567890
set :printHexNumber:digits 0
set :printHexNumber*retaddr 71
jump 233 always 0 0
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
set :printHexNumber:number 0xAABBCC
set :printHexNumber:digits 8
set :printHexNumber*retaddr 77
jump 233 always 0 0
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
set :printExactFast:n null
set :printExactFast*retaddr 82
jump 292 always 0 0
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 87
jump 292 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 92
jump 292 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 97
jump 292 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 102
jump 292 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 107
jump 292 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 112
jump 292 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 117
jump 292 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 122
jump 292 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 127
jump 292 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 132
jump 383 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 137
jump 383 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 142
jump 383 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 147
jump 383 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 152
jump 383 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 157
jump 383 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 162
jump 383 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 167
jump 383 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 172
jump 383 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 177
jump 383 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
print "{2}"
set :formatNumber:number :printNumber:number
op abs *tmp1 :formatNumber:number 0
op floor *tmp2 *tmp1 0
set :formatNumber:n *tmp2
op lessThan *tmp3 :formatNumber:number 0
jump 190 equal *tmp3 false
format "-{2}"
set *tmp4 "-{2}"
jump 191 always 0 0
set *tmp4 null
op greaterThan *tmp5 :formatNumber:n 999
jump 209 equal *tmp5 false
op mod *tmp6 :formatNumber:n 1000
set :formatNumber:mod *tmp6
op lessThan *tmp7 :formatNumber:mod 10
jump 199 equal *tmp7 false
set *tmp8 "{2},00{1}"
jump 205 always 0 0
op lessThan *tmp9 :formatNumber:mod 100
jump 203 equal *tmp9 false
set *tmp10 "{2},0{1}"
jump 204 always 0 0
set *tmp10 "{2},{1}"
set *tmp8 *tmp10
format *tmp8
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 191 always 0 0
format :formatNumber:n
set @counter :printNumber*retaddr
end
print "{2}"
set :formatBinaryNumber:number :printBinaryNumber:number
set :formatBinaryNumber:digits :printBinaryNumber:digits
op floor *tmp11 :formatBinaryNumber:number 0
set :formatBinaryNumber:n *tmp11
op and *tmp12 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp12
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
op greaterThan *tmp13 :formatBinaryNumber:n 0
jump 217 notEqual *tmp13 false
op greaterThan *tmp14 :formatBinaryNumber:digits 0
jump 230 equal *tmp14 false
format "{2}0"
set *tmp15 :formatBinaryNumber:digits
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 224 always 0 0
format "0b"
set @counter :printBinaryNumber*retaddr
end
print "{2}"
set :formatHexNumber:number :printHexNumber:number
set :formatHexNumber:digits :printHexNumber:digits
op floor *tmp16 :formatHexNumber:number 0
set :formatHexNumber:n *tmp16
op mod *tmp17 :formatHexNumber:n 16
set :formatHexNumber:digit *tmp17
set *tmp19 :formatHexNumber:digit
jump 243 lessThan *tmp19 0
jump 244 lessThanEq *tmp19 9
jump 248 always 0 0
format "{2}{1}"
format :formatHexNumber:digit
set *tmp18 :formatHexNumber:digit
jump 279 always 0 0
jump 250 equal *tmp19 10
jump 253 always 0 0
format "{2}A"
set *tmp18 "{2}A"
jump 279 always 0 0
jump 255 equal *tmp19 11
jump 258 always 0 0
format "{2}B"
set *tmp18 "{2}B"
jump 279 always 0 0
jump 260 equal *tmp19 12
jump 263 always 0 0
format "{2}C"
set *tmp18 "{2}C"
jump 279 always 0 0
jump 265 equal *tmp19 13
jump 268 always 0 0
format "{2}D"
set *tmp18 "{2}D"
jump 279 always 0 0
jump 270 equal *tmp19 14
jump 273 always 0 0
format "{2}E"
set *tmp18 "{2}E"
jump 279 always 0 0
jump 275 equal *tmp19 15
jump 278 always 0 0
format "{2}F"
set *tmp18 "{2}F"
jump 279 always 0 0
set *tmp18 null
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
op greaterThan *tmp20 :formatHexNumber:n 0
jump 238 notEqual *tmp20 false
op greaterThan *tmp21 :formatHexNumber:digits 0
jump 289 equal *tmp21 false
format "{2}0"
set *tmp22 :formatHexNumber:digits
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 283 always 0 0
format "0x"
set @counter :printHexNumber*retaddr
end
set :isZero:x :printExactFast:n
op abs *tmp24 :isZero:x 0
op lessThanEq *tmp25 *tmp24 0
set *tmp23 *tmp25
jump 300 equal *tmp23 false
print :printExactFast:n
set *tmp26 :printExactFast:n
jump 381 always 0 0
op lessThan *tmp27 :printExactFast:n 0
jump 307 equal *tmp27 false
print "-"
op abs *tmp29 :printExactFast:n 0
set :printExactFast:n *tmp29
set *tmp28 :printExactFast:n
jump 308 always 0 0
set *tmp28 null
op log10 *tmp30 :printExactFast:n 0
op floor *tmp31 *tmp30 0
set :printExactFast:exp *tmp31
op sub *tmp32 0 :printExactFast:exp
op pow *tmp33 10 *tmp32
op mul *tmp34 :printExactFast:n *tmp33
set :printExactFast:base *tmp34
set :round:x :printExactFast:base
op add *tmp36 :round:x 0.5
op floor *tmp37 *tmp36 0
set *tmp35 *tmp37
op sub *tmp38 :printExactFast:base *tmp35
op abs *tmp39 *tmp38 0
set :printExactFast:cmp *tmp39
op lessThanEq *tmp40 :printExactFast:cmp 0
jump 327 equal *tmp40 false
print :printExactFast:base
set *tmp41 :printExactFast:base
jump 373 always 0 0
op greaterThan *tmp42 :printExactFast:cmp 0.00001
jump 332 equal *tmp42 false
print :printExactFast:base
set *tmp43 :printExactFast:base
jump 372 always 0 0
op floor *tmp44 :printExactFast:base 0
print *tmp44
print "."
set :printExactFast:digit 1
jump 371 greaterThan :printExactFast:digit 3
set :frac:x :printExactFast:base
op mod *tmp46 :frac:x 1
set *tmp45 *tmp46
op mul *tmp47 *tmp45 100000
set :printExactFast:base *tmp47
op floor *tmp48 :printExactFast:base 0
set :printExactFast:t *tmp48
op lessThan *tmp49 :printExactFast:t 10
jump 349 equal *tmp49 false
print "0000"
set *tmp50 "0000"
jump 368 always 0 0
op lessThan *tmp51 :printExactFast:t 100
jump 354 equal *tmp51 false
print "000"
set *tmp52 "000"
jump 367 always 0 0
op lessThan *tmp53 :printExactFast:t 1000
jump 359 equal *tmp53 false
print "00"
set *tmp54 "00"
jump 366 always 0 0
op lessThan *tmp55 :printExactFast:t 10000
jump 364 equal *tmp55 false
print "0"
set *tmp56 "0"
jump 365 always 0 0
set *tmp56 null
set *tmp54 *tmp56
set *tmp52 *tmp54
set *tmp50 *tmp52
print :printExactFast:t
op add :printExactFast:digit :printExactFast:digit 1
jump 336 always 0 0
set *tmp43 null
set *tmp41 *tmp43
op notEqual *tmp57 :printExactFast:exp 0
jump 379 equal *tmp57 false
print "E"
print :printExactFast:exp
set *tmp58 :printExactFast:exp
jump 380 always 0 0
set *tmp58 null
set *tmp26 *tmp58
set @counter :printExactFast*retaddr
end
set :isZero.1:x :printExactSlow:n
op abs *tmp60 :isZero.1:x 0
op lessThanEq *tmp61 *tmp60 0
set *tmp59 *tmp61
jump 391 equal *tmp59 false
print :printExactSlow:n
set *tmp62 :printExactSlow:n
jump 428 always 0 0
op lessThan *tmp63 :printExactSlow:n 0
jump 398 equal *tmp63 false
print "-"
op abs *tmp65 :printExactSlow:n 0
set :printExactSlow:n *tmp65
set *tmp64 :printExactSlow:n
jump 399 always 0 0
set *tmp64 null
op log10 *tmp66 :printExactSlow:n 0
op floor *tmp67 *tmp66 0
set :printExactSlow:exp *tmp67
op sub *tmp68 0 :printExactSlow:exp
op pow *tmp69 10 *tmp68
op mul *tmp70 :printExactSlow:n *tmp69
set :printExactSlow:base *tmp70
op floor *tmp71 :printExactSlow:base 0
print *tmp71
print "."
set :printExactSlow:digit 1
jump 420 greaterThan :printExactSlow:digit 15
set :frac.1:x :printExactSlow:base
op mod *tmp73 :frac.1:x 1
set *tmp72 *tmp73
op mul *tmp74 *tmp72 10
set :printExactSlow:base *tmp74
op floor *tmp75 :printExactSlow:base 0
print *tmp75
op add :printExactSlow:digit :printExactSlow:digit 1
jump 410 always 0 0
op notEqual *tmp76 :printExactSlow:exp 0
jump 426 equal *tmp76 false
print "E"
print :printExactSlow:exp
set *tmp77 :printExactSlow:exp
jump 427 always 0 0
set *tmp77 null
set *tmp62 *tmp77
set @counter :printExactSlow*retaddr
end
print "Compiled by Mindcode - github.com/cardillan/mindcode"
