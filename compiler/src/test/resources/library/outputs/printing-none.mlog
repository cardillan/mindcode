assertflush
set :fn3:number null
set :fn3*retaddr 4
jump 167 always 0 0
assertprints "0" "printNumber(null)"
assertflush
set :fn3:number 1
set :fn3*retaddr 9
jump 167 always 0 0
assertprints "1" "printNumber(1)"
assertflush
set :fn3:number 1.5
set :fn3*retaddr 14
jump 167 always 0 0
assertprints "1" "printNumber(1.5)"
assertflush
set :fn3:number -1.5
set :fn3*retaddr 19
jump 167 always 0 0
assertprints "-1" "printNumber(-1.5)"
assertflush
set :fn3:number 1234567
set :fn3*retaddr 24
jump 167 always 0 0
assertprints "1,234,567" "printNumber(1234567)"
assertflush
set :fn3:number -1234567
set :fn3*retaddr 29
jump 167 always 0 0
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
set :fn3:number 9009099
set :fn3*retaddr 34
jump 167 always 0 0
assertprints "9,009,099" "printNumber(9009099)"
assertflush
set :fn4:number 0b1001
set :fn4:digits 0
set :fn4*retaddr 40
jump 199 always 0 0
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
set :fn4:number 0b1010
set :fn4:digits 6
set :fn4*retaddr 46
jump 199 always 0 0
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
set :fn5:number 0xABCDEF
set :fn5:digits 0
set :fn5*retaddr 52
jump 220 always 0 0
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
set :fn5:number 0x1234567890
set :fn5:digits 0
set :fn5*retaddr 58
jump 220 always 0 0
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
set :fn5:number 0xAABBCC
set :fn5:digits 8
set :fn5*retaddr 64
jump 220 always 0 0
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
set :fn6:n null
set :fn6*retaddr 69
jump 279 always 0 0
assertprints "null" "printExactFast(null)"
assertflush
set :fn6:n 0
set :fn6*retaddr 74
jump 279 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :fn6:n 1
set :fn6*retaddr 79
jump 279 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :fn6:n 1.0000001
set :fn6*retaddr 84
jump 279 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :fn6:n 3.00000007
set :fn6*retaddr 89
jump 279 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :fn6:n 3E50
set :fn6*retaddr 94
jump 279 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :fn6:n 1.0123456789
set :fn6*retaddr 99
jump 279 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :fn6:n 10000001E13
set :fn6*retaddr 104
jump 279 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :fn6:n 12345E-54
set :fn6*retaddr 109
jump 279 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :fn6:n -12345E-54
set :fn6*retaddr 114
jump 279 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :fn7:n null
set :fn7*retaddr 119
jump 370 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :fn7:n 0
set :fn7*retaddr 124
jump 370 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :fn7:n 1
set :fn7*retaddr 129
jump 370 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :fn7:n 1.0000001
set :fn7*retaddr 134
jump 370 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :fn7:n 3.00000007
set :fn7*retaddr 139
jump 370 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :fn7:n 3E50
set :fn7*retaddr 144
jump 370 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :fn7:n 1.0123456789
set :fn7*retaddr 149
jump 370 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :fn7:n 10000001E13
set :fn7*retaddr 154
jump 370 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :fn7:n 12345E-54
set :fn7*retaddr 159
jump 370 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :fn7:n -12345E-54
set :fn7*retaddr 164
jump 370 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
stop
end
print "{2}"
set :fn32:number :fn3:number
op abs *tmp81 :fn32:number 0
op floor *tmp82 *tmp81 0
set :fn32:n *tmp82
op lessThan *tmp83 :fn32:number 0
jump 177 equal *tmp83 false
format "-{2}"
set *tmp84 "-{2}"
jump 178 always 0 0
set *tmp84 null
op greaterThan *tmp85 :fn32:n 999
jump 196 equal *tmp85 false
op mod *tmp86 :fn32:n 1000
set :fn32:mod *tmp86
op lessThan *tmp87 :fn32:mod 10
jump 186 equal *tmp87 false
set *tmp88 "{2},00{1}"
jump 192 always 0 0
op lessThan *tmp89 :fn32:mod 100
jump 190 equal *tmp89 false
set *tmp90 "{2},0{1}"
jump 191 always 0 0
set *tmp90 "{2},{1}"
set *tmp88 *tmp90
format *tmp88
format :fn32:mod
op idiv :fn32:n :fn32:n 1000
jump 178 always 0 0
format :fn32:n
set @counter :fn3*retaddr
end
print "{2}"
set :fn33:number :fn4:number
set :fn33:digits :fn4:digits
op floor *tmp91 :fn33:number 0
set :fn33:n *tmp91
op and *tmp92 :fn33:n 1
format "{2}{1}"
format *tmp92
op shr :fn33:n :fn33:n 1
op sub :fn33:digits :fn33:digits 1
op greaterThan *tmp93 :fn33:n 0
jump 204 notEqual *tmp93 false
op greaterThan *tmp94 :fn33:digits 0
jump 217 equal *tmp94 false
format "{2}0"
set *tmp95 :fn33:digits
op sub :fn33:digits :fn33:digits 1
jump 211 always 0 0
format "0b"
set @counter :fn4*retaddr
end
print "{2}"
set :fn34:number :fn5:number
set :fn34:digits :fn5:digits
op floor *tmp96 :fn34:number 0
set :fn34:n *tmp96
op mod *tmp97 :fn34:n 16
set :fn34:digit *tmp97
set *tmp99 :fn34:digit
jump 230 lessThan *tmp99 0
jump 231 lessThanEq *tmp99 9
jump 235 always 0 0
format "{2}{1}"
format :fn34:digit
set *tmp98 :fn34:digit
jump 266 always 0 0
jump 237 equal *tmp99 10
jump 240 always 0 0
format "{2}A"
set *tmp98 "{2}A"
jump 266 always 0 0
jump 242 equal *tmp99 11
jump 245 always 0 0
format "{2}B"
set *tmp98 "{2}B"
jump 266 always 0 0
jump 247 equal *tmp99 12
jump 250 always 0 0
format "{2}C"
set *tmp98 "{2}C"
jump 266 always 0 0
jump 252 equal *tmp99 13
jump 255 always 0 0
format "{2}D"
set *tmp98 "{2}D"
jump 266 always 0 0
jump 257 equal *tmp99 14
jump 260 always 0 0
format "{2}E"
set *tmp98 "{2}E"
jump 266 always 0 0
jump 262 equal *tmp99 15
jump 265 always 0 0
format "{2}F"
set *tmp98 "{2}F"
jump 266 always 0 0
set *tmp98 null
op shr :fn34:n :fn34:n 4
op sub :fn34:digits :fn34:digits 1
op greaterThan *tmp100 :fn34:n 0
jump 225 notEqual *tmp100 false
op greaterThan *tmp101 :fn34:digits 0
jump 276 equal *tmp101 false
format "{2}0"
set *tmp102 :fn34:digits
op sub :fn34:digits :fn34:digits 1
jump 270 always 0 0
format "0x"
set @counter :fn5*retaddr
end
set :fn35:x :fn6:n
op abs *tmp104 :fn35:x 0
op lessThanEq *tmp105 *tmp104 0
set *tmp103 *tmp105
jump 287 equal *tmp103 false
print :fn6:n
set *tmp106 :fn6:n
jump 368 always 0 0
op lessThan *tmp107 :fn6:n 0
jump 294 equal *tmp107 false
print "-"
op abs *tmp109 :fn6:n 0
set :fn6:n *tmp109
set *tmp108 :fn6:n
jump 295 always 0 0
set *tmp108 null
op log10 *tmp110 :fn6:n 0
op floor *tmp111 *tmp110 0
set :fn6:exp *tmp111
op sub *tmp112 0 :fn6:exp
op pow *tmp113 10 *tmp112
op mul *tmp114 :fn6:n *tmp113
set :fn6:base *tmp114
set :fn36:x :fn6:base
op add *tmp116 :fn36:x 0.5
op floor *tmp117 *tmp116 0
set *tmp115 *tmp117
op sub *tmp118 :fn6:base *tmp115
op abs *tmp119 *tmp118 0
set :fn6:cmp *tmp119
op lessThanEq *tmp120 :fn6:cmp 0
jump 314 equal *tmp120 false
print :fn6:base
set *tmp121 :fn6:base
jump 360 always 0 0
op greaterThan *tmp122 :fn6:cmp 0.00001
jump 319 equal *tmp122 false
print :fn6:base
set *tmp123 :fn6:base
jump 359 always 0 0
op floor *tmp124 :fn6:base 0
print *tmp124
print "."
set :fn6:digit 1
jump 358 greaterThan :fn6:digit 3
set :fn37:x :fn6:base
op mod *tmp126 :fn37:x 1
set *tmp125 *tmp126
op mul *tmp127 *tmp125 100000
set :fn6:base *tmp127
op floor *tmp128 :fn6:base 0
set :fn6:t *tmp128
op lessThan *tmp129 :fn6:t 10
jump 336 equal *tmp129 false
print "0000"
set *tmp130 "0000"
jump 355 always 0 0
op lessThan *tmp131 :fn6:t 100
jump 341 equal *tmp131 false
print "000"
set *tmp132 "000"
jump 354 always 0 0
op lessThan *tmp133 :fn6:t 1000
jump 346 equal *tmp133 false
print "00"
set *tmp134 "00"
jump 353 always 0 0
op lessThan *tmp135 :fn6:t 10000
jump 351 equal *tmp135 false
print "0"
set *tmp136 "0"
jump 352 always 0 0
set *tmp136 null
set *tmp134 *tmp136
set *tmp132 *tmp134
set *tmp130 *tmp132
print :fn6:t
op add :fn6:digit :fn6:digit 1
jump 323 always 0 0
set *tmp123 null
set *tmp121 *tmp123
op notEqual *tmp137 :fn6:exp 0
jump 366 equal *tmp137 false
print "E"
print :fn6:exp
set *tmp138 :fn6:exp
jump 367 always 0 0
set *tmp138 null
set *tmp106 *tmp138
set @counter :fn6*retaddr
end
set :fn38:x :fn7:n
op abs *tmp140 :fn38:x 0
op lessThanEq *tmp141 *tmp140 0
set *tmp139 *tmp141
jump 378 equal *tmp139 false
print :fn7:n
set *tmp142 :fn7:n
jump 415 always 0 0
op lessThan *tmp143 :fn7:n 0
jump 385 equal *tmp143 false
print "-"
op abs *tmp145 :fn7:n 0
set :fn7:n *tmp145
set *tmp144 :fn7:n
jump 386 always 0 0
set *tmp144 null
op log10 *tmp146 :fn7:n 0
op floor *tmp147 *tmp146 0
set :fn7:exp *tmp147
op sub *tmp148 0 :fn7:exp
op pow *tmp149 10 *tmp148
op mul *tmp150 :fn7:n *tmp149
set :fn7:base *tmp150
op floor *tmp151 :fn7:base 0
print *tmp151
print "."
set :fn7:digit 1
jump 407 greaterThan :fn7:digit 15
set :fn39:x :fn7:base
op mod *tmp153 :fn39:x 1
set *tmp152 *tmp153
op mul *tmp154 *tmp152 10
set :fn7:base *tmp154
op floor *tmp155 :fn7:base 0
print *tmp155
op add :fn7:digit :fn7:digit 1
jump 397 always 0 0
op notEqual *tmp156 :fn7:exp 0
jump 413 equal *tmp156 false
print "E"
print :fn7:exp
set *tmp157 :fn7:exp
jump 414 always 0 0
set *tmp157 null
set *tmp142 *tmp157
set @counter :fn7*retaddr
end
print "Compiled by Mindcode - github.com/cardillan/mindcode"
