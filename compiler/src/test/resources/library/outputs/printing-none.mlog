assertflush
set :printLines:line 1
set *tmp0 4
jump 9 always 0 0
set :printLines:line 2
set *tmp0 7
jump 9 always 0 0
set :printLines:line 3
set *tmp0 12
print :printLines:line
print "\n"
set @counter *tmp0
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
set :printNumber:number null
set :printNumber*retaddr 17
jump 234 always 0 0
assertprints "0" "printNumber(null)"
assertflush
set :printNumber:number 1
set :printNumber*retaddr 22
jump 234 always 0 0
assertprints "1" "printNumber(1)"
assertflush
set :printNumber:number 1.5
set :printNumber*retaddr 27
jump 234 always 0 0
assertprints "1" "printNumber(1.5)"
assertflush
set :printNumber:number -1.5
set :printNumber*retaddr 32
jump 234 always 0 0
assertprints "-1" "printNumber(-1.5)"
assertflush
set :printNumber:number 1234567
set :printNumber*retaddr 37
jump 234 always 0 0
assertprints "1,234,567" "printNumber(1234567)"
assertflush
set :printNumber:number -1234567
set :printNumber*retaddr 42
jump 234 always 0 0
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
set :printNumber:number 9009099
set :printNumber*retaddr 47
jump 234 always 0 0
assertprints "9,009,099" "printNumber(9009099)"
assertflush
set :printBinaryNumber:number 0b1001
set :printBinaryNumber:digits 0
set :printBinaryNumber*retaddr 53
jump 266 always 0 0
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
set :printBinaryNumber:number 0b1010
set :printBinaryNumber:digits 6
set :printBinaryNumber*retaddr 59
jump 266 always 0 0
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
set :printBinaryNumber:number -0b1010
set :printBinaryNumber:digits 6
set :printBinaryNumber*retaddr 65
jump 266 always 0 0
assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
assertflush
set :printHexNumber:number 0xABCDEF
set :printHexNumber:digits 0
set :printHexNumber*retaddr 71
jump 295 always 0 0
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
set :printHexNumber:number 0x1234567890
set :printHexNumber:digits 0
set :printHexNumber*retaddr 77
jump 295 always 0 0
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
set :printHexNumber:number 0xAABBCC
set :printHexNumber:digits 8
set :printHexNumber*retaddr 83
jump 295 always 0 0
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
set :printHexNumber:number -0xaabbcc
set :printHexNumber:digits 8
set :printHexNumber*retaddr 89
jump 295 always 0 0
assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
assertflush
set :printExactFast:n null
set :printExactFast*retaddr 94
jump 362 always 0 0
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 99
jump 362 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 104
jump 362 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 109
jump 362 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 114
jump 362 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 119
jump 362 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 124
jump 362 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 129
jump 362 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 134
jump 362 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 139
jump 362 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 144
jump 453 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 149
jump 453 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 154
jump 453 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 159
jump 453 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 164
jump 453 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 169
jump 453 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 174
jump 453 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 179
jump 453 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 184
jump 453 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 189
jump 453 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
assertflush
set :printExactBinary:n -1035087118336
op shr *tmp2 :printExactBinary:n 32
set :printExactBinary:t *tmp2
set *tmp1 196
jump 199 always 0 0
op and *tmp3 :printExactBinary:n 0xFFFFFFFF
set :printExactBinary:t *tmp3
set *tmp1 207
op sub :printExactBinary:i 32 1
jump 206 lessThan :printExactBinary:i 0
op shr *tmp4 :printExactBinary:t :printExactBinary:i
op and *tmp5 *tmp4 1
print *tmp5
op sub :printExactBinary:i :printExactBinary:i 1
jump 200 always 0 0
set @counter *tmp1
assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
assertflush
set :printExactHex:n -1035087118336
op shr *tmp7 :printExactHex:n 32
set :printExactHex:t *tmp7
set *tmp6 214
jump 217 always 0 0
op and *tmp8 :printExactHex:n 0xFFFFFFFF
set :printExactHex:t *tmp8
set *tmp6 231
op sub :printExactHex:i 8 1
jump 230 lessThan :printExactHex:i 0
op mul *tmp9 4 :printExactHex:i
op shr *tmp10 :printExactHex:t *tmp9
op and *tmp11 *tmp10 0xF
set :printExactHex:digit *tmp11
op add *tmp12 48 :printExactHex:digit
op greaterThanEq *tmp13 :printExactHex:digit 10
op mul *tmp14 *tmp13 7
op add *tmp15 *tmp12 *tmp14
printchar *tmp15
op sub :printExactHex:i :printExactHex:i 1
jump 218 always 0 0
set @counter *tmp6
assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
stop
end
print "{2}"
set :formatNumber:number :printNumber:number
op abs *tmp16 :formatNumber:number 0
op floor *tmp17 *tmp16 0
set :formatNumber:n *tmp17
op lessThan *tmp18 :formatNumber:number 0
jump 244 equal *tmp18 false
format "-{2}"
set *tmp19 "-{2}"
jump 245 always 0 0
set *tmp19 null
op greaterThan *tmp20 :formatNumber:n 999
jump 263 equal *tmp20 false
op mod *tmp21 :formatNumber:n 1000
set :formatNumber:mod *tmp21
op lessThan *tmp22 :formatNumber:mod 10
jump 253 equal *tmp22 false
set *tmp23 "{2},00{1}"
jump 259 always 0 0
op lessThan *tmp24 :formatNumber:mod 100
jump 257 equal *tmp24 false
set *tmp25 "{2},0{1}"
jump 258 always 0 0
set *tmp25 "{2},{1}"
set *tmp23 *tmp25
format *tmp23
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 245 always 0 0
format :formatNumber:n
set @counter :printNumber*retaddr
end
print "{2}"
set :formatBinaryNumber:number :printBinaryNumber:number
set :formatBinaryNumber:digits :printBinaryNumber:digits
op lessThan *tmp26 :formatBinaryNumber:number 0
jump 276 equal *tmp26 false
format "-{2}"
op abs *tmp28 :formatBinaryNumber:number 0
set :formatBinaryNumber:number *tmp28
set *tmp27 :formatBinaryNumber:number
jump 277 always 0 0
set *tmp27 null
op floor *tmp29 :formatBinaryNumber:number 0
set :formatBinaryNumber:n *tmp29
op and *tmp30 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp30
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
op greaterThan *tmp31 :formatBinaryNumber:n 0
jump 279 notEqual *tmp31 false
op greaterThan *tmp32 :formatBinaryNumber:digits 0
jump 292 equal *tmp32 false
format "{2}0"
set *tmp33 :formatBinaryNumber:digits
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 286 always 0 0
format "0b"
set @counter :printBinaryNumber*retaddr
end
print "{2}"
set :formatHexNumber:number :printHexNumber:number
set :formatHexNumber:digits :printHexNumber:digits
op lessThan *tmp34 :formatHexNumber:number 0
jump 305 equal *tmp34 false
format "-{2}"
op abs *tmp36 :formatHexNumber:number 0
set :formatHexNumber:number *tmp36
set *tmp35 :formatHexNumber:number
jump 306 always 0 0
set *tmp35 null
op floor *tmp37 :formatHexNumber:number 0
set :formatHexNumber:n *tmp37
op mod *tmp38 :formatHexNumber:n 16
set :formatHexNumber:digit *tmp38
set *tmp40 :formatHexNumber:digit
jump 313 lessThan *tmp40 0
jump 314 lessThanEq *tmp40 9
jump 318 always 0 0
format "{2}{1}"
format :formatHexNumber:digit
set *tmp39 :formatHexNumber:digit
jump 349 always 0 0
jump 320 equal *tmp40 10
jump 323 always 0 0
format "{2}A"
set *tmp39 "{2}A"
jump 349 always 0 0
jump 325 equal *tmp40 11
jump 328 always 0 0
format "{2}B"
set *tmp39 "{2}B"
jump 349 always 0 0
jump 330 equal *tmp40 12
jump 333 always 0 0
format "{2}C"
set *tmp39 "{2}C"
jump 349 always 0 0
jump 335 equal *tmp40 13
jump 338 always 0 0
format "{2}D"
set *tmp39 "{2}D"
jump 349 always 0 0
jump 340 equal *tmp40 14
jump 343 always 0 0
format "{2}E"
set *tmp39 "{2}E"
jump 349 always 0 0
jump 345 equal *tmp40 15
jump 348 always 0 0
format "{2}F"
set *tmp39 "{2}F"
jump 349 always 0 0
set *tmp39 null
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
op greaterThan *tmp41 :formatHexNumber:n 0
jump 308 notEqual *tmp41 false
op greaterThan *tmp42 :formatHexNumber:digits 0
jump 359 equal *tmp42 false
format "{2}0"
set *tmp43 :formatHexNumber:digits
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 353 always 0 0
format "0x"
set @counter :printHexNumber*retaddr
end
set :isZero:x :printExactFast:n
op abs *tmp45 :isZero:x 0
op lessThanEq *tmp46 *tmp45 0
set *tmp44 *tmp46
jump 370 equal *tmp44 false
print :printExactFast:n
set *tmp47 :printExactFast:n
jump 451 always 0 0
op lessThan *tmp48 :printExactFast:n 0
jump 377 equal *tmp48 false
print "-"
op abs *tmp50 :printExactFast:n 0
set :printExactFast:n *tmp50
set *tmp49 :printExactFast:n
jump 378 always 0 0
set *tmp49 null
op log10 *tmp51 :printExactFast:n 0
op floor *tmp52 *tmp51 0
set :printExactFast:exp *tmp52
op sub *tmp53 0 :printExactFast:exp
op pow *tmp54 10 *tmp53
op mul *tmp55 :printExactFast:n *tmp54
set :printExactFast:base *tmp55
set :round:x :printExactFast:base
op add *tmp57 :round:x 0.5
op floor *tmp58 *tmp57 0
set *tmp56 *tmp58
op sub *tmp59 :printExactFast:base *tmp56
op abs *tmp60 *tmp59 0
set :printExactFast:cmp *tmp60
op lessThanEq *tmp61 :printExactFast:cmp 0
jump 397 equal *tmp61 false
print :printExactFast:base
set *tmp62 :printExactFast:base
jump 443 always 0 0
op greaterThan *tmp63 :printExactFast:cmp 0.00001
jump 402 equal *tmp63 false
print :printExactFast:base
set *tmp64 :printExactFast:base
jump 442 always 0 0
op floor *tmp65 :printExactFast:base 0
print *tmp65
print "."
set :printExactFast:digit 1
jump 441 greaterThan :printExactFast:digit 3
set :frac:x :printExactFast:base
op mod *tmp67 :frac:x 1
set *tmp66 *tmp67
op mul *tmp68 *tmp66 100000
set :printExactFast:base *tmp68
op floor *tmp69 :printExactFast:base 0
set :printExactFast:t *tmp69
op lessThan *tmp70 :printExactFast:t 10
jump 419 equal *tmp70 false
print "0000"
set *tmp71 "0000"
jump 438 always 0 0
op lessThan *tmp72 :printExactFast:t 100
jump 424 equal *tmp72 false
print "000"
set *tmp73 "000"
jump 437 always 0 0
op lessThan *tmp74 :printExactFast:t 1000
jump 429 equal *tmp74 false
print "00"
set *tmp75 "00"
jump 436 always 0 0
op lessThan *tmp76 :printExactFast:t 10000
jump 434 equal *tmp76 false
print "0"
set *tmp77 "0"
jump 435 always 0 0
set *tmp77 null
set *tmp75 *tmp77
set *tmp73 *tmp75
set *tmp71 *tmp73
print :printExactFast:t
op add :printExactFast:digit :printExactFast:digit 1
jump 406 always 0 0
set *tmp64 null
set *tmp62 *tmp64
op notEqual *tmp78 :printExactFast:exp 0
jump 449 equal *tmp78 false
print "E"
print :printExactFast:exp
set *tmp79 :printExactFast:exp
jump 450 always 0 0
set *tmp79 null
set *tmp47 *tmp79
set @counter :printExactFast*retaddr
end
set :isZero.1:x :printExactSlow:n
op abs *tmp81 :isZero.1:x 0
op lessThanEq *tmp82 *tmp81 0
set *tmp80 *tmp82
jump 461 equal *tmp80 false
print :printExactSlow:n
set *tmp83 :printExactSlow:n
jump 498 always 0 0
op lessThan *tmp84 :printExactSlow:n 0
jump 468 equal *tmp84 false
print "-"
op abs *tmp86 :printExactSlow:n 0
set :printExactSlow:n *tmp86
set *tmp85 :printExactSlow:n
jump 469 always 0 0
set *tmp85 null
op log10 *tmp87 :printExactSlow:n 0
op floor *tmp88 *tmp87 0
set :printExactSlow:exp *tmp88
op sub *tmp89 0 :printExactSlow:exp
op pow *tmp90 10 *tmp89
op mul *tmp91 :printExactSlow:n *tmp90
set :printExactSlow:base *tmp91
op floor *tmp92 :printExactSlow:base 0
print *tmp92
print "."
set :printExactSlow:digit 1
jump 490 greaterThan :printExactSlow:digit 15
set :frac.1:x :printExactSlow:base
op mod *tmp94 :frac.1:x 1
set *tmp93 *tmp94
op mul *tmp95 *tmp93 10
set :printExactSlow:base *tmp95
op floor *tmp96 :printExactSlow:base 0
print *tmp96
op add :printExactSlow:digit :printExactSlow:digit 1
jump 480 always 0 0
op notEqual *tmp97 :printExactSlow:exp 0
jump 496 equal *tmp97 false
print "E"
print :printExactSlow:exp
set *tmp98 :printExactSlow:exp
jump 497 always 0 0
set *tmp98 null
set *tmp83 *tmp98
set @counter :printExactSlow*retaddr
end
print "Compiled by Mindcode - github.com/cardillan/mindcode"
