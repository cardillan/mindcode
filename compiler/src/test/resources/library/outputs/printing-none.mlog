assertflush
set :printLines:line 1
set *tmp0 4
jump 9 always 0 0
set :printLines:line 2
set *tmp0 7
jump 9 always 0 0
set :printLines:line 3
set *tmp0 12
print :printLines:line
print "\n"
set @counter *tmp0
assertprints "1\n2\n3\n" "printLines(1, 2, 3)"
assertflush
set :printNumber:number null
set :printNumber*retaddr 17
jump 231 always 0 0
assertprints "0" "printNumber(null)"
assertflush
set :printNumber:number 1
set :printNumber*retaddr 22
jump 231 always 0 0
assertprints "1" "printNumber(1)"
assertflush
set :printNumber:number 1.5
set :printNumber*retaddr 27
jump 231 always 0 0
assertprints "1" "printNumber(1.5)"
assertflush
set :printNumber:number -1.5
set :printNumber*retaddr 32
jump 231 always 0 0
assertprints "-1" "printNumber(-1.5)"
assertflush
set :printNumber:number 1234567
set :printNumber*retaddr 37
jump 231 always 0 0
assertprints "1,234,567" "printNumber(1234567)"
assertflush
set :printNumber:number -1234567
set :printNumber*retaddr 42
jump 231 always 0 0
assertprints "-1,234,567" "printNumber(-1234567)"
assertflush
set :printNumber:number 9009099999
set :printNumber*retaddr 47
jump 231 always 0 0
assertprints "9,009,099,999" "printNumber(9009099999)"
assertflush
set :printBinaryNumber:number 0b1001
set :printBinaryNumber:digits 0
set :printBinaryNumber*retaddr 53
jump 263 always 0 0
assertprints "0b1001" "printBinaryNumber(0b1001, 0)"
assertflush
set :printBinaryNumber:number 0b1010
set :printBinaryNumber:digits 6
set :printBinaryNumber*retaddr 59
jump 263 always 0 0
assertprints "0b001010" "printBinaryNumber(0b1010, 6)"
assertflush
set :printBinaryNumber:number -0b1010
set :printBinaryNumber:digits 6
set :printBinaryNumber*retaddr 65
jump 263 always 0 0
assertprints "-0b001010" "printBinaryNumber(-0b1010, 6)"
assertflush
set :printHexNumber:number 0xABCDEF
set :printHexNumber:digits 0
set :printHexNumber*retaddr 71
jump 292 always 0 0
assertprints "0xABCDEF" "printHexNumber(0xABCDEF, 0)"
assertflush
set :printHexNumber:number 0x1234567890
set :printHexNumber:digits 0
set :printHexNumber*retaddr 77
jump 292 always 0 0
assertprints "0x1234567890" "printHexNumber(0x1234567890, 0)"
assertflush
set :printHexNumber:number 0xAABBCC
set :printHexNumber:digits 8
set :printHexNumber*retaddr 83
jump 292 always 0 0
assertprints "0x00AABBCC" "printHexNumber(0xAABBCC, 8)"
assertflush
set :printHexNumber:number -0xaabbcc
set :printHexNumber:digits 8
set :printHexNumber*retaddr 89
jump 292 always 0 0
assertprints "-0x00AABBCC" "printHexNumber(-0xAABBCC, 8)"
assertflush
set :printExactFast:n null
set :printExactFast*retaddr 94
jump 359 always 0 0
assertprints "null" "printExactFast(null)"
assertflush
set :printExactFast:n 0
set :printExactFast*retaddr 99
jump 359 always 0 0
assertprints "0" "printExactFast(0)"
assertflush
set :printExactFast:n 1
set :printExactFast*retaddr 104
jump 359 always 0 0
assertprints "1" "printExactFast(1)"
assertflush
set :printExactFast:n 1.0000001
set :printExactFast*retaddr 109
jump 359 always 0 0
assertprints "1.000000100000000" "printExactFast(1.0000001)"
assertflush
set :printExactFast:n 3.00000007
set :printExactFast*retaddr 114
jump 359 always 0 0
assertprints "3.000000070000000" "printExactFast(3.00000007)"
assertflush
set :printExactFast:n 3E50
set :printExactFast*retaddr 119
jump 359 always 0 0
assertprints "3E50" "printExactFast(3e50)"
assertflush
set :printExactFast:n 1.0123456789
set :printExactFast*retaddr 124
jump 359 always 0 0
assertprints "1.0123456789" "printExactFast(1.0123456789)"
assertflush
set :printExactFast:n 10000001E13
set :printExactFast*retaddr 129
jump 359 always 0 0
assertprints "1.000000099999999E20" "printExactFast(1.0000001e20)"
assertflush
set :printExactFast:n 12345E-54
set :printExactFast*retaddr 134
jump 359 always 0 0
assertprints "1.2345000000000002E-50" "printExactFast(1.2345e-50)"
assertflush
set :printExactFast:n -12345E-54
set :printExactFast*retaddr 139
jump 359 always 0 0
assertprints "-1.2345000000000002E-50" "printExactFast(-1.2345e-50)"
assertflush
set :printExactSlow:n null
set :printExactSlow*retaddr 144
jump 450 always 0 0
assertprints "null" "printExactSlow(null)"
assertflush
set :printExactSlow:n 0
set :printExactSlow*retaddr 149
jump 450 always 0 0
assertprints "0" "printExactSlow(0)"
assertflush
set :printExactSlow:n 1
set :printExactSlow*retaddr 154
jump 450 always 0 0
assertprints "1.000000000000000" "printExactSlow(1)"
assertflush
set :printExactSlow:n 1.0000001
set :printExactSlow*retaddr 159
jump 450 always 0 0
assertprints "1.000000100000000" "printExactSlow(1.0000001)"
assertflush
set :printExactSlow:n 3.00000007
set :printExactSlow*retaddr 164
jump 450 always 0 0
assertprints "3.000000070000000" "printExactSlow(3.00000007)"
assertflush
set :printExactSlow:n 3E50
set :printExactSlow*retaddr 169
jump 450 always 0 0
assertprints "3.000000000000000E50" "printExactSlow(3e50)"
assertflush
set :printExactSlow:n 1.0123456789
set :printExactSlow*retaddr 174
jump 450 always 0 0
assertprints "1.012345678900000" "printExactSlow(1.0123456789)"
assertflush
set :printExactSlow:n 10000001E13
set :printExactSlow*retaddr 179
jump 450 always 0 0
assertprints "1.000000099999999E20" "printExactSlow(1.0000001e20)"
assertflush
set :printExactSlow:n 12345E-54
set :printExactSlow*retaddr 184
jump 450 always 0 0
assertprints "1.234500000000000E-50" "printExactSlow(1.2345e-50)"
assertflush
set :printExactSlow:n -12345E-54
set :printExactSlow*retaddr 189
jump 450 always 0 0
assertprints "-1.234500000000000E-50" "printExactSlow(-1.2345e-50)"
assertflush
set :printExactBinary:n -1035087118336
op shr *tmp2 :printExactBinary:n 32
set :printExactBinary:t *tmp2
set *tmp1 196
jump 199 always 0 0
op and *tmp3 :printExactBinary:n 0xFFFFFFFF
set :printExactBinary:t *tmp3
set *tmp1 207
op sub :printExactBinary:i 32 1
jump 206 lessThan :printExactBinary:i 0
op shr *tmp4 :printExactBinary:t :printExactBinary:i
op and *tmp5 *tmp4 1
print *tmp5
op sub :printExactBinary:i :printExactBinary:i 1
jump 200 always 0 0
set @counter *tmp1
assertprints "1111111111111111111111110000111100000000000000000000000000000000" "printExactBinary(0xFFFFFF0F << 32)"
assertflush
set :printExactHex:n -1035087118336
op shr *tmp7 :printExactHex:n 32
set :printExactHex:t *tmp7
set *tmp6 214
jump 217 always 0 0
op and *tmp8 :printExactHex:n 0xFFFFFFFF
set :printExactHex:t *tmp8
set *tmp6 228
op sub :printExactHex:i 8 1
jump 227 lessThan :printExactHex:i 0
op mul *tmp9 4 :printExactHex:i
op shr *tmp10 :printExactHex:t *tmp9
op and *tmp11 *tmp10 0xF
set :printExactHex:digit *tmp11
read *tmp12 "0123456789ABCDEF" :printExactHex:digit
printchar *tmp12
op sub :printExactHex:i :printExactHex:i 1
jump 218 always 0 0
set @counter *tmp6
assertprints "FFFFFF0F00000000" "printExactHex(0xFFFFFF0F << 32)"
stop
end
print "{2}"
set :formatNumber:number :printNumber:number
op abs *tmp13 :formatNumber:number 0
op floor *tmp14 *tmp13 0
set :formatNumber:n *tmp14
op lessThan *tmp15 :formatNumber:number 0
jump 241 equal *tmp15 false
format "-{2}"
set *tmp16 "-{2}"
jump 242 always 0 0
set *tmp16 null
op greaterThan *tmp17 :formatNumber:n 999
jump 260 equal *tmp17 false
op mod *tmp18 :formatNumber:n 1000
set :formatNumber:mod *tmp18
op greaterThanEq *tmp19 :formatNumber:mod 100
jump 250 equal *tmp19 false
set *tmp20 "{2},{1}"
jump 256 always 0 0
op greaterThanEq *tmp21 :formatNumber:mod 10
jump 254 equal *tmp21 false
set *tmp22 "{2},0{1}"
jump 255 always 0 0
set *tmp22 "{2},00{1}"
set *tmp20 *tmp22
format *tmp20
format :formatNumber:mod
op idiv :formatNumber:n :formatNumber:n 1000
jump 242 always 0 0
format :formatNumber:n
set @counter :printNumber*retaddr
end
print "{2}"
set :formatBinaryNumber:number :printBinaryNumber:number
set :formatBinaryNumber:digits :printBinaryNumber:digits
op lessThan *tmp23 :formatBinaryNumber:number 0
jump 273 equal *tmp23 false
format "-{2}"
op abs *tmp25 :formatBinaryNumber:number 0
set :formatBinaryNumber:number *tmp25
set *tmp24 :formatBinaryNumber:number
jump 274 always 0 0
set *tmp24 null
op floor *tmp26 :formatBinaryNumber:number 0
set :formatBinaryNumber:n *tmp26
op and *tmp27 :formatBinaryNumber:n 1
format "{2}{1}"
format *tmp27
op shr :formatBinaryNumber:n :formatBinaryNumber:n 1
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
op greaterThan *tmp28 :formatBinaryNumber:n 0
jump 276 notEqual *tmp28 false
op greaterThan *tmp29 :formatBinaryNumber:digits 0
jump 289 equal *tmp29 false
format "{2}0"
set *tmp30 :formatBinaryNumber:digits
op sub :formatBinaryNumber:digits :formatBinaryNumber:digits 1
jump 283 always 0 0
format "0b"
set @counter :printBinaryNumber*retaddr
end
print "{2}"
set :formatHexNumber:number :printHexNumber:number
set :formatHexNumber:digits :printHexNumber:digits
op lessThan *tmp31 :formatHexNumber:number 0
jump 302 equal *tmp31 false
format "-{2}"
op abs *tmp33 :formatHexNumber:number 0
set :formatHexNumber:number *tmp33
set *tmp32 :formatHexNumber:number
jump 303 always 0 0
set *tmp32 null
op floor *tmp34 :formatHexNumber:number 0
set :formatHexNumber:n *tmp34
op mod *tmp35 :formatHexNumber:n 16
set :formatHexNumber:digit *tmp35
set *tmp37 :formatHexNumber:digit
jump 310 lessThan *tmp37 0
jump 311 lessThanEq *tmp37 9
jump 315 always 0 0
format "{2}{1}"
format :formatHexNumber:digit
set *tmp36 :formatHexNumber:digit
jump 346 always 0 0
jump 317 equal *tmp37 10
jump 320 always 0 0
format "{2}A"
set *tmp36 "{2}A"
jump 346 always 0 0
jump 322 equal *tmp37 11
jump 325 always 0 0
format "{2}B"
set *tmp36 "{2}B"
jump 346 always 0 0
jump 327 equal *tmp37 12
jump 330 always 0 0
format "{2}C"
set *tmp36 "{2}C"
jump 346 always 0 0
jump 332 equal *tmp37 13
jump 335 always 0 0
format "{2}D"
set *tmp36 "{2}D"
jump 346 always 0 0
jump 337 equal *tmp37 14
jump 340 always 0 0
format "{2}E"
set *tmp36 "{2}E"
jump 346 always 0 0
jump 342 equal *tmp37 15
jump 345 always 0 0
format "{2}F"
set *tmp36 "{2}F"
jump 346 always 0 0
set *tmp36 null
op shr :formatHexNumber:n :formatHexNumber:n 4
op sub :formatHexNumber:digits :formatHexNumber:digits 1
op greaterThan *tmp38 :formatHexNumber:n 0
jump 305 notEqual *tmp38 false
op greaterThan *tmp39 :formatHexNumber:digits 0
jump 356 equal *tmp39 false
format "{2}0"
set *tmp40 :formatHexNumber:digits
op sub :formatHexNumber:digits :formatHexNumber:digits 1
jump 350 always 0 0
format "0x"
set @counter :printHexNumber*retaddr
end
set :isZero:x :printExactFast:n
op abs *tmp42 :isZero:x 0
op lessThanEq *tmp43 *tmp42 0
set *tmp41 *tmp43
jump 367 equal *tmp41 false
print :printExactFast:n
set *tmp44 :printExactFast:n
jump 448 always 0 0
op lessThan *tmp45 :printExactFast:n 0
jump 374 equal *tmp45 false
print "-"
op abs *tmp47 :printExactFast:n 0
set :printExactFast:n *tmp47
set *tmp46 :printExactFast:n
jump 375 always 0 0
set *tmp46 null
op log10 *tmp48 :printExactFast:n 0
op floor *tmp49 *tmp48 0
set :printExactFast:exp *tmp49
op sub *tmp50 0 :printExactFast:exp
op pow *tmp51 10 *tmp50
op mul *tmp52 :printExactFast:n *tmp51
set :printExactFast:base *tmp52
set :round:x :printExactFast:base
op add *tmp54 :round:x 0.5
op floor *tmp55 *tmp54 0
set *tmp53 *tmp55
op sub *tmp56 :printExactFast:base *tmp53
op abs *tmp57 *tmp56 0
set :printExactFast:cmp *tmp57
op lessThanEq *tmp58 :printExactFast:cmp 0
jump 394 equal *tmp58 false
print :printExactFast:base
set *tmp59 :printExactFast:base
jump 440 always 0 0
op greaterThan *tmp60 :printExactFast:cmp 0.00001
jump 399 equal *tmp60 false
print :printExactFast:base
set *tmp61 :printExactFast:base
jump 439 always 0 0
op floor *tmp62 :printExactFast:base 0
print *tmp62
print "."
set :printExactFast:digit 1
jump 438 greaterThan :printExactFast:digit 3
set :frac:x :printExactFast:base
op mod *tmp64 :frac:x 1
set *tmp63 *tmp64
op mul *tmp65 *tmp63 100000
set :printExactFast:base *tmp65
op floor *tmp66 :printExactFast:base 0
set :printExactFast:t *tmp66
op lessThan *tmp67 :printExactFast:t 100
jump 422 equal *tmp67 false
op lessThan *tmp69 :printExactFast:t 10
jump 418 equal *tmp69 false
print "0000"
set *tmp70 "0000"
jump 420 always 0 0
print "000"
set *tmp70 "000"
set *tmp68 *tmp70
jump 435 always 0 0
op lessThan *tmp71 :printExactFast:t 1000
jump 427 equal *tmp71 false
print "00"
set *tmp72 "00"
jump 434 always 0 0
op lessThan *tmp73 :printExactFast:t 10000
jump 432 equal *tmp73 false
print "0"
set *tmp74 "0"
jump 433 always 0 0
set *tmp74 null
set *tmp72 *tmp74
set *tmp68 *tmp72
print :printExactFast:t
op add :printExactFast:digit :printExactFast:digit 1
jump 403 always 0 0
set *tmp61 null
set *tmp59 *tmp61
op notEqual *tmp75 :printExactFast:exp 0
jump 446 equal *tmp75 false
print "E"
print :printExactFast:exp
set *tmp76 :printExactFast:exp
jump 447 always 0 0
set *tmp76 null
set *tmp44 *tmp76
set @counter :printExactFast*retaddr
end
set :isZero.1:x :printExactSlow:n
op abs *tmp78 :isZero.1:x 0
op lessThanEq *tmp79 *tmp78 0
set *tmp77 *tmp79
jump 458 equal *tmp77 false
print :printExactSlow:n
set *tmp80 :printExactSlow:n
jump 495 always 0 0
op lessThan *tmp81 :printExactSlow:n 0
jump 465 equal *tmp81 false
print "-"
op abs *tmp83 :printExactSlow:n 0
set :printExactSlow:n *tmp83
set *tmp82 :printExactSlow:n
jump 466 always 0 0
set *tmp82 null
op log10 *tmp84 :printExactSlow:n 0
op floor *tmp85 *tmp84 0
set :printExactSlow:exp *tmp85
op sub *tmp86 0 :printExactSlow:exp
op pow *tmp87 10 *tmp86
op mul *tmp88 :printExactSlow:n *tmp87
set :printExactSlow:base *tmp88
op floor *tmp89 :printExactSlow:base 0
print *tmp89
print "."
set :printExactSlow:digit 1
jump 487 greaterThan :printExactSlow:digit 15
set :frac.1:x :printExactSlow:base
op mod *tmp91 :frac.1:x 1
set *tmp90 *tmp91
op mul *tmp92 *tmp90 10
set :printExactSlow:base *tmp92
op floor *tmp93 :printExactSlow:base 0
print *tmp93
op add :printExactSlow:digit :printExactSlow:digit 1
jump 477 always 0 0
op notEqual *tmp94 :printExactSlow:exp 0
jump 493 equal *tmp94 false
print "E"
print :printExactSlow:exp
set *tmp95 :printExactSlow:exp
jump 494 always 0 0
set *tmp95 null
set *tmp80 *tmp95
set @counter :printExactSlow*retaddr
end
print "Compiled by Mindcode - github.com/cardillan/mindcode"
