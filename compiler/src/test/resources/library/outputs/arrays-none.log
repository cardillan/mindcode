
Final code before resolving virtual instructions:

    0:  set p 0
    1:  set :fill:value "x"
    2:  set :fill:i 0
        label *label1
    3:  jump *label3 greaterThanEq :fill:i 5
    4:  set *tmp0 :fill:i
    5:  setaddr .a*ret *label64
    6:  set .a*ind *tmp0
    7:  multicall *tmp0 0
        label *label64
    8:  write :fill:value @this .a*elem
        label *label2
    9:  op add :fill:i :fill:i 1
   10:  jump *label1 always 0 0
        label *label3
        label *label0
   11:  assertflush
   12:  print .a*0
   13:  print .a*1
   14:  print .a*2
   15:  print .a*3
   16:  print .a*4
   17:  assertprints "xxxxx" "Array fill"
   18:  set :i 0
        label *label4
   19:  jump *label6 greaterThanEq :i 10
   20:  set *tmp2 :i
   21:  op add *tmp4 p :i
   22:  setaddr .b*ret *label65
   23:  set .b*ind *tmp2
   24:  multicall *tmp2 0
        label *label65
   25:  write *tmp4 @this .b*elem
   26:  set *tmp5 :i
   27:  op add *tmp7 p :i
   28:  setaddr .c*ret *label66
   29:  set .c*ind *tmp5
   30:  multicall *tmp5 0
        label *label66
   31:  write *tmp7 @this .c*elem
        label *label5
   32:  op add :i :i 1
   33:  jump *label4 always 0 0
        label *label6
   34:  set :reverse:i 0
        label *label8
   35:  jump *label10 greaterThanEq :reverse:i 5
   36:  op sub *tmp8 9 :reverse:i
   37:  set :reverse:j *tmp8
   38:  set *tmp9 :reverse:i
   39:  setaddr .b*ret *label67
   40:  set .b*ind *tmp9
   41:  multicall *tmp9 0
        label *label67
   42:  read *tmp10 @this .b*elem
   43:  set :reverse:t *tmp10
   44:  set *tmp11 :reverse:i
   45:  set *tmp13 :reverse:j
   46:  setaddr .b*ret *label68
   47:  set .b*ind *tmp13
   48:  multicall *tmp13 0
        label *label68
   49:  read *tmp14 @this .b*elem
   50:  setaddr .b*ret *label69
   51:  set .b*ind *tmp11
   52:  multicall *tmp11 0
        label *label69
   53:  write *tmp14 @this .b*elem
   54:  set *tmp15 :reverse:j
   55:  setaddr .b*ret *label70
   56:  set .b*ind *tmp15
   57:  multicall *tmp15 0
        label *label70
   58:  write :reverse:t @this .b*elem
        label *label9
   59:  op add :reverse:i :reverse:i 1
   60:  jump *label8 always 0 0
        label *label10
        label *label7
   61:  assertflush
   62:  print .b*0
   63:  print .b*1
   64:  print .b*2
   65:  print .b*3
   66:  print .b*4
   67:  print .b*5
   68:  print .b*6
   69:  print .b*7
   70:  print .b*8
   71:  print .b*9
   72:  assertprints "9876543210" "Array reverse"
   73:  set :bubblesort:maxToMin false
        label *label12
   74:  set :bubblesort:flag false
   75:  set :bubblesort:a .b*0
   76:  set :bubblesort:i 1
        label *label15
   77:  jump *label17 greaterThanEq :bubblesort:i 10
   78:  set *tmp17 :bubblesort:i
   79:  setaddr .b*ret *label71
   80:  set .b*ind *tmp17
   81:  multicall *tmp17 0
        label *label71
   82:  read *tmp18 @this .b*elem
   83:  set :bubblesort:b *tmp18
   84:  jump *label18 equal :bubblesort:maxToMin false
   85:  op lessThan *tmp20 :bubblesort:a :bubblesort:b
   86:  set *tmp19 *tmp20
   87:  jump *label19 always 0 0
        label *label18
   88:  op greaterThan *tmp21 :bubblesort:a :bubblesort:b
   89:  set *tmp19 *tmp21
        label *label19
   90:  set :bubblesort:condition *tmp19
   91:  jump *label20 equal :bubblesort:condition false
   92:  op sub *tmp23 :bubblesort:i 1
   93:  set *tmp24 *tmp23
   94:  setaddr .b*ret *label72
   95:  set .b*ind *tmp24
   96:  multicall *tmp24 0
        label *label72
   97:  write :bubblesort:b @this .b*elem
   98:  set *tmp26 :bubblesort:i
   99:  setaddr .b*ret *label73
  100:  set .b*ind *tmp26
  101:  multicall *tmp26 0
        label *label73
  102:  write :bubblesort:a @this .b*elem
  103:  set :bubblesort:flag true
  104:  set *tmp22 :bubblesort:flag
  105:  jump *label21 always 0 0
        label *label20
  106:  set :bubblesort:a :bubblesort:b
  107:  set *tmp22 :bubblesort:a
        label *label21
        label *label16
  108:  op add :bubblesort:i :bubblesort:i 1
  109:  jump *label15 always 0 0
        label *label17
  110:  op equal *tmp28 :bubblesort:flag false
  111:  jump *label22 equal *tmp28 false
  112:  jump *label11 always 0 0
  113:  set *tmp29 null
  114:  jump *label23 always 0 0
        label *label22
  115:  set *tmp29 null
        label *label23
  116:  set :bubblesort:a .b*9
  117:  op sub :bubblesort:i.1 9 1
        label *label24
  118:  jump *label26 lessThan :bubblesort:i.1 0
  119:  set *tmp30 :bubblesort:i.1
  120:  setaddr .b*ret *label74
  121:  set .b*ind *tmp30
  122:  multicall *tmp30 0
        label *label74
  123:  read *tmp31 @this .b*elem
  124:  set :bubblesort:b.1 *tmp31
  125:  jump *label27 equal :bubblesort:maxToMin false
  126:  op greaterThan *tmp33 :bubblesort:a :bubblesort:b.1
  127:  set *tmp32 *tmp33
  128:  jump *label28 always 0 0
        label *label27
  129:  op lessThan *tmp34 :bubblesort:a :bubblesort:b.1
  130:  set *tmp32 *tmp34
        label *label28
  131:  set :bubblesort:condition.1 *tmp32
  132:  jump *label29 equal :bubblesort:condition.1 false
  133:  op add *tmp36 :bubblesort:i.1 1
  134:  set *tmp37 *tmp36
  135:  setaddr .b*ret *label75
  136:  set .b*ind *tmp37
  137:  multicall *tmp37 0
        label *label75
  138:  write :bubblesort:b.1 @this .b*elem
  139:  set *tmp39 :bubblesort:i.1
  140:  setaddr .b*ret *label76
  141:  set .b*ind *tmp39
  142:  multicall *tmp39 0
        label *label76
  143:  write :bubblesort:a @this .b*elem
  144:  set :bubblesort:flag true
  145:  set *tmp35 :bubblesort:flag
  146:  jump *label30 always 0 0
        label *label29
  147:  set :bubblesort:a :bubblesort:b.1
  148:  set *tmp35 :bubblesort:a
        label *label30
        label *label25
  149:  op sub :bubblesort:i.1 :bubblesort:i.1 1
  150:  jump *label24 always 0 0
        label *label26
        label *label13
  151:  jump *label12 notEqual :bubblesort:flag false
        label *label14
        label *label11
  152:  assertflush
  153:  print .b*0
  154:  print .b*1
  155:  print .b*2
  156:  print .b*3
  157:  print .b*4
  158:  print .b*5
  159:  print .b*6
  160:  print .b*7
  161:  print .b*8
  162:  print .b*9
  163:  assertprints "0123456789" "Array sort 1"
  164:  set :bubblesort.1:maxToMin true
        label *label32
  165:  set :bubblesort.1:flag false
  166:  set :bubblesort.1:a .b*0
  167:  set :bubblesort.1:i 1
        label *label35
  168:  jump *label37 greaterThanEq :bubblesort.1:i 10
  169:  set *tmp41 :bubblesort.1:i
  170:  setaddr .b*ret *label77
  171:  set .b*ind *tmp41
  172:  multicall *tmp41 0
        label *label77
  173:  read *tmp42 @this .b*elem
  174:  set :bubblesort.1:b *tmp42
  175:  jump *label38 equal :bubblesort.1:maxToMin false
  176:  op lessThan *tmp44 :bubblesort.1:a :bubblesort.1:b
  177:  set *tmp43 *tmp44
  178:  jump *label39 always 0 0
        label *label38
  179:  op greaterThan *tmp45 :bubblesort.1:a :bubblesort.1:b
  180:  set *tmp43 *tmp45
        label *label39
  181:  set :bubblesort.1:condition *tmp43
  182:  jump *label40 equal :bubblesort.1:condition false
  183:  op sub *tmp47 :bubblesort.1:i 1
  184:  set *tmp48 *tmp47
  185:  setaddr .b*ret *label78
  186:  set .b*ind *tmp48
  187:  multicall *tmp48 0
        label *label78
  188:  write :bubblesort.1:b @this .b*elem
  189:  set *tmp50 :bubblesort.1:i
  190:  setaddr .b*ret *label79
  191:  set .b*ind *tmp50
  192:  multicall *tmp50 0
        label *label79
  193:  write :bubblesort.1:a @this .b*elem
  194:  op sub *tmp52 :bubblesort.1:i 1
  195:  set *tmp53 *tmp52
  196:  setaddr .c*ret *label80
  197:  set .c*ind *tmp53
  198:  multicall *tmp53 0
        label *label80
  199:  read *tmp54 @this .c*elem
  200:  set :bubblesort.1:v *tmp54
  201:  op sub *tmp55 :bubblesort.1:i 1
  202:  set *tmp56 *tmp55
  203:  set *tmp58 :bubblesort.1:i
  204:  setaddr .c*ret *label81
  205:  set .c*ind *tmp58
  206:  multicall *tmp58 0
        label *label81
  207:  read *tmp59 @this .c*elem
  208:  setaddr .c*ret *label82
  209:  set .c*ind *tmp56
  210:  multicall *tmp56 0
        label *label82
  211:  write *tmp59 @this .c*elem
  212:  set *tmp60 :bubblesort.1:i
  213:  setaddr .c*ret *label83
  214:  set .c*ind *tmp60
  215:  multicall *tmp60 0
        label *label83
  216:  write :bubblesort.1:v @this .c*elem
  217:  set :bubblesort.1:flag true
  218:  set *tmp46 :bubblesort.1:flag
  219:  jump *label41 always 0 0
        label *label40
  220:  set :bubblesort.1:a :bubblesort.1:b
  221:  set *tmp46 :bubblesort.1:a
        label *label41
        label *label36
  222:  op add :bubblesort.1:i :bubblesort.1:i 1
  223:  jump *label35 always 0 0
        label *label37
  224:  op equal *tmp62 :bubblesort.1:flag false
  225:  jump *label42 equal *tmp62 false
  226:  jump *label31 always 0 0
  227:  set *tmp63 null
  228:  jump *label43 always 0 0
        label *label42
  229:  set *tmp63 null
        label *label43
  230:  set :bubblesort.1:a .b*9
  231:  op sub :bubblesort.1:i.1 9 1
        label *label44
  232:  jump *label46 lessThan :bubblesort.1:i.1 0
  233:  set *tmp64 :bubblesort.1:i.1
  234:  setaddr .b*ret *label84
  235:  set .b*ind *tmp64
  236:  multicall *tmp64 0
        label *label84
  237:  read *tmp65 @this .b*elem
  238:  set :bubblesort.1:b.1 *tmp65
  239:  jump *label47 equal :bubblesort.1:maxToMin false
  240:  op greaterThan *tmp67 :bubblesort.1:a :bubblesort.1:b.1
  241:  set *tmp66 *tmp67
  242:  jump *label48 always 0 0
        label *label47
  243:  op lessThan *tmp68 :bubblesort.1:a :bubblesort.1:b.1
  244:  set *tmp66 *tmp68
        label *label48
  245:  set :bubblesort.1:condition.1 *tmp66
  246:  jump *label49 equal :bubblesort.1:condition.1 false
  247:  op add *tmp70 :bubblesort.1:i.1 1
  248:  set *tmp71 *tmp70
  249:  setaddr .b*ret *label85
  250:  set .b*ind *tmp71
  251:  multicall *tmp71 0
        label *label85
  252:  write :bubblesort.1:b.1 @this .b*elem
  253:  set *tmp73 :bubblesort.1:i.1
  254:  setaddr .b*ret *label86
  255:  set .b*ind *tmp73
  256:  multicall *tmp73 0
        label *label86
  257:  write :bubblesort.1:a @this .b*elem
  258:  op add *tmp75 :bubblesort.1:i.1 1
  259:  set *tmp76 *tmp75
  260:  setaddr .c*ret *label87
  261:  set .c*ind *tmp76
  262:  multicall *tmp76 0
        label *label87
  263:  read *tmp77 @this .c*elem
  264:  set :bubblesort.1:v.1 *tmp77
  265:  op add *tmp78 :bubblesort.1:i.1 1
  266:  set *tmp79 *tmp78
  267:  set *tmp81 :bubblesort.1:i.1
  268:  setaddr .c*ret *label88
  269:  set .c*ind *tmp81
  270:  multicall *tmp81 0
        label *label88
  271:  read *tmp82 @this .c*elem
  272:  setaddr .c*ret *label89
  273:  set .c*ind *tmp79
  274:  multicall *tmp79 0
        label *label89
  275:  write *tmp82 @this .c*elem
  276:  set *tmp83 :bubblesort.1:i.1
  277:  setaddr .c*ret *label90
  278:  set .c*ind *tmp83
  279:  multicall *tmp83 0
        label *label90
  280:  write :bubblesort.1:v.1 @this .c*elem
  281:  set :bubblesort.1:flag true
  282:  set *tmp69 :bubblesort.1:flag
  283:  jump *label50 always 0 0
        label *label49
  284:  set :bubblesort.1:a :bubblesort.1:b.1
  285:  set *tmp69 :bubblesort.1:a
        label *label50
        label *label45
  286:  op sub :bubblesort.1:i.1 :bubblesort.1:i.1 1
  287:  jump *label44 always 0 0
        label *label46
        label *label33
  288:  jump *label32 notEqual :bubblesort.1:flag false
        label *label34
        label *label31
  289:  assertflush
  290:  print .c*0
  291:  print .c*1
  292:  print .c*2
  293:  print .c*3
  294:  print .c*4
  295:  print .c*5
  296:  print .c*6
  297:  print .c*7
  298:  print .c*8
  299:  print .c*9
  300:  assertprints "9876543210" "Array sort 2"
  301:  end
        multilabel *label51
  302:  select .a*elem lessThan .a*ind 3 ".a*0" ".a*3"
  303:  return .a*ret
        multilabel *label52
  304:  select .a*elem lessThan .a*ind 3 ".a*1" ".a*4"
  305:  return .a*ret
        multilabel *label53
  306:  set .a*elem ".a*2"
  307:  return .a*ret
  308:  end
        multilabel *label54
  309:  select .b*elem lessThan .b*ind 5 ".b*0" ".b*5"
  310:  return .b*ret
        multilabel *label55
  311:  select .b*elem lessThan .b*ind 5 ".b*1" ".b*6"
  312:  return .b*ret
        multilabel *label56
  313:  select .b*elem lessThan .b*ind 5 ".b*2" ".b*7"
  314:  return .b*ret
        multilabel *label57
  315:  select .b*elem lessThan .b*ind 5 ".b*3" ".b*8"
  316:  return .b*ret
        multilabel *label58
  317:  select .b*elem lessThan .b*ind 5 ".b*4" ".b*9"
  318:  return .b*ret
  319:  end
        multilabel *label59
  320:  select .c*elem lessThan .c*ind 5 ".c*0" ".c*5"
  321:  return .c*ret
        multilabel *label60
  322:  select .c*elem lessThan .c*ind 5 ".c*1" ".c*6"
  323:  return .c*ret
        multilabel *label61
  324:  select .c*elem lessThan .c*ind 5 ".c*2" ".c*7"
  325:  return .c*ret
        multilabel *label62
  326:  select .c*elem lessThan .c*ind 5 ".c*3" ".c*8"
  327:  return .c*ret
        multilabel *label63
  328:  select .c*elem lessThan .c*ind 5 ".c*4" ".c*9"
  329:  return .c*ret
