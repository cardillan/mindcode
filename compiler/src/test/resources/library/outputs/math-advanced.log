Main file: number of reported ambiguities: 14
Active optimizations:
    case-expression-optimization = advanced,
    case-switching = advanced,
    data-flow-optimization = advanced,
    dead-code-elimination = advanced,
    expression-optimization = advanced,
    function-inlining = advanced,
    if-expression-optimization = advanced,
    jump-normalization = advanced,
    jump-optimization = advanced,
    jump-straightening = advanced,
    jump-threading = advanced,
    loop-hoisting = advanced,
    loop-optimization = advanced,
    loop-unrolling = advanced,
    print-merging = advanced,
    return-optimization = advanced,
    single-step-elimination = advanced,
    stack-optimization = advanced,
    temp-variables-elimination = advanced,
    unreachable-code-elimination = advanced

  1639 instructions before optimizations.
   121 instructions eliminated by Temp Variables Elimination.
   126 instructions eliminated by Dead Code Elimination (2 passes, 5 iterations).
     9 instructions eliminated by Jump Normalization (2 passes, 5 iterations).
    68 instructions eliminated by Jump Optimization (5 iterations).
    62 instructions eliminated by Single Step Elimination (3 passes, 9 iterations).
     2 instructions modified by Expression Optimization (4 iterations).
     8 instructions eliminated by If Expression Optimization (4 iterations).
   294 instructions eliminated by Data Flow Optimization (6 passes, 25 iterations).
    29 instructions added by Loop Unrolling (10 iterations).
     4 loops unrolled by Loop Unrolling.
     5 instructions added by Function Inlining (10 iterations).
     4 function calls inlined by Function Inlining.
    54 instructions updated by JumpThreading.
    69 instructions eliminated by Unreachable Code Elimination.
   916 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  * Loop Unrolling: unroll iteration loop at line 78             cost     0, benefit        5.0, efficiency   Infinity (-8 instructions)
    Loop Unrolling: unroll iteration loop at line 90             cost     0, benefit        5.0, efficiency   Infinity
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function sign                      cost    14, benefit       14.0, efficiency        1.0
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   125, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 13           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 14           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 15           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 16           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  * Loop Unrolling: unroll iteration loop at line 90             cost     0, benefit        5.0, efficiency   Infinity (-9 instructions)
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function sign                      cost    14, benefit       14.0, efficiency        1.0
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   125, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 13           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 14           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 15           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 16           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   241, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   139, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   442, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function sign                      cost    14, benefit       14.0, efficiency        1.0
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   125, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 13           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 14           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 15           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 16           cost     5, benefit        3.5, efficiency        0.7
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    18, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    18, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 22):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  * Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2 (+13 instructions)
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
    Function Inlining: inline function sign                      cost    11, benefit       14.0, efficiency        1.3
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
    Function Inlining: inline function call at line 13           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 14           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 15           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 16           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
    Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 9):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function sign                      cost    11, benefit       14.0, efficiency        1.3
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
  * Function Inlining: inline function call at line 13           cost     4, benefit        3.5, efficiency        0.9 (+1 instructions)
    Function Inlining: inline function call at line 14           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 15           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 16           cost     4, benefit        3.5, efficiency        0.9
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 8):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  * Function Inlining: inline function sign                      cost     7, benefit       10.5, efficiency        1.5 (-7 instructions)
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
    Function Inlining: inline function call at line 14           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 15           cost     4, benefit        3.5, efficiency        0.9
    Function Inlining: inline function call at line 16           cost     4, benefit        3.5, efficiency        0.9
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 15):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  * Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7 (+13 instructions)
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
    Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
    Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
    Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 2):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   187, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 3: speed optimization selection (cost limit 5):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   187, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Pass 4: speed optimization selection (cost limit 5):
  ! Loop Unrolling: unroll iteration loop at line 170            cost   187, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   235, benefit       17.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   109, benefit       17.0, efficiency        0.2
  ! Loop Unrolling: unroll iteration loop at line 188            cost    13, benefit      425.0, efficiency       32.7
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Loop Unrolling: unroll iteration loop at line 170            cost   433, benefit       26.0, efficiency        0.1
  ! Loop Unrolling: unroll iteration loop at line 188            cost    19, benefit      650.0, efficiency       34.2
  ! Function Inlining: inline function median                    cost    59, benefit       25.0, efficiency        0.4
  ! Function Inlining: inline function median                    cost   111, benefit       44.0, efficiency        0.4
  ! Function Inlining: inline function call at line 36           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 37           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 38           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 39           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 40           cost    15, benefit        5.0, efficiency        0.3
  ! Function Inlining: inline function call at line 41           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 42           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 43           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 44           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 45           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 46           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 47           cost    16, benefit        5.5, efficiency        0.3
  ! Function Inlining: inline function call at line 48           cost    16, benefit        5.5, efficiency        0.3

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  assertequals 0 0 "sign(0)"
   10:  assertequals 0 0 "sign(1e-7)"
   11:  assertequals 1 1 "sign(1e-5)"
   12:  assertequals -1 -1 "sign(-5)"
   13:  assertequals 0 0 "signExact(0)"
   14:  assertequals 1 1 "signExact(1e-7)"
   15:  assertequals -1 -1 "signExact(-1e-7)"
   16:  assertequals true true "isZero(0)"
   17:  assertequals false false "isZero(1e-50)"
   18:  assertequals false false "isZero(-1e-50)"
   19:  assertequals false false "isZero(0.01,0.01)"
   20:  op add __fn19__result null 0
   21:  assertequals 0 __fn19__result "nullToZero(null)"
   22:  op add __fn20__result 1 0
   23:  assertequals 1 __fn20__result "nullToZero(1)"
   24:  assertequals 1 1 "sum(1)"
   25:  assertequals 10 10 "sum(1,2,3,4)"
   26:  assertequals 1 1 "avg(1)"
   27:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   28:  assertequals 1 1 "median(1)"
   29:  assertequals 3 3 "median(2,4)"
   30:  assertequals 3 3 "median(1,3,5)"
   31:  assertequals 1 1 "median(1,1,1)"
   32:  assertequals 1 1 "median(1,1,3)"
   33:  assertequals 3 3 "median(1,3,3)"
   34:  set __fn1__x1 2
   35:  set __fn1__x2 4
   36:  set __fn1__x3 6
   37:  set __fn1__x4 8
   38:  setaddr __fn1retaddr __label73
   39:  call __label1 __fn1retval
        gotolabel __label73 __fn1
   40:  assertequals 5 __fn1retval "median(2,4,6,8)"
   41:  set __fn1__x1 8
   42:  set __fn1__x2 6
   43:  set __fn1__x3 4
   44:  set __fn1__x4 2
   45:  setaddr __fn1retaddr __label74
   46:  call __label1 __fn1retval
        gotolabel __label74 __fn1
   47:  assertequals 5 __fn1retval "median(8,6,4,2)"
   48:  set __fn1__x1 4
   49:  set __fn1__x2 8
   50:  set __fn1__x3 2
   51:  set __fn1__x4 6
   52:  setaddr __fn1retaddr __label75
   53:  call __label1 __fn1retval
        gotolabel __label75 __fn1
   54:  assertequals 5 __fn1retval "median(4,8,2,6)"
   55:  set __fn1__x1 2
   56:  set __fn1__x2 6
   57:  set __fn1__x3 4
   58:  set __fn1__x4 8
   59:  setaddr __fn1retaddr __label76
   60:  call __label1 __fn1retval
        gotolabel __label76 __fn1
   61:  assertequals 5 __fn1retval "median(2,6,4,8)"
   62:  set __fn1__x1 6
   63:  set __fn1__x2 2
   64:  set __fn1__x3 8
   65:  set __fn1__x4 4
   66:  setaddr __fn1retaddr __label77
   67:  call __label1 __fn1retval
        gotolabel __label77 __fn1
   68:  assertequals 5 __fn1retval "median(6,2,8,4)"
   69:  set __fn2__x1 1
   70:  set __fn2__x2 2
   71:  set __fn2__x3 3
   72:  set __fn2__x4 4
   73:  set __fn2__x5 5
   74:  setaddr __fn2retaddr __label78
   75:  call __label2 __fn2retval
        gotolabel __label78 __fn2
   76:  assertequals 3 __fn2retval "median(1,2,3,4,5)"
   77:  set __fn2__x1 5
   78:  set __fn2__x2 4
   79:  set __fn2__x4 2
   80:  set __fn2__x5 1
   81:  setaddr __fn2retaddr __label79
   82:  call __label2 __fn2retval
        gotolabel __label79 __fn2
   83:  assertequals 3 __fn2retval "median(5,4,3,2,1)"
   84:  set __fn2__x1 1
   85:  set __fn2__x2 1
   86:  set __fn2__x3 1
   87:  set __fn2__x4 1
   88:  setaddr __fn2retaddr __label80
   89:  call __label2 __fn2retval
        gotolabel __label80 __fn2
   90:  assertequals 1 __fn2retval "median(1,1,1,1,1)"
   91:  set __fn2__x5 5
   92:  setaddr __fn2retaddr __label81
   93:  call __label2 __fn2retval
        gotolabel __label81 __fn2
   94:  assertequals 1 __fn2retval "median(1,1,1,1,5)"
   95:  set __fn2__x4 5
   96:  setaddr __fn2retaddr __label82
   97:  call __label2 __fn2retval
        gotolabel __label82 __fn2
   98:  assertequals 1 __fn2retval "median(1,1,1,5,5)"
   99:  set __fn2__x3 5
  100:  setaddr __fn2retaddr __label83
  101:  call __label2 __fn2retval
        gotolabel __label83 __fn2
  102:  assertequals 5 __fn2retval "median(1,1,5,5,5)"
  103:  set __fn2__x2 5
  104:  setaddr __fn2retaddr __label84
  105:  call __label2 __fn2retval
        gotolabel __label84 __fn2
  106:  assertequals 5 __fn2retval "median(1,5,5,5,5)"
  107:  set __fn2__x1 5
  108:  setaddr __fn2retaddr __label85
  109:  call __label2 __fn2retval
        gotolabel __label85 __fn2
  110:  assertequals 5 __fn2retval "median(5,5,5,5,5)"
  111:  set __tmp106 1
  112:  assertequals 1 __tmp106 "median(1,1,1,1,1,1)"
  113:  set __fn33__bestDif 10000000000
  114:  set __fn33__best null
  115:  set __fn33__count 1
  116:  setaddr __tmp132 __label125
  117:  set __fn33__i 1
  118:  jump __label123 always 0 0
        gotolabel __label125 marker4
  119:  setaddr __tmp132 __label126
  120:  set __fn33__i 1
  121:  jump __label123 always 0 0
        gotolabel __label126 marker4
  122:  setaddr __tmp132 __label127
  123:  set __fn33__i 1
  124:  jump __label123 always 0 0
        gotolabel __label127 marker4
  125:  setaddr __tmp132 __label128
  126:  set __fn33__i 1
  127:  jump __label123 always 0 0
        gotolabel __label128 marker4
  128:  setaddr __tmp132 __label129
  129:  set __fn33__i 1
  130:  jump __label123 always 0 0
        gotolabel __label129 marker4
  131:  setaddr __tmp132 __label130
  132:  set __fn33__i 5
        label __label123
  133:  set __fn34__gt 0
  134:  set __fn34__lt 0
  135:  setaddr __tmp134 __label136
  136:  set __fn34__i 1
  137:  jump __label134 always 0 0
        gotolabel __label136 marker5
  138:  setaddr __tmp134 __label137
  139:  set __fn34__i 1
  140:  jump __label134 always 0 0
        gotolabel __label137 marker5
  141:  setaddr __tmp134 __label138
  142:  set __fn34__i 1
  143:  jump __label134 always 0 0
        gotolabel __label138 marker5
  144:  setaddr __tmp134 __label139
  145:  set __fn34__i 1
  146:  jump __label134 always 0 0
        gotolabel __label139 marker5
  147:  setaddr __tmp134 __label140
  148:  set __fn34__i 1
  149:  jump __label134 always 0 0
        gotolabel __label140 marker5
  150:  setaddr __tmp134 __label141
  151:  set __fn34__i 5
        label __label134
  152:  jump __label142 greaterThanEq __fn34__i __fn33__i
  153:  op add __fn34__lt __fn34__lt 1
  154:  goto __tmp134 marker5
        label __label142
  155:  jump __label144 lessThanEq __fn34__i __fn33__i
  156:  op add __fn34__gt __fn34__gt 1
        label __label144
  157:  goto __tmp134 marker5
        gotolabel __label141 marker5
  158:  op sub __tmp141 __fn34__gt __fn34__lt
  159:  op abs __fn34__dif __tmp141 0
  160:  set __tmp146 false
  161:  op add __tmp143 __fn34__gt __fn34__lt
  162:  jump __label147 lessThan __tmp143 0
  163:  op equal __tmp146 __fn34__gt __fn34__lt
        label __label147
  164:  jump __label148 equal __tmp146 false
  165:  set __tmp131 __fn33__i
  166:  jump __label121 always 0 0
        label __label148
  167:  jump __label150 greaterThanEq __fn34__dif __fn33__bestDif
  168:  set __fn33__bestDif __fn34__dif
  169:  set __fn33__best __fn33__i
  170:  set __fn33__count 1
  171:  goto __tmp132 marker4
        label __label150
  172:  jump __label152 greaterThan __fn34__dif __fn33__bestDif
  173:  op add __fn33__best __fn33__best __fn33__i
  174:  op add __fn33__count __fn33__count 1
        label __label152
  175:  goto __tmp132 marker4
        gotolabel __label130 marker4
  176:  op div __tmp131 __fn33__best __fn33__count
        label __label121
  177:  assertequals 1 __tmp131 "median(1,1,1,1,1,5)"
  178:  set __fn35__bestDif 10000000000
  179:  set __fn35__best null
  180:  set __fn35__count 1
  181:  setaddr __tmp157 __label159
  182:  set __fn35__i 1
  183:  jump __label157 always 0 0
        gotolabel __label159 marker6
  184:  setaddr __tmp157 __label160
  185:  set __fn35__i 1
  186:  jump __label157 always 0 0
        gotolabel __label160 marker6
  187:  setaddr __tmp157 __label161
  188:  set __fn35__i 1
  189:  jump __label157 always 0 0
        gotolabel __label161 marker6
  190:  setaddr __tmp157 __label162
  191:  set __fn35__i 1
  192:  jump __label157 always 0 0
        gotolabel __label162 marker6
  193:  setaddr __tmp157 __label163
  194:  set __fn35__i 5
  195:  jump __label157 always 0 0
        gotolabel __label163 marker6
  196:  setaddr __tmp157 __label164
  197:  set __fn35__i 5
        label __label157
  198:  set __fn36__gt 0
  199:  set __fn36__lt 0
  200:  setaddr __tmp159 __label170
  201:  set __fn36__i 1
  202:  jump __label168 always 0 0
        gotolabel __label170 marker7
  203:  setaddr __tmp159 __label171
  204:  set __fn36__i 1
  205:  jump __label168 always 0 0
        gotolabel __label171 marker7
  206:  setaddr __tmp159 __label172
  207:  set __fn36__i 1
  208:  jump __label168 always 0 0
        gotolabel __label172 marker7
  209:  setaddr __tmp159 __label173
  210:  set __fn36__i 1
  211:  jump __label168 always 0 0
        gotolabel __label173 marker7
  212:  setaddr __tmp159 __label174
  213:  set __fn36__i 5
  214:  jump __label168 always 0 0
        gotolabel __label174 marker7
  215:  setaddr __tmp159 __label175
  216:  set __fn36__i 5
        label __label168
  217:  jump __label176 greaterThanEq __fn36__i __fn35__i
  218:  op add __fn36__lt __fn36__lt 1
  219:  goto __tmp159 marker7
        label __label176
  220:  jump __label178 lessThanEq __fn36__i __fn35__i
  221:  op add __fn36__gt __fn36__gt 1
        label __label178
  222:  goto __tmp159 marker7
        gotolabel __label175 marker7
  223:  op sub __tmp166 __fn36__gt __fn36__lt
  224:  op abs __fn36__dif __tmp166 0
  225:  set __tmp171 false
  226:  op add __tmp168 __fn36__gt __fn36__lt
  227:  jump __label181 lessThan __tmp168 0
  228:  op equal __tmp171 __fn36__gt __fn36__lt
        label __label181
  229:  jump __label182 equal __tmp171 false
  230:  set __tmp156 __fn35__i
  231:  jump __label155 always 0 0
        label __label182
  232:  jump __label184 greaterThanEq __fn36__dif __fn35__bestDif
  233:  set __fn35__bestDif __fn36__dif
  234:  set __fn35__best __fn35__i
  235:  set __fn35__count 1
  236:  goto __tmp157 marker6
        label __label184
  237:  jump __label186 greaterThan __fn36__dif __fn35__bestDif
  238:  op add __fn35__best __fn35__best __fn35__i
  239:  op add __fn35__count __fn35__count 1
        label __label186
  240:  goto __tmp157 marker6
        gotolabel __label164 marker6
  241:  op div __tmp156 __fn35__best __fn35__count
        label __label155
  242:  assertequals 1 __tmp156 "median(1,1,1,1,5,5)"
  243:  set __fn37__bestDif 10000000000
  244:  set __fn37__best null
  245:  set __fn37__count 1
  246:  setaddr __tmp182 __label193
  247:  set __fn37__i 1
  248:  jump __label191 always 0 0
        gotolabel __label193 marker8
  249:  setaddr __tmp182 __label194
  250:  set __fn37__i 1
  251:  jump __label191 always 0 0
        gotolabel __label194 marker8
  252:  setaddr __tmp182 __label195
  253:  set __fn37__i 1
  254:  jump __label191 always 0 0
        gotolabel __label195 marker8
  255:  setaddr __tmp182 __label196
  256:  set __fn37__i 5
  257:  jump __label191 always 0 0
        gotolabel __label196 marker8
  258:  setaddr __tmp182 __label197
  259:  set __fn37__i 5
  260:  jump __label191 always 0 0
        gotolabel __label197 marker8
  261:  setaddr __tmp182 __label198
  262:  set __fn37__i 5
        label __label191
  263:  set __fn38__gt 0
  264:  set __fn38__lt 0
  265:  setaddr __tmp184 __label204
  266:  set __fn38__i 1
  267:  jump __label202 always 0 0
        gotolabel __label204 marker9
  268:  setaddr __tmp184 __label205
  269:  set __fn38__i 1
  270:  jump __label202 always 0 0
        gotolabel __label205 marker9
  271:  setaddr __tmp184 __label206
  272:  set __fn38__i 1
  273:  jump __label202 always 0 0
        gotolabel __label206 marker9
  274:  setaddr __tmp184 __label207
  275:  set __fn38__i 5
  276:  jump __label202 always 0 0
        gotolabel __label207 marker9
  277:  setaddr __tmp184 __label208
  278:  set __fn38__i 5
  279:  jump __label202 always 0 0
        gotolabel __label208 marker9
  280:  setaddr __tmp184 __label209
  281:  set __fn38__i 5
        label __label202
  282:  jump __label210 greaterThanEq __fn38__i __fn37__i
  283:  op add __fn38__lt __fn38__lt 1
  284:  goto __tmp184 marker9
        label __label210
  285:  jump __label212 lessThanEq __fn38__i __fn37__i
  286:  op add __fn38__gt __fn38__gt 1
        label __label212
  287:  goto __tmp184 marker9
        gotolabel __label209 marker9
  288:  op sub __tmp191 __fn38__gt __fn38__lt
  289:  op abs __fn38__dif __tmp191 0
  290:  set __tmp196 false
  291:  op add __tmp193 __fn38__gt __fn38__lt
  292:  jump __label215 lessThan __tmp193 0
  293:  op equal __tmp196 __fn38__gt __fn38__lt
        label __label215
  294:  jump __label216 equal __tmp196 false
  295:  set __tmp181 __fn37__i
  296:  jump __label189 always 0 0
        label __label216
  297:  jump __label218 greaterThanEq __fn38__dif __fn37__bestDif
  298:  set __fn37__bestDif __fn38__dif
  299:  set __fn37__best __fn37__i
  300:  set __fn37__count 1
  301:  goto __tmp182 marker8
        label __label218
  302:  jump __label220 greaterThan __fn38__dif __fn37__bestDif
  303:  op add __fn37__best __fn37__best __fn37__i
  304:  op add __fn37__count __fn37__count 1
        label __label220
  305:  goto __tmp182 marker8
        gotolabel __label198 marker8
  306:  op div __tmp181 __fn37__best __fn37__count
        label __label189
  307:  assertequals 3 __tmp181 "median(1,1,1,5,5,5)"
  308:  set __fn39__bestDif 10000000000
  309:  set __fn39__best null
  310:  set __fn39__count 1
  311:  setaddr __tmp207 __label227
  312:  set __fn39__i 1
  313:  jump __label225 always 0 0
        gotolabel __label227 marker10
  314:  setaddr __tmp207 __label228
  315:  set __fn39__i 1
  316:  jump __label225 always 0 0
        gotolabel __label228 marker10
  317:  setaddr __tmp207 __label229
  318:  set __fn39__i 5
  319:  jump __label225 always 0 0
        gotolabel __label229 marker10
  320:  setaddr __tmp207 __label230
  321:  set __fn39__i 5
  322:  jump __label225 always 0 0
        gotolabel __label230 marker10
  323:  setaddr __tmp207 __label231
  324:  set __fn39__i 5
  325:  jump __label225 always 0 0
        gotolabel __label231 marker10
  326:  setaddr __tmp207 __label232
  327:  set __fn39__i 5
        label __label225
  328:  set __fn40__gt 0
  329:  set __fn40__lt 0
  330:  setaddr __tmp209 __label238
  331:  set __fn40__i 1
  332:  jump __label236 always 0 0
        gotolabel __label238 marker11
  333:  setaddr __tmp209 __label239
  334:  set __fn40__i 1
  335:  jump __label236 always 0 0
        gotolabel __label239 marker11
  336:  setaddr __tmp209 __label240
  337:  set __fn40__i 5
  338:  jump __label236 always 0 0
        gotolabel __label240 marker11
  339:  setaddr __tmp209 __label241
  340:  set __fn40__i 5
  341:  jump __label236 always 0 0
        gotolabel __label241 marker11
  342:  setaddr __tmp209 __label242
  343:  set __fn40__i 5
  344:  jump __label236 always 0 0
        gotolabel __label242 marker11
  345:  setaddr __tmp209 __label243
  346:  set __fn40__i 5
        label __label236
  347:  jump __label244 greaterThanEq __fn40__i __fn39__i
  348:  op add __fn40__lt __fn40__lt 1
  349:  goto __tmp209 marker11
        label __label244
  350:  jump __label246 lessThanEq __fn40__i __fn39__i
  351:  op add __fn40__gt __fn40__gt 1
        label __label246
  352:  goto __tmp209 marker11
        gotolabel __label243 marker11
  353:  op sub __tmp216 __fn40__gt __fn40__lt
  354:  op abs __fn40__dif __tmp216 0
  355:  set __tmp221 false
  356:  op add __tmp218 __fn40__gt __fn40__lt
  357:  jump __label249 lessThan __tmp218 0
  358:  op equal __tmp221 __fn40__gt __fn40__lt
        label __label249
  359:  jump __label250 equal __tmp221 false
  360:  set __tmp206 __fn39__i
  361:  jump __label223 always 0 0
        label __label250
  362:  jump __label252 greaterThanEq __fn40__dif __fn39__bestDif
  363:  set __fn39__bestDif __fn40__dif
  364:  set __fn39__best __fn39__i
  365:  set __fn39__count 1
  366:  goto __tmp207 marker10
        label __label252
  367:  jump __label254 greaterThan __fn40__dif __fn39__bestDif
  368:  op add __fn39__best __fn39__best __fn39__i
  369:  op add __fn39__count __fn39__count 1
        label __label254
  370:  goto __tmp207 marker10
        gotolabel __label232 marker10
  371:  op div __tmp206 __fn39__best __fn39__count
        label __label223
  372:  assertequals 5 __tmp206 "median(1,1,5,5,5,5)"
  373:  set __fn41__bestDif 10000000000
  374:  set __fn41__best null
  375:  set __fn41__count 1
  376:  setaddr __tmp232 __label261
  377:  set __fn41__i 1
  378:  jump __label259 always 0 0
        gotolabel __label261 marker12
  379:  setaddr __tmp232 __label262
  380:  set __fn41__i 5
  381:  jump __label259 always 0 0
        gotolabel __label262 marker12
  382:  setaddr __tmp232 __label263
  383:  set __fn41__i 5
  384:  jump __label259 always 0 0
        gotolabel __label263 marker12
  385:  setaddr __tmp232 __label264
  386:  set __fn41__i 5
  387:  jump __label259 always 0 0
        gotolabel __label264 marker12
  388:  setaddr __tmp232 __label265
  389:  set __fn41__i 5
  390:  jump __label259 always 0 0
        gotolabel __label265 marker12
  391:  setaddr __tmp232 __label266
  392:  set __fn41__i 5
        label __label259
  393:  set __fn42__gt 0
  394:  set __fn42__lt 0
  395:  setaddr __tmp234 __label272
  396:  set __fn42__i 1
  397:  jump __label270 always 0 0
        gotolabel __label272 marker13
  398:  setaddr __tmp234 __label273
  399:  set __fn42__i 5
  400:  jump __label270 always 0 0
        gotolabel __label273 marker13
  401:  setaddr __tmp234 __label274
  402:  set __fn42__i 5
  403:  jump __label270 always 0 0
        gotolabel __label274 marker13
  404:  setaddr __tmp234 __label275
  405:  set __fn42__i 5
  406:  jump __label270 always 0 0
        gotolabel __label275 marker13
  407:  setaddr __tmp234 __label276
  408:  set __fn42__i 5
  409:  jump __label270 always 0 0
        gotolabel __label276 marker13
  410:  setaddr __tmp234 __label277
  411:  set __fn42__i 5
        label __label270
  412:  jump __label278 greaterThanEq __fn42__i __fn41__i
  413:  op add __fn42__lt __fn42__lt 1
  414:  goto __tmp234 marker13
        label __label278
  415:  jump __label280 lessThanEq __fn42__i __fn41__i
  416:  op add __fn42__gt __fn42__gt 1
        label __label280
  417:  goto __tmp234 marker13
        gotolabel __label277 marker13
  418:  op sub __tmp241 __fn42__gt __fn42__lt
  419:  op abs __fn42__dif __tmp241 0
  420:  set __tmp246 false
  421:  op add __tmp243 __fn42__gt __fn42__lt
  422:  jump __label283 lessThan __tmp243 0
  423:  op equal __tmp246 __fn42__gt __fn42__lt
        label __label283
  424:  jump __label284 equal __tmp246 false
  425:  set __tmp231 __fn41__i
  426:  jump __label257 always 0 0
        label __label284
  427:  jump __label286 greaterThanEq __fn42__dif __fn41__bestDif
  428:  set __fn41__bestDif __fn42__dif
  429:  set __fn41__best __fn41__i
  430:  set __fn41__count 1
  431:  goto __tmp232 marker12
        label __label286
  432:  jump __label288 greaterThan __fn42__dif __fn41__bestDif
  433:  op add __fn41__best __fn41__best __fn41__i
  434:  op add __fn41__count __fn41__count 1
        label __label288
  435:  goto __tmp232 marker12
        gotolabel __label266 marker12
  436:  op div __tmp231 __fn41__best __fn41__count
        label __label257
  437:  assertequals 5 __tmp231 "median(1,5,5,5,5,5)"
  438:  setaddr __tmp259 __label306
  439:  goto __tmp259 marker15
        gotolabel __label306 marker15
  440:  setaddr __tmp259 __label307
  441:  goto __tmp259 marker15
        gotolabel __label307 marker15
  442:  setaddr __tmp259 __label308
  443:  goto __tmp259 marker15
        gotolabel __label308 marker15
  444:  setaddr __tmp259 __label309
  445:  goto __tmp259 marker15
        gotolabel __label309 marker15
  446:  setaddr __tmp259 __label310
  447:  goto __tmp259 marker15
        gotolabel __label310 marker15
  448:  setaddr __tmp259 __label311
  449:  goto __tmp259 marker15
        gotolabel __label311 marker15
  450:  set __tmp256 5
  451:  assertequals 5 __tmp256 "median(5,5,5,5,5,5)"
  452:  set __fn45__bestDif 10000000000
  453:  set __fn45__best null
  454:  set __fn45__count 1
  455:  setaddr __tmp282 __label329
  456:  set __fn45__i 1
  457:  jump __label327 always 0 0
        gotolabel __label329 marker16
  458:  setaddr __tmp282 __label330
  459:  set __fn45__i 2
  460:  jump __label327 always 0 0
        gotolabel __label330 marker16
  461:  setaddr __tmp282 __label331
  462:  set __fn45__i 3
  463:  jump __label327 always 0 0
        gotolabel __label331 marker16
  464:  setaddr __tmp282 __label332
  465:  set __fn45__i 4
  466:  jump __label327 always 0 0
        gotolabel __label332 marker16
  467:  setaddr __tmp282 __label333
  468:  set __fn45__i 5
  469:  jump __label327 always 0 0
        gotolabel __label333 marker16
  470:  setaddr __tmp282 __label334
  471:  set __fn45__i 6
  472:  jump __label327 always 0 0
        gotolabel __label334 marker16
  473:  setaddr __tmp282 __label335
  474:  set __fn45__i 7
  475:  jump __label327 always 0 0
        gotolabel __label335 marker16
  476:  setaddr __tmp282 __label336
  477:  set __fn45__i 8
  478:  jump __label327 always 0 0
        gotolabel __label336 marker16
  479:  setaddr __tmp282 __label337
  480:  set __fn45__i 9
        label __label327
  481:  set __fn46__gt 0
  482:  set __fn46__lt 0
  483:  jump __label566 greaterThanEq 1 __fn45__i
  484:  set __fn46__lt 1
  485:  jump __label569 always 0 0
        label __label566
  486:  jump __label567 lessThanEq 1 __fn45__i
  487:  set __fn46__gt 1
        label __label567
        label __label569
  488:  jump __label574 greaterThanEq 2 __fn45__i
  489:  op add __fn46__lt __fn46__lt 1
  490:  jump __label577 always 0 0
        label __label574
  491:  jump __label575 lessThanEq 2 __fn45__i
  492:  op add __fn46__gt __fn46__gt 1
        label __label575
        label __label577
  493:  jump __label582 greaterThanEq 3 __fn45__i
  494:  op add __fn46__lt __fn46__lt 1
  495:  jump __label585 always 0 0
        label __label582
  496:  jump __label583 lessThanEq 3 __fn45__i
  497:  op add __fn46__gt __fn46__gt 1
        label __label583
        label __label585
  498:  jump __label590 greaterThanEq 4 __fn45__i
  499:  op add __fn46__lt __fn46__lt 1
  500:  jump __label593 always 0 0
        label __label590
  501:  jump __label591 lessThanEq 4 __fn45__i
  502:  op add __fn46__gt __fn46__gt 1
        label __label591
        label __label593
  503:  jump __label598 greaterThanEq 5 __fn45__i
  504:  op add __fn46__lt __fn46__lt 1
  505:  jump __label601 always 0 0
        label __label598
  506:  jump __label599 lessThanEq 5 __fn45__i
  507:  op add __fn46__gt __fn46__gt 1
        label __label599
        label __label601
  508:  jump __label606 greaterThanEq 6 __fn45__i
  509:  op add __fn46__lt __fn46__lt 1
  510:  jump __label609 always 0 0
        label __label606
  511:  jump __label607 lessThanEq 6 __fn45__i
  512:  op add __fn46__gt __fn46__gt 1
        label __label607
        label __label609
  513:  jump __label614 greaterThanEq 7 __fn45__i
  514:  op add __fn46__lt __fn46__lt 1
  515:  jump __label617 always 0 0
        label __label614
  516:  jump __label615 lessThanEq 7 __fn45__i
  517:  op add __fn46__gt __fn46__gt 1
        label __label615
        label __label617
  518:  jump __label622 greaterThanEq 8 __fn45__i
  519:  op add __fn46__lt __fn46__lt 1
  520:  jump __label625 always 0 0
        label __label622
  521:  jump __label623 lessThanEq 8 __fn45__i
  522:  op add __fn46__gt __fn46__gt 1
        label __label623
        label __label625
  523:  jump __label630 greaterThanEq 9 __fn45__i
  524:  op add __fn46__lt __fn46__lt 1
  525:  jump __label633 always 0 0
        label __label630
  526:  jump __label631 lessThanEq 9 __fn45__i
  527:  op add __fn46__gt __fn46__gt 1
        label __label631
        label __label633
  528:  op sub __tmp291 __fn46__gt __fn46__lt
  529:  op abs __fn46__dif __tmp291 0
  530:  set __tmp296 false
  531:  op add __tmp293 __fn46__gt __fn46__lt
  532:  jump __label357 lessThan __tmp293 0
  533:  op equal __tmp296 __fn46__gt __fn46__lt
        label __label357
  534:  jump __label358 equal __tmp296 false
  535:  set __tmp281 __fn45__i
  536:  jump __label325 always 0 0
        label __label358
  537:  jump __label360 greaterThanEq __fn46__dif __fn45__bestDif
  538:  set __fn45__bestDif __fn46__dif
  539:  set __fn45__best __fn45__i
  540:  set __fn45__count 1
  541:  goto __tmp282 marker16
        label __label360
  542:  jump __label362 greaterThan __fn46__dif __fn45__bestDif
  543:  op add __fn45__best __fn45__best __fn45__i
  544:  op add __fn45__count __fn45__count 1
        label __label362
  545:  goto __tmp282 marker16
        gotolabel __label337 marker16
  546:  op div __tmp281 __fn45__best __fn45__count
        label __label325
  547:  assertequals 5 __tmp281 "median(1,2,3,4,5,6,7,8,9)"
  548:  set __fn47__bestDif 10000000000
  549:  set __fn47__best null
  550:  set __fn47__count 1
  551:  setaddr __tmp307 __label369
  552:  set __fn47__i 9
  553:  jump __label367 always 0 0
        gotolabel __label369 marker18
  554:  setaddr __tmp307 __label370
  555:  set __fn47__i 8
  556:  jump __label367 always 0 0
        gotolabel __label370 marker18
  557:  setaddr __tmp307 __label371
  558:  set __fn47__i 7
  559:  jump __label367 always 0 0
        gotolabel __label371 marker18
  560:  setaddr __tmp307 __label372
  561:  set __fn47__i 6
  562:  jump __label367 always 0 0
        gotolabel __label372 marker18
  563:  setaddr __tmp307 __label373
  564:  set __fn47__i 5
  565:  jump __label367 always 0 0
        gotolabel __label373 marker18
  566:  setaddr __tmp307 __label374
  567:  set __fn47__i 4
  568:  jump __label367 always 0 0
        gotolabel __label374 marker18
  569:  setaddr __tmp307 __label375
  570:  set __fn47__i 3
  571:  jump __label367 always 0 0
        gotolabel __label375 marker18
  572:  setaddr __tmp307 __label376
  573:  set __fn47__i 2
  574:  jump __label367 always 0 0
        gotolabel __label376 marker18
  575:  setaddr __tmp307 __label377
  576:  set __fn47__i 1
        label __label367
  577:  set __fn48__gt 0
  578:  set __fn48__lt 0
  579:  setaddr __tmp309 __label383
  580:  set __fn48__i 9
  581:  jump __label381 always 0 0
        gotolabel __label383 marker19
  582:  setaddr __tmp309 __label384
  583:  set __fn48__i 8
  584:  jump __label381 always 0 0
        gotolabel __label384 marker19
  585:  setaddr __tmp309 __label385
  586:  set __fn48__i 7
  587:  jump __label381 always 0 0
        gotolabel __label385 marker19
  588:  setaddr __tmp309 __label386
  589:  set __fn48__i 6
  590:  jump __label381 always 0 0
        gotolabel __label386 marker19
  591:  setaddr __tmp309 __label387
  592:  set __fn48__i 5
  593:  jump __label381 always 0 0
        gotolabel __label387 marker19
  594:  setaddr __tmp309 __label388
  595:  set __fn48__i 4
  596:  jump __label381 always 0 0
        gotolabel __label388 marker19
  597:  setaddr __tmp309 __label389
  598:  set __fn48__i 3
  599:  jump __label381 always 0 0
        gotolabel __label389 marker19
  600:  setaddr __tmp309 __label390
  601:  set __fn48__i 2
  602:  jump __label381 always 0 0
        gotolabel __label390 marker19
  603:  setaddr __tmp309 __label391
  604:  set __fn48__i 1
        label __label381
  605:  jump __label392 greaterThanEq __fn48__i __fn47__i
  606:  op add __fn48__lt __fn48__lt 1
  607:  goto __tmp309 marker19
        label __label392
  608:  jump __label394 lessThanEq __fn48__i __fn47__i
  609:  op add __fn48__gt __fn48__gt 1
        label __label394
  610:  goto __tmp309 marker19
        gotolabel __label391 marker19
  611:  op sub __tmp316 __fn48__gt __fn48__lt
  612:  op abs __fn48__dif __tmp316 0
  613:  set __tmp321 false
  614:  op add __tmp318 __fn48__gt __fn48__lt
  615:  jump __label397 lessThan __tmp318 0
  616:  op equal __tmp321 __fn48__gt __fn48__lt
        label __label397
  617:  jump __label398 equal __tmp321 false
  618:  set __tmp306 __fn47__i
  619:  jump __label365 always 0 0
        label __label398
  620:  jump __label400 greaterThanEq __fn48__dif __fn47__bestDif
  621:  set __fn47__bestDif __fn48__dif
  622:  set __fn47__best __fn47__i
  623:  set __fn47__count 1
  624:  goto __tmp307 marker18
        label __label400
  625:  jump __label402 greaterThan __fn48__dif __fn47__bestDif
  626:  op add __fn47__best __fn47__best __fn47__i
  627:  op add __fn47__count __fn47__count 1
        label __label402
  628:  goto __tmp307 marker18
        gotolabel __label377 marker18
  629:  op div __tmp306 __fn47__best __fn47__count
        label __label365
  630:  assertequals 5 __tmp306 "median(9,8,7,6,5,4,3,2,1)"
  631:  set __fn49__bestDif 10000000000
  632:  set __fn49__best null
  633:  set __fn49__count 1
  634:  setaddr __tmp332 __label409
  635:  set __fn49__i 1
  636:  jump __label407 always 0 0
        gotolabel __label409 marker20
  637:  setaddr __tmp332 __label410
  638:  set __fn49__i 3
  639:  jump __label407 always 0 0
        gotolabel __label410 marker20
  640:  setaddr __tmp332 __label411
  641:  set __fn49__i 5
  642:  jump __label407 always 0 0
        gotolabel __label411 marker20
  643:  setaddr __tmp332 __label412
  644:  set __fn49__i 7
  645:  jump __label407 always 0 0
        gotolabel __label412 marker20
  646:  setaddr __tmp332 __label413
  647:  set __fn49__i 9
  648:  jump __label407 always 0 0
        gotolabel __label413 marker20
  649:  setaddr __tmp332 __label414
  650:  set __fn49__i 2
  651:  jump __label407 always 0 0
        gotolabel __label414 marker20
  652:  setaddr __tmp332 __label415
  653:  set __fn49__i 4
  654:  jump __label407 always 0 0
        gotolabel __label415 marker20
  655:  setaddr __tmp332 __label416
  656:  set __fn49__i 6
  657:  jump __label407 always 0 0
        gotolabel __label416 marker20
  658:  setaddr __tmp332 __label417
  659:  set __fn49__i 8
        label __label407
  660:  set __fn50__gt 0
  661:  set __fn50__lt 0
  662:  setaddr __tmp334 __label423
  663:  set __fn50__i 1
  664:  jump __label421 always 0 0
        gotolabel __label423 marker21
  665:  setaddr __tmp334 __label424
  666:  set __fn50__i 3
  667:  jump __label421 always 0 0
        gotolabel __label424 marker21
  668:  setaddr __tmp334 __label425
  669:  set __fn50__i 5
  670:  jump __label421 always 0 0
        gotolabel __label425 marker21
  671:  setaddr __tmp334 __label426
  672:  set __fn50__i 7
  673:  jump __label421 always 0 0
        gotolabel __label426 marker21
  674:  setaddr __tmp334 __label427
  675:  set __fn50__i 9
  676:  jump __label421 always 0 0
        gotolabel __label427 marker21
  677:  setaddr __tmp334 __label428
  678:  set __fn50__i 2
  679:  jump __label421 always 0 0
        gotolabel __label428 marker21
  680:  setaddr __tmp334 __label429
  681:  set __fn50__i 4
  682:  jump __label421 always 0 0
        gotolabel __label429 marker21
  683:  setaddr __tmp334 __label430
  684:  set __fn50__i 6
  685:  jump __label421 always 0 0
        gotolabel __label430 marker21
  686:  setaddr __tmp334 __label431
  687:  set __fn50__i 8
        label __label421
  688:  jump __label432 greaterThanEq __fn50__i __fn49__i
  689:  op add __fn50__lt __fn50__lt 1
  690:  goto __tmp334 marker21
        label __label432
  691:  jump __label434 lessThanEq __fn50__i __fn49__i
  692:  op add __fn50__gt __fn50__gt 1
        label __label434
  693:  goto __tmp334 marker21
        gotolabel __label431 marker21
  694:  op sub __tmp341 __fn50__gt __fn50__lt
  695:  op abs __fn50__dif __tmp341 0
  696:  set __tmp346 false
  697:  op add __tmp343 __fn50__gt __fn50__lt
  698:  jump __label437 lessThan __tmp343 0
  699:  op equal __tmp346 __fn50__gt __fn50__lt
        label __label437
  700:  jump __label438 equal __tmp346 false
  701:  set __tmp331 __fn49__i
  702:  jump __label405 always 0 0
        label __label438
  703:  jump __label440 greaterThanEq __fn50__dif __fn49__bestDif
  704:  set __fn49__bestDif __fn50__dif
  705:  set __fn49__best __fn49__i
  706:  set __fn49__count 1
  707:  goto __tmp332 marker20
        label __label440
  708:  jump __label442 greaterThan __fn50__dif __fn49__bestDif
  709:  op add __fn49__best __fn49__best __fn49__i
  710:  op add __fn49__count __fn49__count 1
        label __label442
  711:  goto __tmp332 marker20
        gotolabel __label417 marker20
  712:  op div __tmp331 __fn49__best __fn49__count
        label __label405
  713:  assertequals 5 __tmp331 "median(1,3,5,7,9,2,4,6,8)"
  714:  set __fn51__bestDif 10000000000
  715:  set __fn51__best null
  716:  set __fn51__count 1
  717:  setaddr __tmp357 __label449
  718:  set __fn51__i 7
  719:  jump __label447 always 0 0
        gotolabel __label449 marker22
  720:  setaddr __tmp357 __label450
  721:  set __fn51__i 4
  722:  jump __label447 always 0 0
        gotolabel __label450 marker22
  723:  setaddr __tmp357 __label451
  724:  set __fn51__i 2
  725:  jump __label447 always 0 0
        gotolabel __label451 marker22
  726:  setaddr __tmp357 __label452
  727:  set __fn51__i 8
  728:  jump __label447 always 0 0
        gotolabel __label452 marker22
  729:  setaddr __tmp357 __label453
  730:  set __fn51__i 1
  731:  jump __label447 always 0 0
        gotolabel __label453 marker22
  732:  setaddr __tmp357 __label454
  733:  set __fn51__i 5
  734:  jump __label447 always 0 0
        gotolabel __label454 marker22
  735:  setaddr __tmp357 __label455
  736:  set __fn51__i 6
  737:  jump __label447 always 0 0
        gotolabel __label455 marker22
  738:  setaddr __tmp357 __label456
  739:  set __fn51__i 9
  740:  jump __label447 always 0 0
        gotolabel __label456 marker22
  741:  setaddr __tmp357 __label457
  742:  set __fn51__i 3
        label __label447
  743:  set __fn52__gt 0
  744:  set __fn52__lt 0
  745:  setaddr __tmp359 __label463
  746:  set __fn52__i 7
  747:  jump __label461 always 0 0
        gotolabel __label463 marker23
  748:  setaddr __tmp359 __label464
  749:  set __fn52__i 4
  750:  jump __label461 always 0 0
        gotolabel __label464 marker23
  751:  setaddr __tmp359 __label465
  752:  set __fn52__i 2
  753:  jump __label461 always 0 0
        gotolabel __label465 marker23
  754:  setaddr __tmp359 __label466
  755:  set __fn52__i 8
  756:  jump __label461 always 0 0
        gotolabel __label466 marker23
  757:  setaddr __tmp359 __label467
  758:  set __fn52__i 1
  759:  jump __label461 always 0 0
        gotolabel __label467 marker23
  760:  setaddr __tmp359 __label468
  761:  set __fn52__i 5
  762:  jump __label461 always 0 0
        gotolabel __label468 marker23
  763:  setaddr __tmp359 __label469
  764:  set __fn52__i 6
  765:  jump __label461 always 0 0
        gotolabel __label469 marker23
  766:  setaddr __tmp359 __label470
  767:  set __fn52__i 9
  768:  jump __label461 always 0 0
        gotolabel __label470 marker23
  769:  setaddr __tmp359 __label471
  770:  set __fn52__i 3
        label __label461
  771:  jump __label472 greaterThanEq __fn52__i __fn51__i
  772:  op add __fn52__lt __fn52__lt 1
  773:  goto __tmp359 marker23
        label __label472
  774:  jump __label474 lessThanEq __fn52__i __fn51__i
  775:  op add __fn52__gt __fn52__gt 1
        label __label474
  776:  goto __tmp359 marker23
        gotolabel __label471 marker23
  777:  op sub __tmp366 __fn52__gt __fn52__lt
  778:  op abs __fn52__dif __tmp366 0
  779:  set __tmp371 false
  780:  op add __tmp368 __fn52__gt __fn52__lt
  781:  jump __label477 lessThan __tmp368 0
  782:  op equal __tmp371 __fn52__gt __fn52__lt
        label __label477
  783:  jump __label478 equal __tmp371 false
  784:  set __tmp356 __fn51__i
  785:  jump __label445 always 0 0
        label __label478
  786:  jump __label480 greaterThanEq __fn52__dif __fn51__bestDif
  787:  set __fn51__bestDif __fn52__dif
  788:  set __fn51__best __fn51__i
  789:  set __fn51__count 1
  790:  goto __tmp357 marker22
        label __label480
  791:  jump __label482 greaterThan __fn52__dif __fn51__bestDif
  792:  op add __fn51__best __fn51__best __fn51__i
  793:  op add __fn51__count __fn51__count 1
        label __label482
  794:  goto __tmp357 marker22
        gotolabel __label457 marker22
  795:  op div __tmp356 __fn51__best __fn51__count
        label __label445
  796:  assertequals 5 __tmp356 "median(7,4,2,8,1,5,6,9,3)"
  797:  set __fn53__bestDif 10000000000
  798:  set __fn53__best null
  799:  set __fn53__count 1
  800:  setaddr __tmp382 __label489
  801:  set __fn53__i 1
  802:  jump __label487 always 0 0
        gotolabel __label489 marker24
  803:  setaddr __tmp382 __label490
  804:  set __fn53__i 1
  805:  jump __label487 always 0 0
        gotolabel __label490 marker24
  806:  setaddr __tmp382 __label491
  807:  set __fn53__i 1
  808:  jump __label487 always 0 0
        gotolabel __label491 marker24
  809:  setaddr __tmp382 __label492
  810:  set __fn53__i 1
  811:  jump __label487 always 0 0
        gotolabel __label492 marker24
  812:  setaddr __tmp382 __label493
  813:  set __fn53__i 9
  814:  jump __label487 always 0 0
        gotolabel __label493 marker24
  815:  setaddr __tmp382 __label494
  816:  set __fn53__i 9
  817:  jump __label487 always 0 0
        gotolabel __label494 marker24
  818:  setaddr __tmp382 __label495
  819:  set __fn53__i 9
  820:  jump __label487 always 0 0
        gotolabel __label495 marker24
  821:  setaddr __tmp382 __label496
  822:  set __fn53__i 9
  823:  jump __label487 always 0 0
        gotolabel __label496 marker24
  824:  setaddr __tmp382 __label497
  825:  set __fn53__i 5
        label __label487
  826:  set __fn54__gt 0
  827:  set __fn54__lt 0
  828:  setaddr __tmp384 __label503
  829:  set __fn54__i 1
  830:  jump __label501 always 0 0
        gotolabel __label503 marker25
  831:  setaddr __tmp384 __label504
  832:  set __fn54__i 1
  833:  jump __label501 always 0 0
        gotolabel __label504 marker25
  834:  setaddr __tmp384 __label505
  835:  set __fn54__i 1
  836:  jump __label501 always 0 0
        gotolabel __label505 marker25
  837:  setaddr __tmp384 __label506
  838:  set __fn54__i 1
  839:  jump __label501 always 0 0
        gotolabel __label506 marker25
  840:  setaddr __tmp384 __label507
  841:  set __fn54__i 9
  842:  jump __label501 always 0 0
        gotolabel __label507 marker25
  843:  setaddr __tmp384 __label508
  844:  set __fn54__i 9
  845:  jump __label501 always 0 0
        gotolabel __label508 marker25
  846:  setaddr __tmp384 __label509
  847:  set __fn54__i 9
  848:  jump __label501 always 0 0
        gotolabel __label509 marker25
  849:  setaddr __tmp384 __label510
  850:  set __fn54__i 9
  851:  jump __label501 always 0 0
        gotolabel __label510 marker25
  852:  setaddr __tmp384 __label511
  853:  set __fn54__i 5
        label __label501
  854:  jump __label512 greaterThanEq __fn54__i __fn53__i
  855:  op add __fn54__lt __fn54__lt 1
  856:  goto __tmp384 marker25
        label __label512
  857:  jump __label514 lessThanEq __fn54__i __fn53__i
  858:  op add __fn54__gt __fn54__gt 1
        label __label514
  859:  goto __tmp384 marker25
        gotolabel __label511 marker25
  860:  op sub __tmp391 __fn54__gt __fn54__lt
  861:  op abs __fn54__dif __tmp391 0
  862:  set __tmp396 false
  863:  op add __tmp393 __fn54__gt __fn54__lt
  864:  jump __label517 lessThan __tmp393 0
  865:  op equal __tmp396 __fn54__gt __fn54__lt
        label __label517
  866:  jump __label518 equal __tmp396 false
  867:  set __tmp381 __fn53__i
  868:  jump __label485 always 0 0
        label __label518
  869:  jump __label520 greaterThanEq __fn54__dif __fn53__bestDif
  870:  set __fn53__bestDif __fn54__dif
  871:  set __fn53__best __fn53__i
  872:  set __fn53__count 1
  873:  goto __tmp382 marker24
        label __label520
  874:  jump __label522 greaterThan __fn54__dif __fn53__bestDif
  875:  op add __fn53__best __fn53__best __fn53__i
  876:  op add __fn53__count __fn53__count 1
        label __label522
  877:  goto __tmp382 marker24
        gotolabel __label497 marker24
  878:  op div __tmp381 __fn53__best __fn53__count
        label __label485
  879:  assertequals 5 __tmp381 "median(1,1,1,1,9,9,9,9,5)"
  880:  end
        label __label1
  881:  op max __fn1__y2 __fn1__x1 __fn1__x2
  882:  op min __fn1__y3 __fn1__x3 __fn1__x4
  883:  jump __label530 greaterThan __fn1__y2 __fn1__y3
  884:  op add __tmp414 __fn1__y2 __fn1__y3
  885:  op div __fn1retval __tmp414 2
  886:  goto __fn1retaddr __fn1
        label __label530
  887:  op min __fn1__y1 __fn1__x1 __fn1__x2
  888:  op max __fn1__y4 __fn1__x3 __fn1__x4
  889:  jump __label532 lessThan __fn1__y1 __fn1__y4
  890:  op add __tmp420 __fn1__y1 __fn1__y4
  891:  op div __fn1retval __tmp420 2
  892:  goto __fn1retaddr __fn1
        label __label532
  893:  op max __tmp422 __fn1__y1 __fn1__y3
  894:  op min __tmp423 __fn1__y2 __fn1__y4
  895:  op add __tmp424 __tmp422 __tmp423
  896:  op div __fn1retval __tmp424 2
  897:  goto __fn1retaddr __fn1
        label __label2
  898:  op min __fn2__y1 __fn2__x1 __fn2__x2
  899:  op max __fn2__y2 __fn2__x1 __fn2__x2
  900:  op min __fn2__y4 __fn2__x4 __fn2__x5
  901:  op max __fn2__y5 __fn2__x4 __fn2__x5
  902:  jump __label535 greaterThanEq __fn2__y4 __fn2__y1
  903:  set __fn2__y4 __fn2__y1
  904:  set __fn56__t __fn2__y2
  905:  set __fn2__y2 __fn2__y5
  906:  set __fn2__y5 __fn56__t
        label __label535
  907:  jump __label541 lessThanEq __fn2__x3 __fn2__y2
  908:  op min __fn2retval __fn2__y2 __fn2__y5
  909:  jump __label542 greaterThanEq __fn2__y2 __fn2__y4
  910:  op min __fn2retval __fn2__x3 __fn2__y4
  911:  goto __fn2retaddr __fn2
        label __label541
  912:  op min __fn2retval __fn2__y2 __fn2__y4
  913:  jump __label546 lessThanEq __fn2__x3 __fn2__y4
  914:  op min __fn2retval __fn2__x3 __fn2__y5
        label __label546
        label __label542
  915:  goto __fn2retaddr __fn2
