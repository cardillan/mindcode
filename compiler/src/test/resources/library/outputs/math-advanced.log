  1671 instructions before optimizations.
    81 instructions eliminated by Temp Variables Elimination.
   124 instructions eliminated by Dead Code Elimination (4 iterations).
    28 instructions modified by Jump Normalization (5 iterations).
    68 instructions eliminated by Jump Optimization (5 iterations).
    92 instructions eliminated by Single Step Elimination (3 passes, 10 iterations).
     4 instructions modified by Expression Optimization (4 iterations).
     8 instructions eliminated by If Expression Optimization (4 iterations).
   336 instructions eliminated by Data Flow Optimization (6 passes, 24 iterations).
    35 instructions added by Loop Unrolling (10 iterations).
     6 loops unrolled by Loop Unrolling.
    34 instructions updated by JumpThreading.
     5 instructions eliminated by Unreachable Code Elimination.
   992 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:111:5                         cost     0, benefit        7.0, efficiency   Infinity (-8 instructions)
    Unroll iteration loop at *math:123:5                         cost     0, benefit        7.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
    Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
    Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 17:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  * Unroll iteration loop at *math:123:5                         cost     0, benefit        7.0, efficiency   Infinity (-9 instructions)
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
    Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
    Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 17:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
  * Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
    Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 17:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:218:5                         cost   163, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   145, benefit       23.0, efficiency        0.2
  * Unroll iteration loop at *math:236:5                         cost     0, benefit      575.0, efficiency   Infinity (+3 instructions)
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 17:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 1: speed optimization selection (cost limit 0):
  ! Unroll iteration loop at *math:218:5                         cost   163, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   235, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   163, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   433, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    14, benefit       14.0, efficiency        1.0
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   125, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 15:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 16:17                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 17:18                           cost     5, benefit        3.5, efficiency        0.7
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    18, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    18, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 21):
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  * Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5 (+13 instructions)
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
    Inline function 'sign' defined at *math:41:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 17:18                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
    Inline function call at line 55:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 56:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 57:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 58:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 59:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 60:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 61:17                           cost    16, benefit        5.5, efficiency        0.3
    Inline function call at line 62:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 8):
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  * Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1 (+7 instructions)
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
    Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   111, benefit       44.0, efficiency        0.4
    Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 16:17                           cost     4, benefit        3.5, efficiency        0.9
    Inline function call at line 17:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 2: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   271, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 16:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 17:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 3: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   271, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 16:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 17:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    16, benefit        5.5, efficiency        0.3

Pass 4: speed optimization selection (cost limit 1):
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   271, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost   229, benefit       23.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost     7, benefit      575.0, efficiency       82.1
  ! Unroll iteration loop at *math:218:5                         cost    37, benefit       23.0, efficiency        0.6
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Unroll iteration loop at *math:218:5                         cost   424, benefit       35.0, efficiency        0.1
  ! Unroll iteration loop at *math:236:5                         cost    10, benefit      875.0, efficiency       87.5
  ! Inline function 'sign' defined at *math:41:1                 cost    11, benefit       14.0, efficiency        1.3
  ! Inline function 'median' defined at *math:162:1              cost    59, benefit       25.0, efficiency        0.4
  ! Inline function 'median' defined at *math:179:1              cost   111, benefit       44.0, efficiency        0.4
  ! Inline function call at line 14:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 15:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 16:17                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 17:18                           cost     4, benefit        3.5, efficiency        0.9
  ! Inline function call at line 50:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 51:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 52:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 53:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 54:17                           cost    15, benefit        5.0, efficiency        0.3
  ! Inline function call at line 55:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 56:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 57:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 58:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 59:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 60:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 61:17                           cost    16, benefit        5.5, efficiency        0.3
  ! Inline function call at line 62:17                           cost    16, benefit        5.5, efficiency        0.3

Final code before resolving virtual instructions:

    0:  assertequals 5 5 "distance(1,1,4,5)"
    1:  assertequals 5 5 "distance(-1,-1,-4,-5)"
    2:  assertequals 2 2 "round(1.5)"
    3:  assertequals 2 2 "round(1.7)"
    4:  assertequals 2 2 "round(2.1)"
    5:  assertequals 3 3 "round(2.5)"
    6:  assertequals -3 -3 "round(-3.5)"
    7:  assertequals 0.5 0.5 "frac(3.5)"
    8:  assertequals -0.5 -0.5 "frac(-1.5)"
    9:  set :fn0:x 0
   10:  setaddr :fn0*retaddr *label12
   11:  call *label0 :fn0*retval
        label *label12
   12:  assertequals 0 :fn0*retval "sign(0)"
   13:  set :fn0:x 0.0000001
   14:  setaddr :fn0*retaddr *label13
   15:  call *label0 :fn0*retval
        label *label13
   16:  assertequals 0 :fn0*retval "sign(1e-7)"
   17:  set :fn0:x 0.00001
   18:  setaddr :fn0*retaddr *label14
   19:  call *label0 :fn0*retval
        label *label14
   20:  assertequals 1 :fn0*retval "sign(1e-5)"
   21:  set :fn0:x -5
   22:  setaddr :fn0*retaddr *label15
   23:  call *label0 :fn0*retval
        label *label15
   24:  assertequals -1 :fn0*retval "sign(-5)"
   25:  assertequals 0 0 "signExact(0)"
   26:  assertequals 1 1 "signExact(1e-7)"
   27:  assertequals -1 -1 "signExact(-1e-7)"
   28:  assertequals true true "isZero(0)"
   29:  assertequals false false "isZero(1e-50)"
   30:  assertequals false false "isZero(-1e-50)"
   31:  assertequals false false "isZero(0.01,0.01)"
   32:  op add :fn19:result null 0
   33:  assertequals 0 :fn19:result "nullToZero(null)"
   34:  op add :fn20:result 1 0
   35:  assertequals 1 :fn20:result "nullToZero(1)"
   36:  assertequals 0 false "boolean(0)"
   37:  assertequals 1 true "boolean(100)"
   38:  assertequals 1 true "boolean(-100)"
   39:  assertequals 1 true "boolean(-0.001)"
   40:  assertequals 0 false "boolean(0.0000001)"
   41:  op or :fn26:result 0.9 0
   42:  assertequals 0 :fn26:result "integer(0.9)"
   43:  op or :fn27:result -5.9 0
   44:  assertequals -5 :fn27:result "integer(-5.9)"
   45:  op or :fn28:result 100 0
   46:  assertequals 100 :fn28:result "integer(100)"
   47:  assertequals 1 1 "sum(1)"
   48:  assertequals 10 10 "sum(1,2,3,4)"
   49:  assertequals 1 1 "avg(1)"
   50:  assertequals 2.5 2.5 "avg(1,2,3,4)"
   51:  assertequals 4 4 "log2(16)"
   52:  assertequals 30 30 "log2(1 << 30)"
   53:  assertequals 1 1 "lerp(1, 10, 0)"
   54:  assertequals 10 10 "lerp(1, 10, 1)"
   55:  assertequals 5.5 5.5 "lerp(1, 10, 0.5)"
   56:  assertequals 1 1 "median(1)"
   57:  assertequals 3 3 "median(2,4)"
   58:  assertequals 3 3 "median(1,3,5)"
   59:  assertequals 1 1 "median(1,1,1)"
   60:  assertequals 1 1 "median(1,1,3)"
   61:  assertequals 3 3 "median(1,3,3)"
   62:  set :fn1:x1 2
   63:  set :fn1:x2 4
   64:  set :fn1:x3 6
   65:  set :fn1:x4 8
   66:  setaddr :fn1*retaddr *label58
   67:  call *label1 :fn1*retval
        label *label58
   68:  assertequals 5 :fn1*retval "median(2,4,6,8)"
   69:  set :fn1:x1 8
   70:  set :fn1:x2 6
   71:  set :fn1:x3 4
   72:  set :fn1:x4 2
   73:  setaddr :fn1*retaddr *label59
   74:  call *label1 :fn1*retval
        label *label59
   75:  assertequals 5 :fn1*retval "median(8,6,4,2)"
   76:  set :fn1:x1 4
   77:  set :fn1:x2 8
   78:  set :fn1:x3 2
   79:  set :fn1:x4 6
   80:  setaddr :fn1*retaddr *label60
   81:  call *label1 :fn1*retval
        label *label60
   82:  assertequals 5 :fn1*retval "median(4,8,2,6)"
   83:  set :fn1:x1 2
   84:  set :fn1:x2 6
   85:  set :fn1:x3 4
   86:  set :fn1:x4 8
   87:  setaddr :fn1*retaddr *label61
   88:  call *label1 :fn1*retval
        label *label61
   89:  assertequals 5 :fn1*retval "median(2,6,4,8)"
   90:  set :fn1:x1 6
   91:  set :fn1:x2 2
   92:  set :fn1:x3 8
   93:  set :fn1:x4 4
   94:  setaddr :fn1*retaddr *label62
   95:  call *label1 :fn1*retval
        label *label62
   96:  assertequals 5 :fn1*retval "median(6,2,8,4)"
   97:  set :fn2:x1 1
   98:  set :fn2:x2 2
   99:  set :fn2:x3 3
  100:  set :fn2:x4 4
  101:  set :fn2:x5 5
  102:  setaddr :fn2*retaddr *label63
  103:  call *label2 :fn2*retval
        label *label63
  104:  assertequals 3 :fn2*retval "median(1,2,3,4,5)"
  105:  set :fn2:x1 5
  106:  set :fn2:x2 4
  107:  set :fn2:x4 2
  108:  set :fn2:x5 1
  109:  setaddr :fn2*retaddr *label64
  110:  call *label2 :fn2*retval
        label *label64
  111:  assertequals 3 :fn2*retval "median(5,4,3,2,1)"
  112:  set :fn2:x1 1
  113:  set :fn2:x2 1
  114:  set :fn2:x3 1
  115:  set :fn2:x4 1
  116:  setaddr :fn2*retaddr *label65
  117:  call *label2 :fn2*retval
        label *label65
  118:  assertequals 1 :fn2*retval "median(1,1,1,1,1)"
  119:  set :fn2:x5 5
  120:  setaddr :fn2*retaddr *label66
  121:  call *label2 :fn2*retval
        label *label66
  122:  assertequals 1 :fn2*retval "median(1,1,1,1,5)"
  123:  set :fn2:x4 5
  124:  setaddr :fn2*retaddr *label67
  125:  call *label2 :fn2*retval
        label *label67
  126:  assertequals 1 :fn2*retval "median(1,1,1,5,5)"
  127:  set :fn2:x3 5
  128:  setaddr :fn2*retaddr *label68
  129:  call *label2 :fn2*retval
        label *label68
  130:  assertequals 5 :fn2*retval "median(1,1,5,5,5)"
  131:  set :fn2:x2 5
  132:  setaddr :fn2*retaddr *label69
  133:  call *label2 :fn2*retval
        label *label69
  134:  assertequals 5 :fn2*retval "median(1,5,5,5,5)"
  135:  set :fn2:x1 5
  136:  setaddr :fn2*retaddr *label70
  137:  call *label2 :fn2*retval
        label *label70
  138:  assertequals 5 :fn2*retval "median(5,5,5,5,5)"
  139:  set :fn45:bestDif 10000000000
  140:  set :fn45:best null
  141:  set :fn45:count 1
  142:  setaddr *tmp140 *label76
  143:  jump *label98 always 0 0
        multilabel *label76 marker2
  144:  setaddr *tmp140 *label77
  145:  jump *label98 always 0 0
        multilabel *label77 marker2
  146:  setaddr *tmp140 *label78
  147:  jump *label98 always 0 0
        multilabel *label78 marker2
  148:  setaddr *tmp140 *label79
  149:  jump *label98 always 0 0
        multilabel *label79 marker2
  150:  setaddr *tmp140 *label80
  151:  jump *label98 always 0 0
        multilabel *label80 marker2
  152:  setaddr *tmp140 *label81
        label *label98
  153:  jump *label100 greaterThanEq 0 :fn45:bestDif
  154:  set :fn45:bestDif 0
  155:  set :fn45:best 1
  156:  set :fn45:count 1
  157:  multijump *tmp140 0 0 marker2
        label *label100
  158:  jump *label102 greaterThan 0 :fn45:bestDif
  159:  op add :fn45:best :fn45:best 1
  160:  op add :fn45:count :fn45:count 1
        label *label102
  161:  multijump *tmp140 0 0 marker2
        multilabel *label81 marker2
  162:  op div *tmp139 :fn45:best :fn45:count
  163:  assertequals 1 *tmp139 "median(1,1,1,1,1,1)"
  164:  set :fn48:bestDif 10000000000
  165:  set :fn48:best null
  166:  set :fn48:count 1
  167:  setaddr *tmp162 *label109
  168:  set :fn48:i 1
  169:  jump *label106 always 0 0
        multilabel *label109 marker4
  170:  setaddr *tmp162 *label110
  171:  set :fn48:i 1
  172:  jump *label106 always 0 0
        multilabel *label110 marker4
  173:  setaddr *tmp162 *label111
  174:  set :fn48:i 1
  175:  jump *label106 always 0 0
        multilabel *label111 marker4
  176:  setaddr *tmp162 *label112
  177:  set :fn48:i 1
  178:  jump *label106 always 0 0
        multilabel *label112 marker4
  179:  setaddr *tmp162 *label113
  180:  set :fn48:i 1
  181:  jump *label106 always 0 0
        multilabel *label113 marker4
  182:  setaddr *tmp162 *label114
  183:  set :fn48:i 5
        label *label106
  184:  set :fn49:lt 0
  185:  set :fn49:gt 0
  186:  jump *label709 greaterThanEq 1 :fn48:i
  187:  set :fn49:lt 1
  188:  jump *label712 always 0 0
        label *label709
  189:  jump *label710 lessThanEq 1 :fn48:i
  190:  set :fn49:gt 1
        label *label710
        label *label712
  191:  jump *label717 greaterThanEq 1 :fn48:i
  192:  op add :fn49:lt :fn49:lt 1
  193:  jump *label720 always 0 0
        label *label717
  194:  jump *label718 lessThanEq 1 :fn48:i
  195:  op add :fn49:gt :fn49:gt 1
        label *label718
        label *label720
  196:  jump *label725 greaterThanEq 1 :fn48:i
  197:  op add :fn49:lt :fn49:lt 1
  198:  jump *label728 always 0 0
        label *label725
  199:  jump *label726 lessThanEq 1 :fn48:i
  200:  op add :fn49:gt :fn49:gt 1
        label *label726
        label *label728
  201:  jump *label733 greaterThanEq 1 :fn48:i
  202:  op add :fn49:lt :fn49:lt 1
  203:  jump *label736 always 0 0
        label *label733
  204:  jump *label734 lessThanEq 1 :fn48:i
  205:  op add :fn49:gt :fn49:gt 1
        label *label734
        label *label736
  206:  jump *label741 greaterThanEq 1 :fn48:i
  207:  op add :fn49:lt :fn49:lt 1
  208:  jump *label744 always 0 0
        label *label741
  209:  jump *label742 lessThanEq 1 :fn48:i
  210:  op add :fn49:gt :fn49:gt 1
        label *label742
        label *label744
  211:  jump *label749 greaterThanEq 5 :fn48:i
  212:  op add :fn49:lt :fn49:lt 1
  213:  jump *label752 always 0 0
        label *label749
  214:  jump *label750 lessThanEq 5 :fn48:i
  215:  op add :fn49:gt :fn49:gt 1
        label *label750
        label *label752
  216:  op sub *tmp169 :fn49:gt :fn49:lt
  217:  op abs :fn49:dif *tmp169 0
  218:  set *tmp174 false
  219:  op add *tmp171 :fn49:gt :fn49:lt
  220:  jump *label130 lessThan *tmp171 5
  221:  op equal *tmp174 :fn49:gt :fn49:lt
        label *label130
  222:  jump *label131 equal *tmp174 false
  223:  set *tmp161 :fn48:i
  224:  jump *label105 always 0 0
        label *label131
  225:  jump *label133 greaterThanEq :fn49:dif :fn48:bestDif
  226:  set :fn48:bestDif :fn49:dif
  227:  set :fn48:best :fn48:i
  228:  set :fn48:count 1
  229:  multijump *tmp162 0 0 marker4
        label *label133
  230:  jump *label135 greaterThan :fn49:dif :fn48:bestDif
  231:  op add :fn48:best :fn48:best :fn48:i
  232:  op add :fn48:count :fn48:count 1
        label *label135
  233:  multijump *tmp162 0 0 marker4
        multilabel *label114 marker4
  234:  op div *tmp161 :fn48:best :fn48:count
        label *label105
  235:  assertequals 1 *tmp161 "median(1,1,1,1,1,5)"
  236:  set :fn51:bestDif 10000000000
  237:  set :fn51:best null
  238:  set :fn51:count 1
  239:  setaddr *tmp184 *label142
  240:  set :fn51:i 1
  241:  jump *label139 always 0 0
        multilabel *label142 marker6
  242:  setaddr *tmp184 *label143
  243:  set :fn51:i 1
  244:  jump *label139 always 0 0
        multilabel *label143 marker6
  245:  setaddr *tmp184 *label144
  246:  set :fn51:i 1
  247:  jump *label139 always 0 0
        multilabel *label144 marker6
  248:  setaddr *tmp184 *label145
  249:  set :fn51:i 1
  250:  jump *label139 always 0 0
        multilabel *label145 marker6
  251:  setaddr *tmp184 *label146
  252:  set :fn51:i 5
  253:  jump *label139 always 0 0
        multilabel *label146 marker6
  254:  setaddr *tmp184 *label147
  255:  set :fn51:i 5
        label *label139
  256:  set :fn52:lt 0
  257:  set :fn52:gt 0
  258:  setaddr *tmp186 *label152
  259:  set :fn52:i 1
  260:  jump *label149 always 0 0
        multilabel *label152 marker7
  261:  setaddr *tmp186 *label153
  262:  set :fn52:i 1
  263:  jump *label149 always 0 0
        multilabel *label153 marker7
  264:  setaddr *tmp186 *label154
  265:  set :fn52:i 1
  266:  jump *label149 always 0 0
        multilabel *label154 marker7
  267:  setaddr *tmp186 *label155
  268:  set :fn52:i 1
  269:  jump *label149 always 0 0
        multilabel *label155 marker7
  270:  setaddr *tmp186 *label156
  271:  set :fn52:i 5
  272:  jump *label149 always 0 0
        multilabel *label156 marker7
  273:  setaddr *tmp186 *label157
  274:  set :fn52:i 5
        label *label149
  275:  jump *label158 greaterThanEq :fn52:i :fn51:i
  276:  op add :fn52:lt :fn52:lt 1
  277:  multijump *tmp186 0 0 marker7
        label *label158
  278:  jump *label160 lessThanEq :fn52:i :fn51:i
  279:  op add :fn52:gt :fn52:gt 1
        label *label160
  280:  multijump *tmp186 0 0 marker7
        multilabel *label157 marker7
  281:  op sub *tmp191 :fn52:gt :fn52:lt
  282:  op abs :fn52:dif *tmp191 0
  283:  set *tmp196 false
  284:  op add *tmp193 :fn52:gt :fn52:lt
  285:  jump *label163 lessThan *tmp193 5
  286:  op equal *tmp196 :fn52:gt :fn52:lt
        label *label163
  287:  jump *label164 equal *tmp196 false
  288:  set *tmp183 :fn51:i
  289:  jump *label138 always 0 0
        label *label164
  290:  jump *label166 greaterThanEq :fn52:dif :fn51:bestDif
  291:  set :fn51:bestDif :fn52:dif
  292:  set :fn51:best :fn51:i
  293:  set :fn51:count 1
  294:  multijump *tmp184 0 0 marker6
        label *label166
  295:  jump *label168 greaterThan :fn52:dif :fn51:bestDif
  296:  op add :fn51:best :fn51:best :fn51:i
  297:  op add :fn51:count :fn51:count 1
        label *label168
  298:  multijump *tmp184 0 0 marker6
        multilabel *label147 marker6
  299:  op div *tmp183 :fn51:best :fn51:count
        label *label138
  300:  assertequals 1 *tmp183 "median(1,1,1,1,5,5)"
  301:  set :fn54:bestDif 10000000000
  302:  set :fn54:best null
  303:  set :fn54:count 1
  304:  setaddr *tmp206 *label175
  305:  set :fn54:i 1
  306:  jump *label172 always 0 0
        multilabel *label175 marker8
  307:  setaddr *tmp206 *label176
  308:  set :fn54:i 1
  309:  jump *label172 always 0 0
        multilabel *label176 marker8
  310:  setaddr *tmp206 *label177
  311:  set :fn54:i 1
  312:  jump *label172 always 0 0
        multilabel *label177 marker8
  313:  setaddr *tmp206 *label178
  314:  set :fn54:i 5
  315:  jump *label172 always 0 0
        multilabel *label178 marker8
  316:  setaddr *tmp206 *label179
  317:  set :fn54:i 5
  318:  jump *label172 always 0 0
        multilabel *label179 marker8
  319:  setaddr *tmp206 *label180
  320:  set :fn54:i 5
        label *label172
  321:  set :fn55:lt 0
  322:  set :fn55:gt 0
  323:  setaddr *tmp208 *label185
  324:  set :fn55:i 1
  325:  jump *label182 always 0 0
        multilabel *label185 marker9
  326:  setaddr *tmp208 *label186
  327:  set :fn55:i 1
  328:  jump *label182 always 0 0
        multilabel *label186 marker9
  329:  setaddr *tmp208 *label187
  330:  set :fn55:i 1
  331:  jump *label182 always 0 0
        multilabel *label187 marker9
  332:  setaddr *tmp208 *label188
  333:  set :fn55:i 5
  334:  jump *label182 always 0 0
        multilabel *label188 marker9
  335:  setaddr *tmp208 *label189
  336:  set :fn55:i 5
  337:  jump *label182 always 0 0
        multilabel *label189 marker9
  338:  setaddr *tmp208 *label190
  339:  set :fn55:i 5
        label *label182
  340:  jump *label191 greaterThanEq :fn55:i :fn54:i
  341:  op add :fn55:lt :fn55:lt 1
  342:  multijump *tmp208 0 0 marker9
        label *label191
  343:  jump *label193 lessThanEq :fn55:i :fn54:i
  344:  op add :fn55:gt :fn55:gt 1
        label *label193
  345:  multijump *tmp208 0 0 marker9
        multilabel *label190 marker9
  346:  op sub *tmp213 :fn55:gt :fn55:lt
  347:  op abs :fn55:dif *tmp213 0
  348:  set *tmp218 false
  349:  op add *tmp215 :fn55:gt :fn55:lt
  350:  jump *label196 lessThan *tmp215 5
  351:  op equal *tmp218 :fn55:gt :fn55:lt
        label *label196
  352:  jump *label197 equal *tmp218 false
  353:  set *tmp205 :fn54:i
  354:  jump *label171 always 0 0
        label *label197
  355:  jump *label199 greaterThanEq :fn55:dif :fn54:bestDif
  356:  set :fn54:bestDif :fn55:dif
  357:  set :fn54:best :fn54:i
  358:  set :fn54:count 1
  359:  multijump *tmp206 0 0 marker8
        label *label199
  360:  jump *label201 greaterThan :fn55:dif :fn54:bestDif
  361:  op add :fn54:best :fn54:best :fn54:i
  362:  op add :fn54:count :fn54:count 1
        label *label201
  363:  multijump *tmp206 0 0 marker8
        multilabel *label180 marker8
  364:  op div *tmp205 :fn54:best :fn54:count
        label *label171
  365:  assertequals 3 *tmp205 "median(1,1,1,5,5,5)"
  366:  set :fn57:bestDif 10000000000
  367:  set :fn57:best null
  368:  set :fn57:count 1
  369:  setaddr *tmp228 *label208
  370:  set :fn57:i 1
  371:  jump *label205 always 0 0
        multilabel *label208 marker10
  372:  setaddr *tmp228 *label209
  373:  set :fn57:i 1
  374:  jump *label205 always 0 0
        multilabel *label209 marker10
  375:  setaddr *tmp228 *label210
  376:  set :fn57:i 5
  377:  jump *label205 always 0 0
        multilabel *label210 marker10
  378:  setaddr *tmp228 *label211
  379:  set :fn57:i 5
  380:  jump *label205 always 0 0
        multilabel *label211 marker10
  381:  setaddr *tmp228 *label212
  382:  set :fn57:i 5
  383:  jump *label205 always 0 0
        multilabel *label212 marker10
  384:  setaddr *tmp228 *label213
  385:  set :fn57:i 5
        label *label205
  386:  set :fn58:lt 0
  387:  set :fn58:gt 0
  388:  setaddr *tmp230 *label218
  389:  set :fn58:i 1
  390:  jump *label215 always 0 0
        multilabel *label218 marker11
  391:  setaddr *tmp230 *label219
  392:  set :fn58:i 1
  393:  jump *label215 always 0 0
        multilabel *label219 marker11
  394:  setaddr *tmp230 *label220
  395:  set :fn58:i 5
  396:  jump *label215 always 0 0
        multilabel *label220 marker11
  397:  setaddr *tmp230 *label221
  398:  set :fn58:i 5
  399:  jump *label215 always 0 0
        multilabel *label221 marker11
  400:  setaddr *tmp230 *label222
  401:  set :fn58:i 5
  402:  jump *label215 always 0 0
        multilabel *label222 marker11
  403:  setaddr *tmp230 *label223
  404:  set :fn58:i 5
        label *label215
  405:  jump *label224 greaterThanEq :fn58:i :fn57:i
  406:  op add :fn58:lt :fn58:lt 1
  407:  multijump *tmp230 0 0 marker11
        label *label224
  408:  jump *label226 lessThanEq :fn58:i :fn57:i
  409:  op add :fn58:gt :fn58:gt 1
        label *label226
  410:  multijump *tmp230 0 0 marker11
        multilabel *label223 marker11
  411:  op sub *tmp235 :fn58:gt :fn58:lt
  412:  op abs :fn58:dif *tmp235 0
  413:  set *tmp240 false
  414:  op add *tmp237 :fn58:gt :fn58:lt
  415:  jump *label229 lessThan *tmp237 5
  416:  op equal *tmp240 :fn58:gt :fn58:lt
        label *label229
  417:  jump *label230 equal *tmp240 false
  418:  set *tmp227 :fn57:i
  419:  jump *label204 always 0 0
        label *label230
  420:  jump *label232 greaterThanEq :fn58:dif :fn57:bestDif
  421:  set :fn57:bestDif :fn58:dif
  422:  set :fn57:best :fn57:i
  423:  set :fn57:count 1
  424:  multijump *tmp228 0 0 marker10
        label *label232
  425:  jump *label234 greaterThan :fn58:dif :fn57:bestDif
  426:  op add :fn57:best :fn57:best :fn57:i
  427:  op add :fn57:count :fn57:count 1
        label *label234
  428:  multijump *tmp228 0 0 marker10
        multilabel *label213 marker10
  429:  op div *tmp227 :fn57:best :fn57:count
        label *label204
  430:  assertequals 5 *tmp227 "median(1,1,5,5,5,5)"
  431:  set :fn60:bestDif 10000000000
  432:  set :fn60:best null
  433:  set :fn60:count 1
  434:  setaddr *tmp250 *label241
  435:  set :fn60:i 1
  436:  jump *label238 always 0 0
        multilabel *label241 marker12
  437:  setaddr *tmp250 *label242
  438:  set :fn60:i 5
  439:  jump *label238 always 0 0
        multilabel *label242 marker12
  440:  setaddr *tmp250 *label243
  441:  set :fn60:i 5
  442:  jump *label238 always 0 0
        multilabel *label243 marker12
  443:  setaddr *tmp250 *label244
  444:  set :fn60:i 5
  445:  jump *label238 always 0 0
        multilabel *label244 marker12
  446:  setaddr *tmp250 *label245
  447:  set :fn60:i 5
  448:  jump *label238 always 0 0
        multilabel *label245 marker12
  449:  setaddr *tmp250 *label246
  450:  set :fn60:i 5
        label *label238
  451:  set :fn61:lt 0
  452:  set :fn61:gt 0
  453:  setaddr *tmp252 *label251
  454:  set :fn61:i 1
  455:  jump *label248 always 0 0
        multilabel *label251 marker13
  456:  setaddr *tmp252 *label252
  457:  set :fn61:i 5
  458:  jump *label248 always 0 0
        multilabel *label252 marker13
  459:  setaddr *tmp252 *label253
  460:  set :fn61:i 5
  461:  jump *label248 always 0 0
        multilabel *label253 marker13
  462:  setaddr *tmp252 *label254
  463:  set :fn61:i 5
  464:  jump *label248 always 0 0
        multilabel *label254 marker13
  465:  setaddr *tmp252 *label255
  466:  set :fn61:i 5
  467:  jump *label248 always 0 0
        multilabel *label255 marker13
  468:  setaddr *tmp252 *label256
  469:  set :fn61:i 5
        label *label248
  470:  jump *label257 greaterThanEq :fn61:i :fn60:i
  471:  op add :fn61:lt :fn61:lt 1
  472:  multijump *tmp252 0 0 marker13
        label *label257
  473:  jump *label259 lessThanEq :fn61:i :fn60:i
  474:  op add :fn61:gt :fn61:gt 1
        label *label259
  475:  multijump *tmp252 0 0 marker13
        multilabel *label256 marker13
  476:  op sub *tmp257 :fn61:gt :fn61:lt
  477:  op abs :fn61:dif *tmp257 0
  478:  set *tmp262 false
  479:  op add *tmp259 :fn61:gt :fn61:lt
  480:  jump *label262 lessThan *tmp259 5
  481:  op equal *tmp262 :fn61:gt :fn61:lt
        label *label262
  482:  jump *label263 equal *tmp262 false
  483:  set *tmp249 :fn60:i
  484:  jump *label237 always 0 0
        label *label263
  485:  jump *label265 greaterThanEq :fn61:dif :fn60:bestDif
  486:  set :fn60:bestDif :fn61:dif
  487:  set :fn60:best :fn60:i
  488:  set :fn60:count 1
  489:  multijump *tmp250 0 0 marker12
        label *label265
  490:  jump *label267 greaterThan :fn61:dif :fn60:bestDif
  491:  op add :fn60:best :fn60:best :fn60:i
  492:  op add :fn60:count :fn60:count 1
        label *label267
  493:  multijump *tmp250 0 0 marker12
        multilabel *label246 marker12
  494:  op div *tmp249 :fn60:best :fn60:count
        label *label237
  495:  assertequals 5 *tmp249 "median(1,5,5,5,5,5)"
  496:  set :fn63:bestDif 10000000000
  497:  set :fn63:best null
  498:  set :fn63:count 1
  499:  setaddr *tmp272 *label274
  500:  jump *label296 always 0 0
        multilabel *label274 marker14
  501:  setaddr *tmp272 *label275
  502:  jump *label296 always 0 0
        multilabel *label275 marker14
  503:  setaddr *tmp272 *label276
  504:  jump *label296 always 0 0
        multilabel *label276 marker14
  505:  setaddr *tmp272 *label277
  506:  jump *label296 always 0 0
        multilabel *label277 marker14
  507:  setaddr *tmp272 *label278
  508:  jump *label296 always 0 0
        multilabel *label278 marker14
  509:  setaddr *tmp272 *label279
        label *label296
  510:  jump *label298 greaterThanEq 0 :fn63:bestDif
  511:  set :fn63:bestDif 0
  512:  set :fn63:best 5
  513:  set :fn63:count 1
  514:  multijump *tmp272 0 0 marker14
        label *label298
  515:  jump *label300 greaterThan 0 :fn63:bestDif
  516:  op add :fn63:best :fn63:best 5
  517:  op add :fn63:count :fn63:count 1
        label *label300
  518:  multijump *tmp272 0 0 marker14
        multilabel *label279 marker14
  519:  op div *tmp271 :fn63:best :fn63:count
  520:  assertequals 5 *tmp271 "median(5,5,5,5,5,5)"
  521:  set :fn66:bestDif 10000000000
  522:  set :fn66:best null
  523:  set :fn66:count 1
  524:  setaddr *tmp294 *label307
  525:  set :fn66:i 1
  526:  jump *label304 always 0 0
        multilabel *label307 marker16
  527:  setaddr *tmp294 *label308
  528:  set :fn66:i 2
  529:  jump *label304 always 0 0
        multilabel *label308 marker16
  530:  setaddr *tmp294 *label309
  531:  set :fn66:i 3
  532:  jump *label304 always 0 0
        multilabel *label309 marker16
  533:  setaddr *tmp294 *label310
  534:  set :fn66:i 4
  535:  jump *label304 always 0 0
        multilabel *label310 marker16
  536:  setaddr *tmp294 *label311
  537:  set :fn66:i 5
  538:  jump *label304 always 0 0
        multilabel *label311 marker16
  539:  setaddr *tmp294 *label312
  540:  set :fn66:i 6
  541:  jump *label304 always 0 0
        multilabel *label312 marker16
  542:  setaddr *tmp294 *label313
  543:  set :fn66:i 7
  544:  jump *label304 always 0 0
        multilabel *label313 marker16
  545:  setaddr *tmp294 *label314
  546:  set :fn66:i 8
  547:  jump *label304 always 0 0
        multilabel *label314 marker16
  548:  setaddr *tmp294 *label315
  549:  set :fn66:i 9
        label *label304
  550:  set :fn67:lt 0
  551:  set :fn67:gt 0
  552:  jump *label636 greaterThanEq 1 :fn66:i
  553:  set :fn67:lt 1
  554:  jump *label639 always 0 0
        label *label636
  555:  jump *label637 lessThanEq 1 :fn66:i
  556:  set :fn67:gt 1
        label *label637
        label *label639
  557:  jump *label644 greaterThanEq 2 :fn66:i
  558:  op add :fn67:lt :fn67:lt 1
  559:  jump *label647 always 0 0
        label *label644
  560:  jump *label645 lessThanEq 2 :fn66:i
  561:  op add :fn67:gt :fn67:gt 1
        label *label645
        label *label647
  562:  jump *label652 greaterThanEq 3 :fn66:i
  563:  op add :fn67:lt :fn67:lt 1
  564:  jump *label655 always 0 0
        label *label652
  565:  jump *label653 lessThanEq 3 :fn66:i
  566:  op add :fn67:gt :fn67:gt 1
        label *label653
        label *label655
  567:  jump *label660 greaterThanEq 4 :fn66:i
  568:  op add :fn67:lt :fn67:lt 1
  569:  jump *label663 always 0 0
        label *label660
  570:  jump *label661 lessThanEq 4 :fn66:i
  571:  op add :fn67:gt :fn67:gt 1
        label *label661
        label *label663
  572:  jump *label668 greaterThanEq 5 :fn66:i
  573:  op add :fn67:lt :fn67:lt 1
  574:  jump *label671 always 0 0
        label *label668
  575:  jump *label669 lessThanEq 5 :fn66:i
  576:  op add :fn67:gt :fn67:gt 1
        label *label669
        label *label671
  577:  jump *label676 greaterThanEq 6 :fn66:i
  578:  op add :fn67:lt :fn67:lt 1
  579:  jump *label679 always 0 0
        label *label676
  580:  jump *label677 lessThanEq 6 :fn66:i
  581:  op add :fn67:gt :fn67:gt 1
        label *label677
        label *label679
  582:  jump *label684 greaterThanEq 7 :fn66:i
  583:  op add :fn67:lt :fn67:lt 1
  584:  jump *label687 always 0 0
        label *label684
  585:  jump *label685 lessThanEq 7 :fn66:i
  586:  op add :fn67:gt :fn67:gt 1
        label *label685
        label *label687
  587:  jump *label692 greaterThanEq 8 :fn66:i
  588:  op add :fn67:lt :fn67:lt 1
  589:  jump *label695 always 0 0
        label *label692
  590:  jump *label693 lessThanEq 8 :fn66:i
  591:  op add :fn67:gt :fn67:gt 1
        label *label693
        label *label695
  592:  jump *label700 greaterThanEq 9 :fn66:i
  593:  op add :fn67:lt :fn67:lt 1
  594:  jump *label703 always 0 0
        label *label700
  595:  jump *label701 lessThanEq 9 :fn66:i
  596:  op add :fn67:gt :fn67:gt 1
        label *label701
        label *label703
  597:  op sub *tmp301 :fn67:gt :fn67:lt
  598:  op abs :fn67:dif *tmp301 0
  599:  set *tmp306 false
  600:  op add *tmp303 :fn67:gt :fn67:lt
  601:  jump *label334 lessThan *tmp303 8
  602:  op equal *tmp306 :fn67:gt :fn67:lt
        label *label334
  603:  jump *label335 equal *tmp306 false
  604:  set *tmp293 :fn66:i
  605:  jump *label303 always 0 0
        label *label335
  606:  jump *label337 greaterThanEq :fn67:dif :fn66:bestDif
  607:  set :fn66:bestDif :fn67:dif
  608:  set :fn66:best :fn66:i
  609:  set :fn66:count 1
  610:  multijump *tmp294 0 0 marker16
        label *label337
  611:  jump *label339 greaterThan :fn67:dif :fn66:bestDif
  612:  op add :fn66:best :fn66:best :fn66:i
  613:  op add :fn66:count :fn66:count 1
        label *label339
  614:  multijump *tmp294 0 0 marker16
        multilabel *label315 marker16
  615:  op div *tmp293 :fn66:best :fn66:count
        label *label303
  616:  assertequals 5 *tmp293 "median(1,2,3,4,5,6,7,8,9)"
  617:  set :fn69:bestDif 10000000000
  618:  set :fn69:best null
  619:  set :fn69:count 1
  620:  setaddr *tmp316 *label346
  621:  set :fn69:i 9
  622:  jump *label343 always 0 0
        multilabel *label346 marker18
  623:  setaddr *tmp316 *label347
  624:  set :fn69:i 8
  625:  jump *label343 always 0 0
        multilabel *label347 marker18
  626:  setaddr *tmp316 *label348
  627:  set :fn69:i 7
  628:  jump *label343 always 0 0
        multilabel *label348 marker18
  629:  setaddr *tmp316 *label349
  630:  set :fn69:i 6
  631:  jump *label343 always 0 0
        multilabel *label349 marker18
  632:  setaddr *tmp316 *label350
  633:  set :fn69:i 5
  634:  jump *label343 always 0 0
        multilabel *label350 marker18
  635:  setaddr *tmp316 *label351
  636:  set :fn69:i 4
  637:  jump *label343 always 0 0
        multilabel *label351 marker18
  638:  setaddr *tmp316 *label352
  639:  set :fn69:i 3
  640:  jump *label343 always 0 0
        multilabel *label352 marker18
  641:  setaddr *tmp316 *label353
  642:  set :fn69:i 2
  643:  jump *label343 always 0 0
        multilabel *label353 marker18
  644:  setaddr *tmp316 *label354
  645:  set :fn69:i 1
        label *label343
  646:  set :fn70:lt 0
  647:  set :fn70:gt 0
  648:  setaddr *tmp318 *label359
  649:  set :fn70:i 9
  650:  jump *label356 always 0 0
        multilabel *label359 marker19
  651:  setaddr *tmp318 *label360
  652:  set :fn70:i 8
  653:  jump *label356 always 0 0
        multilabel *label360 marker19
  654:  setaddr *tmp318 *label361
  655:  set :fn70:i 7
  656:  jump *label356 always 0 0
        multilabel *label361 marker19
  657:  setaddr *tmp318 *label362
  658:  set :fn70:i 6
  659:  jump *label356 always 0 0
        multilabel *label362 marker19
  660:  setaddr *tmp318 *label363
  661:  set :fn70:i 5
  662:  jump *label356 always 0 0
        multilabel *label363 marker19
  663:  setaddr *tmp318 *label364
  664:  set :fn70:i 4
  665:  jump *label356 always 0 0
        multilabel *label364 marker19
  666:  setaddr *tmp318 *label365
  667:  set :fn70:i 3
  668:  jump *label356 always 0 0
        multilabel *label365 marker19
  669:  setaddr *tmp318 *label366
  670:  set :fn70:i 2
  671:  jump *label356 always 0 0
        multilabel *label366 marker19
  672:  setaddr *tmp318 *label367
  673:  set :fn70:i 1
        label *label356
  674:  jump *label368 greaterThanEq :fn70:i :fn69:i
  675:  op add :fn70:lt :fn70:lt 1
  676:  multijump *tmp318 0 0 marker19
        label *label368
  677:  jump *label370 lessThanEq :fn70:i :fn69:i
  678:  op add :fn70:gt :fn70:gt 1
        label *label370
  679:  multijump *tmp318 0 0 marker19
        multilabel *label367 marker19
  680:  op sub *tmp323 :fn70:gt :fn70:lt
  681:  op abs :fn70:dif *tmp323 0
  682:  set *tmp328 false
  683:  op add *tmp325 :fn70:gt :fn70:lt
  684:  jump *label373 lessThan *tmp325 8
  685:  op equal *tmp328 :fn70:gt :fn70:lt
        label *label373
  686:  jump *label374 equal *tmp328 false
  687:  set *tmp315 :fn69:i
  688:  jump *label342 always 0 0
        label *label374
  689:  jump *label376 greaterThanEq :fn70:dif :fn69:bestDif
  690:  set :fn69:bestDif :fn70:dif
  691:  set :fn69:best :fn69:i
  692:  set :fn69:count 1
  693:  multijump *tmp316 0 0 marker18
        label *label376
  694:  jump *label378 greaterThan :fn70:dif :fn69:bestDif
  695:  op add :fn69:best :fn69:best :fn69:i
  696:  op add :fn69:count :fn69:count 1
        label *label378
  697:  multijump *tmp316 0 0 marker18
        multilabel *label354 marker18
  698:  op div *tmp315 :fn69:best :fn69:count
        label *label342
  699:  assertequals 5 *tmp315 "median(9,8,7,6,5,4,3,2,1)"
  700:  set :fn72:bestDif 10000000000
  701:  set :fn72:best null
  702:  set :fn72:count 1
  703:  setaddr *tmp338 *label385
  704:  set :fn72:i 1
  705:  jump *label382 always 0 0
        multilabel *label385 marker20
  706:  setaddr *tmp338 *label386
  707:  set :fn72:i 3
  708:  jump *label382 always 0 0
        multilabel *label386 marker20
  709:  setaddr *tmp338 *label387
  710:  set :fn72:i 5
  711:  jump *label382 always 0 0
        multilabel *label387 marker20
  712:  setaddr *tmp338 *label388
  713:  set :fn72:i 7
  714:  jump *label382 always 0 0
        multilabel *label388 marker20
  715:  setaddr *tmp338 *label389
  716:  set :fn72:i 9
  717:  jump *label382 always 0 0
        multilabel *label389 marker20
  718:  setaddr *tmp338 *label390
  719:  set :fn72:i 2
  720:  jump *label382 always 0 0
        multilabel *label390 marker20
  721:  setaddr *tmp338 *label391
  722:  set :fn72:i 4
  723:  jump *label382 always 0 0
        multilabel *label391 marker20
  724:  setaddr *tmp338 *label392
  725:  set :fn72:i 6
  726:  jump *label382 always 0 0
        multilabel *label392 marker20
  727:  setaddr *tmp338 *label393
  728:  set :fn72:i 8
        label *label382
  729:  set :fn73:lt 0
  730:  set :fn73:gt 0
  731:  setaddr *tmp340 *label398
  732:  set :fn73:i 1
  733:  jump *label395 always 0 0
        multilabel *label398 marker21
  734:  setaddr *tmp340 *label399
  735:  set :fn73:i 3
  736:  jump *label395 always 0 0
        multilabel *label399 marker21
  737:  setaddr *tmp340 *label400
  738:  set :fn73:i 5
  739:  jump *label395 always 0 0
        multilabel *label400 marker21
  740:  setaddr *tmp340 *label401
  741:  set :fn73:i 7
  742:  jump *label395 always 0 0
        multilabel *label401 marker21
  743:  setaddr *tmp340 *label402
  744:  set :fn73:i 9
  745:  jump *label395 always 0 0
        multilabel *label402 marker21
  746:  setaddr *tmp340 *label403
  747:  set :fn73:i 2
  748:  jump *label395 always 0 0
        multilabel *label403 marker21
  749:  setaddr *tmp340 *label404
  750:  set :fn73:i 4
  751:  jump *label395 always 0 0
        multilabel *label404 marker21
  752:  setaddr *tmp340 *label405
  753:  set :fn73:i 6
  754:  jump *label395 always 0 0
        multilabel *label405 marker21
  755:  setaddr *tmp340 *label406
  756:  set :fn73:i 8
        label *label395
  757:  jump *label407 greaterThanEq :fn73:i :fn72:i
  758:  op add :fn73:lt :fn73:lt 1
  759:  multijump *tmp340 0 0 marker21
        label *label407
  760:  jump *label409 lessThanEq :fn73:i :fn72:i
  761:  op add :fn73:gt :fn73:gt 1
        label *label409
  762:  multijump *tmp340 0 0 marker21
        multilabel *label406 marker21
  763:  op sub *tmp345 :fn73:gt :fn73:lt
  764:  op abs :fn73:dif *tmp345 0
  765:  set *tmp350 false
  766:  op add *tmp347 :fn73:gt :fn73:lt
  767:  jump *label412 lessThan *tmp347 8
  768:  op equal *tmp350 :fn73:gt :fn73:lt
        label *label412
  769:  jump *label413 equal *tmp350 false
  770:  set *tmp337 :fn72:i
  771:  jump *label381 always 0 0
        label *label413
  772:  jump *label415 greaterThanEq :fn73:dif :fn72:bestDif
  773:  set :fn72:bestDif :fn73:dif
  774:  set :fn72:best :fn72:i
  775:  set :fn72:count 1
  776:  multijump *tmp338 0 0 marker20
        label *label415
  777:  jump *label417 greaterThan :fn73:dif :fn72:bestDif
  778:  op add :fn72:best :fn72:best :fn72:i
  779:  op add :fn72:count :fn72:count 1
        label *label417
  780:  multijump *tmp338 0 0 marker20
        multilabel *label393 marker20
  781:  op div *tmp337 :fn72:best :fn72:count
        label *label381
  782:  assertequals 5 *tmp337 "median(1,3,5,7,9,2,4,6,8)"
  783:  set :fn75:bestDif 10000000000
  784:  set :fn75:best null
  785:  set :fn75:count 1
  786:  setaddr *tmp360 *label424
  787:  set :fn75:i 7
  788:  jump *label421 always 0 0
        multilabel *label424 marker22
  789:  setaddr *tmp360 *label425
  790:  set :fn75:i 4
  791:  jump *label421 always 0 0
        multilabel *label425 marker22
  792:  setaddr *tmp360 *label426
  793:  set :fn75:i 2
  794:  jump *label421 always 0 0
        multilabel *label426 marker22
  795:  setaddr *tmp360 *label427
  796:  set :fn75:i 8
  797:  jump *label421 always 0 0
        multilabel *label427 marker22
  798:  setaddr *tmp360 *label428
  799:  set :fn75:i 1
  800:  jump *label421 always 0 0
        multilabel *label428 marker22
  801:  setaddr *tmp360 *label429
  802:  set :fn75:i 5
  803:  jump *label421 always 0 0
        multilabel *label429 marker22
  804:  setaddr *tmp360 *label430
  805:  set :fn75:i 6
  806:  jump *label421 always 0 0
        multilabel *label430 marker22
  807:  setaddr *tmp360 *label431
  808:  set :fn75:i 9
  809:  jump *label421 always 0 0
        multilabel *label431 marker22
  810:  setaddr *tmp360 *label432
  811:  set :fn75:i 3
        label *label421
  812:  set :fn76:lt 0
  813:  set :fn76:gt 0
  814:  setaddr *tmp362 *label437
  815:  set :fn76:i 7
  816:  jump *label434 always 0 0
        multilabel *label437 marker23
  817:  setaddr *tmp362 *label438
  818:  set :fn76:i 4
  819:  jump *label434 always 0 0
        multilabel *label438 marker23
  820:  setaddr *tmp362 *label439
  821:  set :fn76:i 2
  822:  jump *label434 always 0 0
        multilabel *label439 marker23
  823:  setaddr *tmp362 *label440
  824:  set :fn76:i 8
  825:  jump *label434 always 0 0
        multilabel *label440 marker23
  826:  setaddr *tmp362 *label441
  827:  set :fn76:i 1
  828:  jump *label434 always 0 0
        multilabel *label441 marker23
  829:  setaddr *tmp362 *label442
  830:  set :fn76:i 5
  831:  jump *label434 always 0 0
        multilabel *label442 marker23
  832:  setaddr *tmp362 *label443
  833:  set :fn76:i 6
  834:  jump *label434 always 0 0
        multilabel *label443 marker23
  835:  setaddr *tmp362 *label444
  836:  set :fn76:i 9
  837:  jump *label434 always 0 0
        multilabel *label444 marker23
  838:  setaddr *tmp362 *label445
  839:  set :fn76:i 3
        label *label434
  840:  jump *label446 greaterThanEq :fn76:i :fn75:i
  841:  op add :fn76:lt :fn76:lt 1
  842:  multijump *tmp362 0 0 marker23
        label *label446
  843:  jump *label448 lessThanEq :fn76:i :fn75:i
  844:  op add :fn76:gt :fn76:gt 1
        label *label448
  845:  multijump *tmp362 0 0 marker23
        multilabel *label445 marker23
  846:  op sub *tmp367 :fn76:gt :fn76:lt
  847:  op abs :fn76:dif *tmp367 0
  848:  set *tmp372 false
  849:  op add *tmp369 :fn76:gt :fn76:lt
  850:  jump *label451 lessThan *tmp369 8
  851:  op equal *tmp372 :fn76:gt :fn76:lt
        label *label451
  852:  jump *label452 equal *tmp372 false
  853:  set *tmp359 :fn75:i
  854:  jump *label420 always 0 0
        label *label452
  855:  jump *label454 greaterThanEq :fn76:dif :fn75:bestDif
  856:  set :fn75:bestDif :fn76:dif
  857:  set :fn75:best :fn75:i
  858:  set :fn75:count 1
  859:  multijump *tmp360 0 0 marker22
        label *label454
  860:  jump *label456 greaterThan :fn76:dif :fn75:bestDif
  861:  op add :fn75:best :fn75:best :fn75:i
  862:  op add :fn75:count :fn75:count 1
        label *label456
  863:  multijump *tmp360 0 0 marker22
        multilabel *label432 marker22
  864:  op div *tmp359 :fn75:best :fn75:count
        label *label420
  865:  assertequals 5 *tmp359 "median(7,4,2,8,1,5,6,9,3)"
  866:  set :fn78:bestDif 10000000000
  867:  set :fn78:best null
  868:  set :fn78:count 1
  869:  setaddr *tmp382 *label463
  870:  set :fn78:i 1
  871:  jump *label460 always 0 0
        multilabel *label463 marker24
  872:  setaddr *tmp382 *label464
  873:  set :fn78:i 1
  874:  jump *label460 always 0 0
        multilabel *label464 marker24
  875:  setaddr *tmp382 *label465
  876:  set :fn78:i 1
  877:  jump *label460 always 0 0
        multilabel *label465 marker24
  878:  setaddr *tmp382 *label466
  879:  set :fn78:i 1
  880:  jump *label460 always 0 0
        multilabel *label466 marker24
  881:  setaddr *tmp382 *label467
  882:  set :fn78:i 9
  883:  jump *label460 always 0 0
        multilabel *label467 marker24
  884:  setaddr *tmp382 *label468
  885:  set :fn78:i 9
  886:  jump *label460 always 0 0
        multilabel *label468 marker24
  887:  setaddr *tmp382 *label469
  888:  set :fn78:i 9
  889:  jump *label460 always 0 0
        multilabel *label469 marker24
  890:  setaddr *tmp382 *label470
  891:  set :fn78:i 9
  892:  jump *label460 always 0 0
        multilabel *label470 marker24
  893:  setaddr *tmp382 *label471
  894:  set :fn78:i 5
        label *label460
  895:  set :fn79:lt 0
  896:  set :fn79:gt 0
  897:  setaddr *tmp384 *label476
  898:  set :fn79:i 1
  899:  jump *label473 always 0 0
        multilabel *label476 marker25
  900:  setaddr *tmp384 *label477
  901:  set :fn79:i 1
  902:  jump *label473 always 0 0
        multilabel *label477 marker25
  903:  setaddr *tmp384 *label478
  904:  set :fn79:i 1
  905:  jump *label473 always 0 0
        multilabel *label478 marker25
  906:  setaddr *tmp384 *label479
  907:  set :fn79:i 1
  908:  jump *label473 always 0 0
        multilabel *label479 marker25
  909:  setaddr *tmp384 *label480
  910:  set :fn79:i 9
  911:  jump *label473 always 0 0
        multilabel *label480 marker25
  912:  setaddr *tmp384 *label481
  913:  set :fn79:i 9
  914:  jump *label473 always 0 0
        multilabel *label481 marker25
  915:  setaddr *tmp384 *label482
  916:  set :fn79:i 9
  917:  jump *label473 always 0 0
        multilabel *label482 marker25
  918:  setaddr *tmp384 *label483
  919:  set :fn79:i 9
  920:  jump *label473 always 0 0
        multilabel *label483 marker25
  921:  setaddr *tmp384 *label484
  922:  set :fn79:i 5
        label *label473
  923:  jump *label485 greaterThanEq :fn79:i :fn78:i
  924:  op add :fn79:lt :fn79:lt 1
  925:  multijump *tmp384 0 0 marker25
        label *label485
  926:  jump *label487 lessThanEq :fn79:i :fn78:i
  927:  op add :fn79:gt :fn79:gt 1
        label *label487
  928:  multijump *tmp384 0 0 marker25
        multilabel *label484 marker25
  929:  op sub *tmp389 :fn79:gt :fn79:lt
  930:  op abs :fn79:dif *tmp389 0
  931:  set *tmp394 false
  932:  op add *tmp391 :fn79:gt :fn79:lt
  933:  jump *label490 lessThan *tmp391 8
  934:  op equal *tmp394 :fn79:gt :fn79:lt
        label *label490
  935:  jump *label491 equal *tmp394 false
  936:  set *tmp381 :fn78:i
  937:  jump *label459 always 0 0
        label *label491
  938:  jump *label493 greaterThanEq :fn79:dif :fn78:bestDif
  939:  set :fn78:bestDif :fn79:dif
  940:  set :fn78:best :fn78:i
  941:  set :fn78:count 1
  942:  multijump *tmp382 0 0 marker24
        label *label493
  943:  jump *label495 greaterThan :fn79:dif :fn78:bestDif
  944:  op add :fn78:best :fn78:best :fn78:i
  945:  op add :fn78:count :fn78:count 1
        label *label495
  946:  multijump *tmp382 0 0 marker24
        multilabel *label471 marker24
  947:  op div *tmp381 :fn78:best :fn78:count
        label *label459
  948:  assertequals 5 *tmp381 "median(1,1,1,1,9,9,9,9,5)"
  949:  stop
  950:  end
        label *label0
  951:  set :fn0*retval 0
  952:  jump *label499 equal :fn0:x 0
  953:  set :fn0*retval 1
  954:  jump *label501 greaterThanEq :fn0:x 0
  955:  set :fn0*retval -1
        label *label501
        label *label499
  956:  return :fn0*retaddr
        label *label1
  957:  op max :fn1:y2 :fn1:x1 :fn1:x2
  958:  op min :fn1:y3 :fn1:x3 :fn1:x4
  959:  jump *label504 greaterThan :fn1:y2 :fn1:y3
  960:  op add *tmp413 :fn1:y2 :fn1:y3
  961:  op div :fn1*retval *tmp413 2
  962:  return :fn1*retaddr
        label *label504
  963:  op min :fn1:y1 :fn1:x1 :fn1:x2
  964:  op max :fn1:y4 :fn1:x3 :fn1:x4
  965:  jump *label506 lessThan :fn1:y1 :fn1:y4
  966:  op add *tmp419 :fn1:y1 :fn1:y4
  967:  op div :fn1*retval *tmp419 2
  968:  return :fn1*retaddr
        label *label506
  969:  op max *tmp421 :fn1:y1 :fn1:y3
  970:  op min *tmp422 :fn1:y2 :fn1:y4
  971:  op add *tmp423 *tmp421 *tmp422
  972:  op div :fn1*retval *tmp423 2
  973:  return :fn1*retaddr
        label *label2
  974:  op min :fn2:y1 :fn2:x1 :fn2:x2
  975:  op max :fn2:y2 :fn2:x1 :fn2:x2
  976:  op min :fn2:y4 :fn2:x4 :fn2:x5
  977:  op max :fn2:y5 :fn2:x4 :fn2:x5
  978:  jump *label509 greaterThanEq :fn2:y4 :fn2:y1
  979:  set :fn2:y4 :fn2:y1
  980:  set :fn82:t :fn2:y2
  981:  set :fn2:y2 :fn2:y5
  982:  set :fn2:y5 :fn82:t
        label *label509
  983:  jump *label513 lessThanEq :fn2:x3 :fn2:y2
  984:  op min :fn2*retval :fn2:y2 :fn2:y5
  985:  jump *label514 greaterThanEq :fn2:y2 :fn2:y4
  986:  op min :fn2*retval :fn2:x3 :fn2:y4
  987:  return :fn2*retaddr
        label *label513
  988:  op min :fn2*retval :fn2:y2 :fn2:y4
  989:  jump *label518 lessThanEq :fn2:x3 :fn2:y4
  990:  op min :fn2*retval :fn2:x3 :fn2:y5
        label *label518
        label *label514
  991:  return :fn2*retaddr


stop instruction encountered, dumping variable values:
*tmp139: 1.0
*tmp140: 162.0
*tmp161: 1.0
*tmp162: 234.0
*tmp169: -5.0
*tmp171: 5.0
*tmp174: 0.0
*tmp183: 1.0
*tmp184: 299.0
*tmp186: 281.0
*tmp191: -4.0
*tmp193: 4.0
*tmp196: 0.0
*tmp205: 3.0
*tmp206: 364.0
*tmp208: 346.0
*tmp213: -3.0
*tmp215: 3.0
*tmp218: 0.0
*tmp227: 5.0
*tmp228: 429.0
*tmp230: 411.0
*tmp235: -2.0
*tmp237: 2.0
*tmp240: 0.0
*tmp249: 5.0
*tmp250: 494.0
*tmp252: 476.0
*tmp257: -1.0
*tmp259: 1.0
*tmp262: 0.0
*tmp271: 5.0
*tmp272: 519.0
*tmp293: 5.0
*tmp294: 539.0
*tmp301: 0.0
*tmp303: 8.0
*tmp306: 1.0
*tmp315: 5.0
*tmp316: 635.0
*tmp318: 680.0
*tmp323: 0.0
*tmp325: 8.0
*tmp328: 1.0
*tmp337: 5.0
*tmp338: 712.0
*tmp340: 763.0
*tmp345: 0.0
*tmp347: 8.0
*tmp350: 1.0
*tmp359: 5.0
*tmp360: 804.0
*tmp362: 846.0
*tmp367: 0.0
*tmp369: 8.0
*tmp372: 1.0
*tmp381: 5.0
*tmp382: 947.0
*tmp384: 929.0
*tmp389: 0.0
*tmp391: 8.0
*tmp394: 1.0
*tmp413: 10.0
*tmp419: 10.0
*tmp421: 4.0
*tmp422: 6.0
*tmp423: 10.0
:fn0*retaddr: 24.0
:fn0*retval: -1.0
:fn0:x: -5.0
:fn1*retaddr: 96.0
:fn1*retval: 5.0
:fn19:result: 0.0
:fn1:x1: 6.0
:fn1:x2: 2.0
:fn1:x3: 8.0
:fn1:x4: 4.0
:fn1:y1: 2.0
:fn1:y2: 6.0
:fn1:y3: 4.0
:fn1:y4: 8.0
:fn2*retaddr: 138.0
:fn2*retval: 5.0
:fn20:result: 1.0
:fn26:result: 0.0
:fn27:result: -5.0
:fn28:result: 100.0
:fn2:x1: 5.0
:fn2:x2: 5.0
:fn2:x3: 5.0
:fn2:x4: 5.0
:fn2:x5: 5.0
:fn2:y1: 5.0
:fn2:y2: 5.0
:fn2:y4: 5.0
:fn2:y5: 5.0
:fn45:best: 6.0
:fn45:bestDif: 0.0
:fn45:count: 6.0
:fn48:best: 5.0
:fn48:bestDif: 1.0
:fn48:count: 5.0
:fn48:i: 5.0
:fn49:dif: 5.0
:fn49:gt: 0.0
:fn49:lt: 5.0
:fn51:best: 4.0
:fn51:bestDif: 2.0
:fn51:count: 4.0
:fn51:i: 5.0
:fn52:dif: 4.0
:fn52:gt: 0.0
:fn52:i: 5.0
:fn52:lt: 4.0
:fn54:best: 18.0
:fn54:bestDif: 3.0
:fn54:count: 6.0
:fn54:i: 5.0
:fn55:dif: 3.0
:fn55:gt: 0.0
:fn55:i: 5.0
:fn55:lt: 3.0
:fn57:best: 20.0
:fn57:bestDif: 2.0
:fn57:count: 4.0
:fn57:i: 5.0
:fn58:dif: 2.0
:fn58:gt: 0.0
:fn58:i: 5.0
:fn58:lt: 2.0
:fn60:best: 25.0
:fn60:bestDif: 1.0
:fn60:count: 5.0
:fn60:i: 5.0
:fn61:dif: 1.0
:fn61:gt: 0.0
:fn61:i: 5.0
:fn61:lt: 1.0
:fn63:best: 30.0
:fn63:bestDif: 0.0
:fn63:count: 6.0
:fn66:best: 4.0
:fn66:bestDif: 2.0
:fn66:count: 1.0
:fn66:i: 5.0
:fn67:dif: 0.0
:fn67:gt: 4.0
:fn67:lt: 4.0
:fn69:best: 6.0
:fn69:bestDif: 2.0
:fn69:count: 1.0
:fn69:i: 5.0
:fn70:dif: 0.0
:fn70:gt: 4.0
:fn70:i: 1.0
:fn70:lt: 4.0
:fn72:best: 3.0
:fn72:bestDif: 4.0
:fn72:count: 1.0
:fn72:i: 5.0
:fn73:dif: 0.0
:fn73:gt: 4.0
:fn73:i: 8.0
:fn73:lt: 4.0
:fn75:best: 4.0
:fn75:bestDif: 2.0
:fn75:count: 1.0
:fn75:i: 5.0
:fn76:dif: 0.0
:fn76:gt: 4.0
:fn76:i: 3.0
:fn76:lt: 4.0
:fn78:best: 40.0
:fn78:bestDif: 5.0
:fn78:count: 8.0
:fn78:i: 5.0
:fn79:dif: 0.0
:fn79:gt: 4.0
:fn79:i: 5.0
:fn79:lt: 4.0
:fn82:t: 5.0
@counter: 950.0