#set target = ML8A;
require math;
require unittests;

assertEquals(5,     distance(1,1,4,5),          "distance forward");
assertEquals(5,     distance(-1,-1,-4,-5),      "distance backward");
assertEquals(2,     round(1.5),                 "round(1.5)");
assertEquals(2,     round(1.7),                 "round(1.7)");
assertEquals(2,     round(2.1),                 "round(2.1)");
assertEquals(3,     round(2.5),                 "round(2.5)");
assertEquals(-3,    round(-3.5),                "round(-3.5)");
assertEquals(0.5,   frac(3.5),                  "frac(3.5)");
assertEquals(-0.5,  frac(-1.5),                 "frac(-1.5)");
assertEquals(0,     sign(0),                    "sign(0)");
assertEquals(0,     sign(1e-7),                 "sign(1e-7)");
assertEquals(1,     sign(1e-5),                 "sign(1e-5)");
assertEquals(-1,    sign(-5),                   "sign(-5)");
assertEquals(0,     signExact(0),               "signExact(0)");
assertEquals(1,     signExact(1e-7),            "signExact(1e-7)");
assertEquals(-1,    signExact(-1e-7),           "signExact(-1e-7)");
assertEquals(true,  isZero(0),                  "isZero(0)");
assertEquals(false, isZero(1e-50),              "isZero(1e-50)");
assertEquals(false, isZero(-1e-50),             "isZero(-1e-50)");
assertEquals(false, isZero(0.01,0.01),          "isZero(0.01,0.01)");
assertEquals(0,     nullToZero(null),           "nullToZero(null)");
assertEquals(1,     nullToZero(1),              "nullToZero(1)");
