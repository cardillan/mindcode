// Mindcode system library for Mindustry Logic version 8
// Utility functions

// Computes the distance between points (x1, y1) and (x2, y2).
// Uses the len instruction for efficient hypotenuse calculation
def distance(_x1, _y1, _x2, _y2)
    len(_x2 - _x1, _y2 - _y1);
end;

// Rounds the number to the closest integer. 0.5 is rounded up.
def round(_x)
    floor(_x + 0.5);
end;

// Returns the fractional part of the number
def frac(_x)
    _x % 1;
end;

// Returns the sign of the number
// The return value is zero precisely when _x == 0
def sign(_x)
    // Using equality here to get sign behavior consistent with equality operator
    _x == 0 ? 0 : _x < 0 ? -1 : 1;
end;

// Returns true if _x is precisely zero.
def isZero(_x)
    abs(_x) <= 0;
end;

// Returns true if the absolute value of _x is less than precision.
def isZero(_x, _precision)
    abs(_x) < _precision;
end;

// Returns true if the two values differ by less than given precision.
def isEqual(_a, _b, _precision)
    abs(_a - _b) < _precision;
end;

// Prints the value into the text buffer without rounding to the nearest integer value
void printExact(_n)
    if isZero(_n) then
        // Will print either 0, or null, depending on the value
        print(_n);
    else
        _exp = floor(log10(abs(_n)));
        if abs(_exp) < 6 then
            print(_n);
        else
            _base = _n * 10 ** -_exp;
            print(_base, "E", _exp);
        end;
    end;
end;
