// Mindcode system library for Mindustry Logic version 8
// Arrays
//
//* Functions for basic array manipulations.
//*
//* Functions in this library are designed for loop unrolling for the best performance.
//* When instruction space doesn't allow loop unrolling, random array access is used,
//* possibly leading to general (un-inlined) array jump tables being generated for space conservation.

module arrays;

/**
 * Fills the array with a given value.
 *
 * @footprint2  Five elements in an internal array:      volatile var a[5]; fill(ref a, prm_value);
 * @footprint2  Ten elements in an internal array:       volatile var a[10]; fill(ref a, prm_value);
 * @footprint2  Twenty elements in an internal array:    volatile var a[20]; fill(ref a, prm_value);
 * @footprint2  Five elements in an external array:      external(cell1) var a[5]; fill(ref a, prm_value);
 * @footprint2  Ten elements in an external array:       external(cell1) var a[10]; fill(ref a, prm_value);
 * @footprint2  Twenty elements in an external array:    external(cell1) var a[20]; fill(ref a, prm_value);
 */
inline void fill(ref array, value)
    for var i in 0 ... length(array) do
        array[i] = value;
    end;
end;

/**
 * Reverses the values in the array.
 *
 * @footprint2  Five elements in an internal array:      volatile var a[5]; reverse(ref a);
 * @footprint2  Ten elements in an internal array:       volatile var a[10]; reverse(ref a);
 * @footprint2  Twenty elements in an internal array:    volatile var a[20]; reverse(ref a);
 * @footprint2  Five elements in an external array:      external(cell1) var a[5]; reverse(ref a);
 * @footprint2  Ten elements in an external array:       external(cell1) var a[10]; reverse(ref a);
 * @footprint2  Twenty elements in an external array:    external(cell1) var a[20]; reverse(ref a);
 */
inline void reverse(ref array)
    for var i in 0 ... length(array) \ 2 do
        var j = length(array) - 1 - i;
        var t = array[i];
        array[i] = array[j];
        array[j] = t;
    end;
end;

/**
 * Sorts the array.
 *
 * @footprint2  Five elements in an internal array:      volatile var a[5]; bubblesort(ref a, prm_maxToMin);
 * @footprint2  Ten elements in an internal array:       volatile var a[10]; bubblesort(ref a, prm_maxToMin);
 * @footprint2  Twenty elements in an internal array:    volatile var a[20]; bubblesort(ref a, prm_maxToMin);
 * @footprint2  Five elements in an external array:      external(cell1) var a[5]; bubblesort(ref a, prm_maxToMin);
 * @footprint2  Ten elements in an external array:       external(cell1) var a[10]; bubblesort(ref a, prm_maxToMin);
 * @footprint2  Twenty elements in an external array:    external(cell1) var a[20]; bubblesort(ref a, prm_maxToMin);
 */
inline void bubblesort(ref array, in maxToMin)
    do
        var flag = false;

        // Increasing
        var a = array[0];
        for var i in 1 ... length(array) do
            var b = array[i];
            var condition = maxToMin ? a < b : a > b;
            if condition then
                array[i - 1] = b;
                array[i] = a;
                flag = true;
            else
                a = b;
            end;
        end;

        if !flag then return; end;

        a = array[length(array) - 1];
        for var i in 0 ... length(array) - 1 descending do
            var b = array[i];
            var condition = maxToMin ? a > b : a < b;
            if condition then
                array[i + 1] = b;
                array[i] = a;
                flag = true;
            else
                a = b;
            end;
        end;
    while flag;
end;

/**
 * Sorts elements of two arrays in parallel. The `sortBy` array contains the sort keys, while the
 * `values` array gets reordered to the same relative order as the `sortBy` array.
 *
 * @footprint2  Five elements in internal arrays:      volatile var a[5], b[5]; bubblesort(ref a, ref b, prm_maxToMin);
 * @footprint2  Ten elements in internal arrays:       volatile var a[10], b[10]; bubblesort(ref a, ref b, prm_maxToMin);
 * @footprint2  Twenty elements in internal arrays:    volatile var a[20], b[20]; bubblesort(ref a, ref b, prm_maxToMin);
 * @footprint2  Five elements in external arrays:      external(cell1) var a[5], b[5]; bubblesort(ref a, ref b, prm_maxToMin);
 * @footprint2  Ten elements in external arrays:       external(cell1) var a[10], b[10]; bubblesort(ref a, ref b, prm_maxToMin);
 * @footprint2  Twenty elements in external arrays:    external(cell1) var a[20], b[20]; bubblesort(ref a, ref b, prm_maxToMin);
 */
inline void bubblesort(ref sortBy, ref values, in maxToMin)
    do
        var flag = false;

        // Increasing
        var a = sortBy[0];
        for var i in 1 ... length(sortBy) do
            var b = sortBy[i];
            var condition = maxToMin ? a < b : a > b;
            if condition then
                sortBy[i - 1] = b;
                sortBy[i] = a;
                var v = values[i - 1];
                values[i - 1] = values[i];
                values[i] = v;
                flag = true;
            else
                a = b;
            end;
        end;

        if !flag then return; end;

        a = sortBy[length(sortBy) - 1];
        for var i in 0 ... length(sortBy) - 1 descending do
            var b = sortBy[i];
            var condition = maxToMin ? a > b : a < b;
            if condition then
                sortBy[i + 1] = b;
                sortBy[i] = a;
                var v = values[i + 1];
                values[i + 1] = values[i];
                values[i] = v;
                flag = true;
            else
                a = b;
            end;
        end;
    while flag;
end;
