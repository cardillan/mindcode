// Mindcode system library for Mindustry Logic version 8
// Printing - numeric output
//
//* To use the Printing library, use the `require printing;` statement. Some of the Printing library functions use
//* Mindustry Logic 8 instructions and therefore require the `#set target = ML8A;` statement.

require math;

/**
 * **Note:** Function requires target `ML8A` or later.
 *
 * Formats the number passed in as a parameter into the text buffer, using comma as thousands separator.
 * Fractional part of the number to be printed is ignored.
 *
 * To use the function, a placeholder must be inserted into the text buffer prior to the call of this function.
 * The placeholder must be `{2}` or higher, placeholders `{0}` and `{1}` are reserved. The number will be rendered
 * at the place of the lowest formatting placeholder.
 *
 * Nulls are printed as 0.
 *
 * > [!TIP]
 * > While the functions is optimized for performance, formatting numbers is many times slower than just printing
 * > them using the `print()` function.
 */
void formatNumber(_number)
    _n = floor(abs(_number));
    if _number < 0 then
        format("-{2}");     // Prepend the minus sign
    end;
    while _n > 999 do
        _mod = _n % 1000;
        // Insert placeholder for the next group, thousands separator, leading zeroes (if any) and a placeholder for this group.
        format(_mod < 10 ? "{2},00{1}" : _mod < 100 ? "{2},0{1}" : "{2},{1}");
        format(_mod);
        _n \= 1000;
    end;

    // Put the rest of the number into the remaining placeholder
    format(_n);
end;

/**
 * **Note:** Function requires target `ML8A` or later.
 *
 * Prints the number passed in as a parameter into the text buffer, using comma as thousands separator.
 * Fractional part of the number to be printed is ignored.
 *
 * To use the function, the text buffer must not contain placeholders `{0}`, `{1}` or `{2}`.
 * The number will be printed at the end of the print buffer.
 *
 * Nulls are printed as 0.
 *
 * > [!TIP]
 * > While the functions is optimized for performance, formatting numbers is many times slower than just printing
 * > them using the `print()` function.
 *
 * See also [`formatNumber`](#formatnumber)
 */
void printNumber(_number)
    print("{2}");
    formatNumber(_number);
end;

/**
 * Prints the value into the text buffer without rounding to the nearest integer value.
 * The function is primarily useful for debugging purposes to determine the actual value of variables.
 * This variant of the function is optimized to produce faster, larger code.
 *
 * **Note:** When printing the exact representation of numbers that are close to integer value, the Mindustry Logic
 * `print` instruction cannot be used, as it would print the rounded value. In such case a custom printing routine
 * is used, which can take around 50 steps to output the entire number.
 *
 * > [!TIP]
 * > The `print` and `format` instructions applied to numerical values round the value to the nearest integer
 * > when they differ from the integer value by less than `1e-6`. This makes it impossible to directly print
 * > (with sufficient precision) numerical values close to integer values in general, and values close to zero
 * > in particular. For example, `print(10 ** -50)` prints `0`. On the other hand, `printExact(10 ** -50)`
 * > outputs `1E-50`.
 *
 * > [!IMPORTANT]
 * > The mathematical operations used by `printExact` to output the value may introduce small additional numerical
 * > errors to the output value; for example `printExact(3.00000003)` outputs `3.000000029999999`.
 */
void printExactFast(_n)
    if isZero(_n) then
        // Will print either 0, or null, depending on the value
        print(_n);
    else
        if _n < 0 then
            print("-");
            _n = abs(_n);
         end;
        _exp = floor(log10(_n));
        _base = _n * 10 ** -_exp;
        _cmp = abs(_base - round(_base));
        if _cmp <= 0 then
            // An exact integer, use native function
            print(_base);
        elsif _cmp > 1e-5 then
            // Mindustry Logic won't round to integer, use native function
            print(_base);
        else
            // Mindustry logic would round. Use custom routine.
            print(floor(_base), ".");

            // Printing the fractional part, 5 digits at a time
            // More digits would be even faster, but 5 divides the 15 digits we want to output nicely.
            for _digit in 1 .. 3 do
                _base = frac(_base) * 100000;
                _t = floor(_base);
                if _t < 10 then
                    print("0000");
                elsif _t < 100 then
                    print("000");
                elsif _t < 1000 then
                    print("00");
                elsif _t < 10000 then
                    print("0");
                end;

                print(_t);
            end;
        end;

        if _exp != 0 then
            print("E", _exp);
        end;
    end;
end;

/**
 * Prints the value into the text buffer without rounding to the nearest integer value.
 * The function is primarily useful for debugging purposes to determine the actual value of variables.
 * This variant of the function is optimized to produce slower, smaller code.
 *
 * **Note:** This function uses exact (slow) printing for all values except zero.
 *
 * See also [`printExactFast`](#printexactfast)
 */
void printExactSlow(_n)
    if isZero(_n) then
        // Will print either 0, or null, depending on the value
        print(_n);
    else
        if _n < 0 then
            print("-");
            _n = abs(_n);
         end;
        _exp = floor(log10(_n));
        _base = _n * 10 ** -_exp;
        print(floor(_base), ".");

        for _digit in 1 .. 15 do
            _base = frac(_base) * 10;
            print(floor(_base));
        end;

        if _exp != 0 then
            print("E", _exp);
        end;
    end;
end;

