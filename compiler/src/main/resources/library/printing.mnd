// Mindcode system library for Mindustry Logic version 8
// Printing - numeric output

require math;

// Formats a number into the text buffer, without external memory.
// The text buffer must not contain placeholders {0} and {1}. It must contain at least one other placeholder ({2} or higher).
// Nulls are printed as 0.
void formatNumber(_x)
    _n = floor(abs(_x));
    if _x < 0 then
        format("-{2}");     // Prepend the minus sign
    end;
    while _n > 999 do
        _mod = _n % 1000;
        // Insert placeholder for the next group, thousands separator, leading zeroes (if any) and a placeholder for this group.
        format(_mod < 10 ? "{2},00{1}" : _mod < 100 ? "{2},0{1}" : "{2},{1}");
        format(_mod);
        _n \= 1000;
    end;

    // Put the rest of the number into the remaining placeholder
    format(_n);
end;

// Prints the number straight away
// The text buffer must not contain any placeholders lower than {3}.
void printNumber(_n)
    print("{2}");
    formatNumber(_n);
end;

// Prints the value into the text buffer without rounding to the nearest integer value
void printExact(_n)
    if isZero(_n) then
        // Will print either 0, or null, depending on the value
        print(_n);
    else
        if _n < 0 then
            print("-");
            _n = abs(_n);
         end;
        _exp = floor(log10(_n));
        _base = _n * 10 ** -_exp;
        _cmp = abs(_base - round(_base));
        if _cmp <= 0 then
            // An exact integer, use native function
            print(_base);
        elsif _cmp > 1e-5 then
            // Mindustry Logic won't round to integer, use native function
            print(_base);
        else
            // Mindustry logic would round. Use custom routine.
            print(floor(_base), ".");

            // Printing the fractional part, 5 digits at a time
            // More digits would be even faster, but 5 divides the 15 digits we want to output nicely.
            for _digit in 1 .. 3 do
                _base = frac(_base) * 100000;
                _t = floor(_base);
                if _t < 10 then
                    print("0000");
                elsif _t < 100 then
                    print("000");
                elsif _t < 1000 then
                    print("00");
                elsif _t < 10000 then
                    print("0");
                end;

                print(_t);
            end;
        end;

        if _exp != 0 then
            print("E", _exp);
        end;
    end;
end;

