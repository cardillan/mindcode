// Mindcode system library
// Math functions
//
//* To use the Math library, use the `require math;` statement.

module math;

/**
 * The value that is closer than any other to _pi_ (&pi;), the ratio of the circumference
 * of a circle to its diameter. Provides better precision than `@pi`, and is compile-time
 * evaluated when possible.
 */
const PI = 3.141592653589793;

/** Constant by which to multiply an angular value in degrees to obtain an  angular value in radians. */
const DEG_TO_RAD = 0.017453292519943295;

/** Constant by which to multiply an angular value in radians to obtain an angular value in degrees. */
const RAD_TO_DEG = 57.29577951308232;

/**
 * Computes the distance between points (`x1`, `y1`) and (`x2`, `y2`).
 * Uses the `len` instruction for efficient hypotenuse calculation.
 */
inline def distance(x1, y1, x2, y2)
    len(x2 - x1, y2 - y1);
end;

/** Rounds the number to the closest integer. Halves are rounded up: `round(1.5)' gives '2` and `round(-1.5)` gives `1`. */
inline def round(x)
    floor(x + 0.5);
end;

/** Returns the fractional part of the number. `frac(1.5)` gives `0.5`. */
inline def frac(x)
    x % 1;
end;

/**
 * Returns the sign of the number. The return value is `0` precisely when `x == 0`
 * (using the Mindustry Logic native comparison precision).
 */
def sign(x)
    // Using equality here to get sign behavior consistent with equality operator
    x == 0 ? 0 : x < 0 ? -1 : 1;
end;

/** Returns the sign of the number. The return value is `0` when `x` is null or exactly zero. */
inline def signExact(x)
    // Use branchless sign computation
    (x > 0) - (x < 0);
end;

/** Returns `true` when `x` is null or precisely zero. */
inline def isZero(x)
    abs(x) <= 0;
end;

/** Returns `true` when `x` is null or its absolute value is less than `precision`. */
inline def isZero(x, precision)
    abs(x) < precision;
end;

/**
 * Returns `true` if the two values differ by less than `precision`.
 *
 * > [!NOTE]
 * > The non-strict equality operators in Mindustry (and, by extension, Mindcode), i.e. `==`, `!=`,
 * > consider numeric values equal when they differ by less than `0.000001`. The `isEqual` function allows
 * > to compare values using different precision.
 */
inline def isEqual(a, b, precision)
    abs(a - b) < precision;
end;

/**
 * Converts the value of `x` to zero if it was `null`. Uses single instruction for the conversion,
 * and makes sure it won't be removed by the optimizer.
 */
inline def nullToZero(x)
    var result;
    mlog("op", "add", out result, in x, 0);
    result;
end;

/**
 * Converts the value of `x` to boolean values (`0` or `1`). The returning value will be `0`
 * if `x` is equal to `0` using Mindustry equality operator, `1` otherwise.
 */
inline def boolean(x)
    x != 0;
end;

/**
 * Converts the value of `x` to an integer in the same way Mindustry Logic converts operands of bitwise operations
 * (`and`, `or`, `xor`, `shl`, `shr`, `not`) from real numbers to integer numbers.
 * Uses single instruction for the conversion, and makes sure it won't be removed by the optimizer.
 */
inline def integer(x)
    var result;
    mlog("op", "or", out result, in x, 0);
    result;
end;

/** Returns `x`. The function is a fallback case for the generic `sum` function taking a variable number of arguments. */
inline def sum(x)
    x;
end;

/** Returns the sum of all given arguments. */
inline def sum(x1, x2, x...)
    var sum = x1 + x2;
    for var i in x do sum += i; end;
    sum;
end;

/** Returns `x`. The function is a fallback case for the generic `avg` function taking a variable number of arguments. */
inline def avg(x)
    x;
end;

/** Returns the average of all given arguments. */
inline def avg(x1, x2, x...)
    var sum = x1 + x2;
    for var i in x do sum += i; end;
    sum / (2 + length(x));
end;

/** Returns the logarithm of the number in base 2 */
inline def log2(number)
    log(number) / log(2);
end;

/**
 * Perform linear interpolation between two values.
 *
 * **Inputs and outputs:**
 *
 * - `from`: first value
 * - `to`: second value
 * - `ratio`: value in the range of 0 .. 1, 0 corresponds to `from`, 1 corresponds to `to`, fractional value
 *            corresponds to a point in between (2/3 to a point two-thirds of the way from `from` to `to`).
 */
inline def lerp(from, to, ratio)
    (1 - ratio) * from + ratio * to;
end;

/** Returns `x`. The function is a fallback case for the generic `median` function taking a variable number of arguments. */
inline def median(x)
    x;
end;

/** Returns the median of two values. */
inline def median(x1, x2)
    (x1 + x2) / 2;
end;

/** Returns the median of three values . */
inline def median(x1, x2, x3)
    min(max(x1, x2), max(x1, x3), max(x2, x3));
end;

/** Returns the median of four values . */
def median(x1, x2, x3, x4)
    var y2 = max(x1, x2);
    var y3 = min(x3, x4);
    if y2 <= y3 then
        (y2 + y3) / 2;
    else
        var y1 = min(x1, x2);
        var y4 = max(x3, x4);
        if y1 >= y4 then
            (y1 + y4) / 2;
        else
            (max(y1, y3) + min(y2, y4)) / 2;
        end;
    end;
end;

/** Returns the median of five values. */
def median(x1, x2, x3, x4, x5)
    var y1 = min(x1, x2);
    var y2 = max(x1, x2);
    var y4 = min(x4, x5);
    var y5 = max(x4, x5);

    if y4 < y1 then
        _swap(out y1, out y4);
        _swap(out y2, out y5);
    end;

    if x3 > y2 then
        y2 < y4 ? min(x3, y4) : min(y2, y5);
    else
        x3 > y4 ? min(x3, y5) : min(y2, y4);
    end;
end;

inline def _swap(in out a, in out b)
    var t = a; a = b; b = t;
end;

/**
 * Computes the median of the given arguments using a generic algorithm. The algorithm generates quite a large code
 * and is fairly slow, because Mindcode doesn't support internal memory arrays yet.
 *
 * @footprint Ten arguments in total:        *10
 * @footprint Fifteen arguments in total:    *15
 * @footprint Twenty arguments in total:     *20
 */
inline def median(x...)
    _median(x);
end;

inline def _median(x...)
    var bestDif = 1e10;
    var best = null;
    var count = 1;
    var dif;
    for var i in x do
        if _isMedian(out dif, i, x) then
            return i;
        end;
        if dif < bestDif then
            bestDif = dif;
            best = i;
            count = 1;
        elsif dif <= bestDif then
            best += i;
            count += 1;
        end;
    end;
    best / count;
end;

inline def _isMedian(out dif, n, x...)
    var lt = 0, gt = 0;
    for var i in x do
        if i < n then
            lt += 1;
        elsif i > n then
            gt += 1;
        end;
    end;
    dif = abs(gt - lt);
    if gt + lt >= length(x) - 1 then
        gt == lt;
    else
        false;
    end;
end;
