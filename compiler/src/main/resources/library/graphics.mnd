// Mindcode system library for Mindustry Logic version 8
// Graphics functions
//
//* To use the Graphics library, use the `require graphics;` statement. The Graphics library uses Mindustry Logic 8
//* instructions and therefore also requires `#set target = 8;` statement.
//*
//* The provided library functions use transformations to rotate, invert or scale graphics output as needed
//* for each display (large or small). Transformations are additive, so it is suggested to call `reset()`
//* at the beginning of each program that uses transformations to clean up possible transformations from earlier runs.
//*
//* The parameters used for transformations must be adapted to the size of the output display being drawn.
//* The transformation functions therefore exist in versions for both logic displays and large logic displays,
//* plus a version which automatically detects the display type from a block passed in as a parameter.

module graphics;

/** Length of the side of the drawing area of the `logic-display` block. */
const DISPLAY_SIZE_SMALL =  80;

/** Length of the side of the drawing area of the `large-logic-display` block. */
const DISPLAY_SIZE_LARGE = 176;

/**
 * Unpacks numeric value created by the `packcolor` instruction (or a corresponding color literal) into
 * individual color channel components. The function produces real numbers between 0 and 1 (inclusive) for
 * all four color channels.
 *
 * **Note:** When compiling for Mindustry 8, the built-in `unpackcolor` function is used instead of this one.
 *
 * **Inputs and outputs:**
 *
 * - `r`: variable to receive the value corresponding to the red channel
 * - `g`: variable to receive the value corresponding to the green channel
 * - `b`: variable to receive the value corresponding to the blue channel
 * - `a`: variable to receive the value corresponding to the alpha channel
 * - `packedColor`: color value to unpack
 */
void unpackcolor(out r, out g, out b, out a, in packedColor)
    var bits = packedColor / %00000001;
    r = (bits & (0xFF << 24)) / (255 << 24);
    g = (bits & (0xFF << 16)) / (255 << 16);
    b = (bits & (0xFF <<  8)) / (255 <<  8);
    a = (bits & (0xFF <<  0)) / (255 <<  0);
end;

/**
 * Allows redefining the alpha channel of an existing color. When used with constant value of alpha and a built-in
 * color literal (e.g. `@colorSalmon`), the value will be compile-time evaluated. When a named color literal is used
 * (e.g. `%[salmon]`), compile time evaluation is not possible.
 *
 * This function is significantly more efficient than unpacking the color into individual color channels
 * and repackaging them back.
 *
 * **Inputs and outputs:**
 *
 * - `color`: the color to modify, in packed color format
 * - `alpha`: new value of the alpha channel, 0 to 255
 * - return the packed color representation of the altered color.
 */
def setAlpha(color, alpha)
    return color - (color % %00000100) + alpha * %00000001;
end;

/**
 * Creates a packed color using the HSV color model. The individual components (hue, saturation, value, alpha)
 * must be real numbers between 0 and 1.
 *
 * **Inputs and outputs:**
 *
 * - `hue`: desired hue of the color
 * - `saturation`: desired saturation of the color
 * - `value`: desired value of the color
 * - `alpha`: desired alpha channel of the color
 * - returns the desired color in the packed color representation
 */
def packHsv(hue, saturation, value, alpha)
    var h = floor(hue * 6);
    var f = hue * 6 - h;
    var p = value * (1 - saturation);
    var q = value * (1 - f * saturation);
    var t = value * (1 - saturation + f * saturation);

    case h
        when 0 then packcolor(value, t, p, alpha);
        when 1 then packcolor(q, value, p, alpha);
        when 2 then packcolor(p, value, t, alpha);
        when 3 then packcolor(p, q, value, alpha);
        when 4 then packcolor(t, p, value, alpha);
        else packcolor(value, p, q, alpha);
    end;
end;

/**
 * Clears the processor's graphics buffer without outputting the contents into any display. Equivalent to
 * `drawflush(null);`.
 */
inline void drawflush()
    drawflush(null);
end;

/**
 * Returns the actual display size based on the type of display passed in as an argument.
 * When the passed-in argument is not a display, the processor is stopped.
 */
def displaySize(display)
    var type = display.@type;
    type == @logic-display ? DISPLAY_SIZE_SMALL : type == @large-logic-display ? DISPLAY_SIZE_LARGE : null;
end;

// Small display transformations

/** Rotates the output to the left (counterclockwise) by 90 degrees for a small display. */
inline void rotateLeftSmall()
    rotate(90);
    translate(0, - DISPLAY_SIZE_SMALL);
end;

/** Rotates the output to the right (clockwise) by 90 degrees for a small display. */
inline void rotateRightSmall()
    rotate(270);
    translate(- DISPLAY_SIZE_SMALL, 0);
end;

/** Rotates the output by 180 degrees (upside down) by 90 degrees for a small display. */
inline void upsideDownSmall()
    rotate(180);
    translate(- DISPLAY_SIZE_SMALL, - DISPLAY_SIZE_SMALL);
end;

/** Flips the output vertically (along the Y axis) for a small display. */
inline void flipVerticalSmall()
    scale(1, -1);
    translate(0, - DISPLAY_SIZE_SMALL);
end;

/** Flips the output horizontally (along the X axis) for a small display. */
inline void flipHorizontalSmall()
    scale(-1, 1);
    translate(- DISPLAY_SIZE_SMALL, 0);
end;

// Large display transformations

/** Rotates the output to the left (counterclockwise) by 90 degrees for a large display. */
inline void rotateLeftLarge()
    rotate(90);
    translate(0, - DISPLAY_SIZE_LARGE);
end;

/** Rotates the output to the right (clockwise) by 90 degrees for a large display. */
inline void rotateRightLarge()
    rotate(270);
    translate(- DISPLAY_SIZE_LARGE, 0);
end;

/** Rotates the output by 180 degrees (upside down) by 90 degrees for a large display. */
inline void upsideDownLarge()
    rotate(180);
    translate(- DISPLAY_SIZE_LARGE, - DISPLAY_SIZE_LARGE);
end;

/** Flips the output vertically (along the Y axis) for a large display. */
inline void flipVerticalLarge()
    scale(1, -1);
    translate(0, - DISPLAY_SIZE_LARGE);
end;

/** Flips the output horizontally (along the X axis) for a large display. */
inline void flipHorizontalLarge()
    scale(-1, 1);
    translate(- DISPLAY_SIZE_LARGE, 0);
end;

// Generic display transformations

/** Rotates the output to the left (counterclockwise) by 90 degrees for the given display. */
void rotateLeft(display)
    case display.@type
        when @logic-display       then rotateLeftSmall();
        when @large-logic-display then rotateLeftLarge();
        else stopProcessor();
    end;
end;

/** Rotates the output to the right (clockwise) by 90 degrees for the given display. */
void rotateRight(display)
    case display.@type
        when @logic-display       then rotateRightSmall();
        when @large-logic-display then rotateRightLarge();
        else stopProcessor();
    end;
end;

/** Rotates the output by 180 degrees (upside down) by 90 degrees for the given display. */
void upsideDown(display)
    case display.@type
        when @logic-display       then upsideDownSmall();
        when @large-logic-display then upsideDownLarge();
        else stopProcessor();
    end;
end;

/** Flips the output vertically (along the Y axis) for the given display. */
void flipVertical(display)
    case display.@type
        when @logic-display       then flipVerticalSmall();
        when @large-logic-display then flipVerticalLarge();
        else stopProcessor();
    end;
end;

/** Flips the output horizontally (along the X axis) for the given display. */
void flipHorizontal(display)
    case display.@type
        when @logic-display       then flipHorizontalSmall();
        when @large-logic-display then flipHorizontalLarge();
        else stopProcessor();
    end;
end;

// Scaling

/**
  * Scales the graphics output so that an output that targets a small display gets displayed
  * over the entire area of a large display.
  */
inline void scaleSmallToLarge()
    scale(DISPLAY_SIZE_LARGE / DISPLAY_SIZE_SMALL, DISPLAY_SIZE_LARGE / DISPLAY_SIZE_SMALL);
end;

/**
  * Scales the graphics output so that an output that targets a large display gets displayed
  * over the entire area of a small display.
  */
inline void scaleLargeToSmall()
    scale(DISPLAY_SIZE_SMALL / DISPLAY_SIZE_LARGE, DISPLAY_SIZE_SMALL / DISPLAY_SIZE_LARGE);
end;
