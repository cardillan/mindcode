// Mindcode system library for Mindustry Logic version 8

const DISPLAY_SIZE_SMALL =  80;
const DISPLAY_SIZE_LARGE = 176;

// Display size

def displaySize(display)
    type = display.@type;
    type == @logic-display ? DISPLAY_SIZE_SMALL : type == @large-logic-display ? DISPLAY_SIZE_LARGE : null;
end;

// Small display transformations

def rotateLeftSmall()
    rotate(90);
    translate(0, - DISPLAY_SIZE_SMALL);
end;

def rotateRightSmall()
    rotate(270);
    translate(- DISPLAY_SIZE_SMALL, 0);
end;

def upsideDownSmall()
    rotate(180);
    translate(- DISPLAY_SIZE_SMALL, - DISPLAY_SIZE_SMALL);
end;

def flipVerticalSmall() 
    scale(1, -1);
    translate(0, - DISPLAY_SIZE_SMALL);
end;

def flipHorizontalSmall()
    scale(-1, 1);
    translate(- DISPLAY_SIZE_SMALL, 0);
end;

// Large display transformations

def rotateLeftLarge()
    rotate(90);
    translate(0, - DISPLAY_SIZE_LARGE);
end;

def rotateRightLarge()
    rotate(270);
    translate(- DISPLAY_SIZE_LARGE, 0);
end;

def upsideDownLarge()
    rotate(180);
    translate(- DISPLAY_SIZE_LARGE, - DISPLAY_SIZE_LARGE);
end;

def flipVerticalLarge() 
    scale(1, -1);
    translate(0, - DISPLAY_SIZE_LARGE);
end;

def flipHorizontalLarge()
    scale(-1, 1);
    translate(- DISPLAY_SIZE_LARGE, 0);
end;

// Generic display transformations

def rotateLeft(display)
    case display.@type
        when @logic-display       then rotateLeftSmall();
        when @large-logic-display then rotateLeftLarge();
        else stopProcessor();
    end;
end;

def rotateRight(display)
    case display.@type
        when @logic-display       then rotateRightSmall();
        when @large-logic-display then rotateRightLarge();
        else stopProcessor();
    end;
end;

def upsideDown(display)
    case display.@type
        when @logic-display       then upsideDownSmall();
        when @large-logic-display then upsideDownLarge();
        else stopProcessor();
    end;
end;

def flipVertical(display)
    case display.@type
        when @logic-display       then flipVerticalSmall();
        when @large-logic-display then flipVerticalLarge();
        else stopProcessor();
    end;
end;

def flipHorizontal(display)
    case display.@type
        when @logic-display       then flipHorizontalSmall();
        when @large-logic-display then flipHorizontalLarge();
        else stopProcessor();
    end;
end;

// Scaling

def scaleSmallToLarge()
    scale(DISPLAY_SIZE_LARGE / DISPLAY_SIZE_SMALL, DISPLAY_SIZE_LARGE / DISPLAY_SIZE_SMALL);
end;

def scaleLargeToSmall()
    scale(DISPLAY_SIZE_SMALL / DISPLAY_SIZE_LARGE, DISPLAY_SIZE_SMALL / DISPLAY_SIZE_LARGE);
end;

// UNITS

// Searches for and binds a free unit of given type. If no free unit of given type can be found
// (either because none exists, or because all existing units are occupied), returns immediately.
//
// unit_type: type of the unit, @flare, @mono, @poly etc.
// initial_flag: initial flag to set to he freshly bound unit.
// returns the freshly bound unit, or null if no unit can be bound
def findFreeUnit(unit_type, initial_flag)
    ubind(unit_type);
    // No unit of this type exists
    if @unit == null then return null; end;

    first_unit = @unit;
    do
        if @unit.@controlled == 0 then
            flag(initial_flag);        // Mark unit as active
            return @unit;
        elsif first_unit.@dead == 1 then
            // first_unit got killed. It won't be served by ubind anymore
            // Replace with the current one
            first_unit = @unit;
        end;

        // Try the next one. If it is the same as the first one, we've seen them all
        ubind(unit_type);
    loop while first_unit != @unit;

    return null;
end;

// Searches for and binds a free unit of given type closest to the coordinates on the map given.
// If no free unit of given type can be found (either because none exists, or because all existing
// units are occupied), returns immediately.
//
// x, y: coordinates of the position to look around
// unit_type: type of the unit, @flare, @mono, @poly etc.
// initial_flag: initial flag to set to he freshly bound unit.
// returns the freshly bound unit closest to given coordinates, or null if no free unit of given type exists
def findClosestUnit(x, y, unit_type, initial_flag)
    while true do
        ubind(unit_type);
        // No unit of this type exists
        if @unit == null then return null; end;

        first_unit = @unit;
        best_unit = null;
        best_distance = 1e10;
        do
            if @unit.@controlled == 0 then
                distance = len(@unit.@x - x, @unit.@y - y);
                if distance < best_distance then
                    best_distance = distance;
                    best_unit = @unit;
                end;
            elsif first_unit.@dead == 1 then
                // first_unit got killed. It won't be served by ubind anymore
                // Replace with the current one
                first_unit = @unit;
            end;

            // Try the next one. If it is the same as the first one, we've seen them all
            ubind(unit_type);
        loop while first_unit != @unit;

        // No free unit at all
        if best_unit == null then
            return null;
        end;

        // If the best unit is still not controlled, flag it and return
        if best_unit.@controlled == 0 then
            ubind(best_unit);
            flag(initial_flag);
            return best_unit;
        end;
    end;
end;

// Searches for and binds a free unit of given type. Waits until the unit of requested type is available.
// Updates search status in SYS_MESSAGE.
//
// unit_type: type of the unit, @flare, @mono, @poly etc.
// initial_flag: initial flag to set to he freshly bound unit.
// returns the freshly bound unit
def waitForFreeUnit(unit_type, initial_flag)
    // Keep looking for unit until one is found
    while true do
        ubind(unit_type);
        if @unit == null then
            if SYS_MESSAGE then
                print($"No unit of type $unit_type found.");
                printflush(SYS_MESSAGE);
             end;
        elsif @unit.@controlled != 0 then
            if SYS_MESSAGE then
                print($"Looking for a free $unit_type...");
                printflush(SYS_MESSAGE);
             end;
        else
            flag(initial_flag);        // Mark unit as active
            return @unit;
        end;
    end;
end;

// TEXT OUTPUT

// Formats a number into the text buffer, without external memory.
// The text buffer must not contain placeholders {0} and {1}. It must contain at least one other placeholder ({2} or higher).
def formatNumber(n)
    n = floor(n);
    if n < 0 then
        format("-{2}");     // Prepend the minus sign
        n = abs(n);
    end;
    while n > 999 do
        mod = n % 1000;
        // Insert placeholder for the next group, thousands separator, leading zeroes (if any) and a placeholder for this group.
        format(mod < 10 ? "{2},00{1}" : mod < 100 ? "{2},0{1}" : "{2},{1}");
        format(mod);
        n \= 1000;
    end;

    // Put the rest of the number into the remaining placeholder
    format(n);
end;

// Prints the number straight away
// The text buffer must not contain any placeholders lower than {3}.
def printNumber(n)
    print("{2}");
    formatNumber(n);
end;

// UTILITY FUNCTIONS

// Computes the distance between points (x1, y1) and (x2, y2).
// Uses the len instruction for efficient hypotenuse calculation
def distance(x1, y1, x2, y2)
    len(x2 - x1, y2 - y1);
end;

