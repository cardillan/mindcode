// Mindcode system library
// Blocks
//
//* To use the Blocks library, use the `require blocks;` statement.

module blocks;

/**
 * Searches blocks linked to the processor for blocks of requested types, and assigns them to given variables if found.
 * The function tries to locate blocks repeatedly until all required blocks are found.
 *
 * This function is useful to dynamically locate blocks of given types, instead of using the predefined link name.
 * By locating the blocks dynamically, it is not necessary to link a block to the processor under a particular name,
 * such as `message1` or `switch1`. The function cannot handle situations when two blocks of the same type are needed
 * (e.g. two switches), but can handle situations where a single variable can accept multiple block types
 * (e.g. either memory cell or memory bank).
 *
 * Function outputs status information while it is running to the block passed in the `message` parameter.
 * When a `@message` block is among the required types and is found, it is used instead of the `message` parameter.
 *
 * **Inputs and outputs:**
 *
 * - `title`: title to be used as part of the status information.
 * - `message`: initial block to use to output status information. Typically `message1`.
 * - `linkMap`: definition of the required blocks. Each blocks needs four variables:
 *   - `requested`: type of the requested block, e.g. `@switch`.
 *   - `name`: name of the block to use as part of the status information.
 *   - `out variable`: variable to receive the block
 *   - `required`: if `true`, the function will wait until a block of given type is linked to the processor. If `false`, the function doesn't wait.
 *
 * Example of a call to this function:
 *
 * ```
 * require blocks;
 *
 * findLinkedBlocks("Example program.\nTrying to locate linked blocks", message1,
 *     @large-logic-display,   "Display",  out display,    true,
 *     @message,               "Message",  out message,    false,
 *     @switch,                "Switch",   out switch,     false,
 *     @memory-bank,           "Memory",   out memory,     true,
 *     @memory-cell,           "Memory",   out memory,     true
 * );
 * ```
 *
 * When the function call ends, the `display` and `memory` variables are set to a large display or memory cell/memory
 * bank respectively. `message` and `switch` are set if corresponding blocks are linked to the processor,
 * otherwise they're `null`.
 *
 * @footprint  Linking two blocks:  @message, "M", out m, true, @switch, "S", out s, false
 * @footprint  Linking four blocks: @message, "M", out m, true, @switch, "S", out s, false, @sorter, "S", out t, true, @conveyor, "C", out c, false
 * @footprint  Linking six blocks:  @message, "M", out m, true, @switch, "S", out s, false, @sorter, "S", out t, true, @conveyor, "C", out c, false, @diode, "D", out d, true, @battery, "B", out b, false
 */
inline void findLinkedBlocks(title, message, linkMap...)
    do
        // Declare variables just once and reuse them, otherwise warnings about unused variables
        // would get generated
        var requested, name, variable, required;

        for requested, name, out variable, required in linkMap do
            variable = null;
        end;
        print(title);
        var n = @links;
        while n > 0 do
            var block = getlink(--n);
            print("\nFound: ", block);
            var type = block.@type;
            for requested, name, out variable, required in linkMap do
                if requested == type then
                    variable = block;
                    if requested == @message then message = block; end;
                 end;
            end;
        end;

        var foundAll = 1;
        for requested, name, out variable, required in linkMap do
            print($"\n$name: $variable");
            if required then foundAll &= variable; end;
        end;
        printflush(message);
    while !foundAll;
end;
