// Mindcode system library
// Units
//
//* To use the Units library, use the `require units;`

/**
 * Finds and binds a free unit of given type. When such a unit is found, it is flagged by the given initial flag.
 * If no free unit of given type can be found (either because none exists, or because all existing units are occupied),
 * returns immediately.
 *
 * **Inputs and outputs:**
 *
 * - `unit_type`: type of the unit: `@flare`, `@mono`, `@poly` etc. Can be a variable.
 * - `initial_flag`: initial flag to set to he freshly bound unit.
 * - Returns the freshly bound unit, or `null` if no free unit of given type exists.
 *
 * The function doesn't use units that are controlled by a player or a different processor.
 */
def findFreeUnit(unit_type, initial_flag)
    ubind(unit_type);
    // No unit of this type exists
    if @unit == null then return null; end;

    var first_unit = @unit;
    do
        if @unit.@controlled == 0 then
            flag(initial_flag);        // Mark unit as active
            return @unit;
        elsif first_unit.@dead == 1 then
            // first_unit got killed. It won't be served by ubind anymore
            // Replace with the current one
            first_unit = @unit;
        end;

        // Try the next one. If it is the same as the first one, we've seen them all
        ubind(unit_type);
    while first_unit != @unit;

    return null;
end;

/**
 * Searches for and binds a free unit of given type closest to the coordinates on the map given.
 * If no free unit of given type can be found (either because none exists, or because all existing units
 * are occupied), returns immediately.
 *
 * **Inputs and outputs:**
 *
 * - `x`, `y`: position of the map to compute unit distance relative to
 * - `unit_type`: type of the unit: `@flare`, `@mono`, `@poly` etc. Can be a variable.
 * - `initial_flag`: initial flag to set to he freshly bound unit.
 * - Returns the freshly bound unit closest to given coordinates, or `null` if no free unit of given type exists.
 *
 * The function doesn't use units that are controlled by a player or a different processor.
*/
def findClosestUnit(x, y, unit_type, initial_flag)
    while true do
        ubind(unit_type);
        // No unit of this type exists
        if @unit == null then return null; end;

        var first_unit = @unit;
        var best_unit = null;
        var best_distance = 1e10;
        do
            if @unit.@controlled == 0 then
                var distance = len(@unit.@x - x, @unit.@y - y);
                if distance < best_distance then
                    best_distance = distance;
                    best_unit = @unit;
                end;
            elsif first_unit.@dead == 1 then
                // first_unit got killed. It won't be served by ubind anymore
                // Replace with the current one
                first_unit = @unit;
            end;

            // Try the next one. If it is the same as the first one, we've seen them all
            ubind(unit_type);
        while first_unit != @unit;

        // No free unit at all
        if best_unit == null then
            return null;
        end;

        // If the best unit is still not controlled, flag it and return
        if best_unit.@controlled == 0 then
            ubind(best_unit);
            flag(initial_flag);
            return best_unit;
        end;
    end;
end;

/**
 * Finds and binds a free unit of the given type. When such a unit is found, it is flagged by the given initial flag.
 * The function doesn't return until a free unit of the given type can be found.
 *
 * **Inputs and outputs:**
 *
 * - `unit_type`: type of the unit: `@flare`, `@mono`, `@poly` etc. Can be a variable.
 * - `initial_flag`: initial flag to set to he freshly bound unit.
 * - Returns the freshly bound unit.
 *
 * The function doesn't use units that are controlled by a player or a different processor.
 */
def waitForFreeUnit(unit_type, initial_flag)
    // Keep looking for unit until one is found
    while true do
        ubind(unit_type);
        if @unit != null then
            if @unit.@controlled == 0 then
                flag(initial_flag);        // Mark unit as active
                return @unit;
            end;
        end;
    end;
end;

/**
 * Finds and binds a free unit of the given type. When such a unit is found, it is flagged by the given initial flag.
 * The function doesn't return until a free unit of the given type can be found. The function prints status
 * information about the search onto a message block - one of two messages:
 *
 * - `No unit of type <unit type> found.` when no unit of given type exists,
 * - `Looking for a free <unit type>...` when units of given type exist, but none is free to use.
 *
 * **Inputs and outputs:**
 *
 * - `message`: message block to receive status information about the search.
 * - `preface`: additional text to output before the status message, e.g. description of the processor.
 * - `unit_type`: type of the unit: `@flare`, `@mono`, `@poly` etc. Can be a variable.
 * - `initial_flag`: initial flag to set to he freshly bound unit.
 * - Returns the freshly bound unit.
 *
 * The function doesn't use units that are controlled by a player or a different processor.
 */
def waitForFreeUnit(message, preface, unit_type, initial_flag)
    // Keep looking for unit until one is found
    while true do
        ubind(unit_type);
        if @unit == null then
            print($"${preface}No unit of type $unit_type found.");
            printflush(message);
        elsif @unit.@controlled != 0 then
            print($"${preface}Looking for a free $unit_type...");
            printflush(message);
        else
            flag(initial_flag);        // Mark unit as active
            return @unit;
        end;
    end;
end;

