package info.teksol.mindcode.mindustry.optimisation;

import info.teksol.mindcode.mindustry.LogicInstruction;
import info.teksol.mindcode.mindustry.LogicInstructionPipeline;

// Replaces conditional jumps whose condition is always true with unconditional jumps
// and completely removes jums that are always false.
// Such conditions will only be generated by explicit code, eg. if false or if true.
// If a variable is involved (eg.  ACTIVE = false; if ACTIVE ...) the jump won't be removed/replaced.
public class ConditionalJumpsNormalizer extends PipelinedOptimizer {
    public ConditionalJumpsNormalizer(LogicInstructionPipeline next) {
        super(next);
    }

    @Override
    protected State initialState() {
        return new BaseState();
    }

    private final class BaseState implements State {
        @Override
        public State emit(LogicInstruction instruction) {
            if (instruction.isJump()) {
                if (effectivelyUnconditional(instruction)) {
                    emit(new LogicInstruction(instruction.getOpcode(), instruction.getArgs().get(0), "always"));
                } else if (!alwaysFalse(instruction)) {
                    next.emit(instruction);
                }
            } else {
                next.emit(instruction);
            }
            return this;
        }

        @Override
        public State flush() {
            return this;
        }
    }

    private boolean effectivelyUnconditional(LogicInstruction jump) {
        switch (jump.getArgs().get(1)) {
            case "equal":       return hasArgs(jump, "true", "true") || hasArgs(jump, "false", "false");
            case "notEqual":    return hasArgs(jump, "true", "false") || hasArgs(jump, "false", "true");
            default:            return false;
        }
    }

    private boolean alwaysFalse(LogicInstruction jump) {
        switch (jump.getArgs().get(1)) {
            case "equal":       return hasArgs(jump, "true", "false") || hasArgs(jump, "false", "true");
            case "notEqual":    return hasArgs(jump, "true", "true") || hasArgs(jump, "false", "false");
            default:            return false;
        }
    }

    private boolean hasArgs(LogicInstruction jump, String arg2, String arg3) {
        return jump.getArgs().get(2).equals(arg2) && jump.getArgs().get(3).equals(arg3);
    }
}
