message("Initializing");

// Wait until container1 and sensor1 are available
do while container1.@dead != 0;
do while sorter1.@dead != 0;

// Find an unused unit
do
    ubind(@poly);
while @unit.@controlled != 0;

flag(90);
capacity = @unit.@itemCapacity;

// Locate core
do
    core = ulocate(:building, :core, false);
while core == null;

// This loops runs forever until the unit is lost
while true do
    message("Moving to core");
    moveTo(core);

    message("Taking items");
    do
        item = sorter1.@config;
        // If the unit carries incompatible items, drop them
        if @unit.@firstItem != null and @unit.@firstItem != item then
            message("Incorrect item");
            itemDrop(@air, capacity);
        end;
        itemTake(core, item, capacity);
        checkUnit();
    while @unit.@totalItems != capacity;

    message("Moving to container");
    moveTo(container1);

    // Drop to container. If the container is full, wait until it is possible to
    message("Dropping items");
    do
        itemDrop(container1, capacity);
        checkUnit();
    while @unit.@totalItems > 0;
end;


// Moves the unit to within 5 tiles from the building, waits till it gets there
void moveTo(building)
    x = building.@x;
    y = building.@y;
    do
        approach(x, y, 3);
        checkUnit();
    while !within(x, y, 5);
end;


// Restarts the entire program if unit is lost
void checkUnit()
    if @unit.@dead != 0 then
        end();
    end;
end;

void message(text)
    print(text);
    printflush(message1);
end;
