// Units is a system library providing functions for easy acquisition of units
require units;

// These assignments will be compiled into the output code as-is.
// It is possible to change them in the compiled code.

/// Configurable options:
param container = vault1;
param patch_x = 16;
param patch_y = 17;
param messages = message1;

// Title printed to messages to help identify the processor purpose
const title = "Drone mining\n";

// Creates a variable representing a Mindustry block linked as message1
linked message1;

begin
    // Find a unit if we don't have one
    if @unit.@dead != 0 or @unit.@controller != @this then
        // Some Mindustry code on the internet relies on nonzero flag
        // marking used units. Assign non-zero flag to protect our unit
        // from such code run by other processors.
        waitForFreeUnit(messages, title, @poly, rand(1000));
    end;

    // Throw away anything the unit might have been carrying
    itemDrop(@air, @unit.@totalItems);

    // Mine until the unit is lost or killed
    // Then the program restarts, acquiring another unit
    while @unit.@controller == @this and @unit.@dead == 0 do
        print(title);

        if @unit.@totalItems < @unit.@itemCapacity then
            println("State: mining");
            approach(patch_x, patch_y, 3);
            mine(patch_x, patch_y);
        else
            println("State: dropping");
            approach(container.@x, container.@y, 3);
            itemDrop(container, @unit.@totalItems);
        end;

        println("Unit capacity: ", @unit.@itemCapacity);
        println("Total items: ", @unit.@totalItems);
        println("First item: ", @unit.@firstItem);
        printflush(message1);
    end;
end;
