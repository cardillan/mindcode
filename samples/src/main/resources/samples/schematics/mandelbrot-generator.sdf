schematic
    name = "Mandelbrot Generator"
    description = """
        Draws the famous fractal on a large logic display using several hyperprocessors.
        Supports basic navigation (zoom in/out, camera movement), bookmarks, palette selection
        and showing a Julia set corresponding to the center of the displayed Mandelbrot fractal.

        Bookmarks: use buttons on the left of the top row to select a bookmark slot.
        Use buttons beneath the bookmark bar to load the bookmark/save current position to a bookmark.

        Palette: use buttons on the right of the top row.

        Julia set: an on/off switch below the message block showing current coordinates.

        Navigation: buttons below the display.
        """
    tag = "Schematic Builder"
    tag = BLOCK-LARGE-LOGIC-DISPLAY
    tag = BLOCK-HYPER-PROCESSOR

    @liquid-source       at ( 3,  0) liquid @cryofluid
    @pulse-conduit       at ( 3,  1) facing north
    @pulse-conduit       at ( 3,  2) facing north
    @liquid-router       at ( 3,  3)
    @pulse-conduit       at ( 3,  4) facing north
    @pulse-conduit       at ( 3,  5) facing north
    @liquid-router       at ( 3,  6)
    @pulse-conduit       at ( 3,  7) facing north
    @pulse-conduit       at ( 3,  8) facing north
    @liquid-router       at ( 3,  9)
    @pulse-conduit       at ( 3, 10) facing north
    @pulse-conduit       at ( 3, 11) facing north
    @liquid-router       at ( 3, 12)

    @liquid-source       at (10,  0) liquid @cryofluid
    @pulse-conduit       at (10,  1) facing north
    @pulse-conduit       at (10,  2) facing north
    @liquid-router       at (10,  3)
    @pulse-conduit       at (10,  4) facing north
    @pulse-conduit       at (10,  5) facing north
    @liquid-router       at (10,  6)
    @pulse-conduit       at (10,  7) facing north
    @pulse-conduit       at (10,  8) facing north
    @liquid-router       at (10,  9)
    @pulse-conduit       at (10, 10) facing north
    @pulse-conduit       at (10, 11) facing north
    @liquid-router       at (10, 12)

    @liquid-source       at (14,  5) liquid @cryofluid
    @liquid-source       at (15,  3) liquid @cryofluid
    @liquid-source       at (17,  5) liquid @cryofluid
    @liquid-source       at (19,  3) liquid @cryofluid

    @hyper-processor     at ( 0,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 0, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 4, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at ( 7, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  3) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at (11,  9) processor links a-* end mindcode = compute end
    @hyper-processor     at (11, 12) processor links a-* end mindcode = compute end
    @hyper-processor     at (14,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (14,  6) processor links a-* end mindcode = compute end
    @hyper-processor     at (17,  0) processor links a-* end mindcode = compute end
    @hyper-processor     at (17,  6) processor links a-* end mindcode = compute end

a-display1:
    @large-logic-display at (14,  9)

a-bank1:
    @memory-bank         at (15,  4)

message1:
    @message             at (10, 14) text "Mandelbrot Mania! v3.0"

message2:
    @message             at ( 0, 15) text "Bookmarks"

message3:
    @message             at (14, 15) text "Palette selection"

    // Movement switches
    b-switch1:  @switch  at (17,  4)    // up
    b-switch2:  @switch  at (16,  3)    // left
    b-switch3:  @switch  at (18,  3)    // right
    b-switch4:  @switch  at (17,  3)    // down
    b-switch5:  @switch  at (14,  4)    // zoom out
    b-switch6:  @switch  at (14,  3)    // zoom in
    b-switch7:  @switch  at (10, 13)    // Julia switch
    b-switch8:  @switch  at ( 3, 14)    // Load
    b-switch9:  @switch  at ( 3, 13)    // Save

    // Bookmark switches
    c-switch40: @switch  at ( 1, 15)
    c-switch41: @switch  at ( 2, 15)
    c-switch42: @switch  at ( 3, 15)
    c-switch43: @switch  at ( 4, 15)
    c-switch44: @switch  at ( 5, 15)
    c-switch45: @switch  at ( 6, 15)
    c-switch46: @switch  at ( 7, 15)
    c-switch47: @switch  at ( 8, 15)
    c-switch48: @switch  at ( 9, 15)
    c-switch49: @switch  at (10, 15)
    c-switch50: @switch  at (11, 15)
    c-switch51: @switch  at (12, 15)
    c-switch52: @switch  at (13, 15)

    // Palette switches
    c-switch54: @switch  at (15, 15)
    c-switch55: @switch  at (16, 15)
    c-switch56: @switch  at (17, 15)
    c-switch57: @switch  at (18, 15)
    c-switch58: @switch  at (19, 15)

    @logic-processor     at (18,  4) processor links * end mindcode = control end
end

control = """
    #set instruction-limit = 1500;

    linked message1, message2, message3, display1;
    linked memory      = bank1;
    linked buttonUp    = switch1;
    linked buttonLeft  = switch2;
    linked buttonRight = switch3;
    linked buttonDown  = switch4;
    linked buttonPlus  = switch5;
    linked buttonMinus = switch6;
    linked buttonJulia = switch7;
    linked buttonLoad  = switch8;
    linked buttonSave  = switch9;

    const DISPLAY_SIZE_LARGE = 176;
    const HALF_SIZE = DISPLAY_SIZE_LARGE / 2;
    const MAX_DEPTH = 63;
    const SKIP = 17;

    const VARIABLES = MAX_DEPTH + 1;
    const BOOKMARKS = VARIABLES + 16;
    const BOOKMARK_COUNT = 13;
    const BOOKMARK_SIZE = 6;
    const SLOTS = BOOKMARKS + BOOKMARK_COUNT * BOOKMARK_SIZE;
    const PROCESSORS = SLOTS + DISPLAY_SIZE_LARGE;

    allocate heap in memory[VARIABLES ... BOOKMARKS];

    // Amount of pixels to move the center when direction button is clicked
    const SHIFT = 44;

    const RUNNING_TEXT = "Rendering...\n-------------------------\n";
    const FINISHED_TEXT = "Finished.\n-------------------------\n";

    noinit external cached START;
    noinit external cached STOP;
    noinit external cached X;
    noinit external cached Y;
    noinit external cached ZOOM;
    noinit external cached JULIA;
    noinit external cached JULIA_X;
    noinit external cached JULIA_Y;
    noinit external cached PALETTE;

    var CHANGE = false;
    var text0 = RUNNING_TEXT;
    var text1 = "";
    var text2 = "";

    // Bookmark buttons state
    var bookmark_x = message2.@x;
    var bookmark_y = message2.@y;
    var bookmark = 1;
    var bookmark_clr = -1;
    var position = BOOKMARKS + BOOKMARK_SIZE * (bookmark - 1);

    // Palette buttons state
    var palette_x = message3.@x;
    var palette_clr = -1;

    begin
        initialize();

        var checking = 999;
        var updateBookmarks = true;
        var print = true;

        // Initialization complete
        START = 1;

        while true do
            if print then printInfo(); print = false; end;

            handleMove(buttonUp,    0,  1, 1);
            handleMove(buttonLeft, -1,  0, 1);
            handleMove(buttonRight, 1,  0, 1);
            handleMove(buttonDown,  0, -1, 1);
            handleMove(buttonPlus,  0,  0, 2);      // zoom  in
            handleMove(buttonMinus, 0,  0, 0.5);    // zoom  out

            if buttonJulia.@enabled != JULIA then
                CHANGE = true;
                JULIA = buttonJulia.@enabled;
                if JULIA then JULIA_X = X; JULIA_Y = Y; end;
            end;

            if buttonLoad.@enabled then
                loadBookmark(position, bookmark);
                CHANGE = true;
            end;

            if buttonSave.@enabled then
                saveBookmark(position, bookmark);
                updateBookmarks = true;
            end;

            handleTopRowButtons(out updateBookmarks);

            if updateBookmarks then
                printBookmarks(position, bookmark);
                updateBookmarks = false;
            end;

            // Computation progress
            if memory[checking] == 0 then
                checking -= 2;
                if checking <= PROCESSORS then
                    text0 = FINISHED_TEXT;
                end;
            end;

            // Parameters changed, recompute
            if CHANGE then
                print("Initializing...");
                printflush(message1);

                // Sent signal to stop all processors
                STOP++;

                // Waiting for all processors to actually stop
                for var i = 511; i > PROCESSORS; i -= 2 do
                    do while memory[i] > 0;
                end;

                CHANGE = false;

                // Clearing slots means processors will allocate them again
                // This fixes a situation where a processor gets destroyed or nonfunctional
                for var i in SLOTS ... PROCESSORS do
                    memory[i] = 0;
                end;

                // Dim the current display
                color(86, 86, 102, 204);
                rect(0, 0, 176, 176);
                drawflush(display1);

                // Signal next round of computing to processors
                START++;

                // Actual processors start at 511 at the highest.
                // Assigning 999 means we'll spend loops before processing the region where processors are,
                // giving them time to start computation and set the flag accordingly.
                // Otherwise we might consider some stopped even if they weren't.
                checking = 999;

                text0 = RUNNING_TEXT;
                text1 = text2 = "";
                print = true;
            end;
        end;
    end;

    //   STATUS OUTPUT
    ///////////////////////////////////////////////////////////////////////

    inline void printInfo()
        println("Mandelbrot Mania! v3.0");
        print(text0);
        if JULIA then
            println("Julia set of Mandelbrot");
            println("fractal at coordinates");
            print($"   X: $JULIA_X\n");
            print($"   Y: $JULIA_Y\n");
        else
            println("Mandelbrot set");
        end;
        println("-------------------------");
        print($"X: $X\n");
        print($"Y: $Y\n");
        print($"Zoom: $ZOOM\n");
        println(text1, text2);
        printflush(message1);
    end;

    inline void printBookmarks(position, bookmark)
        println("BOOKMARKS");
        println("[o] [o] [o] [o] ...");
        println("      [o] Load");
        println("      [o] Save");
        println("-------------------------");
        print($"Selected bookmark #$bookmark:\n");
        if memory[position + 3] then
            println("Julia set of Mandelbrot");
            println("fractal at coordinates");
            print($"   X: $\n", memory[position + 4]);
            print($"   Y: $\n", memory[position + 5]);
        else
            println("Mandelbrot set");
        end;
        println("-------------------------");
        print($"X: $\n", memory[position]);
        print($"Y: $\n", memory[position + 1]);
        print($"Zoom: $\n", memory[position + 2]);
        printflush(message2);
    end;

    //   BUTTON HANDLING
    ///////////////////////////////////////////////////////////////////////

    inline void handleMove(switch, x, y, z)
        if switch.enabled then
            CHANGE = true;
            if x != 0 then
                X = X + x * SHIFT / ZOOM;
            end;
            if y != 0 then
                Y = Y + y * SHIFT / ZOOM;
            end;
            if z != 1 then
                ZOOM = ZOOM * z;
            end;
            switch.enabled = false;
        end;
    end;

    inline void loadBookmark(position, bookmark)
        X = memory[position];
        Y = memory[position + 1];
        ZOOM = memory[position + 2];
        JULIA = memory[position + 3];
        JULIA_X = memory[position + 4];
        JULIA_Y = memory[position + 5];
        buttonJulia.enabled = JULIA;
        buttonLoad.enabled = false;
        text1 = "\nLoaded from #";
        text2 = bookmark;
    end;

    inline void saveBookmark(position, bookmark)
        memory[position] = X;
        memory[position + 1] = Y;
        memory[position + 2] = ZOOM;
        memory[position + 3] = JULIA;
        memory[position + 4] = JULIA_X;
        memory[position + 5] = JULIA_Y;
        buttonSave.enabled = false;
        text1 = "\nSaved to #";
        text2 = bookmark;
    end;

    inline void handleTopRowButtons(in out updateBookmarks)
        for var n in 0 ... @links do
            var switch = getlink(n);
            if switch.@type == @switch and switch.@y == bookmark_y then
                var button_x = switch.@x;
                if button_x >= palette_x then
                    var index = button_x - palette_x;
                    if index == PALETTE then
                        switch.enabled = true;
                    elsif index == palette_clr then
                        switch.enabled = false;
                        palette_clr = -1;
                    elsif switch.@enabled then
                        palette_clr = PALETTE;
                        PALETTE = index;
                        print("Palette #", PALETTE);
                        printflush(message3);
                        CHANGE = true;
                    end;
                else
                    var index = button_x - bookmark_x;
                    if index == bookmark then
                        switch.enabled = true;
                    elsif index == bookmark_clr then
                        switch.enabled = false;
                        bookmark_clr = -1;
                    elsif switch.@enabled then
                        bookmark_clr = bookmark;
                        bookmark = index;
                        position = BOOKMARKS + BOOKMARK_SIZE * (bookmark - 1);
                        updateBookmarks = true;
                    end;
                end;
            end;
        end;
    end;

    //   INITIALIZATION
    ///////////////////////////////////////////////////////////////////////

    inline void initialize()
        print("Initializing...");
        printflush(message1);

        createPalette();
        initializeBookmarks();

        STOP = 1;
        X = -0.8;
        Y = 0;
        ZOOM = 50;
        JULIA = false;
        JULIA_X = 0;
        JULIA_Y = 0;
        PALETTE = 1;

        print("Palette #", PALETTE);
        printflush(message3);
    end;

    inline void createPalette()
        // Palette creation
        var r = 128, g = 192, b = 64;

        for var i in 0 ... MAX_DEPTH do
            memory[i] = packcolor(r / 256, g / 256, b / 256, 255);
            r = (r + 147) % 256;
            g = (g +  87) % 256;
            b = (b +  59) % 256;
        end;

        memory[MAX_DEPTH] = packcolor(0, 0, 0, 1);
    end;

    inline void initializeBookmarks()
        var i = BOOKMARKS;
        bookmark(memory, out i, -0.8,           0,           50);
        bookmark(memory, out i, -0.14375,     1.0,         1600);
        bookmark(memory, out i, -1.675,       0.0,        25600);
        bookmark(memory, out i, -1.413547,   -0.03234831,  2500);
        bookmark(memory, out i,  0.37359375,  0.09015625, 12800);
        bookmark(memory, out i, -1.408547,   -0.03734831, 10000);
        bookmark(memory, out i,  0.371875,    0.078125,    3200);
        bookmark(memory, out i, -1.382347,   -0.02114831,  5000);
        bookmark(memory, out i,  0.355,       0.66,        3200);
        bookmark(memory, out i,  0.018125,   -0.818125,    6400);

        bookmarkJulia(memory, out i,  0.0,        0.0,           50,  -0.8,       0.0);
        bookmarkJulia(memory, out i, -0.14375,    1.03125,     3200,  -0.14375,   1.0);
        bookmarkJulia(memory, out i, -1.403547,   -0.02734831, 5000,  -1.408547, -0.03734831);

        while i < SLOTS do
            bookmark(memory, out i, X, Y, ZOOM);
        end;
    end;

    inline void bookmark(memory, in out position, x, y, zoom)
        memory[position++] = x;
        memory[position++] = y;
        memory[position++] = zoom;
        memory[position++] = false;
        position += 2;
    end;

    inline void bookmarkJulia(memory, in out position, x, y, zoom, julia_x, julia_y)
        memory[position++] = x;
        memory[position++] = y;
        memory[position++] = zoom;
        memory[position++] = true;
        memory[position++] = julia_x;
        memory[position++] = julia_y;
    end;
    """

compute = """
    require blocks;

    const DISPLAY_SIZE_LARGE = 176;
    const HALF_SIZE = DISPLAY_SIZE_LARGE / 2;
    const MAX_DEPTH = 63;
    const SKIP = 17;

    // Indices to the shared memory
    const VARIABLES = MAX_DEPTH + 1;
    const BOOKMARKS = VARIABLES + 16;
    const BOOKMARK_COUNT = 13;
    const BOOKMARK_SIZE = 6;
    const SLOTS = BOOKMARKS + BOOKMARK_COUNT * BOOKMARK_SIZE;
    const PROCESSORS = SLOTS + DISPLAY_SIZE_LARGE;

    var display, memory;
    allocate heap in memory[VARIABLES ... BOOKMARKS];

    external $START;        // Start signal
    external $STOP;         // Stop signal
    external $X;            // Coordinates and palette
    external $Y;
    external $ZOOM;
    external $JULIA;
    external $JULIA_X;
    external $JULIA_Y;
    external $PALETTE;

    // Current coordinates
    var ZOOM, OFFSET_X, OFFSET_Y;
    var JULIA, JULIA_X, JULIA_Y;

    // Palette configuration
    var PALETTE, SMOOTH;
    const ONE_TO_LOG = 1 / log(2);
    const QUARTER_TO_LOG = 0.25 / log(2);

    // Processor ID and processor state indexes
    // Dynamically updated when a conflict with another processor is detected
    var PROCESSOR_ID = @this.@x + 10000 * @this.@y;
    var PROC_ID_INDEX = PROCESSORS;
    var PROC_STATE_INDEX = PROCESSORS + 1;

    begin
        findLinkedBlocks("Mandelbrot Generator", null,
            @large-logic-display,   "Display",  out display,    true,
            @memory-bank,           "Memory",   out memory,     true
        );

        var start = 0, stop;
        while true do
            // Waiting for a start signal
            do
                // setState finds a non-conflicting processor slot
                // Writing zero state means this processor is not computing.
                setState(0);
            while start == $START;

            // New computation starts here
            start = $START;
            stop = $STOP;

            // We're on our job
            setState(start);

            // Load positional information
            ZOOM     = $ZOOM;
            OFFSET_X = -HALF_SIZE / ZOOM + $X;
            OFFSET_Y = -HALF_SIZE / ZOOM + $Y;
            JULIA    = $JULIA;
            JULIA_X  = $JULIA_X;
            JULIA_Y  = $JULIA_Y;
            PALETTE  = $PALETTE;
            SMOOTH   = PALETTE > 1;

            var line = 8;
            var increment = 8;
            var next_increment = 16;
            wait(rand(0.1));

        MasterLoop:
            for var lines in 0 ... DISPLAY_SIZE_LARGE do
                // Find a line
                var x = (SKIP * line) % DISPLAY_SIZE_LARGE;
                var position = x + SLOTS;

                if memory[position] == 0 then
                    memory[position] = PROCESSOR_ID;

                    for var y in 0 ... DISPLAY_SIZE_LARGE do
                        var iterations = compute(x, y);
                        drawPixel(x, y, iterations);

                        if memory[position] != PROCESSOR_ID then
                            break;   // Another processor took over this line
                        end;

                        if stop != $STOP then
                            break MasterLoop;        // Break is signalled
                        end;
                    end;
                end;

                line += increment;
                if line > DISPLAY_SIZE_LARGE then
                    increment = next_increment /= 2;
                    line = increment / 2;
                end;
            end;
        end;
    end;

    def compute(x, y)
        var zx = x / ZOOM + OFFSET_X;
        var zy = y / ZOOM + OFFSET_Y;
        var cx, cy;

        if JULIA then
            cx = JULIA_X;
            cy = JULIA_Y;
        else
            cx = zx;
            cy = zy;

            // Cardioid test
            var p = len(cx - 0.25, cy);
            if cx <= p - 2 * p * p + 0.25 then
                return MAX_DEPTH;
            end;

            // Bulb test
            if len(cx + 1, cy) <= 0.25 then
                return MAX_DEPTH;
            end;
        end;

        var dist, i;
        for i in 0 ... MAX_DEPTH do
            var x1 = zx;
            var y1 = zy;
            zx = x1 * x1 - y1 * y1 + cx;
            zy = 2 * x1 * y1 + cy;
            dist = len(zx, zy);
            if dist >= 64 then
                break;
            end;
        end;

        if i < SMOOTH * MAX_DEPTH then
            // Correction only if we're smoothing and not at max iteration
            var correction = 4 - log(log(dist) * QUARTER_TO_LOG) * ONE_TO_LOG;
            i += correction;
        end;

        return i;
    end;

    void drawPixel(x, y, iterations)
        if SMOOTH then
            if iterations == MAX_DEPTH then
                color(0, 0, 0, 255);
            else
                var r, g, b;
                case PALETTE
                    when 2 then
                        r = 255 - 7 * abs(32 - iterations);
                        g = 240 - 6 * abs(iterations - 32);
                        b = 120 + 4 * abs(32 - iterations);
                        color(r, g, b, 255);

                    when 3 then
                        r = 255 * sin(iterations / MAX_DEPTH * 360);
                        g = 255 * cos(iterations / MAX_DEPTH * 360);
                        b = 100 + 4 * abs(iterations - 32);
                        color(r, g, b, 255);

                    when 4 then
                        r = 4 * iterations;
                        g = 96 + 1.5 * iterations;
                        color(r, g, 0, 255);

                    else
                        r = 255 - 4 * iterations;
                        color(r, r, 0, 255);
                end;
            end;
        else
            col(memory[iterations]);
        end;

        rect(x, y, 1, 1);
        drawflush(display);
    end;

    void setState(state)
        // At index 512, we exceed the memory bank capacity
        while PROC_STATE_INDEX < 512 do
            if memory[PROC_ID_INDEX] == PROCESSOR_ID then
                memory[PROC_STATE_INDEX] = state;
                break;
            elsif memory[PROC_ID_INDEX] == 0 then
                memory[PROC_ID_INDEX] = PROCESSOR_ID;
                memory[PROC_STATE_INDEX] = state;
                break;
            else
                PROC_ID_INDEX += 2;
                PROC_STATE_INDEX += 2;
            end;
        end;
    end;
    """