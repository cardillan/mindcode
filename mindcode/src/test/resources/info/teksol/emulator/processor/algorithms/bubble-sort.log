    38 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Jump Optimization (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     1 instructions modified by If Expression Optimization (3 iterations).
     6 instructions eliminated by Data Flow Optimization (2 passes, 6 iterations).
     2 instructions modified by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
    25 instructions after optimizations.

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
 
     1 set ARRAY bank2
     2 set n SIZE
     3 label __label0
-    * op sub __tmp0 n 1
-    * set n __tmp0
+    4 op sub n n 1
     5 set sorted true
     6 set __tmp1 n
     7 set i 0
 
    12 set __fn0_i i
    13 set __fn0_j __tmp2
    14 set __fn0_sorted sorted
-    * read __tmp4 ARRAY __fn0_i
-    * set __fn0_a __tmp4
-    * read __tmp5 ARRAY __fn0_j
-    * set __fn0_b __tmp5
+   15 read __fn0_a ARRAY __fn0_i
+   16 read __fn0_b ARRAY __fn0_j
    17 op greaterThan __tmp6 __fn0_a __fn0_b
    18 jump __label8 equal __tmp6 false
    19 write __fn0_b ARRAY __fn0_i

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    14 set __fn0_sorted sorted
    15 read __fn0_a ARRAY __fn0_i
    16 read __fn0_b ARRAY __fn0_j
-    * op greaterThan __tmp6 __fn0_a __fn0_b
-    * jump __label8 equal __tmp6 false
+   17 jump __label8 lessThanEq __fn0_a __fn0_b
    18 write __fn0_b ARRAY __fn0_i
    19 write __fn0_a ARRAY __fn0_j
    20 set __tmp7 false
 
    30 jump __label3 always
    31 label __label5
    32 label __label1
-    * op equal __tmp8 sorted false
-    * jump __label0 notEqual __tmp8 false
+   33 jump __label0 equal sorted false
    34 label __label2
    35 set __tmp9 SIZE
    36 set i 0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     6 set __tmp1 n
     7 set i 0
     8 label __label3
-    * jump __label5 greaterThanEq i __tmp1
+    9 jump __label5 greaterThanEq i n
    10 op add __tmp2 i 1
    11 label __label6
    12 set __fn0_i i
    13 set __fn0_j __tmp2
    14 set __fn0_sorted sorted
-    * read __fn0_a ARRAY __fn0_i
-    * read __fn0_b ARRAY __fn0_j
+   15 read __fn0_a ARRAY i
+   16 read __fn0_b ARRAY __tmp2
    17 jump __label8 lessThanEq __fn0_a __fn0_b
-    * write __fn0_b ARRAY __fn0_i
-    * write __fn0_a ARRAY __fn0_j
+   18 write __fn0_b ARRAY i
+   19 write __fn0_a ARRAY __tmp2
    20 set __tmp7 false
    21 jump __label9 always
    22 label __label8
-    * set __tmp7 __fn0_sorted
+   23 set __tmp7 sorted
    24 label __label9
    25 set __tmp3 __tmp7
    26 label __label7
-    * set sorted __tmp3
+   27 set sorted __tmp7
    28 label __label4
    29 op add i i 1
    30 jump __label3 always
 
    35 set __tmp9 SIZE
    36 set i 0
    37 label __label10
-    * jump __label12 greaterThanEq i __tmp9
+   38 jump __label12 greaterThanEq i SIZE
    39 read __tmp10 ARRAY i
    40 print __tmp10
    41 label __label11

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-6 instructions):
 
     3 label __label0
     4 op sub n n 1
     5 set sorted true
-    * set __tmp1 n
     6 set i 0
     7 label __label3
     8 jump __label5 greaterThanEq i n
     9 op add __tmp2 i 1
    10 label __label6
-    * set __fn0_i i
-    * set __fn0_j __tmp2
-    * set __fn0_sorted sorted
    11 read __fn0_a ARRAY i
    12 read __fn0_b ARRAY __tmp2
    13 jump __label8 lessThanEq __fn0_a __fn0_b
 
    18 label __label8
    19 set __tmp7 sorted
    20 label __label9
-    * set __tmp3 __tmp7
    21 label __label7
    22 set sorted __tmp7
    23 label __label4
 
    27 label __label1
    28 jump __label0 equal sorted false
    29 label __label2
-    * set __tmp9 SIZE
    30 set i 0
    31 label __label10
    32 jump __label12 greaterThanEq i SIZE

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     6 set i 0
     7 label __label3
     8 jump __label5 greaterThanEq i n
+    9 label __label13
    10 op add __tmp2 i 1
    11 label __label6
    12 read __fn0_a ARRAY i
 
    23 set sorted __tmp7
    24 label __label4
    25 op add i i 1
-    * jump __label3 always
+   26 jump __label13 lessThan i n
    27 label __label5
    28 label __label1
    29 jump __label0 equal sorted false
 
    31 set i 0
    32 label __label10
    33 jump __label12 greaterThanEq i SIZE
+   34 label __label14
    35 read __tmp10 ARRAY i
    36 print __tmp10
    37 label __label11
    38 op add i i 1
-    * jump __label10 always
+   39 jump __label14 lessThan i SIZE
    40 label __label12
    41 end

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1:
 
     9 label __label13
    10 op add __tmp2 i 1
    11 label __label6
+   12 set __tmp7 sorted
    13 read __fn0_a ARRAY i
    14 read __fn0_b ARRAY __tmp2
-    * jump __label8 lessThanEq __fn0_a __fn0_b
+   15 jump __label9 lessThanEq __fn0_a __fn0_b
    16 write __fn0_b ARRAY i
    17 write __fn0_a ARRAY __tmp2
    18 set __tmp7 false
    19 jump __label9 always
-    * label __label8
-    * set __tmp7 sorted
    20 label __label9
    21 label __label7
    22 set sorted __tmp7

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
    16 write __fn0_b ARRAY i
    17 write __fn0_a ARRAY __tmp2
    18 set __tmp7 false
-    * jump __label9 always
    19 label __label9
    20 label __label7
    21 set sorted __tmp7

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     5 set sorted true
     6 set i 0
     7 label __label3
-    * jump __label5 greaterThanEq i n
+    8 jump __label5 greaterThanEq 0 n
     9 label __label13
    10 op add __tmp2 i 1
    11 label __label6
 
    28 label __label2
    29 set i 0
    30 label __label10
-    * jump __label12 greaterThanEq i SIZE
+   31 jump __label12 greaterThanEq 0 SIZE
    32 label __label14
    33 read __tmp10 ARRAY i
    34 print __tmp10

Modifications by Final phase, Single Step Elimination, iteration 1 (-1 instructions):
 
    36 op add i i 1
    37 jump __label14 lessThan i SIZE
    38 label __label12
-    * end

Final code before resolving virtual instructions:

set SIZE 64
set ARRAY bank2
set n SIZE
label __label0
op sub n n 1
set sorted true
set i 0
jump __label5 greaterThanEq 0 n
label __label13
op add __tmp2 i 1
set __tmp7 sorted
read __fn0_a ARRAY i
read __fn0_b ARRAY __tmp2
jump __label9 lessThanEq __fn0_a __fn0_b
write __fn0_b ARRAY i
write __fn0_a ARRAY __tmp2
set __tmp7 false
label __label9
set sorted __tmp7
op add i i 1
jump __label13 lessThan i n
label __label5
jump __label0 equal sorted false
set i 0
jump __label12 greaterThanEq 0 SIZE
label __label14
read __tmp10 ARRAY i
print __tmp10
op add i i 1
jump __label14 lessThan i SIZE
label __label12
