// Regulates production or consumption by switching devices ON or off.
// Linked blocks are identified and used according to their type as follows:
// messages are printed to the first message block found,
// reset switch is the first switch block found; reset causes complete reconfiguration (new scanning of all blocks),
// unloader, sorter or inverted sorter, if configured, is used to specify item to measure in item containers.
// The first found container/liquid-tank/battery/node is used for level measurement (surge towers are not supported).
// All devices linked after the container are switched ON or off according to the fullness of the container.
// Linking inverted sorter (regardless of its configuration) inverts the activation logic:
// devices are activated when the level is high and deactivated when it is low.
// Level is measured as a percentage of total capacity filled by materials.

param PCT_LOW = 60;
param PCT_HIGH = 80;
CONTAINER = null;
SORTER = null;
ACTIVE_TEXT = MAXIMUM = MESSAGE = ON = SENSOR = START = STATE = SWITCH = null;

do
	println("Configuring regulator...");
	n = @links;
	while n > 0
		n = n - 1;
		block = getlink(n);
		println("Found: ", block);
		case block.type
			when @message then
				MESSAGE = block;
			when @switch then
				SWITCH = block;
			when @sorter, @inverted-sorter, @unloader then
				SORTER = block;
			when @vault, @container, @core-shard, @core-foundation, @core-nucleus then
				CONTAINER = block;
				SENSOR = @totalItems;
				MAXIMUM = @itemCapacity;
				START = n + 1;
			when @liquid-tank, @liquid-container, @liquid-router then
				CONTAINER = block;
				SENSOR = @totalLiquids;
				MAXIMUM = @liquidCapacity;
				START = n + 1;
			when @battery, @battery-large then
				CONTAINER = block;
				SENSOR = @totalPower;
				MAXIMUM = @powerCapacity;
				START = n + 1;
			when @power-node, @power-node-large, @surge-tower then
				CONTAINER = block;
				SENSOR = @powerNetStored;
				MAXIMUM = @powerNetCapacity;
				START = n + 1;
		end;
	end;


	println("Message: ", MESSAGE);
	println("Switch: ", SWITCH);
	println("Sorter: ", SORTER);
	println("Container: ", CONTAINER);
	if CONTAINER == null
		println("No container.");
	end;

    printflush(MESSAGE);
loop while CONTAINER == null;

INVERTED = SORTER.type === @inverted-sorter;
setState(true);
CYCLES = 0;

SWITCH.enabled = 0;
while SWITCH.enabled == 0
	start = @time;
	item = SORTER.config;
	if item == null || SENSOR != @totalItems
		item = SENSOR;
		print($"Measuring [gold]total[] in $CONTAINER");
	else
		print($"Measuring [gold]$item[] in $CONTAINER");
	end;
	max = CONTAINER.sensor(MAXIMUM);
	amount = CONTAINER.sensor(item);
	pct = (100 * amount) \ max;
	
	if pct <= PCT_LOW
		setState(true);
	elsif pct >= PCT_HIGH
        setState(false);
	end;
	
	print($"\nLevel: [gold]$pct%[]");
	if INVERTED 
		print($"\nActivate above [green]$PCT_HIGH%[]");
		print($"\nDeactivate below [salmon]$PCT_LOW%[]");
	else
		print($"\nActivate below [green]$PCT_LOW%[]");
		print($"\nDeactivate above [salmon]$PCT_HIGH%[]");
	end;

    print(ACTIVE_TEXT);

	n = START;
	while n < @links
		block = getlink(n);
		block.enabled = ON;
		print("\n    ", block);
		n += 1;
	end;

	print($"[]\n# of cycles: $CYCLES");
	print($"\n[lightgray]Loop: $ ms", floor(@time - start));
	printflush(MESSAGE);
end;

inline def setState(newState)
    if STATE != newState
		STATE = newState;
		CYCLES += 1;
    	ON = INVERTED ^ STATE;
    	ACTIVE_TEXT = ON ? "\nCurrently active:[green]" : "\nCurrently inactive:[salmon]";
    end;
end;
