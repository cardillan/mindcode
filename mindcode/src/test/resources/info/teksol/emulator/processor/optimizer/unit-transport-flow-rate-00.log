   122 instructions before optimizations.
    20 instructions eliminated by Temp Variables Elimination.
     4 instructions eliminated by Dead Code Elimination (3 iterations).
     3 instructions eliminated by Jump Optimization (4 iterations).
     2 instructions eliminated by Single Step Elimination (2 passes, 6 iterations).
     1 instructions eliminated by Expression Optimization (2 passes, 3 iterations).
    10 instructions eliminated by Data Flow Optimization (3 passes, 10 iterations).
    13 instructions added by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
     1 instructions eliminated by Print Merging.
    94 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 916):
  * Loop Optimization: replicate condition at line 17            cost     5, benefit       25.0, efficiency        5.0 (+5 instructions)
    Loop Optimization: replicate condition at line 38            cost     8, benefit       25.0, efficiency        3.1

Pass 1: speed optimization selection (cost limit 911):
  * Loop Optimization: replicate condition at line 38            cost     8, benefit       25.0, efficiency        3.1 (+8 instructions)

Final code before resolving virtual instructions:

set SIGN_MILLIS null
set SORTER sorter1
set VAULT vault1
set BANK bank1
op equal __tmp1 sorter1 null
op equal __tmp2 vault1 null
op or __tmp3 __tmp1 __tmp2
op equal __tmp4 bank1 null
op or __tmp5 __tmp3 __tmp4
jump __label2 equal __tmp5 false
label __label14
print "Missing sorter, vault or memory bank."
printflush message1
set SORTER sorter1
set VAULT vault1
set BANK bank1
op equal __tmp1 sorter1 null
op equal __tmp2 vault1 null
op or __tmp3 __tmp1 __tmp2
op equal __tmp4 bank1 null
op or __tmp5 __tmp3 __tmp4
jump __label14 notEqual __tmp5 false
label __label2
read shipped BANK 511
read MULTIPLIER BANK 510
read SESSION_KEY BANK 509
sensor item SORTER @config
set last_total shipped
set index 0
set MILLIS 0
set wait 0
sensor __tmp10 SORTER @dead
op strictEqual __tmp11 __tmp10 0
sensor __tmp12 VAULT @dead
op strictEqual __tmp13 __tmp12 0
op land __tmp14 __tmp11 __tmp13
read __tmp15 BANK 509
op strictEqual __tmp16 SESSION_KEY __tmp15
op land __tmp17 __tmp14 __tmp16
jump __label5 equal __tmp17 false
label __label15
set start @time
op add wait wait 1000
jump __label6 lessThanEq start wait
print "Wait reset\n"
op add wait start 1000
label __label6
read shipped BANK 511
sensor item SORTER @config
jump __label8 greaterThanEq MILLIS 10000
op add MILLIS MILLIS 1000
op mul SIGN_MILLIS MULTIPLIER MILLIS
jump __label9 always 0 0
label __label8
read last_total BANK index
label __label9
write shipped BANK index
op sub __tmp31 shipped last_total
op div flow_rate __tmp31 SIGN_MILLIS
write flow_rate BANK 507
set __tmp33 @time
write __tmp33 BANK 508
op add __tmp34 index 1
op mod index __tmp34 10
op idiv flow_rate_str flow_rate 0.000016666666666666667
op div seconds MILLIS 1000
op sub elapsed @time start
print "Measured interval: "
print seconds
print " sec\nItem: "
print item
print "\nItems shipped: "
print shipped
print "\nContainer level: "
print 0
print "\nFlow rate: "
print flow_rate_str
print "\nTotal: "
print shipped
print "\nLast total: "
print last_total
print "\nIndex: "
print index
print "\nElapsed: "
print elapsed
print " ms"
printflush message1
set loops 0
jump __label12 greaterThanEq @time wait
label __label13
op add loops loops 1
jump __label13 lessThan @time wait
label __label12
sensor __tmp10 SORTER @dead
op strictEqual __tmp11 __tmp10 0
sensor __tmp12 VAULT @dead
op strictEqual __tmp13 __tmp12 0
op land __tmp14 __tmp11 __tmp13
read __tmp15 BANK 509
op strictEqual __tmp16 SESSION_KEY __tmp15
op land __tmp17 __tmp14 __tmp16
jump __label15 notEqual __tmp17 false
label __label5
