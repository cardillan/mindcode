   148 instructions before optimizations.
    26 instructions eliminated by Temp Variables Elimination.
     8 instructions eliminated by Dead Code Elimination (3 iterations).
     4 instructions eliminated by Jump Optimization (3 iterations).
     2 instructions eliminated by Single Step Elimination (4 iterations).
     3 instructions eliminated by Data Flow Optimization (3 passes, 10 iterations).
     3 instructions added by Loop Optimization (2 iterations).
     5 loops improved by Loop Optimization.
     5 instructions eliminated by Jump Straightening (3 iterations).
   103 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 898):
    Loop Optimization: replicate condition at line 14            cost     3, benefit       25,0, efficiency        8,3
  * Loop Optimization: replicate condition at line 55            cost     1, benefit       25,0, efficiency       25,0 (+1 instructions)

Pass 1: speed optimization selection (cost limit 897):
  * Loop Optimization: replicate condition at line 14            cost     3, benefit       25,0, efficiency        8,3 (+0 instructions)

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-26 instructions):
 
     1 set DISPLAY null
     2 set MEMORY null
     3 set M_START_INDEX 0
-    * op add __tmp0 M_START_INDEX 1
-    * set M_CURRENT_INDEX __tmp0
-    * op add __tmp1 M_CURRENT_INDEX 2
-    * set M_R0 __tmp1
-    * op add __tmp2 M_R0 1
-    * set M_G0 __tmp2
-    * op add __tmp3 M_G0 1
-    * set M_B0 __tmp3
-    * op add __tmp4 M_B0 1
-    * set M_R1 __tmp4
-    * op add __tmp5 M_R1 1
-    * set M_G1 __tmp5
-    * op add __tmp6 M_G1 1
-    * set M_B1 __tmp6
+    4 op add M_CURRENT_INDEX M_START_INDEX 1
+    5 op add M_R0 M_CURRENT_INDEX 2
+    6 op add M_G0 M_R0 1
+    7 op add M_B0 M_G0 1
+    8 op add M_R1 M_B0 1
+    9 op add M_G1 M_R1 1
+   10 op add M_B1 M_G1 1
    11 label __label0
    12 op equal __tmp7 MEMORY null
    13 op equal __tmp8 DISPLAY null
    14 op or __tmp9 __tmp7 __tmp8
    15 jump __label2 equal __tmp9 false
    16 print "Item/Liquid/Energy Level Display"
-    * set __tmp10 @links
-    * set n __tmp10
+   17 set n @links
    18 label __label3
    19 op greaterThan __tmp11 n 0
    20 jump __label5 equal __tmp11 false
-    * op sub __tmp12 n 1
-    * set n __tmp12
-    * getlink __tmp13 n
-    * set block __tmp13
+   21 op sub n n 1
+   22 getlink block n
    23 print "\nFound: "
    24 print block
-    * sensor __tmp14 block @type
-    * set __ast0 __tmp14
+   25 sensor __ast0 block @type
    26 jump __label8 equal __ast0 @large-logic-display
    27 jump __label7 always
    28 label __label8
 
    85 label __label1
    86 jump __label0 always
    87 label __label2
-    * read __tmp20 MEMORY M_CURRENT_INDEX
-    * set CURRENT_INDEX __tmp20
-    * read __tmp21 MEMORY M_R0
-    * set R0 __tmp21
-    * read __tmp22 MEMORY M_G0
-    * set G0 __tmp22
-    * read __tmp23 MEMORY M_B0
-    * set B0 __tmp23
-    * read __tmp24 MEMORY M_R1
-    * set R1 __tmp24
-    * read __tmp25 MEMORY M_G1
-    * set G1 __tmp25
-    * read __tmp26 MEMORY M_B1
-    * set B1 __tmp26
+   88 read CURRENT_INDEX MEMORY M_CURRENT_INDEX
+   89 read R0 MEMORY M_R0
+   90 read G0 MEMORY M_G0
+   91 read B0 MEMORY M_B0
+   92 read R1 MEMORY M_R1
+   93 read G1 MEMORY M_G1
+   94 read B1 MEMORY M_B1
    95 draw stroke 1
    96 label __label19
    97 sensor __tmp27 SWITCH @enabled
    98 op equal __tmp28 __tmp27 0
    99 jump __label21 equal __tmp28 false
-    * set __tmp29 @time
-    * set start __tmp29
+  100 set start @time
   101 print "Item/Liquid/Energy Level Display"
   102 draw clear 0 0 80
   103 draw color R0 G0 B0 255
   104 draw rect 10 10 156 156
-    * read __tmp30 MEMORY CURRENT_INDEX
-    * set head __tmp30
-    * read __tmp31 MEMORY head
-    * set last __tmp31
+  105 read head MEMORY CURRENT_INDEX
+  106 read last MEMORY head
   107 print "\nIndex: "
   108 print head
   109 print "\nValue: "
 
   113 label __label22
   114 op greaterThan __tmp32 x 10
   115 jump __label24 equal __tmp32 false
-    * op sub __tmp33 head 1
-    * set head __tmp33
-    * read __tmp34 MEMORY head
-    * set value __tmp34
-    * op sub __tmp35 x 5
-    * set x1 __tmp35
+  116 op sub head head 1
+  117 read value MEMORY head
+  118 op sub x1 x 5
   119 draw line x last x1 value
   120 set x x1
   121 set last value
 
   129 print __tmp36
   130 op div __tmp37 @time FREQ
   131 op ceil __tmp38 __tmp37
-    * op mul __tmp39 FREQ __tmp38
-    * set wait __tmp39
+  132 op mul wait FREQ __tmp38
   133 set loops 0
   134 label __label25
   135 op lessThan __tmp40 @time wait
   136 jump __label27 equal __tmp40 false
-    * op add __tmp41 loops 1
-    * set loops __tmp41
+  137 op add loops loops 1
   138 label __label26
   139 jump __label25 always
   140 label __label27

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-8 instructions):
 
    27 jump __label7 always
    28 label __label8
    29 set DISPLAY block
-    * set __tmp15 DISPLAY
    30 jump __label6 always
    31 label __label7
    32 jump __label10 equal __ast0 @message
    33 jump __label9 always
    34 label __label10
    35 set MESSAGE block
-    * set __tmp15 MESSAGE
    36 jump __label6 always
    37 label __label9
    38 jump __label12 equal __ast0 @switch
    39 jump __label11 always
    40 label __label12
    41 set SWITCH block
-    * set __tmp15 SWITCH
    42 jump __label6 always
    43 label __label11
    44 jump __label14 equal __ast0 @memory-bank
    45 jump __label13 always
    46 label __label14
    47 set MEMORY block
-    * set __tmp15 MEMORY
    48 jump __label6 always
    49 label __label13
    50 jump __label16 equal __ast0 @memory-cell
    51 jump __label15 always
    52 label __label16
    53 set MEMORY block
-    * set __tmp15 MEMORY
    54 jump __label6 always
    55 label __label15
-    * set __tmp15 null
    56 label __label6
    57 label __label4
    58 jump __label3 always
 
    70 op or __tmp18 __tmp16 __tmp17
    71 jump __label17 equal __tmp18 false
    72 print "\nNo memory or display."
-    * set __tmp19 "\nNo memory or display."
    73 jump __label18 always
    74 label __label17
-    * set __tmp19 null
    75 label __label18
    76 printflush MESSAGE
    77 label __label1

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-5 instructions):
 
    23 print "\nFound: "
    24 print block
    25 sensor __ast0 block @type
-    * jump __label8 equal __ast0 @large-logic-display
-    * jump __label7 always
+   26 jump __label7 notEqual __ast0 @large-logic-display
    27 label __label8
    28 set DISPLAY block
    29 jump __label6 always
    30 label __label7
-    * jump __label10 equal __ast0 @message
-    * jump __label9 always
+   31 jump __label9 notEqual __ast0 @message
    32 label __label10
    33 set MESSAGE block
    34 jump __label6 always
    35 label __label9
-    * jump __label12 equal __ast0 @switch
-    * jump __label11 always
+   36 jump __label11 notEqual __ast0 @switch
    37 label __label12
    38 set SWITCH block
    39 jump __label6 always
    40 label __label11
-    * jump __label14 equal __ast0 @memory-bank
-    * jump __label13 always
+   41 jump __label13 notEqual __ast0 @memory-bank
    42 label __label14
    43 set MEMORY block
    44 jump __label6 always
    45 label __label13
-    * jump __label16 equal __ast0 @memory-cell
-    * jump __label15 always
+   46 jump __label15 notEqual __ast0 @memory-cell
    47 label __label16
    48 set MEMORY block
    49 jump __label6 always

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-4 instructions):
 
    16 print "Item/Liquid/Energy Level Display"
    17 set n @links
    18 label __label3
-    * op greaterThan __tmp11 n 0
-    * jump __label5 equal __tmp11 false
+   19 jump __label5 lessThanEq n 0
    20 op sub n n 1
    21 getlink block n
    22 print "\nFound: "
 
    81 draw stroke 1
    82 label __label19
    83 sensor __tmp27 SWITCH @enabled
-    * op equal __tmp28 __tmp27 0
-    * jump __label21 equal __tmp28 false
+   84 jump __label21 notEqual __tmp27 0
    85 set start @time
    86 print "Item/Liquid/Energy Level Display"
    87 draw clear 0 0 80
 
    96 draw color R1 G1 B1 255
    97 set x 159
    98 label __label22
-    * op greaterThan __tmp32 x 10
-    * jump __label24 equal __tmp32 false
+   99 jump __label24 lessThanEq x 10
   100 op sub head head 1
   101 read value MEMORY head
   102 op sub x1 x 5
 
   116 op mul wait FREQ __tmp38
   117 set loops 0
   118 label __label25
-    * op lessThan __tmp40 @time wait
-    * jump __label27 equal __tmp40 false
+  119 jump __label27 greaterThanEq @time wait
   120 op add loops loops 1
   121 label __label26
   122 jump __label25 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-2 instructions):
 
    45 jump __label15 notEqual __ast0 @memory-cell
    46 label __label16
    47 set MEMORY block
-    * jump __label6 always
    48 label __label15
    49 label __label6
    50 label __label4
 
    63 op or __tmp18 __tmp16 __tmp17
    64 jump __label17 equal __tmp18 false
    65 print "\nNo memory or display."
-    * jump __label18 always
    66 label __label17
    67 label __label18
    68 printflush MESSAGE

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     2 set MEMORY null
     3 set M_START_INDEX 0
     4 op add M_CURRENT_INDEX M_START_INDEX 1
-    * op add M_R0 M_CURRENT_INDEX 2
-    * op add M_G0 M_R0 1
-    * op add M_B0 M_G0 1
-    * op add M_R1 M_B0 1
-    * op add M_G1 M_R1 1
-    * op add M_B1 M_G1 1
+    5 op add M_R0 M_START_INDEX 3
+    6 op add M_G0 M_CURRENT_INDEX 3
+    7 op add M_B0 M_R0 2
+    8 op add M_R1 M_G0 2
+    9 op add M_G1 M_B0 2
+   10 op add M_B1 M_R1 2
    11 label __label0
    12 op equal __tmp7 MEMORY null
    13 op equal __tmp8 DISPLAY null

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2:
 
     3 set M_START_INDEX 0
     4 op add M_CURRENT_INDEX M_START_INDEX 1
     5 op add M_R0 M_START_INDEX 3
-    * op add M_G0 M_CURRENT_INDEX 3
-    * op add M_B0 M_R0 2
-    * op add M_R1 M_G0 2
-    * op add M_G1 M_B0 2
-    * op add M_B1 M_R1 2
+    6 op add M_G0 M_START_INDEX 4
+    7 op add M_B0 M_START_INDEX 5
+    8 op add M_R1 M_CURRENT_INDEX 5
+    9 op add M_G1 M_R0 4
+   10 op add M_B1 M_G0 4
    11 label __label0
    12 op equal __tmp7 MEMORY null
    13 op equal __tmp8 DISPLAY null

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
     5 op add M_R0 M_START_INDEX 3
     6 op add M_G0 M_START_INDEX 4
     7 op add M_B0 M_START_INDEX 5
-    * op add M_R1 M_CURRENT_INDEX 5
-    * op add M_G1 M_R0 4
-    * op add M_B1 M_G0 4
+    8 op add M_R1 M_START_INDEX 6
+    9 op add M_G1 M_START_INDEX 7
+   10 op add M_B1 M_START_INDEX 8
    11 label __label0
    12 op equal __tmp7 MEMORY null
    13 op equal __tmp8 DISPLAY null

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1 (-1 instructions):
 
    17 set n @links
    18 label __label3
    19 jump __label5 lessThanEq n 0
+   20 label __label28
    21 op sub n n 1
    22 getlink block n
    23 print "\nFound: "
 
    49 label __label15
    50 label __label6
    51 label __label4
-    * jump __label3 always
+   52 jump __label28 greaterThan n 0
    53 label __label5
    54 print "\nMessage: "
    55 print MESSAGE
 
    95 draw color R1 G1 B1 255
    96 set x 159
    97 label __label22
-    * jump __label24 lessThanEq x 10
+   98 label __label29
    99 op sub head head 1
   100 read value MEMORY head
   101 op sub x1 x 5
 
   103 set x x1
   104 set last value
   105 label __label23
-    * jump __label22 always
+  106 jump __label29 greaterThan x 10
   107 label __label24
   108 draw color 255 255 255 255
   109 draw lineRect 10 10 156 156
 
   116 set loops 0
   117 label __label25
   118 jump __label27 greaterThanEq @time wait
+  119 label __label30
   120 op add loops loops 1
   121 label __label26
-    * jump __label25 always
+  122 jump __label30 lessThan @time wait
   123 label __label27
   124 drawflush DISPLAY
   125 print "\nWait loops: "

Modifications by Loop Optimization: replicate condition at line 55 (+1 instructions):
 
    81 label __label19
    82 sensor __tmp27 SWITCH @enabled
    83 jump __label21 notEqual __tmp27 0
+   84 label __label31
    85 set start @time
    86 print "Item/Liquid/Energy Level Display"
    87 draw clear 0 0 80
 
   127 print loops
   128 printflush MESSAGE
   129 label __label20
-    * jump __label19 always
+  130 sensor __tmp27 SWITCH @enabled
+  131 jump __label31 equal __tmp27 0
   132 label __label21
   133 control enabled switch1 0
   134 end

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   104 set x x1
   105 set last value
   106 label __label23
-    * jump __label29 greaterThan x 10
+  107 jump __label29 greaterThan x1 10
   108 label __label24
   109 draw color 255 255 255 255
   110 draw lineRect 10 10 156 156

Modifications by Loop Optimization: replicate condition at line 14 (+3 instructions):
 
    13 op equal __tmp8 DISPLAY null
    14 op or __tmp9 __tmp7 __tmp8
    15 jump __label2 equal __tmp9 false
+   16 label __label32
    17 print "Item/Liquid/Energy Level Display"
    18 set n @links
    19 label __label3
 
    69 label __label18
    70 printflush MESSAGE
    71 label __label1
-    * jump __label0 always
+   72 op equal __tmp7 MEMORY null
+   73 op equal __tmp8 DISPLAY null
+   74 op or __tmp9 __tmp7 __tmp8
+   75 jump __label32 notEqual __tmp9 false
    76 label __label2
    77 read CURRENT_INDEX MEMORY M_CURRENT_INDEX
    78 read R0 MEMORY M_R0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    71 label __label1
    72 op equal __tmp7 MEMORY null
    73 op equal __tmp8 DISPLAY null
-    * op or __tmp9 __tmp7 __tmp8
-    * jump __label32 notEqual __tmp9 false
+   74 op or __tmp9 __tmp16 __tmp17
+   75 jump __label32 notEqual __tmp18 false
    76 label __label2
    77 read CURRENT_INDEX MEMORY M_CURRENT_INDEX
    78 read R0 MEMORY M_R0

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-3 instructions):
 
    69 label __label18
    70 printflush MESSAGE
    71 label __label1
-    * op equal __tmp7 MEMORY null
-    * op equal __tmp8 DISPLAY null
-    * op or __tmp9 __tmp16 __tmp17
    72 jump __label32 notEqual __tmp18 false
    73 label __label2
    74 read CURRENT_INDEX MEMORY M_CURRENT_INDEX

Final code before resolving virtual instructions:

set FREQ 100
set DISPLAY null
set MEMORY null
set M_START_INDEX 0
op add M_CURRENT_INDEX M_START_INDEX 1
op add M_R0 M_START_INDEX 3
op add M_G0 M_START_INDEX 4
op add M_B0 M_START_INDEX 5
op add M_R1 M_START_INDEX 6
op add M_G1 M_START_INDEX 7
op add M_B1 M_START_INDEX 8
op equal __tmp7 MEMORY null
op equal __tmp8 DISPLAY null
op or __tmp9 __tmp7 __tmp8
jump __label2 equal __tmp9 false
label __label32
print "Item/Liquid/Energy Level Display"
set n @links
jump __label5 lessThanEq n 0
label __label28
op sub n n 1
getlink block n
print "\nFound: "
print block
sensor __ast0 block @type
jump __label7 notEqual __ast0 @large-logic-display
set DISPLAY block
jump __label6 always 0 0
label __label7
jump __label9 notEqual __ast0 @message
set MESSAGE block
jump __label6 always 0 0
label __label9
jump __label11 notEqual __ast0 @switch
set SWITCH block
jump __label6 always 0 0
label __label11
jump __label13 notEqual __ast0 @memory-bank
set MEMORY block
jump __label6 always 0 0
label __label13
jump __label15 notEqual __ast0 @memory-cell
set MEMORY block
label __label15
label __label6
jump __label28 greaterThan n 0
label __label5
print "\nMessage: "
print MESSAGE
print "\nSwitch: "
print SWITCH
print "\nMemory: "
print MEMORY
print "\nDisplay: "
print DISPLAY
op equal __tmp16 MEMORY null
op equal __tmp17 DISPLAY null
op or __tmp18 __tmp16 __tmp17
jump __label17 equal __tmp18 false
print "\nNo memory or display."
label __label17
printflush MESSAGE
jump __label32 notEqual __tmp18 false
label __label2
read CURRENT_INDEX MEMORY M_CURRENT_INDEX
read R0 MEMORY M_R0
read G0 MEMORY M_G0
read B0 MEMORY M_B0
read R1 MEMORY M_R1
read G1 MEMORY M_G1
read B1 MEMORY M_B1
draw stroke 1 0 0 0 0 0
sensor __tmp27 SWITCH @enabled
jump __label21 notEqual __tmp27 0
label __label31
set start @time
print "Item/Liquid/Energy Level Display"
draw clear 0 0 80 0 0 0
draw color R0 G0 B0 255 0 0
draw rect 10 10 156 156 0 0
read head MEMORY CURRENT_INDEX
read last MEMORY head
print "\nIndex: "
print head
print "\nValue: "
print last
draw color R1 G1 B1 255 0 0
set x 159
label __label29
op sub head head 1
read value MEMORY head
op sub x1 x 5
draw line x last x1 value 0 0
set x x1
set last value
jump __label29 greaterThan x1 10
draw color 255 255 255 255 0 0
draw lineRect 10 10 156 156 0 0
op sub __tmp36 @time start
print "\nTime: "
print __tmp36
op div __tmp37 @time FREQ
op ceil __tmp38 __tmp37 0
op mul wait FREQ __tmp38
set loops 0
jump __label27 greaterThanEq @time wait
label __label30
op add loops loops 1
jump __label30 lessThan @time wait
label __label27
drawflush DISPLAY
print "\nWait loops: "
print loops
printflush MESSAGE
sensor __tmp27 SWITCH @enabled
jump __label31 equal __tmp27 0
label __label21
control enabled switch1 0 0 0 0
end
