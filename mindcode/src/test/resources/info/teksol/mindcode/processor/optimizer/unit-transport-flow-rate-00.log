   121 instructions before optimizations.
    20 instructions eliminated by Temp Variables Elimination.
     4 instructions eliminated by Dead Code Elimination (3 iterations).
     3 instructions eliminated by Jump Optimization (3 iterations).
     1 instructions eliminated by Single Step Elimination (4 iterations).
     1 instructions eliminated by Expression Optimization (2 iterations).
     1 instructions eliminated by Data Flow Optimization (6 iterations).
    13 instructions added by Loop Optimization (2 iterations).
     3 loops improved by Loop Optimization.
     1 instructions eliminated by Print Merging.
   103 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 909):
  * Loop Optimization: replicate condition at line 16            cost   5, benefit       25.0, efficiency        5.0 (+5 instructions)
    Loop Optimization: replicate condition at line 37            cost   8, benefit       25.0, efficiency        3.1

Pass 1: speed optimization selection (cost limit 904):
  * Loop Optimization: replicate condition at line 37            cost   8, benefit       25.0, efficiency        3.1 (+8 instructions)

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-20 instructions):
 
     4 set IND_SESSION_KEY 509
     5 set IND_TIME 508
     6 set IND_FLOW_RATE 507
-    * op mul __tmp0 DELAY SAMPLES
-    * set TOTAL_MILLIS __tmp0
+    7 op mul TOTAL_MILLIS DELAY SAMPLES
+    8 noop
     9 set SORTER sorter1
    10 set VAULT vault1
    11 set BANK bank1
 
    24 label __label1
    25 jump __label0 always
    26 label __label2
-    * read __tmp6 BANK IND_SHIPPED
-    * set shipped __tmp6
-    * read __tmp7 BANK IND_MULTIPLIER
-    * set MULTIPLIER __tmp7
-    * read __tmp8 BANK IND_SESSION_KEY
-    * set SESSION_KEY __tmp8
-    * sensor __tmp9 SORTER @config
-    * set item __tmp9
+   27 read shipped BANK IND_SHIPPED
+   28 noop
+   29 read MULTIPLIER BANK IND_MULTIPLIER
+   30 noop
+   31 read SESSION_KEY BANK IND_SESSION_KEY
+   32 noop
+   33 sensor item SORTER @config
+   34 noop
    35 set last_total shipped
    36 set index 0
    37 set MILLIS 0
 
    47 op strictEqual __tmp16 SESSION_KEY __tmp15
    48 op land __tmp17 __tmp14 __tmp16
    49 jump __label5 equal __tmp17 false
-    * set __tmp18 @time
-    * set start __tmp18
-    * op add __tmp19 wait DELAY
-    * set wait __tmp19
+   50 set start @time
+   51 noop
+   52 op add wait wait DELAY
+   53 noop
    54 op greaterThan __tmp20 start wait
    55 jump __label6 equal __tmp20 false
    56 print "Wait reset\n"
-    * op add __tmp22 start DELAY
-    * set wait __tmp22
+   57 op add wait start DELAY
+   58 noop
    59 set __tmp21 wait
    60 jump __label7 always
    61 label __label6
    62 set __tmp21 null
    63 label __label7
-    * read __tmp23 BANK IND_SHIPPED
-    * set shipped __tmp23
-    * sensor __tmp24 SORTER @config
-    * set item __tmp24
-    * op add __tmp25 level shipped
-    * set total __tmp25
+   64 read shipped BANK IND_SHIPPED
+   65 noop
+   66 sensor item SORTER @config
+   67 noop
+   68 op add total level shipped
+   69 noop
    70 op lessThan __tmp26 MILLIS TOTAL_MILLIS
    71 jump __label8 equal __tmp26 false
-    * op add __tmp28 MILLIS DELAY
-    * set MILLIS __tmp28
-    * op mul __tmp29 MULTIPLIER MILLIS
-    * set SIGN_MILLIS __tmp29
+   72 op add MILLIS MILLIS DELAY
+   73 noop
+   74 op mul SIGN_MILLIS MULTIPLIER MILLIS
+   75 noop
    76 set __tmp27 SIGN_MILLIS
    77 jump __label9 always
    78 label __label8
-    * read __tmp30 BANK index
-    * set last_total __tmp30
+   79 read last_total BANK index
+   80 noop
    81 set __tmp27 last_total
    82 label __label9
    83 write total BANK index
    84 op sub __tmp31 total last_total
-    * op div __tmp32 __tmp31 SIGN_MILLIS
-    * set flow_rate __tmp32
+   85 op div flow_rate __tmp31 SIGN_MILLIS
+   86 noop
    87 write flow_rate BANK IND_FLOW_RATE
    88 set __tmp33 @time
    89 write __tmp33 BANK IND_TIME
    90 op add __tmp34 index 1
-    * op mod __tmp35 __tmp34 SAMPLES
-    * set index __tmp35
+   91 op mod index __tmp34 SAMPLES
+   92 noop
    93 op mul __tmp36 60000 flow_rate
-    * op floor __tmp37 __tmp36
-    * set flow_rate_str __tmp37
-    * op div __tmp38 MILLIS 1000
-    * set seconds __tmp38
-    * op sub __tmp39 @time start
-    * set elapsed __tmp39
+   94 op floor flow_rate_str __tmp36
+   95 noop
+   96 op div seconds MILLIS 1000
+   97 noop
+   98 op sub elapsed @time start
+   99 noop
   100 print "Measured interval: "
   101 print seconds
   102 print " sec"
 
   122 label __label10
   123 op lessThan __tmp40 @time wait
   124 jump __label12 equal __tmp40 false
-    * op add __tmp41 loops 1
-    * set loops __tmp41
+  125 op add loops loops 1
+  126 noop
   127 label __label11
   128 jump __label10 always
   129 label __label12

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-4 instructions):
 
    56 print "Wait reset\n"
    57 op add wait start DELAY
    58 noop
-    * set __tmp21 wait
+   59 noop
    60 jump __label7 always
    61 label __label6
-    * set __tmp21 null
+   62 noop
    63 label __label7
    64 read shipped BANK IND_SHIPPED
    65 noop
 
    73 noop
    74 op mul SIGN_MILLIS MULTIPLIER MILLIS
    75 noop
-    * set __tmp27 SIGN_MILLIS
+   76 noop
    77 jump __label9 always
    78 label __label8
    79 read last_total BANK index
    80 noop
-    * set __tmp27 last_total
+   81 noop
    82 label __label9
    83 write total BANK index
    84 op sub __tmp31 total last_total

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-3 instructions):
 
    51 noop
    52 op add wait wait DELAY
    53 noop
-    * op greaterThan __tmp20 start wait
-    * jump __label6 equal __tmp20 false
+   54 jump __label6 lessThanEq start wait
    55 print "Wait reset\n"
    56 op add wait start DELAY
    57 noop
 
    66 noop
    67 op add total level shipped
    68 noop
-    * op lessThan __tmp26 MILLIS TOTAL_MILLIS
-    * jump __label8 equal __tmp26 false
+   69 jump __label8 greaterThanEq MILLIS TOTAL_MILLIS
    70 op add MILLIS MILLIS DELAY
    71 noop
    72 op mul SIGN_MILLIS MULTIPLIER MILLIS
 
   118 printflush message1
   119 set loops 0
   120 label __label10
-    * op lessThan __tmp40 @time wait
-    * jump __label12 equal __tmp40 false
+  121 jump __label12 greaterThanEq @time wait
   122 op add loops loops 1
   123 noop
   124 label __label11

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    56 op add wait start DELAY
    57 noop
    58 noop
-    * jump __label7 always
+   59 noop
    60 label __label6
    61 noop
    62 label __label7

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
    88 op add __tmp34 index 1
    89 op mod index __tmp34 SAMPLES
    90 noop
-    * op mul __tmp36 60000 flow_rate
-    * op floor flow_rate_str __tmp36
+   91 op idiv flow_rate_str flow_rate 0.000016666666666666667
    92 noop
    93 op div seconds MILLIS 1000
    94 noop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    64 noop
    65 sensor item SORTER @config
    66 noop
-    * op add total level shipped
+   67 op add total 0 shipped
    68 noop
    69 jump __label8 greaterThanEq MILLIS TOTAL_MILLIS
    70 op add MILLIS MILLIS DELAY
 
   102 print "\nItems shipped: "
   103 print shipped
   104 print "\nContainer level: "
-    * print level
+  105 print 0
   106 print "\nFlow rate: "
   107 print flow_rate_str
   108 print "\nTotal: "

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-1 instructions):
 
    35 set last_total shipped
    36 set index 0
    37 set MILLIS 0
-    * set level 0
    38 set wait 0
    39 label __label3
    40 sensor __tmp10 SORTER @dead

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
   117 set loops 0
   118 label __label10
   119 jump __label12 greaterThanEq @time wait
+  120 label __label13
   121 op add loops loops 1
   122 noop
   123 label __label11
-    * jump __label10 always
+  124 jump __label13 lessThan @time wait
   125 label __label12
   126 label __label4
   127 jump __label3 always

Modifications by Loop Optimization: replicate condition at line 16 (+5 instructions):
 
    16 op equal __tmp4 BANK null
    17 op or __tmp5 __tmp3 __tmp4
    18 jump __label2 equal __tmp5 false
+   19 label __label14
    20 print "Missing sorter, vault or memory bank."
    21 printflush message1
    22 set SORTER sorter1
    23 set VAULT vault1
    24 set BANK bank1
    25 label __label1
-    * jump __label0 always
+   26 op equal __tmp1 SORTER null
+   27 op equal __tmp2 VAULT null
+   28 op or __tmp3 __tmp1 __tmp2
+   29 op equal __tmp4 BANK null
+   30 op or __tmp5 __tmp3 __tmp4
+   31 jump __label14 notEqual __tmp5 false
    32 label __label2
    33 read shipped BANK IND_SHIPPED
    34 noop

Modifications by Loop Optimization: replicate condition at line 37 (+8 instructions):
 
    52 op strictEqual __tmp16 SESSION_KEY __tmp15
    53 op land __tmp17 __tmp14 __tmp16
    54 jump __label5 equal __tmp17 false
+   55 label __label15
    56 set start @time
    57 noop
    58 op add wait wait DELAY
 
   131 jump __label13 lessThan @time wait
   132 label __label12
   133 label __label4
-    * jump __label3 always
+  134 sensor __tmp10 SORTER @dead
+  135 op strictEqual __tmp11 __tmp10 0
+  136 sensor __tmp12 VAULT @dead
+  137 op strictEqual __tmp13 __tmp12 0
+  138 op land __tmp14 __tmp11 __tmp13
+  139 read __tmp15 BANK IND_SESSION_KEY
+  140 op strictEqual __tmp16 SESSION_KEY __tmp15
+  141 op land __tmp17 __tmp14 __tmp16
+  142 jump __label15 notEqual __tmp17 false
   143 label __label5
   144 end

Modifications by Final phase, Print Merging, iteration 1 (-1 instructions):
 
   102 noop
   103 print "Measured interval: "
   104 print seconds
-    * print " sec"
-    * print "\nItem: "
+  105 print " sec\nItem: "
   106 print item
   107 print "\nItems shipped: "
   108 print shipped

Final code before resolving virtual instructions:

set DELAY 1000
set SAMPLES 10
set IND_SHIPPED 511
set IND_MULTIPLIER 510
set IND_SESSION_KEY 509
set IND_TIME 508
set IND_FLOW_RATE 507
op mul TOTAL_MILLIS DELAY SAMPLES
set SORTER sorter1
set VAULT vault1
set BANK bank1
op equal __tmp1 SORTER null
op equal __tmp2 VAULT null
op or __tmp3 __tmp1 __tmp2
op equal __tmp4 BANK null
op or __tmp5 __tmp3 __tmp4
jump __label2 equal __tmp5 false
label __label14
print "Missing sorter, vault or memory bank."
printflush message1
set SORTER sorter1
set VAULT vault1
set BANK bank1
op equal __tmp1 SORTER null
op equal __tmp2 VAULT null
op or __tmp3 __tmp1 __tmp2
op equal __tmp4 BANK null
op or __tmp5 __tmp3 __tmp4
jump __label14 notEqual __tmp5 false
label __label2
read shipped BANK IND_SHIPPED
read MULTIPLIER BANK IND_MULTIPLIER
read SESSION_KEY BANK IND_SESSION_KEY
sensor item SORTER @config
set last_total shipped
set index 0
set MILLIS 0
set wait 0
sensor __tmp10 SORTER @dead
op strictEqual __tmp11 __tmp10 0
sensor __tmp12 VAULT @dead
op strictEqual __tmp13 __tmp12 0
op land __tmp14 __tmp11 __tmp13
read __tmp15 BANK IND_SESSION_KEY
op strictEqual __tmp16 SESSION_KEY __tmp15
op land __tmp17 __tmp14 __tmp16
jump __label5 equal __tmp17 false
label __label15
set start @time
op add wait wait DELAY
jump __label6 lessThanEq start wait
print "Wait reset\n"
op add wait start DELAY
label __label6
read shipped BANK IND_SHIPPED
sensor item SORTER @config
op add total 0 shipped
jump __label8 greaterThanEq MILLIS TOTAL_MILLIS
op add MILLIS MILLIS DELAY
op mul SIGN_MILLIS MULTIPLIER MILLIS
jump __label9 always 0 0
label __label8
read last_total BANK index
label __label9
write total BANK index
op sub __tmp31 total last_total
op div flow_rate __tmp31 SIGN_MILLIS
write flow_rate BANK IND_FLOW_RATE
set __tmp33 @time
write __tmp33 BANK IND_TIME
op add __tmp34 index 1
op mod index __tmp34 SAMPLES
op idiv flow_rate_str flow_rate 0.000016666666666666667
op div seconds MILLIS 1000
op sub elapsed @time start
print "Measured interval: "
print seconds
print " sec\nItem: "
print item
print "\nItems shipped: "
print shipped
print "\nContainer level: "
print 0
print "\nFlow rate: "
print flow_rate_str
print "\nTotal: "
print total
print "\nLast total: "
print last_total
print "\nIndex: "
print index
print "\nElapsed: "
print elapsed
print " ms"
printflush message1
set loops 0
jump __label12 greaterThanEq @time wait
label __label13
op add loops loops 1
jump __label13 lessThan @time wait
label __label12
sensor __tmp10 SORTER @dead
op strictEqual __tmp11 __tmp10 0
sensor __tmp12 VAULT @dead
op strictEqual __tmp13 __tmp12 0
op land __tmp14 __tmp11 __tmp13
read __tmp15 BANK IND_SESSION_KEY
op strictEqual __tmp16 SESSION_KEY __tmp15
op land __tmp17 __tmp14 __tmp16
jump __label15 notEqual __tmp17 false
label __label5
end
