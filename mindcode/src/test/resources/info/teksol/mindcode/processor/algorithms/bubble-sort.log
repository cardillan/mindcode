    38 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Jump Optimization (4 iterations).
     1 instructions eliminated by Single Step Elimination (5 iterations).
     1 instructions eliminated by If Expression Optimization (3 iterations).
     5 instructions eliminated by Data Flow Optimization (2 passes, 6 iterations).
     2 instructions modified by Loop Optimization (3 iterations).
     2 loops improved by Loop Optimization.
    26 instructions after optimizations.

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
 
     1 set ARRAY bank2
     2 set n SIZE
     3 label __label0
-    * op sub __tmp0 n 1
-    * set n __tmp0
+    4 op sub n n 1
+    5 noop
     6 set sorted true
     7 set __tmp1 n
     8 set i 0
 
    13 set __fn0_i i
    14 set __fn0_j __tmp2
    15 set __fn0_sorted sorted
-    * read __tmp4 ARRAY __fn0_i
-    * set __fn0_a __tmp4
-    * read __tmp5 ARRAY __fn0_j
-    * set __fn0_b __tmp5
+   16 read __fn0_a ARRAY __fn0_i
+   17 noop
+   18 read __fn0_b ARRAY __fn0_j
+   19 noop
    20 op greaterThan __tmp6 __fn0_a __fn0_b
    21 jump __label8 equal __tmp6 false
    22 write __fn0_b ARRAY __fn0_i

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-2 instructions):
 
    17 noop
    18 read __fn0_b ARRAY __fn0_j
    19 noop
-    * op greaterThan __tmp6 __fn0_a __fn0_b
-    * jump __label8 equal __tmp6 false
+   20 jump __label8 lessThanEq __fn0_a __fn0_b
    21 write __fn0_b ARRAY __fn0_i
    22 write __fn0_a ARRAY __fn0_j
    23 set __tmp7 false
 
    33 jump __label3 always
    34 label __label5
    35 label __label1
-    * op equal __tmp8 sorted false
-    * jump __label0 notEqual __tmp8 false
+   36 jump __label0 equal sorted false
    37 label __label2
    38 set __tmp9 SIZE
    39 set i 0

Modifications by Iterated phase, If Expression Optimization, pass 1, iteration 1 (-1 instructions):
 
    13 set __fn0_i i
    14 set __fn0_j __tmp2
    15 set __fn0_sorted sorted
+   16 set __tmp3 __fn0_sorted
    17 read __fn0_a ARRAY __fn0_i
    18 noop
    19 read __fn0_b ARRAY __fn0_j
    20 noop
-    * jump __label8 lessThanEq __fn0_a __fn0_b
+   21 jump __label9 lessThanEq __fn0_a __fn0_b
    22 write __fn0_b ARRAY __fn0_i
    23 write __fn0_a ARRAY __fn0_j
-    * set __tmp7 false
+   24 set __tmp3 false
    25 jump __label9 always
-    * label __label8
-    * set __tmp7 __fn0_sorted
    26 label __label9
-    * set __tmp3 __tmp7
    27 label __label7
    28 set sorted __tmp3
    29 label __label4

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     7 set __tmp1 n
     8 set i 0
     9 label __label3
-    * jump __label5 greaterThanEq i __tmp1
+   10 jump __label5 greaterThanEq i n
    11 op add __tmp2 i 1
    12 label __label6
    13 set __fn0_i i
    14 set __fn0_j __tmp2
    15 set __fn0_sorted sorted
-    * set __tmp3 __fn0_sorted
-    * read __fn0_a ARRAY __fn0_i
+   16 set __tmp3 sorted
+   17 read __fn0_a ARRAY i
    18 noop
-    * read __fn0_b ARRAY __fn0_j
+   19 read __fn0_b ARRAY __tmp2
    20 noop
    21 jump __label9 lessThanEq __fn0_a __fn0_b
-    * write __fn0_b ARRAY __fn0_i
-    * write __fn0_a ARRAY __fn0_j
+   22 write __fn0_b ARRAY i
+   23 write __fn0_a ARRAY __tmp2
    24 set __tmp3 false
    25 jump __label9 always
    26 label __label9
 
    36 set __tmp9 SIZE
    37 set i 0
    38 label __label10
-    * jump __label12 greaterThanEq i __tmp9
+   39 jump __label12 greaterThanEq i SIZE
    40 read __tmp10 ARRAY i
    41 print __tmp10
    42 label __label11

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-5 instructions):
 
     4 op sub n n 1
     5 noop
     6 set sorted true
-    * set __tmp1 n
     7 set i 0
     8 label __label3
     9 jump __label5 greaterThanEq i n
    10 op add __tmp2 i 1
    11 label __label6
-    * set __fn0_i i
-    * set __fn0_j __tmp2
-    * set __fn0_sorted sorted
    12 set __tmp3 sorted
    13 read __fn0_a ARRAY i
    14 noop
 
    29 label __label1
    30 jump __label0 equal sorted false
    31 label __label2
-    * set __tmp9 SIZE
    32 set i 0
    33 label __label10
    34 jump __label12 greaterThanEq i SIZE

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     7 set i 0
     8 label __label3
     9 jump __label5 greaterThanEq i n
+   10 label __label13
    11 op add __tmp2 i 1
    12 label __label6
    13 set __tmp3 sorted
 
    25 set sorted __tmp3
    26 label __label4
    27 op add i i 1
-    * jump __label3 always
+   28 jump __label13 lessThan i n
    29 label __label5
    30 label __label1
    31 jump __label0 equal sorted false
 
    33 set i 0
    34 label __label10
    35 jump __label12 greaterThanEq i SIZE
+   36 label __label14
    37 read __tmp10 ARRAY i
    38 print __tmp10
    39 label __label11
    40 op add i i 1
-    * jump __label10 always
+   41 jump __label14 lessThan i SIZE
    42 label __label12
    43 end

Modifications by Iterated phase, Single Step Elimination, pass 2, iteration 1 (-1 instructions):
 
    19 write __fn0_b ARRAY i
    20 write __fn0_a ARRAY __tmp2
    21 set __tmp3 false
-    * jump __label9 always
+   22 noop
    23 label __label9
    24 label __label7
    25 set sorted __tmp3

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     6 set sorted true
     7 set i 0
     8 label __label3
-    * jump __label5 greaterThanEq i n
+    9 jump __label5 greaterThanEq 0 n
    10 label __label13
    11 op add __tmp2 i 1
    12 label __label6
 
    32 label __label2
    33 set i 0
    34 label __label10
-    * jump __label12 greaterThanEq i SIZE
+   35 jump __label12 greaterThanEq 0 SIZE
    36 label __label14
    37 read __tmp10 ARRAY i
    38 print __tmp10

Final code before resolving virtual instructions:

set SIZE 64
set ARRAY bank2
set n SIZE
label __label0
op sub n n 1
set sorted true
set i 0
jump __label5 greaterThanEq 0 n
label __label13
op add __tmp2 i 1
set __tmp3 sorted
read __fn0_a ARRAY i
read __fn0_b ARRAY __tmp2
jump __label9 lessThanEq __fn0_a __fn0_b
write __fn0_b ARRAY i
write __fn0_a ARRAY __tmp2
set __tmp3 false
label __label9
set sorted __tmp3
op add i i 1
jump __label13 lessThan i n
label __label5
jump __label0 equal sorted false
set i 0
jump __label12 greaterThanEq 0 SIZE
label __label14
read __tmp10 ARRAY i
print __tmp10
op add i i 1
jump __label14 lessThan i SIZE
label __label12
end
