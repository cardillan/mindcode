    37 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Jump Optimization (4 iterations).
     1 instructions eliminated by Single Step Elimination (5 iterations).
     2 instructions eliminated by Data Flow Optimization (2 passes, 6 iterations).
     3 instructions modified by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
    28 instructions after optimizations.

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
     0 set SIZE 128
     1 set ARRAY bank2
-    * op sub __tmp0 SIZE 1
-    * set __tmp1 __tmp0
+    2 op sub __tmp1 SIZE 1
+    3 noop
     4 set i 0
     5 label __label0
     6 jump __label2 greaterThanEq i __tmp1
-    * read __tmp2 ARRAY i
-    * set min __tmp2
+    7 read min ARRAY i
+    8 noop
     9 set min_index i
    10 op add __tmp3 i 1
    11 set __tmp4 SIZE
    12 set j __tmp3
    13 label __label3
    14 jump __label5 greaterThanEq j __tmp4
-    * read __tmp5 ARRAY j
-    * set curr __tmp5
+   15 read curr ARRAY j
+   16 noop
    17 op lessThan __tmp6 curr min
    18 jump __label6 equal __tmp6 false
    19 set min curr

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    18 jump __label6 equal __tmp6 false
    19 set min curr
    20 set min_index j
-    * set __tmp7 min_index
+   21 noop
    22 jump __label7 always
    23 label __label6
-    * set __tmp7 null
+   24 noop
    25 label __label7
    26 label __label4
    27 op add j j 1

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    14 jump __label5 greaterThanEq j __tmp4
    15 read curr ARRAY j
    16 noop
-    * op lessThan __tmp6 curr min
-    * jump __label6 equal __tmp6 false
+   17 jump __label6 greaterThanEq curr min
    18 set min curr
    19 set min_index j
    20 noop

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    18 set min curr
    19 set min_index j
    20 noop
-    * jump __label7 always
+   21 noop
    22 label __label6
    23 noop
    24 label __label7

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
    11 set __tmp4 SIZE
    12 set j __tmp3
    13 label __label3
-    * jump __label5 greaterThanEq j __tmp4
+   14 jump __label5 greaterThanEq j SIZE
    15 read curr ARRAY j
    16 noop
    17 jump __label6 greaterThanEq curr min
 
    36 set __tmp9 SIZE
    37 set i 0
    38 label __label8
-    * jump __label10 greaterThanEq i __tmp9
+   39 jump __label10 greaterThanEq i SIZE
    40 read __tmp10 ARRAY i
    41 print __tmp10
    42 label __label9

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     8 noop
     9 set min_index i
    10 op add __tmp3 i 1
-    * set __tmp4 SIZE
    11 set j __tmp3
    12 label __label3
    13 jump __label5 greaterThanEq j SIZE
 
    32 op add i i 1
    33 jump __label0 always
    34 label __label2
-    * set __tmp9 SIZE
    35 set i 0
    36 label __label8
    37 jump __label10 greaterThanEq i SIZE

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     4 set i 0
     5 label __label0
     6 jump __label2 greaterThanEq i __tmp1
+    7 label __label11
     8 read min ARRAY i
     9 noop
    10 set min_index i
 
    12 set j __tmp3
    13 label __label3
    14 jump __label5 greaterThanEq j SIZE
+   15 label __label12
    16 read curr ARRAY j
    17 noop
    18 jump __label6 greaterThanEq curr min
 
    25 label __label7
    26 label __label4
    27 op add j j 1
-    * jump __label3 always
+   28 jump __label12 lessThan j SIZE
    29 label __label5
    30 read __tmp8 ARRAY i
    31 write __tmp8 ARRAY min_index
    32 write min ARRAY i
    33 label __label1
    34 op add i i 1
-    * jump __label0 always
+   35 jump __label11 lessThan i __tmp1
    36 label __label2
    37 set i 0
    38 label __label8
    39 jump __label10 greaterThanEq i SIZE
+   40 label __label13
    41 read __tmp10 ARRAY i
    42 print __tmp10
    43 label __label9
    44 op add i i 1
-    * jump __label8 always
+   45 jump __label13 lessThan i SIZE
    46 label __label10
    47 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     3 noop
     4 set i 0
     5 label __label0
-    * jump __label2 greaterThanEq i __tmp1
+    6 jump __label2 greaterThanEq 0 __tmp1
     7 label __label11
     8 read min ARRAY i
     9 noop
 
    11 op add __tmp3 i 1
    12 set j __tmp3
    13 label __label3
-    * jump __label5 greaterThanEq j SIZE
+   14 jump __label5 greaterThanEq __tmp3 SIZE
    15 label __label12
    16 read curr ARRAY j
    17 noop
 
    36 label __label2
    37 set i 0
    38 label __label8
-    * jump __label10 greaterThanEq i SIZE
+   39 jump __label10 greaterThanEq 0 SIZE
    40 label __label13
    41 read __tmp10 ARRAY i
    42 print __tmp10

Final code before resolving virtual instructions:

set SIZE 128
set ARRAY bank2
op sub __tmp1 SIZE 1
set i 0
jump __label2 greaterThanEq 0 __tmp1
label __label11
read min ARRAY i
set min_index i
op add __tmp3 i 1
set j __tmp3
jump __label5 greaterThanEq __tmp3 SIZE
label __label12
read curr ARRAY j
jump __label6 greaterThanEq curr min
set min curr
set min_index j
label __label6
op add j j 1
jump __label12 lessThan j SIZE
label __label5
read __tmp8 ARRAY i
write __tmp8 ARRAY min_index
write min ARRAY i
op add i i 1
jump __label11 lessThan i __tmp1
label __label2
set i 0
jump __label10 greaterThanEq 0 SIZE
label __label13
read __tmp10 ARRAY i
print __tmp10
op add i i 1
jump __label13 lessThan i SIZE
label __label10
end
