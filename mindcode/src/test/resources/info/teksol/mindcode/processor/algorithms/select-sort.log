    37 instructions before optimizations.
     3 instructions eliminated by Temp Variables Elimination.
     2 instructions eliminated by Dead Code Elimination (3 iterations).
     1 instructions eliminated by Jump Optimization (4 iterations).
     1 instructions eliminated by Single Step Elimination (5 iterations).
     2 instructions eliminated by Data Flow Optimization (2 passes, 6 iterations).
     3 instructions modified by Loop Optimization (3 iterations).
     3 loops improved by Loop Optimization.
    28 instructions after optimizations.

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-3 instructions):
     0 set SIZE 128
     1 set ARRAY bank2
-    * op sub __tmp0 SIZE 1
-    * set __tmp1 __tmp0
+    2 op sub __tmp1 SIZE 1
     3 set i 0
     4 label __label0
     5 jump __label2 greaterThanEq i __tmp1
-    * read __tmp2 ARRAY i
-    * set min __tmp2
+    6 read min ARRAY i
     7 set min_index i
     8 op add __tmp3 i 1
     9 set __tmp4 SIZE
    10 set j __tmp3
    11 label __label3
    12 jump __label5 greaterThanEq j __tmp4
-    * read __tmp5 ARRAY j
-    * set curr __tmp5
+   13 read curr ARRAY j
    14 op lessThan __tmp6 curr min
    15 jump __label6 equal __tmp6 false
    16 set min curr

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-2 instructions):
 
    15 jump __label6 equal __tmp6 false
    16 set min curr
    17 set min_index j
-    * set __tmp7 min_index
    18 jump __label7 always
    19 label __label6
-    * set __tmp7 null
    20 label __label7
    21 label __label4
    22 op add j j 1

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-1 instructions):
 
    11 label __label3
    12 jump __label5 greaterThanEq j __tmp4
    13 read curr ARRAY j
-    * op lessThan __tmp6 curr min
-    * jump __label6 equal __tmp6 false
+   14 jump __label6 greaterThanEq curr min
    15 set min curr
    16 set min_index j
    17 jump __label7 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-1 instructions):
 
    14 jump __label6 greaterThanEq curr min
    15 set min curr
    16 set min_index j
-    * jump __label7 always
    17 label __label6
    18 label __label7
    19 label __label4

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
     9 set __tmp4 SIZE
    10 set j __tmp3
    11 label __label3
-    * jump __label5 greaterThanEq j __tmp4
+   12 jump __label5 greaterThanEq j SIZE
    13 read curr ARRAY j
    14 jump __label6 greaterThanEq curr min
    15 set min curr
 
    30 set __tmp9 SIZE
    31 set i 0
    32 label __label8
-    * jump __label10 greaterThanEq i __tmp9
+   33 jump __label10 greaterThanEq i SIZE
    34 read __tmp10 ARRAY i
    35 print __tmp10
    36 label __label9

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2 (-2 instructions):
 
     6 read min ARRAY i
     7 set min_index i
     8 op add __tmp3 i 1
-    * set __tmp4 SIZE
     9 set j __tmp3
    10 label __label3
    11 jump __label5 greaterThanEq j SIZE
 
    26 op add i i 1
    27 jump __label0 always
    28 label __label2
-    * set __tmp9 SIZE
    29 set i 0
    30 label __label8
    31 jump __label10 greaterThanEq i SIZE

Modifications by Iterated phase, Loop Optimization, pass 1, iteration 1:
 
     3 set i 0
     4 label __label0
     5 jump __label2 greaterThanEq i __tmp1
+    6 label __label11
     7 read min ARRAY i
     8 set min_index i
     9 op add __tmp3 i 1
    10 set j __tmp3
    11 label __label3
    12 jump __label5 greaterThanEq j SIZE
+   13 label __label12
    14 read curr ARRAY j
    15 jump __label6 greaterThanEq curr min
    16 set min curr
 
    19 label __label7
    20 label __label4
    21 op add j j 1
-    * jump __label3 always
+   22 jump __label12 lessThan j SIZE
    23 label __label5
    24 read __tmp8 ARRAY i
    25 write __tmp8 ARRAY min_index
    26 write min ARRAY i
    27 label __label1
    28 op add i i 1
-    * jump __label0 always
+   29 jump __label11 lessThan i __tmp1
    30 label __label2
    31 set i 0
    32 label __label8
    33 jump __label10 greaterThanEq i SIZE
+   34 label __label13
    35 read __tmp10 ARRAY i
    36 print __tmp10
    37 label __label9
    38 op add i i 1
-    * jump __label8 always
+   39 jump __label13 lessThan i SIZE
    40 label __label10
    41 end

Modifications by Iterated phase, Data Flow Optimization, pass 2, iteration 1:
 
     2 op sub __tmp1 SIZE 1
     3 set i 0
     4 label __label0
-    * jump __label2 greaterThanEq i __tmp1
+    5 jump __label2 greaterThanEq 0 __tmp1
     6 label __label11
     7 read min ARRAY i
     8 set min_index i
     9 op add __tmp3 i 1
    10 set j __tmp3
    11 label __label3
-    * jump __label5 greaterThanEq j SIZE
+   12 jump __label5 greaterThanEq __tmp3 SIZE
    13 label __label12
    14 read curr ARRAY j
    15 jump __label6 greaterThanEq curr min
 
    30 label __label2
    31 set i 0
    32 label __label8
-    * jump __label10 greaterThanEq i SIZE
+   33 jump __label10 greaterThanEq 0 SIZE
    34 label __label13
    35 read __tmp10 ARRAY i
    36 print __tmp10

Final code before resolving virtual instructions:

set SIZE 128
set ARRAY bank2
op sub __tmp1 SIZE 1
set i 0
jump __label2 greaterThanEq 0 __tmp1
label __label11
read min ARRAY i
set min_index i
op add __tmp3 i 1
set j __tmp3
jump __label5 greaterThanEq __tmp3 SIZE
label __label12
read curr ARRAY j
jump __label6 greaterThanEq curr min
set min curr
set min_index j
label __label6
op add j j 1
jump __label12 lessThan j SIZE
label __label5
read __tmp8 ARRAY i
write __tmp8 ARRAY min_index
write min ARRAY i
op add i i 1
jump __label11 lessThan i __tmp1
label __label2
set i 0
jump __label10 greaterThanEq 0 SIZE
label __label13
read __tmp10 ARRAY i
print __tmp10
op add i i 1
jump __label13 lessThan i SIZE
label __label10
end
