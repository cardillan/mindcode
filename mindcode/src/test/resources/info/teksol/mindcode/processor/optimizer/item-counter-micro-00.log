   263 instructions before optimizations.
    41 instructions eliminated by Temp Variables Elimination.
    34 instructions eliminated by Dead Code Elimination (5 iterations).
     1 instructions eliminated by Jump Normalization (3 iterations).
    17 instructions eliminated by Jump Optimization (3 iterations).
    13 instructions eliminated by Single Step Elimination (4 iterations).
     2 instructions eliminated by Expression Optimization (2 iterations).
     4 instructions eliminated by Data Flow Optimization (7 iterations).
     1 instructions added by Loop Optimization (2 iterations).
     1 loops improved by Loop Optimization.
     3 instructions eliminated by Jump Straightening (3 iterations).
     4 instructions updated by PropagateJumpTargets.
     2 instructions eliminated by Unreachable Code Elimination.
     4 instructions eliminated by Print Merging.
   143 instructions after optimizations.

Pass 1: speed optimization selection (cost limit 852):
  * Loop Optimization: replicate condition at line 68            cost   1, benefit       25.0, efficiency       25.0 (+1 instructions)

Modifications by Initial phase, Temp Variables Elimination, iteration 1 (-41 instructions):
 
     8 set CONV1 CONV2
     9 set MEMORY CONV1
    10 set LINKED 0
-    * set __tmp0 @links
-    * set LINKS __tmp0
+   11 set LINKS @links
+   12 noop
    13 set n LINKS
    14 label __label3
-    * op sub __tmp1 n 1
-    * set n __tmp1
-    * getlink __tmp2 n
-    * set block __tmp2
-    * sensor __tmp3 block @type
-    * set __ast0 __tmp3
+   15 op sub n n 1
+   16 noop
+   17 getlink block n
+   18 noop
+   19 sensor __ast0 block @type
+   20 noop
    21 jump __label8 equal __ast0 @memory-cell
    22 jump __label7 always
    23 label __label8
 
    41 set CONV3 CONV2
    42 set CONV2 CONV1
    43 set CONV1 block
-    * op add __tmp5 LINKED 1
-    * set LINKED __tmp5
+   44 op add LINKED LINKED 1
+   45 noop
    46 set __tmp4 LINKED
    47 jump __label6 always
    48 label __label11
 
    93 label __label2
    94 set BATCH_DURATION 2000
    95 op idiv __tmp13 MIN_BATCH 10
-    * op max __tmp14 __tmp13 1
-    * set MIN_BATCH __tmp14
+   96 op max MIN_BATCH __tmp13 1
+   97 noop
    98 op idiv __tmp15 MAX_BATCH 10
-    * op max __tmp16 __tmp15 MIN_BATCH
-    * set MAX_BATCH __tmp16
+   99 op max MAX_BATCH __tmp15 MIN_BATCH
+  100 noop
   101 set BATCH_STEP 1
   102 set BATCH MIN_BATCH
-    * read __tmp17 MEMORY 0
-    * set total __tmp17
-    * op idiv __tmp18 total 10
-    * set batches __tmp18
-    * op add __tmp19 batches BATCH
-    * set limit __tmp19
+  103 read total MEMORY 0
+  104 noop
+  105 op idiv batches total 10
+  106 noop
+  107 op add limit batches BATCH
+  108 noop
   109 control enabled switch1 0
   110 set b4 0
   111 set b3 b4
 
   116 set a2 a3
   117 set a1 a2
   118 set ratePerMin 0
-    * set __tmp20 @time
-    * set startTime __tmp20
+  119 set startTime @time
+  120 noop
   121 label __label19
   122 sensor __tmp21 switch1 @enabled
   123 op equal __tmp22 __tmp21 0
   124 jump __label21 equal __tmp22 false
-    * set __tmp23 @time
-    * set start __tmp23
-    * sensor __tmp24 CONV1 @totalItems
-    * set a1 __tmp24
+  125 set start @time
+  126 noop
+  127 sensor a1 CONV1 @totalItems
+  128 noop
   129 op lessThan __tmp25 a1 b1
   130 jump __label22 equal __tmp25 false
-    * op add __tmp27 batches 1
-    * set batches __tmp27
+  131 op add batches batches 1
+  132 noop
   133 set __tmp26 batches
   134 jump __label23 always
   135 label __label22
   136 set __tmp26 null
   137 label __label23
-    * sensor __tmp28 CONV2 @totalItems
-    * set a2 __tmp28
+  138 sensor a2 CONV2 @totalItems
+  139 noop
   140 op lessThan __tmp29 a2 b2
   141 jump __label24 equal __tmp29 false
-    * op add __tmp31 batches 1
-    * set batches __tmp31
+  142 op add batches batches 1
+  143 noop
   144 set __tmp30 batches
   145 jump __label25 always
   146 label __label24
   147 set __tmp30 null
   148 label __label25
-    * sensor __tmp32 CONV3 @totalItems
-    * set a3 __tmp32
+  149 sensor a3 CONV3 @totalItems
+  150 noop
   151 op lessThan __tmp33 a3 b3
   152 jump __label26 equal __tmp33 false
-    * op add __tmp35 batches 1
-    * set batches __tmp35
+  153 op add batches batches 1
+  154 noop
   155 set __tmp34 batches
   156 jump __label27 always
   157 label __label26
   158 set __tmp34 null
   159 label __label27
-    * sensor __tmp36 CONV4 @totalItems
-    * set a4 __tmp36
+  160 sensor a4 CONV4 @totalItems
+  161 noop
   162 op lessThan __tmp37 a4 b4
   163 jump __label28 equal __tmp37 false
-    * op add __tmp39 batches 1
-    * set batches __tmp39
+  164 op add batches batches 1
+  165 noop
   166 set __tmp38 batches
   167 jump __label29 always
   168 label __label28
 
   170 label __label29
   171 op greaterThan __tmp40 batches limit
   172 jump __label30 equal __tmp40 false
-    * op sub __tmp42 @time startTime
-    * set duration __tmp42
-    * set __tmp43 @time
-    * set startTime __tmp43
-    * op div __tmp44 BATCH duration
-    * set rate __tmp44
+  173 op sub duration @time startTime
+  174 noop
+  175 set startTime @time
+  176 noop
+  177 op div rate BATCH duration
+  178 noop
   179 op mul __tmp45 rate 166.66666666666666
   180 write __tmp45 MEMORY lastCell
   181 op mul __tmp46 rate 600000
-    * op floor __tmp47 __tmp46
-    * set ratePerMin __tmp47
+  182 op floor ratePerMin __tmp46
+  183 noop
   184 op lessThanEq __tmp48 duration BATCH_DURATION
   185 jump __label32 equal __tmp48 false
   186 op add __tmp50 BATCH BATCH_STEP
-    * op min __tmp51 __tmp50 MAX_BATCH
-    * set BATCH __tmp51
-    * op mul __tmp52 BATCH 10
-    * set BATCH_TXT __tmp52
+  187 op min BATCH __tmp50 MAX_BATCH
+  188 noop
+  189 op mul BATCH_TXT BATCH 10
+  190 noop
   191 set __tmp49 BATCH_TXT
   192 jump __label33 always
   193 label __label32
   194 set __tmp49 null
   195 label __label33
-    * op add __tmp53 limit BATCH
-    * set limit __tmp53
+  196 op add limit limit BATCH
+  197 noop
   198 set __tmp41 limit
   199 jump __label31 always
   200 label __label30
   201 set __tmp41 null
   202 label __label31
-    * op mul __tmp54 batches 10
-    * set total __tmp54
+  203 op mul total batches 10
+  204 noop
   205 write total MEMORY 0
   206 print "Item Counter                  \n"
   207 print "Monitoring [green]"
 
   213 print "Rate: [green]"
   214 print ratePerMin
   215 print "[] items/min\n"
-    * sensor __tmp55 CONV1 @totalItems
-    * set b1 __tmp55
+  216 sensor b1 CONV1 @totalItems
+  217 noop
   218 op lessThan __tmp56 b1 a1
   219 jump __label34 equal __tmp56 false
-    * op add __tmp58 batches 1
-    * set batches __tmp58
+  220 op add batches batches 1
+  221 noop
   222 set __tmp57 batches
   223 jump __label35 always
   224 label __label34
   225 set __tmp57 null
   226 label __label35
-    * sensor __tmp59 CONV2 @totalItems
-    * set b2 __tmp59
+  227 sensor b2 CONV2 @totalItems
+  228 noop
   229 op lessThan __tmp60 b2 a2
   230 jump __label36 equal __tmp60 false
-    * op add __tmp62 batches 1
-    * set batches __tmp62
+  231 op add batches batches 1
+  232 noop
   233 set __tmp61 batches
   234 jump __label37 always
   235 label __label36
   236 set __tmp61 null
   237 label __label37
-    * sensor __tmp63 CONV3 @totalItems
-    * set b3 __tmp63
+  238 sensor b3 CONV3 @totalItems
+  239 noop
   240 op lessThan __tmp64 b3 a3
   241 jump __label38 equal __tmp64 false
-    * op add __tmp66 batches 1
-    * set batches __tmp66
+  242 op add batches batches 1
+  243 noop
   244 set __tmp65 batches
   245 jump __label39 always
   246 label __label38
   247 set __tmp65 null
   248 label __label39
-    * sensor __tmp67 CONV4 @totalItems
-    * set b4 __tmp67
+  249 sensor b4 CONV4 @totalItems
+  250 noop
   251 op lessThan __tmp68 b4 a4
   252 jump __label40 equal __tmp68 false
-    * op add __tmp70 batches 1
-    * set batches __tmp70
+  253 op add batches batches 1
+  254 noop
   255 set __tmp69 batches
   256 jump __label41 always
   257 label __label40
   258 set __tmp69 null
   259 label __label41
   260 op sub __tmp71 @time startTime
-    * op floor __tmp72 __tmp71
-    * set elapsed __tmp72
+  261 op floor elapsed __tmp71
+  262 noop
   263 op greaterThanEq __tmp73 elapsed 10000
   264 jump __label42 equal __tmp73 false
   265 op idiv __tmp75 BATCH 5
-    * op max __tmp76 __tmp75 MIN_BATCH
-    * set BATCH __tmp76
-    * op mul __tmp77 BATCH 10
-    * set BATCH_TXT __tmp77
-    * op add __tmp78 batches BATCH
-    * set limit __tmp78
+  266 op max BATCH __tmp75 MIN_BATCH
+  267 noop
+  268 op mul BATCH_TXT BATCH 10
+  269 noop
+  270 op add limit batches BATCH
+  271 noop
   272 write 0 MEMORY lastCell
   273 set ratePerMin 0
-    * set __tmp79 @time
-    * set startTime __tmp79
+  274 set startTime @time
+  275 noop
   276 set __tmp74 startTime
   277 jump __label43 always
   278 label __label42

Modifications by Initial phase, Dead Code Elimination, iteration 1 (-30 instructions):
 
    23 label __label8
    24 set MEMORY block
    25 set lastCell 63
-    * set __tmp4 lastCell
+   26 noop
    27 jump __label6 always
    28 label __label7
    29 jump __label10 equal __ast0 @memory-bank
 
    31 label __label10
    32 set MEMORY block
    33 set lastCell 511
-    * set __tmp4 lastCell
+   34 noop
    35 jump __label6 always
    36 label __label9
    37 jump __label12 equal __ast0 @plastanium-conveyor
 
    43 set CONV1 block
    44 op add LINKED LINKED 1
    45 noop
-    * set __tmp4 LINKED
+   46 noop
    47 jump __label6 always
    48 label __label11
-    * set __tmp4 null
+   49 noop
    50 label __label6
    51 label __label4
    52 op greaterThan __tmp6 n 0
 
    60 print LINKED
    61 print ")"
    62 printflush message1
-    * set __tmp8 null
+   63 noop
    64 jump __label14 always
    65 label __label13
    66 op greaterThan __tmp9 LINKED 4
 
    86 label __label18
    87 set __tmp10 __tmp12
    88 label __label16
-    * set __tmp8 __tmp10
+   89 noop
    90 label __label14
    91 label __label1
    92 jump __label0 always
 
   130 jump __label22 equal __tmp25 false
   131 op add batches batches 1
   132 noop
-    * set __tmp26 batches
+  133 noop
   134 jump __label23 always
   135 label __label22
-    * set __tmp26 null
+  136 noop
   137 label __label23
   138 sensor a2 CONV2 @totalItems
   139 noop
 
   141 jump __label24 equal __tmp29 false
   142 op add batches batches 1
   143 noop
-    * set __tmp30 batches
+  144 noop
   145 jump __label25 always
   146 label __label24
-    * set __tmp30 null
+  147 noop
   148 label __label25
   149 sensor a3 CONV3 @totalItems
   150 noop
 
   152 jump __label26 equal __tmp33 false
   153 op add batches batches 1
   154 noop
-    * set __tmp34 batches
+  155 noop
   156 jump __label27 always
   157 label __label26
-    * set __tmp34 null
+  158 noop
   159 label __label27
   160 sensor a4 CONV4 @totalItems
   161 noop
 
   163 jump __label28 equal __tmp37 false
   164 op add batches batches 1
   165 noop
-    * set __tmp38 batches
+  166 noop
   167 jump __label29 always
   168 label __label28
-    * set __tmp38 null
+  169 noop
   170 label __label29
   171 op greaterThan __tmp40 batches limit
   172 jump __label30 equal __tmp40 false
 
   188 noop
   189 op mul BATCH_TXT BATCH 10
   190 noop
-    * set __tmp49 BATCH_TXT
+  191 noop
   192 jump __label33 always
   193 label __label32
-    * set __tmp49 null
+  194 noop
   195 label __label33
   196 op add limit limit BATCH
   197 noop
-    * set __tmp41 limit
+  198 noop
   199 jump __label31 always
   200 label __label30
-    * set __tmp41 null
+  201 noop
   202 label __label31
   203 op mul total batches 10
   204 noop
 
   219 jump __label34 equal __tmp56 false
   220 op add batches batches 1
   221 noop
-    * set __tmp57 batches
+  222 noop
   223 jump __label35 always
   224 label __label34
-    * set __tmp57 null
+  225 noop
   226 label __label35
   227 sensor b2 CONV2 @totalItems
   228 noop
 
   230 jump __label36 equal __tmp60 false
   231 op add batches batches 1
   232 noop
-    * set __tmp61 batches
+  233 noop
   234 jump __label37 always
   235 label __label36
-    * set __tmp61 null
+  236 noop
   237 label __label37
   238 sensor b3 CONV3 @totalItems
   239 noop
 
   241 jump __label38 equal __tmp64 false
   242 op add batches batches 1
   243 noop
-    * set __tmp65 batches
+  244 noop
   245 jump __label39 always
   246 label __label38
-    * set __tmp65 null
+  247 noop
   248 label __label39
   249 sensor b4 CONV4 @totalItems
   250 noop
 
   252 jump __label40 equal __tmp68 false
   253 op add batches batches 1
   254 noop
-    * set __tmp69 batches
+  255 noop
   256 jump __label41 always
   257 label __label40
-    * set __tmp69 null
+  258 noop
   259 label __label41
   260 op sub __tmp71 @time startTime
   261 op floor elapsed __tmp71
 
   273 set ratePerMin 0
   274 set startTime @time
   275 noop
-    * set __tmp74 startTime
+  276 noop
   277 jump __label43 always
   278 label __label42
-    * set __tmp74 null
+  279 noop
   280 label __label43
   281 print "Batch size: [green]"
   282 print BATCH_TXT
 
   294 op notEqual __tmp83 LINKS @links
   295 jump __label44 equal __tmp83 false
   296 end
-    * set __tmp84 null
+  297 noop
   298 jump __label45 always
   299 label __label44
-    * set __tmp84 null
+  300 noop
   301 label __label45
   302 label __label20
   303 jump __label19 always

Modifications by Initial phase, Dead Code Elimination, iteration 2 (-2 instructions):
 
    71 print LINKED
    72 print ")"
    73 printflush message1
-    * set __tmp10 null
+   74 noop
    75 jump __label16 always
    76 label __label15
    77 op equal __tmp11 MEMORY null
 
    84 jump __label2 always
    85 set __tmp12 null
    86 label __label18
-    * set __tmp10 __tmp12
+   87 noop
    88 label __label16
    89 noop
    90 label __label14

Modifications by Initial phase, Dead Code Elimination, iteration 3 (-2 instructions):
 
    78 jump __label17 equal __tmp11 false
    79 print "Item Counter\n[salmon]No memory attached."
    80 printflush message1
-    * set __tmp12 null
+   81 noop
    82 jump __label18 always
    83 label __label17
    84 jump __label2 always
-    * set __tmp12 null
+   85 noop
    86 label __label18
    87 noop
    88 label __label16

Modifications by Iterated phase, Jump Normalization, pass 1, iteration 1 (-1 instructions):
 
     1 set MAX_BATCH 1000
     2 set lastCell 0
     3 label __label0
-    * jump __label2 equal true false
+    4 noop
     5 set CONV4 null
     6 set CONV3 CONV4
     7 set CONV2 CONV3

Modifications by Iterated phase, Jump Straightening, pass 1, iteration 1 (-3 instructions):
 
    18 noop
    19 sensor __ast0 block @type
    20 noop
-    * jump __label8 equal __ast0 @memory-cell
-    * jump __label7 always
+   21 jump __label7 notEqual __ast0 @memory-cell
+   22 noop
    23 label __label8
    24 set MEMORY block
    25 set lastCell 63
    26 noop
    27 jump __label6 always
    28 label __label7
-    * jump __label10 equal __ast0 @memory-bank
-    * jump __label9 always
+   29 jump __label9 notEqual __ast0 @memory-bank
+   30 noop
    31 label __label10
    32 set MEMORY block
    33 set lastCell 511
    34 noop
    35 jump __label6 always
    36 label __label9
-    * jump __label12 equal __ast0 @plastanium-conveyor
-    * jump __label11 always
+   37 jump __label11 notEqual __ast0 @plastanium-conveyor
+   38 noop
    39 label __label12
    40 set CONV4 CONV3
    41 set CONV3 CONV2

Modifications by Iterated phase, Jump Optimization, pass 1, iteration 1 (-17 instructions):
 
    49 noop
    50 label __label6
    51 label __label4
-    * op greaterThan __tmp6 n 0
-    * jump __label3 notEqual __tmp6 false
+   52 jump __label3 greaterThan n 0
    53 label __label5
-    * op equal __tmp7 LINKED 0
-    * jump __label13 equal __tmp7 false
+   54 jump __label13 notEqual LINKED 0
    55 print "Item Counter\n[salmon]No plastanium conveyor attached (maximum: "
    56 print 4
    57 print ", found: "
 
    61 noop
    62 jump __label14 always
    63 label __label13
-    * op greaterThan __tmp9 LINKED 4
-    * jump __label15 equal __tmp9 false
+   64 jump __label15 lessThanEq LINKED 4
    65 print "Item Counter\n[salmon]Too many plastanium conveyors attached (maximum: "
    66 print 4
    67 print ", found: "
 
    71 noop
    72 jump __label16 always
    73 label __label15
-    * op equal __tmp11 MEMORY null
-    * jump __label17 equal __tmp11 false
+   74 jump __label17 notEqual MEMORY null
    75 print "Item Counter\n[salmon]No memory attached."
    76 printflush message1
    77 noop
 
   116 noop
   117 label __label19
   118 sensor __tmp21 switch1 @enabled
-    * op equal __tmp22 __tmp21 0
-    * jump __label21 equal __tmp22 false
+  119 jump __label21 notEqual __tmp21 0
   120 set start @time
   121 noop
   122 sensor a1 CONV1 @totalItems
   123 noop
-    * op lessThan __tmp25 a1 b1
-    * jump __label22 equal __tmp25 false
+  124 jump __label22 greaterThanEq a1 b1
   125 op add batches batches 1
   126 noop
   127 noop
 
   131 label __label23
   132 sensor a2 CONV2 @totalItems
   133 noop
-    * op lessThan __tmp29 a2 b2
-    * jump __label24 equal __tmp29 false
+  134 jump __label24 greaterThanEq a2 b2
   135 op add batches batches 1
   136 noop
   137 noop
 
   141 label __label25
   142 sensor a3 CONV3 @totalItems
   143 noop
-    * op lessThan __tmp33 a3 b3
-    * jump __label26 equal __tmp33 false
+  144 jump __label26 greaterThanEq a3 b3
   145 op add batches batches 1
   146 noop
   147 noop
 
   151 label __label27
   152 sensor a4 CONV4 @totalItems
   153 noop
-    * op lessThan __tmp37 a4 b4
-    * jump __label28 equal __tmp37 false
+  154 jump __label28 greaterThanEq a4 b4
   155 op add batches batches 1
   156 noop
   157 noop
 
   159 label __label28
   160 noop
   161 label __label29
-    * op greaterThan __tmp40 batches limit
-    * jump __label30 equal __tmp40 false
+  162 jump __label30 lessThanEq batches limit
   163 op sub duration @time startTime
   164 noop
   165 set startTime @time
 
   171 op mul __tmp46 rate 600000
   172 op floor ratePerMin __tmp46
   173 noop
-    * op lessThanEq __tmp48 duration BATCH_DURATION
-    * jump __label32 equal __tmp48 false
+  174 jump __label32 greaterThan duration BATCH_DURATION
   175 op add __tmp50 BATCH BATCH_STEP
   176 op min BATCH __tmp50 MAX_BATCH
   177 noop
 
   204 print "[] items/min\n"
   205 sensor b1 CONV1 @totalItems
   206 noop
-    * op lessThan __tmp56 b1 a1
-    * jump __label34 equal __tmp56 false
+  207 jump __label34 greaterThanEq b1 a1
   208 op add batches batches 1
   209 noop
   210 noop
 
   214 label __label35
   215 sensor b2 CONV2 @totalItems
   216 noop
-    * op lessThan __tmp60 b2 a2
-    * jump __label36 equal __tmp60 false
+  217 jump __label36 greaterThanEq b2 a2
   218 op add batches batches 1
   219 noop
   220 noop
 
   224 label __label37
   225 sensor b3 CONV3 @totalItems
   226 noop
-    * op lessThan __tmp64 b3 a3
-    * jump __label38 equal __tmp64 false
+  227 jump __label38 greaterThanEq b3 a3
   228 op add batches batches 1
   229 noop
   230 noop
 
   234 label __label39
   235 sensor b4 CONV4 @totalItems
   236 noop
-    * op lessThan __tmp68 b4 a4
-    * jump __label40 equal __tmp68 false
+  237 jump __label40 greaterThanEq b4 a4
   238 op add batches batches 1
   239 noop
   240 noop
 
   245 op sub __tmp71 @time startTime
   246 op floor elapsed __tmp71
   247 noop
-    * op greaterThanEq __tmp73 elapsed 10000
-    * jump __label42 equal __tmp73 false
+  248 jump __label42 lessThan elapsed 10000
   249 op idiv __tmp75 BATCH 5
   250 op max BATCH __tmp75 MIN_BATCH
   251 noop
 
   275 print __tmp82
   276 print " ms"
   277 printflush message1
-    * op notEqual __tmp83 LINKS @links
-    * jump __label44 equal __tmp83 false
+  278 jump __label44 equal LINKS @links
   279 end
   280 noop
   281 jump __label45 always

Modifications by Iterated phase, Single Step Elimination, pass 1, iteration 1 (-13 instructions):
 
    44 op add LINKED LINKED 1
    45 noop
    46 noop
-    * jump __label6 always
+   47 noop
    48 label __label11
    49 noop
    50 label __label6
 
   125 op add batches batches 1
   126 noop
   127 noop
-    * jump __label23 always
+  128 noop
   129 label __label22
   130 noop
   131 label __label23
 
   135 op add batches batches 1
   136 noop
   137 noop
-    * jump __label25 always
+  138 noop
   139 label __label24
   140 noop
   141 label __label25
 
   145 op add batches batches 1
   146 noop
   147 noop
-    * jump __label27 always
+  148 noop
   149 label __label26
   150 noop
   151 label __label27
 
   155 op add batches batches 1
   156 noop
   157 noop
-    * jump __label29 always
+  158 noop
   159 label __label28
   160 noop
   161 label __label29
 
   178 op mul BATCH_TXT BATCH 10
   179 noop
   180 noop
-    * jump __label33 always
+  181 noop
   182 label __label32
   183 noop
   184 label __label33
   185 op add limit limit BATCH
   186 noop
   187 noop
-    * jump __label31 always
+  188 noop
   189 label __label30
   190 noop
   191 label __label31
 
   208 op add batches batches 1
   209 noop
   210 noop
-    * jump __label35 always
+  211 noop
   212 label __label34
   213 noop
   214 label __label35
 
   218 op add batches batches 1
   219 noop
   220 noop
-    * jump __label37 always
+  221 noop
   222 label __label36
   223 noop
   224 label __label37
 
   228 op add batches batches 1
   229 noop
   230 noop
-    * jump __label39 always
+  231 noop
   232 label __label38
   233 noop
   234 label __label39
 
   238 op add batches batches 1
   239 noop
   240 noop
-    * jump __label41 always
+  241 noop
   242 label __label40
   243 noop
   244 label __label41
 
   258 set startTime @time
   259 noop
   260 noop
-    * jump __label43 always
+  261 noop
   262 label __label42
   263 noop
   264 label __label43
 
   278 jump __label44 equal LINKS @links
   279 end
   280 noop
-    * jump __label45 always
+  281 noop
   282 label __label44
   283 noop
   284 label __label45

Modifications by Iterated phase, Expression Optimization, pass 1, iteration 1 (-2 instructions):
 
   168 noop
   169 op mul __tmp45 rate 166.66666666666666
   170 write __tmp45 MEMORY lastCell
-    * op mul __tmp46 rate 600000
-    * op floor ratePerMin __tmp46
+  171 noop
+  172 op idiv ratePerMin rate 0.0000016666666666666667
   173 noop
   174 jump __label32 greaterThan duration BATCH_DURATION
   175 op add __tmp50 BATCH BATCH_STEP
 
   269 print elapsed
   270 print "[] ms\n"
   271 op sub __tmp80 @time start
-    * op div __tmp81 __tmp80 2
-    * op floor __tmp82 __tmp81
+  272 noop
+  273 op idiv __tmp82 __tmp80 2
   274 print "[lightgray]Loop time: "
   275 print __tmp82
   276 print " ms"

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 1:
 
   104 noop
   105 control enabled switch1 0
   106 set b4 0
-    * set b3 b4
-    * set b2 b3
-    * set b1 b2
-    * set a4 b1
-    * set a3 a4
-    * set a2 a3
-    * set a1 a2
+  107 set b3 0
+  108 set b2 b4
+  109 set b1 b3
+  110 set a4 b2
+  111 set a3 b1
+  112 set a2 a4
+  113 set a1 a3
   114 set ratePerMin 0
   115 set startTime @time
   116 noop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 2:
 
   105 control enabled switch1 0
   106 set b4 0
   107 set b3 0
-    * set b2 b4
-    * set b1 b3
-    * set a4 b2
-    * set a3 b1
-    * set a2 a4
-    * set a1 a3
+  108 set b2 0
+  109 set b1 0
+  110 set a4 b4
+  111 set a3 b3
+  112 set a2 b2
+  113 set a1 b1
   114 set ratePerMin 0
   115 set startTime @time
   116 noop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 3:
 
   107 set b3 0
   108 set b2 0
   109 set b1 0
-    * set a4 b4
-    * set a3 b3
-    * set a2 b2
-    * set a1 b1
+  110 set a4 0
+  111 set a3 0
+  112 set a2 0
+  113 set a1 0
   114 set ratePerMin 0
   115 set startTime @time
   116 noop

Modifications by Iterated phase, Data Flow Optimization, pass 1, iteration 4 (-4 instructions):
 
   107 set b3 0
   108 set b2 0
   109 set b1 0
-    * set a4 0
-    * set a3 0
-    * set a2 0
-    * set a1 0
   110 set ratePerMin 0
   111 set startTime @time
   112 noop

Modifications by Loop Optimization: replicate condition at line 68 (+1 instructions):
 
   113 label __label19
   114 sensor __tmp21 switch1 @enabled
   115 jump __label21 notEqual __tmp21 0
+  116 label __label46
   117 set start @time
   118 noop
   119 sensor a1 CONV1 @totalItems
 
   280 noop
   281 label __label45
   282 label __label20
-    * jump __label19 always
+  283 sensor __tmp21 switch1 @enabled
+  284 jump __label46 equal __tmp21 0
   285 label __label21
   286 control enabled switch1 0
   287 write 0 MEMORY lastCell

Modifications by Final phase, Jump Threading, iteration 1:
 
    59 print ")"
    60 printflush message1
    61 noop
-    * jump __label14 always
+   62 jump __label0 always
    63 label __label13
    64 jump __label15 lessThanEq LINKED 4
    65 print "Item Counter\n[salmon]Too many plastanium conveyors attached (maximum: "
 
    69 print ")"
    70 printflush message1
    71 noop
-    * jump __label16 always
+   72 jump __label0 always
    73 label __label15
-    * jump __label17 notEqual MEMORY null
+   74 jump __label2 notEqual MEMORY null
    75 print "Item Counter\n[salmon]No memory attached."
    76 printflush message1
    77 noop
-    * jump __label18 always
+   78 jump __label0 always
    79 label __label17
    80 jump __label2 always
    81 noop

Modifications by Final phase, Unreachable Code Elimination, iteration 1 (-2 instructions):
 
    76 printflush message1
    77 noop
    78 jump __label0 always
-    * label __label17
-    * jump __label2 always
-    * noop
-    * label __label18
-    * noop
-    * label __label16
-    * noop
-    * label __label14
-    * label __label1
-    * jump __label0 always
    79 label __label2
    80 set BATCH_DURATION 2000
    81 op idiv __tmp13 MIN_BATCH 10
 
   264 printflush message1
   265 jump __label44 equal LINKS @links
   266 end
-    * noop
-    * noop
   267 label __label44
   268 noop
   269 label __label45

Modifications by Final phase, Print Merging, iteration 1 (-4 instructions):
 
   182 print "Item Counter                  \n"
   183 print "Monitoring [green]"
   184 print LINKED
-    * print "[] conveyors\n"
-    * print "Total items: [gold]"
+  185 print "[] conveyors\nTotal items: [gold]"
   186 print total
-    * print "[]\n"
-    * print "Rate: [green]"
+  187 print "[]\nRate: [green]"
   188 print ratePerMin
   189 print "[] items/min\n"
   190 sensor b1 CONV1 @totalItems
 
   249 label __label43
   250 print "Batch size: [green]"
   251 print BATCH_TXT
-    * print "[]\n"
-    * print "Batch time: [gold]"
+  252 print "[]\nBatch time: [gold]"
   253 print elapsed
-    * print "[] ms\n"
   254 op sub __tmp80 @time start
   255 noop
   256 op idiv __tmp82 __tmp80 2
-    * print "[lightgray]Loop time: "
+  257 print "[] ms\n[lightgray]Loop time: "
   258 print __tmp82
   259 print " ms"
   260 printflush message1

Final code before resolving virtual instructions:

set MIN_BATCH 10
set MAX_BATCH 1000
set lastCell 0
label __label0
set CONV4 null
set CONV3 CONV4
set CONV2 CONV3
set CONV1 CONV2
set MEMORY CONV1
set LINKED 0
set LINKS @links
set n LINKS
label __label3
op sub n n 1
getlink block n
sensor __ast0 block @type
jump __label7 notEqual __ast0 @memory-cell
set MEMORY block
set lastCell 63
jump __label6 always 0 0
label __label7
jump __label9 notEqual __ast0 @memory-bank
set MEMORY block
set lastCell 511
jump __label6 always 0 0
label __label9
jump __label11 notEqual __ast0 @plastanium-conveyor
set CONV4 CONV3
set CONV3 CONV2
set CONV2 CONV1
set CONV1 block
op add LINKED LINKED 1
label __label11
label __label6
jump __label3 greaterThan n 0
jump __label13 notEqual LINKED 0
print "Item Counter\n[salmon]No plastanium conveyor attached (maximum: "
print 4
print ", found: "
print LINKED
print ")"
printflush message1
jump __label0 always 0 0
label __label13
jump __label15 lessThanEq LINKED 4
print "Item Counter\n[salmon]Too many plastanium conveyors attached (maximum: "
print 4
print ", found: "
print LINKED
print ")"
printflush message1
jump __label0 always 0 0
label __label15
jump __label2 notEqual MEMORY null
print "Item Counter\n[salmon]No memory attached."
printflush message1
jump __label0 always 0 0
label __label2
set BATCH_DURATION 2000
op idiv __tmp13 MIN_BATCH 10
op max MIN_BATCH __tmp13 1
op idiv __tmp15 MAX_BATCH 10
op max MAX_BATCH __tmp15 MIN_BATCH
set BATCH_STEP 1
set BATCH MIN_BATCH
read total MEMORY 0
op idiv batches total 10
op add limit batches BATCH
control enabled switch1 0 0 0 0
set b4 0
set b3 0
set b2 0
set b1 0
set ratePerMin 0
set startTime @time
sensor __tmp21 switch1 @enabled
jump __label21 notEqual __tmp21 0
label __label46
set start @time
sensor a1 CONV1 @totalItems
jump __label22 greaterThanEq a1 b1
op add batches batches 1
label __label22
sensor a2 CONV2 @totalItems
jump __label24 greaterThanEq a2 b2
op add batches batches 1
label __label24
sensor a3 CONV3 @totalItems
jump __label26 greaterThanEq a3 b3
op add batches batches 1
label __label26
sensor a4 CONV4 @totalItems
jump __label28 greaterThanEq a4 b4
op add batches batches 1
label __label28
jump __label30 lessThanEq batches limit
op sub duration @time startTime
set startTime @time
op div rate BATCH duration
op mul __tmp45 rate 166.66666666666666
write __tmp45 MEMORY lastCell
op idiv ratePerMin rate 0.0000016666666666666667
jump __label32 greaterThan duration BATCH_DURATION
op add __tmp50 BATCH BATCH_STEP
op min BATCH __tmp50 MAX_BATCH
op mul BATCH_TXT BATCH 10
label __label32
op add limit limit BATCH
label __label30
op mul total batches 10
write total MEMORY 0
print "Item Counter                  \n"
print "Monitoring [green]"
print LINKED
print "[] conveyors\nTotal items: [gold]"
print total
print "[]\nRate: [green]"
print ratePerMin
print "[] items/min\n"
sensor b1 CONV1 @totalItems
jump __label34 greaterThanEq b1 a1
op add batches batches 1
label __label34
sensor b2 CONV2 @totalItems
jump __label36 greaterThanEq b2 a2
op add batches batches 1
label __label36
sensor b3 CONV3 @totalItems
jump __label38 greaterThanEq b3 a3
op add batches batches 1
label __label38
sensor b4 CONV4 @totalItems
jump __label40 greaterThanEq b4 a4
op add batches batches 1
label __label40
op sub __tmp71 @time startTime
op floor elapsed __tmp71 0
jump __label42 lessThan elapsed 10000
op idiv __tmp75 BATCH 5
op max BATCH __tmp75 MIN_BATCH
op mul BATCH_TXT BATCH 10
op add limit batches BATCH
write 0 MEMORY lastCell
set ratePerMin 0
set startTime @time
label __label42
print "Batch size: [green]"
print BATCH_TXT
print "[]\nBatch time: [gold]"
print elapsed
op sub __tmp80 @time start
op idiv __tmp82 __tmp80 2
print "[] ms\n[lightgray]Loop time: "
print __tmp82
print " ms"
printflush message1
jump __label44 equal LINKS @links
end
label __label44
sensor __tmp21 switch1 @enabled
jump __label46 equal __tmp21 0
label __label21
control enabled switch1 0 0 0 0
write 0 MEMORY lastCell
write 0 MEMORY 0
end
